
module debounce_DE2_SW (clk, rst_n, SW, SWO);
input rst_n, clk;
input [17:0]SW;
output [17:0]SWO;
reg [17:0]SWO;

debouncer sw0(clk, rst_n, SW[0], SWO[0]);
debouncer sw1(clk, rst_n, SW[1], SWO[1]);
debouncer sw2(clk, rst_n, SW[2], SWO[2]);
debouncer sw3(clk, rst_n, SW[3], SWO[3]);
debouncer sw4(clk, rst_n, SW[4], SWO[4]);
debouncer sw5(clk, rst_n, SW[5], SWO[5]);
debouncer sw6(clk, rst_n, SW[6], SWO[6]);
debouncer sw7(clk, rst_n, SW[7], SWO[7]);
debouncer sw8(clk, rst_n, SW[8], SWO[8]);
debouncer sw9(clk, rst_n, SW[9], SWO[9]);
debouncer sw10(clk, rst_n, SW[10], SWO[10]);
debouncer sw11(clk, rst_n, SW[11], SWO[11]);
debouncer sw12(clk, rst_n, SW[12], SWO[12]);
debouncer sw13(clk, rst_n, SW[13], SWO[13]);
debouncer sw14(clk, rst_n, SW[14], SWO[14]);
debouncer sw15(clk, rst_n, SW[15], SWO[15]);
debouncer sw16(clk, rst_n, SW[16], SWO[16]);
debouncer sw17(clk, rst_n, SW[17], SWO[17]);

endmodule

module debouncer (clk, rst_n, noisy, clean);
	input rst_n, clk, noisy;
	output clean;
   
	reg [19:0] count;
	reg xnew, clean;

	always @(posedge clk or negedge rst_n)
	begin
		if (rst_n == 1'b0) 
		begin 
			xnew <= noisy; 
			clean <= noisy; 
			count <= 0; 
		end
		else
		begin
			/* detects when the input and the current version differ and starts
			counter to see if it stays constant long enough*/
			if (noisy != xnew) 
			begin 
				xnew <= noisy; 
				count <= 0; 
			end
			/* if the counter is up for long enough then clean gets the new 
			value.  In other words the value has stayed high long enough
			to be the debounced value ... stable. Change number to make longer or
			shorter. */
			else if (count == 5000) 
			begin
				clean <= xnew;
			end
			/* continue counting */
			else
			begin
				count <= count+1'b1;
			end
		end
	end
endmodule
