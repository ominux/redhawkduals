//Generated by DefParser v1.0 on Dec 4, 2009 11:58:45 AM.
//This file has been automatically generated.
//Edit contents with extreme caution.

//Link status change flag (8b).
`ifndef DM9000A_BIT8_ISR_LNKCHG
 `define DM9000A_BIT8_ISR_LNKCHG 8'd32
`endif

//Packet received flag (8b).
`ifndef DM9000A_BIT8_ISR_PR
 `define DM9000A_BIT8_ISR_PR 8'd1
`endif

//Packet transmitted flag (8b).
`ifndef DM9000A_BIT8_ISR_PT
 `define DM9000A_BIT8_ISR_PT 8'd2
`endif

//Receive overflow flag (8b).
`ifndef DM9000A_BIT8_ISR_RO
 `define DM9000A_BIT8_ISR_RO 8'd4
`endif

//Receive overflow counter overflow flag (8b).
`ifndef DM9000A_BIT8_ISR_ROO
 `define DM9000A_BIT8_ISR_ROO 8'd8
`endif

//Transmit under-run flag (8b).
`ifndef DM9000A_BIT8_ISR_UDRUN
 `define DM9000A_BIT8_ISR_UDRUN 8'd16
`endif

//PHY power-down control (0=on, 1=off).
`ifndef DM9000A_BIT_GPR_PHYPD
 `define DM9000A_BIT_GPR_PHYPD 16'h1
`endif

//Link status change interrupt.
`ifndef DM9000A_BIT_IMR_LNKCHGI
 `define DM9000A_BIT_IMR_LNKCHGI 16'h20
`endif

//Read/write pointer auto-return enable.
`ifndef DM9000A_BIT_IMR_PAR
 `define DM9000A_BIT_IMR_PAR 16'h80
`endif

//Packet received interrupt.
`ifndef DM9000A_BIT_IMR_PRI
 `define DM9000A_BIT_IMR_PRI 16'h1
`endif

//Packet transmitted interrupt.
`ifndef DM9000A_BIT_IMR_PTI
 `define DM9000A_BIT_IMR_PTI 16'h2
`endif

//Receive overflow interrupt.
`ifndef DM9000A_BIT_IMR_ROI
 `define DM9000A_BIT_IMR_ROI 16'h4
`endif

//Receive overflow counter overflow interrupt.
`ifndef DM9000A_BIT_IMR_ROOI
 `define DM9000A_BIT_IMR_ROOI 16'h8
`endif

//Transmit under-run interrupt.
`ifndef DM9000A_BIT_IMR_UDRUNI
 `define DM9000A_BIT_IMR_UDRUNI 16'h10
`endif

//All interrupt flags.
`ifndef DM9000A_BIT_ISR_ALL
 `define DM9000A_BIT_ISR_ALL 16'h3F
`endif

//Link status change flag.
`ifndef DM9000A_BIT_ISR_LNKCHG
 `define DM9000A_BIT_ISR_LNKCHG 16'h20
`endif

//Packet received flag.
`ifndef DM9000A_BIT_ISR_PR
 `define DM9000A_BIT_ISR_PR 16'h1
`endif

//Packet transmitted flag.
`ifndef DM9000A_BIT_ISR_PT
 `define DM9000A_BIT_ISR_PT 16'h2
`endif

//Receive overflow flag.
`ifndef DM9000A_BIT_ISR_RO
 `define DM9000A_BIT_ISR_RO 16'h4
`endif

//Receive overflow counter overflow flag.
`ifndef DM9000A_BIT_ISR_ROO
 `define DM9000A_BIT_ISR_ROO 16'h8
`endif

//Transmit under-run flag.
`ifndef DM9000A_BIT_ISR_UDRUN
 `define DM9000A_BIT_ISR_UDRUN 16'h10
`endif

//Software reset and auto clear after 10us.
`ifndef DM9000A_BIT_NCR_RST
 `define DM9000A_BIT_NCR_RST 16'h1
`endif

//Link status.
`ifndef DM9000A_BIT_NSR_LINK
 `define DM9000A_BIT_NSR_LINK 16'h40
`endif

//RX FIFO overflow.
`ifndef DM9000A_BIT_NSR_RX_OVF
 `define DM9000A_BIT_NSR_RX_OVF 16'h2
`endif

//Media speed.
`ifndef DM9000A_BIT_NSR_SPEED
 `define DM9000A_BIT_NSR_SPEED 16'h80
`endif

//TX packet 1 complete.
`ifndef DM9000A_BIT_NSR_TX1_END
 `define DM9000A_BIT_NSR_TX1_END 16'h4
`endif

//TX packet 2 complete.
`ifndef DM9000A_BIT_NSR_TX2_END
 `define DM9000A_BIT_NSR_TX2_END 16'h8
`endif

//Wakeup event status.
`ifndef DM9000A_BIT_NSR_WAKE
 `define DM9000A_BIT_NSR_WAKE 16'h20
`endif

//Pass all multicast packets.
`ifndef DM9000A_BIT_RXCR_ALL
 `define DM9000A_BIT_RXCR_ALL 16'h8
`endif

//Discard packets with invalid CRCs.
`ifndef DM9000A_BIT_RXCR_DIS_CRC
 `define DM9000A_BIT_RXCR_DIS_CRC 16'h10
`endif

//Discard long packets (>1522B).
`ifndef DM9000A_BIT_RXCR_DIS_LONG
 `define DM9000A_BIT_RXCR_DIS_LONG 16'h20
`endif

//Enable promiscuous mode.
`ifndef DM9000A_BIT_RXCR_PRMSC
 `define DM9000A_BIT_RXCR_PRMSC 16'h2
`endif

//Pass all runt packets (<64B).
`ifndef DM9000A_BIT_RXCR_RUNT
 `define DM9000A_BIT_RXCR_RUNT 16'h4
`endif

//RX enable.
`ifndef DM9000A_BIT_RXCR_RXEN
 `define DM9000A_BIT_RXCR_RXEN 16'h1
`endif

//Alignment error.
`ifndef DM9000A_BIT_RXSR_AE
 `define DM9000A_BIT_RXSR_AE 16'h4
`endif

//CRC error.
`ifndef DM9000A_BIT_RXSR_CE
 `define DM9000A_BIT_RXSR_CE 16'h2
`endif

//FIFO overflow error.
`ifndef DM9000A_BIT_RXSR_FOE
 `define DM9000A_BIT_RXSR_FOE 16'h1
`endif

//Late collision seen.
`ifndef DM9000A_BIT_RXSR_LCS
 `define DM9000A_BIT_RXSR_LCS 16'h20
`endif

//Multicast frame.
`ifndef DM9000A_BIT_RXSR_MF
 `define DM9000A_BIT_RXSR_MF 16'h40
`endif

//PHY error.
`ifndef DM9000A_BIT_RXSR_PLE
 `define DM9000A_BIT_RXSR_PLE 16'h8
`endif

//Runt frame (<64B).
`ifndef DM9000A_BIT_RXSR_RF
 `define DM9000A_BIT_RXSR_RF 16'h80
`endif

//Receive watchdog time-out.
`ifndef DM9000A_BIT_RXSR_RWTO
 `define DM9000A_BIT_RXSR_RWTO 16'h10
`endif

//TX request (auto-clears after transmission completion).
`ifndef DM9000A_BIT_TXCR1_TXREQ
 `define DM9000A_BIT_TXCR1_TXREQ 16'h1
`endif

//Command spin counter range.
`ifndef DM9000A_CMD_SPIN_RANGE
 `define DM9000A_CMD_SPIN_RANGE 18:0
`endif

//Command spin counter width.
`ifndef DM9000A_CMD_SPIN_WIDTH
 `define DM9000A_CMD_SPIN_WIDTH 19
`endif

//Check interrupt flags and dispatch as needed.
`ifndef DM9000A_CMD_STATE_DISPATCH
 `define DM9000A_CMD_STATE_DISPATCH 5'd13
`endif

//Command complete/idle state.
`ifndef DM9000A_CMD_STATE_IDLE
 `define DM9000A_CMD_STATE_IDLE 5'd0
`endif

//Enable interrupts.
`ifndef DM9000A_CMD_STATE_IMR
 `define DM9000A_CMD_STATE_IMR 5'd9
`endif

//Interrupt received - disable interrupts.
`ifndef DM9000A_CMD_STATE_IRQ
 `define DM9000A_CMD_STATE_IRQ 5'd10
`endif

//Store/clear interrupt flags.
`ifndef DM9000A_CMD_STATE_IRQ_CLEAR
 `define DM9000A_CMD_STATE_IRQ_CLEAR 5'd12
`endif

//Interrupts handled - enable interrupts.
`ifndef DM9000A_CMD_STATE_IRQ_FINISH
 `define DM9000A_CMD_STATE_IRQ_FINISH 5'd14
`endif

//Read interrupt status.
`ifndef DM9000A_CMD_STATE_IRQ_STATUS
 `define DM9000A_CMD_STATE_IRQ_STATUS 5'd11
`endif

//Clear interrupts.
`ifndef DM9000A_CMD_STATE_ISR
 `define DM9000A_CMD_STATE_ISR 5'd5
`endif

//Link status changed.
`ifndef DM9000A_CMD_STATE_LINK_CHANGE
 `define DM9000A_CMD_STATE_LINK_CHANGE 5'd15
`endif

//Set MAC address.
`ifndef DM9000A_CMD_STATE_MAC
 `define DM9000A_CMD_STATE_MAC 5'd6
`endif

//DM9000A command state variable maximum value.
`ifndef DM9000A_CMD_STATE_MAX_STATE
 `define DM9000A_CMD_STATE_MAX_STATE 18
`endif


`ifndef DM9000A_CMD_STATE_TX_COMPLETE
 `define DM9000A_CMD_STATE_TX_COMPLETE 5'd18
`endif

//Set multicast address.
`ifndef DM9000A_CMD_STATE_MULTICAST
 `define DM9000A_CMD_STATE_MULTICAST 5'd7
`endif

//Clear TX status.
`ifndef DM9000A_CMD_STATE_NSR
 `define DM9000A_CMD_STATE_NSR 5'd4
`endif

//Power-up DM9000A PHY.
`ifndef DM9000A_CMD_STATE_PHY
 `define DM9000A_CMD_STATE_PHY 5'd3
`endif

//DM9000A command state variable bit range.
`ifndef DM9000A_CMD_STATE_RANGE
 `define DM9000A_CMD_STATE_RANGE 4:0
`endif

//Soft-reset DM9000A module.
`ifndef DM9000A_CMD_STATE_RESET
 `define DM9000A_CMD_STATE_RESET 5'd2
`endif

//Setup RX control register.
`ifndef DM9000A_CMD_STATE_RXCR
 `define DM9000A_CMD_STATE_RXCR 5'd8
`endif

//Prefetch packet.
`ifndef DM9000A_CMD_STATE_RX_PACKET_0
 `define DM9000A_CMD_STATE_RX_PACKET_0 5'd16
`endif

//Receive packet.
`ifndef DM9000A_CMD_STATE_RX_PACKET_1
 `define DM9000A_CMD_STATE_RX_PACKET_1 5'd17
`endif

//Spin - some instructions require idle time.
`ifndef DM9000A_CMD_STATE_SPIN
 `define DM9000A_CMD_STATE_SPIN 5'd1
`endif

//DM9000A command state variable width.
`ifndef DM9000A_CMD_STATE_WIDTH
 `define DM9000A_CMD_STATE_WIDTH 5
`endif

//Link change flag position.
`ifndef DM9000A_ISR_POS_LNKCHG
 `define DM9000A_ISR_POS_LNKCHG 5
`endif

//Packet received flag position.
`ifndef DM9000A_ISR_POS_PR
 `define DM9000A_ISR_POS_PR 0
`endif

//Packet transmitted flag position.
`ifndef DM9000A_ISR_POS_PT
 `define DM9000A_ISR_POS_PT 1
`endif

//Receive overflow flag position.
`ifndef DM9000A_ISR_POS_RO
 `define DM9000A_ISR_POS_RO 2
`endif

//Receive overflow counter overflow flag position.
`ifndef DM9000A_ISR_POS_ROO
 `define DM9000A_ISR_POS_ROO 3
`endif

//Transmit under-run flag position.
`ifndef DM9000A_ISR_POS_UDRUN
 `define DM9000A_ISR_POS_UDRUN 4
`endif

//PHY power-up spin length (in seconds).
`ifndef DM9000A_PHY_SPIN_LENGTH
 `define DM9000A_PHY_SPIN_LENGTH 0.02
`endif

//PHY power-up spin length (in cycles).
`ifndef DM9000A_PHY_SPIN_LENGTH_CYC
 `define DM9000A_PHY_SPIN_LENGTH_CYC 500000
`endif

//Maximum PHY spin counter value.
`ifndef DM9000A_PHY_SPIN_MAX_COUNT
 `define DM9000A_PHY_SPIN_MAX_COUNT 19'd499999
`endif

//Packet ready byte in packet status word.
`ifndef DM9000A_PKT_STATUS_READY
 `define DM9000A_PKT_STATUS_READY 7:0
`endif

//Packet ready low bits in packet status word.
`ifndef DM9000A_PKT_STATUS_READY_LOW
 `define DM9000A_PKT_STATUS_READY_LOW 1:0
`endif

//Status byte in packet status word.
`ifndef DM9000A_PKT_STATUS_STATUS
 `define DM9000A_PKT_STATUS_STATUS 15:8
`endif

//General purpose register (and PHY power-down control).
`ifndef DM9000A_REG_GPR
 `define DM9000A_REG_GPR 16'h1F
`endif

//Interrupt mask.
`ifndef DM9000A_REG_IMR
 `define DM9000A_REG_IMR 16'hFF
`endif

//Interrupt status.
`ifndef DM9000A_REG_ISR
 `define DM9000A_REG_ISR 16'hFE
`endif

//Multicast address register, byte 0.
`ifndef DM9000A_REG_MAR_0
 `define DM9000A_REG_MAR_0 16'h16
`endif

//Multicast address register, byte 1.
`ifndef DM9000A_REG_MAR_1
 `define DM9000A_REG_MAR_1 16'h17
`endif

//Multicast address register, byte 2.
`ifndef DM9000A_REG_MAR_2
 `define DM9000A_REG_MAR_2 16'h18
`endif

//Multicast address register, byte 3.
`ifndef DM9000A_REG_MAR_3
 `define DM9000A_REG_MAR_3 16'h19
`endif

//Multicast address register, byte 4.
`ifndef DM9000A_REG_MAR_4
 `define DM9000A_REG_MAR_4 16'h1A
`endif

//Multicast address register, byte 5.
`ifndef DM9000A_REG_MAR_5
 `define DM9000A_REG_MAR_5 16'h1B
`endif

//Multicast address register, byte 6.
`ifndef DM9000A_REG_MAR_6
 `define DM9000A_REG_MAR_6 16'h1C
`endif

//Multicast address register, byte 7.
`ifndef DM9000A_REG_MAR_7
 `define DM9000A_REG_MAR_7 16'h1D
`endif

//Memory read address, high byte.
`ifndef DM9000A_REG_MEM_RD_ADDR_H
 `define DM9000A_REG_MEM_RD_ADDR_H 16'hF5
`endif

//Memory read address, low byte.
`ifndef DM9000A_REG_MEM_RD_ADDR_L
 `define DM9000A_REG_MEM_RD_ADDR_L 16'hF4
`endif

//Memory data read command (with address increment).
`ifndef DM9000A_REG_MEM_RD_INC
 `define DM9000A_REG_MEM_RD_INC 16'hF2
`endif

//Memory data read command (no address increment).
`ifndef DM9000A_REG_MEM_RD_NO_INC
 `define DM9000A_REG_MEM_RD_NO_INC 16'hF1
`endif

//Memory data pre-fetch command (no address increment).
`ifndef DM9000A_REG_MEM_RD_PF
 `define DM9000A_REG_MEM_RD_PF 16'hF0
`endif

//Memory write address, high byte.
`ifndef DM9000A_REG_MEM_WR_ADDR_H
 `define DM9000A_REG_MEM_WR_ADDR_H 16'hFB
`endif

//Memory write address, low byte.
`ifndef DM9000A_REG_MEM_WR_ADDR_L
 `define DM9000A_REG_MEM_WR_ADDR_L 16'hFA
`endif

//Memory data write command (with address increment).
`ifndef DM9000A_REG_MEM_WR_INC
 `define DM9000A_REG_MEM_WR_INC 16'hF8
`endif

//Memory data write command (no address increment).
`ifndef DM9000A_REG_MEM_WR_NO_INC
 `define DM9000A_REG_MEM_WR_NO_INC 16'hF6
`endif

//Network control register.
`ifndef DM9000A_REG_NCR
 `define DM9000A_REG_NCR 16'h0
`endif

//Network status register.
`ifndef DM9000A_REG_NSR
 `define DM9000A_REG_NSR 16'h1
`endif

//Physical address register, byte 0.
`ifndef DM9000A_REG_PAR_0
 `define DM9000A_REG_PAR_0 16'h10
`endif

//Physical address register, byte 1.
`ifndef DM9000A_REG_PAR_1
 `define DM9000A_REG_PAR_1 16'h11
`endif

//Physical address register, byte 2.
`ifndef DM9000A_REG_PAR_2
 `define DM9000A_REG_PAR_2 16'h12
`endif

//Physical address register, byte 3.
`ifndef DM9000A_REG_PAR_3
 `define DM9000A_REG_PAR_3 16'h13
`endif

//Physical address register, byte 4.
`ifndef DM9000A_REG_PAR_4
 `define DM9000A_REG_PAR_4 16'h14
`endif

//Physical address register, byte 5.
`ifndef DM9000A_REG_PAR_5
 `define DM9000A_REG_PAR_5 16'h15
`endif

//RX control register.
`ifndef DM9000A_REG_RXCR
 `define DM9000A_REG_RXCR 16'h5
`endif

//RX status register.
`ifndef DM9000A_REG_RXSR
 `define DM9000A_REG_RXSR 16'h6
`endif

//RX SRAM pointer, high byte.
`ifndef DM9000A_REG_RX_PTR_H
 `define DM9000A_REG_RX_PTR_H 16'h25
`endif

//RX SRAM pointer, low byte.
`ifndef DM9000A_REG_RX_PTR_L
 `define DM9000A_REG_RX_PTR_L 16'h24
`endif

//TX control register 1.
`ifndef DM9000A_REG_TXCR1
 `define DM9000A_REG_TXCR1 16'h2
`endif

//TX control register 2.
`ifndef DM9000A_REG_TXCR2
 `define DM9000A_REG_TXCR2 16'h2D
`endif

//TX status register 1 (packet 1).
`ifndef DM9000A_REG_TXSR1
 `define DM9000A_REG_TXSR1 16'h3
`endif

//TX status register 2 (packet 2).
`ifndef DM9000A_REG_TXSR2
 `define DM9000A_REG_TXSR2 16'h4
`endif

//TX packet length, high byte.
`ifndef DM9000A_REG_TX_LEN_H
 `define DM9000A_REG_TX_LEN_H 16'hFD
`endif

//TX packet length, low byte.
`ifndef DM9000A_REG_TX_LEN_L
 `define DM9000A_REG_TX_LEN_L 16'hFC
`endif

//TX SRAM pointer, high byte.
`ifndef DM9000A_REG_TX_PTR_H
 `define DM9000A_REG_TX_PTR_H 16'h23
`endif

//TX SRAM pointer, low byte.
`ifndef DM9000A_REG_TX_PTR_L
 `define DM9000A_REG_TX_PTR_L 16'h22
`endif

//Reset spin length (in seconds).
`ifndef DM9000A_RESET_SPIN_LENGTH
 `define DM9000A_RESET_SPIN_LENGTH 0.0002
`endif

//Reset spin length (in cycles).
`ifndef DM9000A_RESET_SPIN_LENGTH_CYC
 `define DM9000A_RESET_SPIN_LENGTH_CYC 5000
`endif

//Maximum reset spin counter value.
`ifndef DM9000A_RESET_SPIN_MAX_COUNT
 `define DM9000A_RESET_SPIN_MAX_COUNT 19'd4999
`endif

//RX FIFO depth.
`ifndef DM9000A_RX_FIFO_DEPTH
 `define DM9000A_RX_FIFO_DEPTH 512
`endif

//TX FIFO depth.
`ifndef DM9000A_TX_FIFO_DEPTH
 `define DM9000A_TX_FIFO_DEPTH 64
`endif


//Control idle state.
`ifndef DM9000A_STATE_IDLE
 `define DM9000A_STATE_IDLE 6'd0
`endif

//DM9000A control state variable maximum value.
`ifndef DM9000A_STATE_MAX_STATE
 `define DM9000A_STATE_MAX_STATE 46
`endif

//DM9000A control state variable bit range.
`ifndef DM9000A_STATE_RANGE
 `define DM9000A_STATE_RANGE 5:0
`endif

//Read data state.
`ifndef DM9000A_STATE_READ
 `define DM9000A_STATE_READ 6'd3
`endif

//Read prefetched status word.
`ifndef DM9000A_STATE_READ_PF
 `define DM9000A_STATE_READ_PF 6'd7
`endif

//Prefetch read spin cycle 1.
`ifndef DM9000A_STATE_READ_PF_SPIN_0
 `define DM9000A_STATE_READ_PF_SPIN_0 6'd5
`endif

//Prefetch read spin cycle 1.
`ifndef DM9000A_STATE_READ_PF_SPIN_1
 `define DM9000A_STATE_READ_PF_SPIN_1 6'd6
`endif

//Assert read for frame data word.
`ifndef DM9000A_STATE_RX_0
 `define DM9000A_STATE_RX_0 6'd13
`endif

//Retrieve frame data word.
`ifndef DM9000A_STATE_RX_1
 `define DM9000A_STATE_RX_1 6'd14
`endif

//Assert read for CRC word.
`ifndef DM9000A_STATE_RX_CRC_0
 `define DM9000A_STATE_RX_CRC_0 6'd15
`endif

//Retrieve frame CRC word.
`ifndef DM9000A_STATE_RX_CRC_1
 `define DM9000A_STATE_RX_CRC_1 6'd16
`endif

//Check frame CRC.
`ifndef DM9000A_STATE_RX_CRC_2
 `define DM9000A_STATE_RX_CRC_2 6'd17
`endif

//Assert read for frame length.
`ifndef DM9000A_STATE_RX_LEN_0
 `define DM9000A_STATE_RX_LEN_0 6'd11
`endif

//Retrieve frame length.
`ifndef DM9000A_STATE_RX_LEN_1
 `define DM9000A_STATE_RX_LEN_1 6'd12
`endif

//Spin after RX index setup.
`ifndef DM9000A_STATE_RX_SETUP_SPIN
 `define DM9000A_STATE_RX_SETUP_SPIN 6'd8
`endif

//Assert read for status word.
`ifndef DM9000A_STATE_RX_STATUS_0
 `define DM9000A_STATE_RX_STATUS_0 6'd9
`endif

//Retrieve status word.
`ifndef DM9000A_STATE_RX_STATUS_1
 `define DM9000A_STATE_RX_STATUS_1 6'd10
`endif

//Command setup state.
`ifndef DM9000A_STATE_SETUP
 `define DM9000A_STATE_SETUP 6'd1
`endif

//Post-command setup spin state.
`ifndef DM9000A_STATE_SETUP_SPIN
 `define DM9000A_STATE_SETUP_SPIN 6'd2
`endif

//Setup TX control register.
`ifndef DM9000A_STATE_TXC_SETUP
 `define DM9000A_STATE_TXC_SETUP 6'd44
`endif

//Spin after TX control setup.
`ifndef DM9000A_STATE_TXC_SETUP_SPIN
 `define DM9000A_STATE_TXC_SETUP_SPIN 6'd45
`endif

//Transmit next 16b of frame.
`ifndef DM9000A_STATE_TX_DATA
 `define DM9000A_STATE_TX_DATA 6'd42
`endif

//Setup TX data register.
`ifndef DM9000A_STATE_TX_DATA_SETUP
 `define DM9000A_STATE_TX_DATA_SETUP 6'd26
`endif

//Spin after TX data setup.
`ifndef DM9000A_STATE_TX_DATA_SETUP_SPIN
 `define DM9000A_STATE_TX_DATA_SETUP_SPIN 6'd27
`endif

//Spin after data transmission.
`ifndef DM9000A_STATE_TX_DATA_SPIN
 `define DM9000A_STATE_TX_DATA_SPIN 6'd43
`endif

//Transmit destination address cycle 1.
`ifndef DM9000A_STATE_TX_DEST_0
 `define DM9000A_STATE_TX_DEST_0 6'd28
`endif

//Transmit destination address cycle 2.
`ifndef DM9000A_STATE_TX_DEST_1
 `define DM9000A_STATE_TX_DEST_1 6'd30
`endif

//Transmit destination address cycle 3.
`ifndef DM9000A_STATE_TX_DEST_2
 `define DM9000A_STATE_TX_DEST_2 6'd32
`endif

//Spin after destination address cycle 1.
`ifndef DM9000A_STATE_TX_DEST_SPIN_0
 `define DM9000A_STATE_TX_DEST_SPIN_0 6'd29
`endif

//Spin after destination address cycle 2.
`ifndef DM9000A_STATE_TX_DEST_SPIN_1
 `define DM9000A_STATE_TX_DEST_SPIN_1 6'd31
`endif

//Spin after destination address cycle 3.
`ifndef DM9000A_STATE_TX_DEST_SPIN_2
 `define DM9000A_STATE_TX_DEST_SPIN_2 6'd33
`endif

//Transmit EtherType.
`ifndef DM9000A_STATE_TX_ETHERTYPE
 `define DM9000A_STATE_TX_ETHERTYPE 6'd40
`endif

//Spin after transmiting EtherType.
`ifndef DM9000A_STATE_TX_ETHERTYPE_SPIN
 `define DM9000A_STATE_TX_ETHERTYPE_SPIN 6'd41
`endif

//Send TX length high byte.
`ifndef DM9000A_STATE_TX_LENH
 `define DM9000A_STATE_TX_LENH 6'd24
`endif

//Setup TX length high register.
`ifndef DM9000A_STATE_TX_LENH_SETUP
 `define DM9000A_STATE_TX_LENH_SETUP 6'd22
`endif

//Spin after TX length high setup.
`ifndef DM9000A_STATE_TX_LENH_SETUP_SPIN
 `define DM9000A_STATE_TX_LENH_SETUP_SPIN 6'd23
`endif

//Spin after TX length high data.
`ifndef DM9000A_STATE_TX_LENH_SPIN
 `define DM9000A_STATE_TX_LENH_SPIN 6'd25
`endif

//Send TX length low byte.
`ifndef DM9000A_STATE_TX_LENL
 `define DM9000A_STATE_TX_LENL 6'd20
`endif

//Setup TX length low register.
`ifndef DM9000A_STATE_TX_LENL_SETUP
 `define DM9000A_STATE_TX_LENL_SETUP 6'd18
`endif

//Spin after TX length low setup.
`ifndef DM9000A_STATE_TX_LENL_SETUP_SPIN
 `define DM9000A_STATE_TX_LENL_SETUP_SPIN 6'd19
`endif

//Spin after TX length low data.
`ifndef DM9000A_STATE_TX_LENL_SPIN
 `define DM9000A_STATE_TX_LENL_SPIN 6'd21
`endif

//Transmit source address cycle 1.
`ifndef DM9000A_STATE_TX_SRC_0
 `define DM9000A_STATE_TX_SRC_0 6'd34
`endif

//Transmit source address cycle 2.
`ifndef DM9000A_STATE_TX_SRC_1
 `define DM9000A_STATE_TX_SRC_1 6'd36
`endif

//Transmit source address cycle 3.
`ifndef DM9000A_STATE_TX_SRC_2
 `define DM9000A_STATE_TX_SRC_2 6'd38
`endif

//Spin after source address cycle 1.
`ifndef DM9000A_STATE_TX_SRC_SPIN_0
 `define DM9000A_STATE_TX_SRC_SPIN_0 6'd35
`endif

//Spin after source address cycle 2.
`ifndef DM9000A_STATE_TX_SRC_SPIN_1
 `define DM9000A_STATE_TX_SRC_SPIN_1 6'd37
`endif

//Spin after source address cycle 3.
`ifndef DM9000A_STATE_TX_SRC_SPIN_2
 `define DM9000A_STATE_TX_SRC_SPIN_2 6'd39
`endif

//Start transmission.
`ifndef DM9000A_STATE_TX_START
 `define DM9000A_STATE_TX_START 6'd46
`endif

//DM9000A control state variable width.
`ifndef DM9000A_STATE_WIDTH
 `define DM9000A_STATE_WIDTH 6
`endif

//Write data state.
`ifndef DM9000A_STATE_WRITE
 `define DM9000A_STATE_WRITE 6'd4
`endif

//Data I/O value.
`ifndef DM9000A_TYPE_DATA
 `define DM9000A_TYPE_DATA 1'b1
`endif

//Register index value.
`ifndef DM9000A_TYPE_INDEX
 `define DM9000A_TYPE_INDEX 1'b0
`endif

