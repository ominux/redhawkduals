
controller_sw.elf:     file format elf32-littlenios2
controller_sw.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001c8

Program Header:
    LOAD off    0x00000074 vaddr 0x00800000 paddr 0x00800000 align 2**0
         filesz 0x0001a2bc memsz 0x0001a2bc flags r-x
    LOAD off    0x0001a330 vaddr 0x0081a2bc paddr 0x0081a2bc align 2**0
         filesz 0x00001c10 memsz 0x00002390 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00000074  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a8  00800020  00800020  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019320  008001c8  008001c8  0000023c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dd4  008194e8  008194e8  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c10  0081a2bc  0081a2bc  0001a330  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000780  0081becc  0081becc  0001bf40  2**2
                  ALLOC, SMALL_DATA
  6 .sram_0       00000000  0081c64c  0081c64c  0001bf40  2**0
                  CONTENTS
  7 .comment      00001afc  00000000  00000000  0001bf40  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001318  00000000  00000000  0001da40  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00001e9c  00000000  00000000  0001ed58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00036da0  00000000  00000000  00020bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ba5e  00000000  00000000  00057994  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001f439  00000000  00000000  000633f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000025f8  00000000  00000000  0008282c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000322f  00000000  00000000  00084e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00088054  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006b0  00000060  00000060  000880b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .cpu          00000005  00000000  00000000  0008cb88  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0008cb8d  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0008cb8e  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0008cb92  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0008cb96  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0008cb9a  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0008cba5  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0008cbb0  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0008cbbb  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000035  00000000  00000000  0008cbc5  2**0
                  CONTENTS, READONLY
 27 .jdi          000044a8  00000000  00000000  0008cbfa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 
00800020 l    d  .exceptions	00000000 
008001c8 l    d  .text	00000000 
008194e8 l    d  .rodata	00000000 
0081a2bc l    d  .rwdata	00000000 
0081becc l    d  .bss	00000000 
0081c64c l    d  .sram_0	00000000 
00000000 l    d  .comment	00000000 
00000000 l    d  .debug_aranges	00000000 
00000000 l    d  .debug_pubnames	00000000 
00000000 l    d  .debug_info	00000000 
00000000 l    d  .debug_abbrev	00000000 
00000000 l    d  .debug_line	00000000 
00000000 l    d  .debug_frame	00000000 
00000000 l    d  .debug_str	00000000 
00000000 l    d  .debug_alt_sim_info	00000000 
00000060 l    d  .debug_ranges	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/nios2.h
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/h/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp//
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/crt0.S
0080020c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/h/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp//
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/h/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp//
00000000 l    df *ABS*	00000000 h:/TEACHING/REDHAWK_DUALS/redhawkduals/GM_CONTROLLER1/software/controller_sw_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 collision_detection.c
00000000 l    df *ABS*	00000000 draw.c
00000000 l    df *ABS*	00000000 ethernet_isr.c
00000000 l    df *ABS*	00000000 game_loop.c
00000000 l    df *ABS*	00000000 main.c
0081bedc l     O .bss	00000008 time.0
00000000 l    df *ABS*	00000000 ship.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00819a34 l     O .rodata	00000108 two_over_pi
00819b3c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00819bbc l     O .rodata	00000040 PIo2
00819bfc l     O .rodata	00000010 init_jk
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_isnan.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
0080a404 l     F .text	000001d8 _fpadd_parts
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
0080ae1c l     F .text	0000031c _fpadd_parts
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080bd58 l     F .text	00000060 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
0081a2bc l     O .rwdata	0000037c impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 refill.c
0080d89c l     F .text	00000024 lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf1.c
0080dd28 l     F .text	00000058 __sprint
00819c34 l     O .rodata	00000010 blanks.0
00819c44 l     O .rodata	00000010 zeroes.1
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wcsrtombs.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00810274 l     F .text	000001fc quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00811944 l     F .text	00000058 std
00000000 l    df *ABS*	00000000 findfp1.c
0081bef8 l     O .bss	00000004 lock.0
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00819e64 l     O .rodata	00000030 lconv
0081be80 l     O .rwdata	00000004 charset
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00819fac l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0081486c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008148b4 l     F .text	00000028 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008149b0 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00814c5c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00814d94 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00814e84 l     F .text	000000c8 alt_file_locked
008150cc l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0081549c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081beb0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0081574c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081ac1c l     O .rwdata	00001060 jtag_uart_0
0081bc7c l     O .rwdata	00000120 lcd_0
0081bd9c l     O .rwdata	00000034 audio_and_video_config_0
0081bdd0 l     O .rwdata	00000030 audio_0
0081be00 l     O .rwdata	00000054 pixel_buffer_0
00815a34 l     F .text	00000030 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00815c54 l     F .text	00000220 altera_avalon_jtag_uart_irq
00815e74 l     F .text	000000c0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081beb4 l     O .rwdata	00000004 colstart
00816520 l     F .text	000000a4 lcd_write_command
008165c4 l     F .text	000000c0 lcd_write_data
00816684 l     F .text	000000c0 lcd_clear_screen
00816744 l     F .text	000001b0 lcd_repaint_screen
008168f4 l     F .text	000000b8 lcd_scroll_up
008169ac l     F .text	00000244 lcd_handle_escape
0081705c l     F .text	00000094 alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00817270 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_pixel_buffer.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00818b00 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00818e18 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
0081befc l     O .bss	00000004 lock.0
00000000 l    df *ABS*	00000000 ctype_.c
0081a13c l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 alt_exit.c
00819498 l     F .text	00000030 alt_sim_halt
00813594 g     F .text	000000b0 _mprec_log10
0080370c g     F .text	00000570 get_player_info
00819e94 g     O .rodata	00000028 __mprec_tinytens
00814ddc g     F .text	00000070 alt_main
00812a4c g     F .text	00000064 _hi0bits
0080c748 g     F .text	00000050 __ashldi3
0081c440 g     O .bss	00000100 alt_irq
00809f28 g     F .text	00000018 fabs
0081254c g     F .text	00000064 _lseek_r
0081828c g     F .text	000000c0 alt_up_pixel_buffer_draw_rectangle
00807da4 g     F .text	0000013c sqrt
00811ba8 g     F .text	000000a8 __sflags
0080b86c g     F .text	0000008c __eqdf2
00800f30 g     F .text	000000e8 calculate_axis_of_ship
0081c64c g       *ABS*	00000000 __alt_heap_start
0080fa50 g     F .text	00000064 _wcrtomb_r
0080dc40 g     F .text	00000078 __sseek
008119c0 g     F .text	0000009c __sinit
00812484 g     F .text	00000088 _setlocale_r
00811a5c g     F .text	0000006c __sfmoreglue
00814e68 g     F .text	0000001c __malloc_unlock
0081736c g     F .text	00000038 alt_up_pixel_buffer_open_dev
0080a85c g     F .text	00000138 __divsf3
00805ef8 g     F .text	00000a44 initialize_power_crystals
0081267c g     F .text	00000108 memmove
008119b0 g     F .text	00000010 _cleanup
00812784 g     F .text	000000b0 _Balloc
0080ad2c g     F .text	00000094 __fixsfsi
00802038 g     F .text	000001dc rotate_a_matrix
008002e0 g     F .text	000000c8 check_wall_collide_ew
0081bf00 g     O .bss	000000a0 p1_ship
0080b984 g     F .text	0000008c __gtdf2
0080c864 g     F .text	00000008 __errno
00800000 g     F .entry	0000001c __reset
0081bef0 g     O .bss	00000002 new_game
0081336c g     F .text	0000017c _d2b
00812ba0 g     F .text	000001d4 _multiply
0080cdd4 g     F .text	00000060 _fstat_r
00818408 g     F .text	000003ac alt_up_pixel_buffer_draw_line
0081bef4 g     O .bss	00000004 errno
0080bca8 g     F .text	00000040 __make_dp
00809f40 g     F .text	00000210 floor
0081beec g     O .bss	00000004 output_packet_reg
0081bed4 g     O .bss	00000002 isr_update
008134e8 g     F .text	000000ac _ratio
00802214 g     F .text	000000c0 copy_matrix_and_round
0080c250 g     F .text	0000002c __make_fp
00802408 g     F .text	0000006c free_matrix
0081bea8 g     O .rwdata	00000004 alt_argv
00823e54 g       *ABS*	00000000 _gp
00815600 g     F .text	0000002c usleep
0080a634 g     F .text	00000064 __subsf3
00812950 g     F .text	000000fc _s2b
00812b64 g     F .text	0000003c _i2b
0081bed8 g     O .bss	00000004 p_edge_capture
0081bed0 g     O .bss	00000004 rotate_matrix
0081aa9c g     O .rwdata	00000180 alt_fd_list
00807ee0 g     F .text	0000083c __ieee754_rem_pio2
00818bf8 g     F .text	00000090 alt_find_dev
0080d65c g     F .text	000000bc memcpy
008029c8 g     F .text	00000b40 draw_letter
008026d8 g     F .text	000000c8 draw_sensor
0081199c g     F .text	00000014 _cleanup_r
0080bb28 g     F .text	000000d0 __floatsidf
00818ed8 g     F .text	00000074 alt_io_redirect
0080ba9c g     F .text	0000008c __ltdf2
008194e8 g       *ABS*	00000000 __DTOR_END__
008190e8 g     F .text	0000001c altera_nios2_irq_init
00816098 g     F .text	00000234 altera_avalon_jtag_uart_read
0080cf7c g     F .text	00000014 malloc
0080be54 g     F .text	00000010 __udivsi3
00807cfc g     F .text	000000a8 roundf
00814b9c g     F .text	000000c0 isatty
00819ee4 g     O .rodata	000000c8 __mprec_tens
0081250c g     F .text	00000008 __locale_charset
00808a38 g     F .text	000003e0 __kernel_cos
0080ac14 g     F .text	00000080 __lesf2
0081be68 g     O .rwdata	00000004 __malloc_top_pad
0081be7c g     O .rwdata	00000004 __mb_cur_max
00812514 g     F .text	0000000c _localeconv_r
00817f0c g     F .text	00000380 alt_up_pixel_buffer_draw_vline
0080da48 g     F .text	0000004c _sbrk_r
0081834c g     F .text	000000bc helper_plot_pixel
0080ce34 g     F .text	00000148 __smakebuf
00813644 g     F .text	00000064 _read_r
0081aa68 g     O .rwdata	0000000c __lc_ctype
0081be94 g     O .rwdata	00000004 alt_max_fd
0080c50c g     F .text	00000128 __unpack_d
0081185c g     F .text	000000e8 fflush
0081be60 g     O .rwdata	00000004 __malloc_max_sbrked_mem
008149f8 g     F .text	000001a4 alt_irq_register
00809c08 g     F .text	00000320 __kernel_sin
0080adc0 g     F .text	0000005c __extendsfdf2
0081bee8 g     O .bss	00000001 game_mode
0080b138 g     F .text	0000006c __adddf3
0080aa14 g     F .text	00000080 __nesf2
00814254 g     F .text	0000051c __umoddi3
00814ca4 g     F .text	000000f0 lseek
0081be54 g     O .rwdata	00000004 __fdlib_version
008136a8 g     F .text	00000550 _realloc_r
0081c64c g       *ABS*	00000000 __bss_end
00818fe8 g     F .text	00000100 alt_tick
00812ab0 g     F .text	000000b4 _lo0bits
00813cf4 g     F .text	00000560 __udivdi3
00819ebc g     O .rodata	00000028 __mprec_bigtens
00812fd8 g     F .text	00000064 __mcmp
0081bec8 g     O .rwdata	00000004 __ctype_ptr
00818f4c g     F .text	0000009c alt_alarm_stop
0081be9c g     O .rwdata	00000004 alt_irq_active
008000ec g     F .exceptions	000000dc alt_irq_handler
0081aa74 g     O .rwdata	00000028 alt_dev_null
00808e18 g     F .text	00000df0 __kernel_rem_pio2
0080c0a8 g     F .text	000000b4 __unpack_f
008173a4 g     F .text	000001a0 alt_up_pixel_buffer_draw
0080bbf8 g     F .text	000000b0 __fixdfsi
0080c798 g     F .text	0000001c calloc
00800404 g     F .text	00000b2c ships_seperating_axis_theorem_collision_detect
00813bf8 g     F .text	00000044 isinf
0081be8c g     O .rwdata	00000008 alt_dev_list
0081562c g     F .text	00000120 write
0080aa94 g     F .text	00000080 __gtsf2
008148dc g     F .text	000000d4 fstat
0080c978 g     F .text	00000024 fprintf
0080bf24 g     F .text	00000050 __lshrdi3
00805db8 g     F .text	00000140 degrade_crystals_based_on_shot
0081be78 g     O .rwdata	00000004 __nlocale_changed
0080be64 g     F .text	00000010 __umodsi3
008003a8 g     F .text	0000005c check_ships_collide
0081c64c g       *ABS*	00000000 end
0080bf74 g     F .text	00000134 __pack_f
00816bf0 g     F .text	0000046c altera_avalon_lcd_16207_write
0080179c g     F .text	000000bc is_ccw_abc
0080cdb0 g     F .text	00000024 fseek
00812d74 g     F .text	0000012c _pow5mult
00815b9c g     F .text	000000b8 altera_avalon_jtag_uart_init
008194e8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008172e8 g     F .text	00000084 alt_avalon_timer_sc_init
008162cc g     F .text	00000254 altera_avalon_jtag_uart_write
00807a1c g     F .text	00000170 cos
008125b0 g     F .text	000000cc memchr
0080dd80 g     F .text	00001c64 ___vfprintf_internal_r
0080da94 g     F .text	00000058 _sprintf_r
00811d74 g     F .text	000002b8 _free_r
00815114 g     F .text	00000234 alt_printf
0080fad8 g     F .text	00000140 _wcsrtombs_r
00802384 g     F .text	00000084 allocate_matrix
0080745c g     F .text	00000564 set_power_link
0081be74 g     O .rwdata	00000004 __mlocale_changed
0080693c g     F .text	00000560 power_calculation
0081be64 g     O .rwdata	00000004 __malloc_sbrk_base
008001c8 g     F .text	00000048 _start
0081beb8 g     O .rwdata	00000004 _alt_tick_rate
0080293c g     F .text	0000008c draw_string
00807b8c g     F .text	00000170 sin
0080d82c g     F .text	00000070 rand
0081bebc g     O .rwdata	00000004 _alt_nticks
0081537c g     F .text	00000120 read
008157c4 g     F .text	00000270 alt_sys_init
0080ac94 g     F .text	00000098 __floatsisf
0080d7b4 g     F .text	00000064 _open_r
0080fc18 g     F .text	0000003c wcsrtombs
00815f34 g     F .text	0000006c altera_avalon_jtag_uart_close
0081a638 g     O .rwdata	00000028 __malloc_current_mallinfo
0080a994 g     F .text	00000080 __eqsf2
0081202c g     F .text	00000384 __sfvwrite
00801018 g     F .text	00000784 straight_line_vector_projection
0080bf04 g     F .text	00000020 __negdi2
00815a64 g     F .text	00000054 altera_avalon_jtag_uart_read_fd
00818d6c g     F .text	000000ac alt_get_fd
00818908 g     F .text	00000148 alt_busy_sleep
00801f80 g     F .text	000000b8 translate_a_matrix
0080c634 g     F .text	00000114 __fpcmp_parts_d
00810218 g     F .text	0000005c _close_r
008027a0 g     F .text	000000c4 clean_shot
00819284 g     F .text	00000070 memcmp
00815b0c g     F .text	00000044 altera_avalon_jtag_uart_close_fd
0081c64c g       *ABS*	00000000 __alt_stack_base
00815b50 g     F .text	0000004c altera_avalon_jtag_uart_ioctl_fd
00803d14 g     F .text	000003d8 update_packets_to_send_back
0080b61c g     F .text	00000250 __divdf3
00811ac8 g     F .text	000000e0 __sfp
0081a660 g     O .rwdata	00000408 __malloc_av_
0080b21c g     F .text	00000400 __muldf3
0080db50 g     F .text	00000070 __sread
00819c0c g     O .rodata	00000010 __thenan_sf
008079c0 g     F .text	0000005c number_to_character_string
00818c88 g     F .text	000000e4 alt_find_file
00818a50 g     F .text	000000b0 alt_dev_llist_insert
00814e4c g     F .text	0000001c __malloc_lock
00815540 g     F .text	000000c0 sbrk
00817544 g     F .text	00000054 alt_up_pixel_buffer_change_back_buffer_address
0080c7b4 g     F .text	000000b0 _calloc_r
00801ed8 g     F .text	000000a8 init_draw
0080c95c g     F .text	0000001c fopen
0081becc g       *ABS*	00000000 __bss_start
0080d718 g     F .text	0000009c memset
00804f50 g     F .text	0000074c main
0081beac g     O .rwdata	00000004 alt_envp
0081be5c g     O .rwdata	00000004 __malloc_max_total_mem
00815ab8 g     F .text	00000054 altera_avalon_jtag_uart_write_fd
00819380 g     F .text	00000118 __swbuf
0080d818 g     F .text	00000014 srand
0080ab94 g     F .text	00000080 __ltsf2
008131c0 g     F .text	00000088 _ulp
008170f0 g     F .text	0000012c altera_avalon_lcd_16207_init
0080dcb8 g     F .text	00000014 __sclose
0080a184 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
0080bce8 g     F .text	00000070 __truncdfsf2
0081c540 g     O .bss	0000010c _atexit0
00810470 g     F .text	000013ec _dtoa_r
0080cfa4 g     F .text	000006b8 _malloc_r
0081be98 g     O .rwdata	00000004 alt_errno
00802614 g     F .text	000000c4 clean_sensor
00801858 g     F .text	00000354 draw_ship
008123b0 g     F .text	000000d4 _fwalk
00817598 g     F .text	00000050 alt_up_pixel_buffer_swap_buffers
008192f4 g     F .text	0000008c putc
0080bdb8 g     F .text	00000050 __divsi3
0081bfa0 g     O .bss	00000400 packets
00819c1c g     O .rodata	00000014 __thenan_df
00811c50 g     F .text	00000124 _malloc_trim_r
008194e8 g       *ABS*	00000000 __CTOR_END__
0080a698 g     F .text	000001c4 __mulsf3
00813c3c g     F .text	000000b8 strcmp
008194e8 g       *ABS*	00000000 __DTOR_LIST__
00802474 g     F .text	000001a0 matrix_mult
0080a374 g     F .text	00000024 copysign
0080b8f8 g     F .text	0000008c __nedf2
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00815794 g     F .text	00000030 alt_irq_init
008154e4 g     F .text	0000005c alt_release_fd
00805bc8 g     F .text	000001f0 re_init_ship
0081010c g     F .text	0000010c __swsetup
0080daec g     F .text	00000064 sprintf
00819fb8 g     O .rodata	00000100 .hidden __clz_tab
0081be70 g     O .rwdata	00000004 _PathLocale
00806e9c g     F .text	000005c0 lookup_power_link
00819104 g     F .text	0000009c atexit
0080ab14 g     F .text	00000080 __gesf2
008100a8 g     F .text	00000064 _write_r
00813248 g     F .text	00000124 _b2d
00812520 g     F .text	0000001c setlocale
00801bac g     F .text	0000032c clean_ship
0081be58 g     O .rwdata	00000004 _impure_ptr
00800210 g     F .text	000000d0 check_wall_collide_ns
0081bea4 g     O .rwdata	00000004 alt_argc
0080a18c g     F .text	000001e8 scalbn
00818ba0 g     F .text	00000058 _do_dtors
0081becc g     O .bss	00000004 translate_matrix
0080c99c g     F .text	00000414 _fseek_r
0080a150 g     F .text	00000034 isnan
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
0080569c g     F .text	00000410 init_ship
0081721c g     F .text	00000054 altera_avalon_lcd_16207_write_fd
00817618 g     F .text	00000150 alt_up_pixel_buffer_clear_screen
0081be84 g     O .rwdata	00000008 alt_fs_list
00803cd8 g     F .text	0000003c disable_packet_interrupt
0081253c g     F .text	00000010 localeconv
00812858 g     F .text	000000f8 _multadd
0080368c g     F .text	00000080 timer_packet_interrupt_isr
0080871c g     F .text	0000031c __ieee754_sqrt
008175e8 g     F .text	00000030 alt_up_pixel_buffer_check_swap_buffers_status
00803508 g     F .text	00000184 draw_font
0081becc g       *ABS*	00000000 _edata
0081c64c g       *ABS*	00000000 _end
00815fa0 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
0080dbc0 g     F .text	00000080 __swrite
0081be6c g     O .rwdata	00000004 __malloc_trim_threshold
008191a0 g     F .text	000000e4 exit
008040ec g     F .text	00000e18 game_loop
0081303c g     F .text	00000184 __mdiff
0080be08 g     F .text	0000004c __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
008022d4 g     F .text	000000b0 copy_matrix
00800020 g     F .exceptions	00000000 alt_exception
0081a1bb g       .rodata	00000000 _ctype_
00803c7c g     F .text	0000005c init_packet_interrupt_isr
0080a398 g     F .text	0000006c __fixunssfsi
0080c15c g     F .text	000000f4 __fpcmp_parts_f
0080c86c g     F .text	000000f0 _fopen_r
008194c8 g     F .text	00000020 _exit
008187b4 g     F .text	00000154 alt_alarm_start
0080be74 g     F .text	00000090 __muldi3
0081bee4 g     O .bss	00000004 pixel_buf_dev
0080dccc g     F .text	0000005c strlen
00817c0c g     F .text	00000300 alt_up_pixel_buffer_draw_hline
00814f4c g     F .text	00000180 open
0080ba10 g     F .text	0000008c __gedf2
00815348 g     F .text	00000034 alt_putchar
00804f04 g     F .text	0000004c get_opponent_ship
0080d8c0 g     F .text	00000188 __srefill
00805aac g     F .text	0000011c reset_ship
0081bea0 g     O .rwdata	00000004 alt_priority_mask
0081c3a0 g     O .bss	000000a0 p2_ship
0080f9e4 g     F .text	0000006c __vfprintf_internal
0080fc54 g     F .text	00000454 _wctomb_r
0080b1a4 g     F .text	00000078 __subdf3
00817768 g     F .text	000004a4 alt_up_pixel_buffer_draw_box
0081bec0 g     O .rwdata	00000008 alt_alarm_list
00818b48 g     F .text	00000058 _do_ctors
00802864 g     F .text	000000d8 draw_shot
0080fab4 g     F .text	00000024 wcrtomb
00814770 g     F .text	000000fc close
0080a5dc g     F .text	00000058 __addsf3
0080c27c g     F .text	00000290 __pack_d
00812ea0 g     F .text	00000138 _lshift
0080cf90 g     F .text	00000014 free
00812834 g     F .text	00000024 _Bfree


Disassembly of section .entry:

00800000 <__reset>:
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_sdram_0+0x4>
1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 1, 1, 0b, 1b
    .popsection
#endif /* Initialize Instruction Cache */

/*
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08407214 	ori	at,at,456
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
Disassembly of section .exceptions:

00800020 <alt_exception>:
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK

        bltu  sp, et, .Lstack_overflow

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)

        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)

        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
#endif /* ALT_CI_INTERRUPT_VECTOR_N */

        .section .exceptions.irqhandler, "xa"
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>

        /*
         * The interrupt testing code (.exceptions.irqtest) will be
         * linked here here. If an interrupt is active, it calls the HAL
         * IRQ handler (alt_irq_handler()) which successively calls
         * registered interrupt handler(s) until no interrupts remain
         * pending. It then jumps to .exceptions.exit. If there is no
         * interrupt then it continues to .exception.notirq, below.
         */

        .section .exceptions.notirq, "xa"

        /*
         * Prepare to service unimplemtned instructions or traps,
         * each of which is optionally inked into section .exceptions.soft,
         * which will preceed .exceptions.unknown below.
         *
         * Unlike interrupts, we want to skip the exception-causing instructon
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)

        /*
         * Other exception handling code, if enabled, will be linked here.
         * This includes unimplemted (multiply/divide) instruction support
         * (a BSP generaton option), and a trap handler (that would typically
         * be augmented with user-specific code). These are not linked in by
         * default.
         */

        /*
         * In the context of linker sections, "unknown" are all exceptions
         * not handled by the built-in handlers above (interupt, and trap or
         * unimplemented instruction decoding, if enabled).
         *
         * Advanced exception types can be serviced by registering a handler.
         * To do so, enable the "Enable Instruction-related Exception API" HAL
         * BSP setting. If this setting is disabled, this handler code will
         * either break (if the debug core is present) or enter an infinite
         * loop because we don't how how to handle the exception.
         */
        .section .exceptions.unknown
#ifdef ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API
        /*
         * The C-based HAL routine alt_instruction_exception_entry() will
         * attempt to service the exception by calling a user-registered
         * exception handler using alt_instruction_exception_register().
         * If no handler was registered it will either break (if the
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry

        /*
         * If alt_instruction_exception_entry() returned, the exception was
         * serviced by a user-registered routine. Its return code (now in r2)
         * indicates whether to re-issue or skip the exception-causing
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
        stw   r15,  72(sp)

#else /* ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API disabled */

        /*
         * We got here because an instruction-related exception occured, but the
         * handler API was not compiled in. We do not presume to know how to
         * handle it. If the debugger is present, break, otherwise hang.
         *
         *  If you get here then one of the following could have happened:
         *
         *  - An instruction-generated exception occured, and the processor
         *    does not have the extra exceptions feature enabled, or you
         *    have not registered a handler using
         *    alt_instruction_exception_register()
         *
         *  Some examples of instruction-generated exceptions and why they
         *  might occur:
         *
         *  - Your program could have been compiled for a full-featured
         *    Nios II core, but it is running on a smaller core, and
         *    instruction emulation has been disabled by defining
         *    ALT_NO_INSTRUCTION_EMULATION.
         *
         *    You can work around the problem by re-enabling instruction
         *    emulation, or you can figure out why your program is being
         *    compiled for a system other than the one that it is running on.
         *
         *  - Your program has executed a trap instruction, but has not
         *    implemented a handler for this instruction.
         *
         *  - Your program has executed an illegal instruction (one which is
         *    not defined in the instruction set).
         *
         *  - Your processor includes an MMU or MPU, and you have enabled it
         *    before registering an exception handler to service exceptions it
         *    generates.
         *
         * The problem could also be hardware related:
         *  - If your hardware is broken and is generating spurious interrupts
         *    (a peripheral which negates its interrupt output before its
         *    interrupt handler has been executed will cause spurious
         *    interrupts)
         */
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
#else
       /*
        *  If there is no debug stub then a BREAK will probably cause a reboot.
        *  An infinate loop will probably be more useful.
        */
0:
        br   0b
#endif /* NIOS2_HAS_DEBUG_STUB */

#endif /* ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API */

        .section .exceptions.exit.label
.Lexception_exit:

        .section .exceptions.exit, "xa"

        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)

#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)

#ifdef ALT_EXCEPTION_STACK

#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

#endif

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bfff15 	stw	r2,-4(fp)
  800104:	e0bfff17 	ldw	r2,-4(fp)
  800108:	e0bffe15 	stw	r2,-8(fp)
  80010c:	e0bffe17 	ldw	r2,-8(fp)
  800110:	e0bffb15 	stw	r2,-20(fp)
#ifdef ALT_CI_INTERRUPT_VECTOR
  alt_32 offset;
  char*  alt_irq_base = (char*)alt_irq;
#else
  alt_u32 active;
  alt_u32 mask;
  alt_u32 i;
#endif /* ALT_CI_INTERRUPT_VECTOR */
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();

#ifdef ALT_CI_INTERRUPT_VECTOR
  /*
   * Call the interrupt vector custom instruction using the 
   * ALT_CI_INTERRUPT_VECTOR macro.
   * It returns the offset into the vector table of the lowest-valued pending
   * interrupt (corresponds to highest priority) or a negative value if none.
   * The custom instruction assumes that each table entry is eight bytes.
   */
  while ((offset = ALT_CI_INTERRUPT_VECTOR) >= 0) {
    struct ALT_IRQ_HANDLER* handler_entry = 
      (struct ALT_IRQ_HANDLER*)(alt_irq_base + offset);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    handler_entry->handler(handler_entry->context);
#else
    handler_entry->handler(handler_entry->context, offset >> 3);
#endif
  }
#else /* ALT_CI_INTERRUPT_VECTOR */
  /* 
   * Obtain from the interrupt controller a bit list of pending interrupts,
   * and then process the highest priority interrupt. This process loops, 
   * loading the active interrupt list on each pass until alt_irq_pending() 
   * return zero.
   * 
   * The maximum interrupt latency for the highest priority interrupt is
   * reduced by finding out which interrupts are pending as late as possible.
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();

  do
  {
    i = 0;
  800114:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800118:	00800044 	movi	r2,1
  80011c:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Test each bit in turn looking for an active interrupt. Once one is 
     * found, the interrupt handler asigned by a call to alt_irq_register() is
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800120:	e0fffb17 	ldw	r3,-20(fp)
  800124:	e0bffc17 	ldw	r2,-16(fp)
  800128:	1884703a 	and	r2,r3,r2
  80012c:	1005003a 	cmpeq	r2,r2,zero
  800130:	1000101e 	bne	r2,zero,800174 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800134:	00c020b4 	movhi	r3,130
  800138:	18f11004 	addi	r3,r3,-15296
  80013c:	e0bffd17 	ldw	r2,-12(fp)
  800140:	10800224 	muli	r2,r2,8
  800144:	10c9883a 	add	r4,r2,r3
  800148:	00c020b4 	movhi	r3,130
  80014c:	18f11004 	addi	r3,r3,-15296
  800150:	e0bffd17 	ldw	r2,-12(fp)
  800154:	10800224 	muli	r2,r2,8
  800158:	10c5883a 	add	r2,r2,r3
  80015c:	10800104 	addi	r2,r2,4
  800160:	20c00017 	ldw	r3,0(r4)
  800164:	11000017 	ldw	r4,0(r2)
  800168:	e17ffd17 	ldw	r5,-12(fp)
  80016c:	183ee83a 	callr	r3
#endif
        break;
  800170:	00000706 	br	800190 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
  800174:	e0bffc17 	ldw	r2,-16(fp)
  800178:	1085883a 	add	r2,r2,r2
  80017c:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800180:	e0bffd17 	ldw	r2,-12(fp)
  800184:	10800044 	addi	r2,r2,1
  800188:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80018c:	003fe406 	br	800120 <alt_irq_handler+0x34>
  800190:	0005313a 	rdctl	r2,ipending
  800194:	e0bffe15 	stw	r2,-8(fp)
  800198:	e0bffe17 	ldw	r2,-8(fp)
  80019c:	e0bfff15 	stw	r2,-4(fp)
  8001a0:	e0bfff17 	ldw	r2,-4(fp)
  8001a4:	e0bffb15 	stw	r2,-20(fp)

    active = alt_irq_pending ();
    
  } while (active);
  8001a8:	e0bffb17 	ldw	r2,-20(fp)
  8001ac:	1005003a 	cmpeq	r2,r2,zero
  8001b0:	1000011e 	bne	r2,zero,8001b8 <alt_irq_handler+0xcc>
  8001b4:	003fd706 	br	800114 <alt_irq_handler+0x28>
#endif /* ALT_CI_INTERRUPT_VECTOR */

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001b8:	dfc00617 	ldw	ra,24(sp)
  8001bc:	df000517 	ldw	fp,20(sp)
  8001c0:	dec00704 	addi	sp,sp,28
  8001c4:	f800283a 	ret
Disassembly of section .text:

008001c8 <_start>:

    .size __reset, . - __reset
#endif /* Jump to _start */

/*
 * When not using exit, provide an _exit symbol to prevent unresolved
 * references to _exit from the linker script.
 */
#ifdef ALT_NO_EXIT
    .globl _exit
_exit:
#endif

/*************************************************************************\
|                          TEXT SECTION (.text)                           |
\*************************************************************************/

/*
 * Start of the .text section, and also the code entry point when
 * the code is executed by a bootloader rather than directly from reset.
 */
    .section .text
    .align 2

    .globl _start
    .type _start, @function
_start:

/*
 * Initialize the data cache if present (i.e. size > 0) and not
 * optimizing for RTL simulation.
 * RTL simulations can ensure the data cache is already initialized
 * so skipping this loop speeds up RTL simulation.
 */

#if NIOS2_DCACHE_SIZE > 0 && !defined(ALT_SIM_OPTIMIZE)

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001c8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001cc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001d0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001d4:	00bffd16 	blt	zero,r2,8001cc <_start+0x4>
1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 2, 1, 0b, 1b
    .popsection

#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)

#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001d8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001dc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001e0:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001e4:	d68f9514 	ori	gp,gp,15956

#else /* NIOS2_NUM_OF_SHADOW_REG_SETS > 0 */

    /*
     * Set up the GP and SP in all shadow register sets.
     */

    /* 
     * Check current register set number, if CPU resets into a shadow register 
     * set, switch register set to 0 by writing zero to SSTATUS register and 
     * execute an ERET instruction that just jumps to the next PC address 
     * (use the NEXTPC instruction to get this).
     */
    
    rdctl r2, status
    
    /* Get the current register set number (STATUS.CRS). */
    andi r3, r2, NIOS2_STATUS_CRS_MSK
    
    /* Skip switch register set if STATUS.CRS is 0.  */
    beq r3, zero, .Lskip_switch_reg_set
    
    .set nobreak
    
    /* Current register set is non-zero, set SSTATUS to 0. */
    mov sstatus, zero
    
    /* Get next pc and store in ea. */
    nextpc ea
    
    /* Point to instruction after eret. */
    addi ea, ea, 8
    
    /* 
     * Execute ERET instruction that just jumps to the next PC address 
     */
    eret
    
.Lskip_switch_reg_set:    
    mov r2, zero
    
    /* Reset STATUS register */
    wrctl status, r2

    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS
    
    /* Set up the stack pointer in register set 0. */
    movhi sp, %hi(__alt_stack_pointer)
    ori sp, sp, %lo(__alt_stack_pointer)
    
    /* Set up the global pointer in register set 0. */
    movhi gp, %hi(_gp)
    ori gp, gp, %lo(_gp)     

.Lsetup_sp_and_gp_loop:
    /* 
     * Setup GP and SP for shadow register set 
     * from NIOS2_NUM_OF_SHADOW_REG_SETS to 0
     */

    /* Skip if number of register sets is 0. */
    beq r3, zero, .Lno_shadow_register_set


    /* Add previous register set STATUS.PRS by 1 */
    movhi r4, 1
    add r2, r2, r4

    /* Write STATUS */
    wrctl status, r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0

    /* Write the GP in previous register set */
    wrprs gp, gp

    /* Only write the SP in previous register set
     * if using the seperate exception stack. For normal case (single stack),
     * funnel code would read the SP from previous register set.
     */
#ifdef ALT_INTERRUPT_STACK

    movhi et, %hiadj(__alt_interrupt_stack_pointer)
    addi  et, et, %lo(__alt_interrupt_stack_pointer)
    wrprs sp, et

#endif /* ALT_INTERRUPT_STACK */

    /* Decrease number of register set counter by 1 */
    addi r3, r3, -1

    br .Lsetup_sp_and_gp_loop
.Lno_shadow_register_set:

#endif /* NIOS2_NUM_OF_SHADOW_REG_SETS */
/*
 * Clear the BSS if not optimizing for RTL simulation.
 *
 * This uses the symbols: __bss_start and __bss_end, which are defined
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001e8:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001ec:	10afb314 	ori	r2,r2,48844

    movhi r3, %hi(__bss_end)
  8001f0:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001f4:	18f19314 	ori	r3,r3,50764

    beq r2, r3, 1f
  8001f8:	10c00326 	beq	r2,r3,800208 <_start+0x40>

0:
    stw zero, (r2)
  8001fc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800200:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800204:	10fffd36 	bltu	r2,r3,8001fc <_start+0x34>

1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 3, 1, 0b, 1b
    .popsection
#endif /* ALT_SIM_OPTIMIZE */

/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD

#ifdef ALT_STACK_CHECK
    /*
     * If the user has selected stack checking then we need to set up a safe
     * value in the stack limit register so that the relocation functions
     * don't think the stack has overflowed (the contents of the rwdata
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load

#endif /* CALL_ALT_LOAD */

#ifdef ALT_STACK_CHECK
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800208:	0814ddc0 	call	814ddc <alt_main>

0080020c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80020c:	003fff06 	br	80020c <alt_after_alt_main>

00800210 <check_wall_collide_ns>:
/*---------------------------------------------------------------------------------------------
 * (function: check_wall_collide)
 *-------------------------------------------------------------------------------------------*/
short check_wall_collide_ns(float **matrix, int points_to_check)
{
  800210:	defffa04 	addi	sp,sp,-24
  800214:	dfc00515 	stw	ra,20(sp)
  800218:	df000415 	stw	fp,16(sp)
  80021c:	df000404 	addi	fp,sp,16
  800220:	e13ffc15 	stw	r4,-16(fp)
  800224:	e17ffd15 	stw	r5,-12(fp)
	int i;

	/* check if any of the points are hitting the boundary */
	for (i = 0; i < points_to_check; i++)
  800228:	e03ffe15 	stw	zero,-8(fp)
  80022c:	e0fffe17 	ldw	r3,-8(fp)
  800230:	e0bffd17 	ldw	r2,-12(fp)
  800234:	1880240e 	bge	r3,r2,8002c8 <check_wall_collide_ns+0xb8>
	{
		if (matrix[i][Y] <= NORTH_WALL) 
  800238:	e0bffe17 	ldw	r2,-8(fp)
  80023c:	10c00124 	muli	r3,r2,4
  800240:	e0bffc17 	ldw	r2,-16(fp)
  800244:	1885883a 	add	r2,r3,r2
  800248:	10800017 	ldw	r2,0(r2)
  80024c:	10800104 	addi	r2,r2,4
  800250:	11000017 	ldw	r4,0(r2)
  800254:	01504034 	movhi	r5,16640
  800258:	29400004 	addi	r5,r5,0
  80025c:	080ac140 	call	80ac14 <__lesf2>
  800260:	10800050 	cmplti	r2,r2,1
  800264:	1000011e 	bne	r2,zero,80026c <check_wall_collide_ns+0x5c>
  800268:	00000306 	br	800278 <check_wall_collide_ns+0x68>
			return WALL_N;
  80026c:	00800044 	movi	r2,1
  800270:	e0bfff15 	stw	r2,-4(fp)
  800274:	00001506 	br	8002cc <check_wall_collide_ns+0xbc>
		if (matrix[i][Y] >= SOUTH_WALL) 
  800278:	e0bffe17 	ldw	r2,-8(fp)
  80027c:	10c00124 	muli	r3,r2,4
  800280:	e0bffc17 	ldw	r2,-16(fp)
  800284:	1885883a 	add	r2,r3,r2
  800288:	10800017 	ldw	r2,0(r2)
  80028c:	10800104 	addi	r2,r2,4
  800290:	11000017 	ldw	r4,0(r2)
  800294:	0150da34 	movhi	r5,17256
  800298:	29400004 	addi	r5,r5,0
  80029c:	080ab140 	call	80ab14 <__gesf2>
  8002a0:	1004403a 	cmpge	r2,r2,zero
  8002a4:	1000011e 	bne	r2,zero,8002ac <check_wall_collide_ns+0x9c>
  8002a8:	00000306 	br	8002b8 <check_wall_collide_ns+0xa8>
			return WALL_S;
  8002ac:	00800084 	movi	r2,2
  8002b0:	e0bfff15 	stw	r2,-4(fp)
  8002b4:	00000506 	br	8002cc <check_wall_collide_ns+0xbc>
  8002b8:	e0bffe17 	ldw	r2,-8(fp)
  8002bc:	10800044 	addi	r2,r2,1
  8002c0:	e0bffe15 	stw	r2,-8(fp)
  8002c4:	003fd906 	br	80022c <check_wall_collide_ns+0x1c>
	}
	return NO_COLLISION;
  8002c8:	e03fff15 	stw	zero,-4(fp)
}
  8002cc:	e0bfff17 	ldw	r2,-4(fp)
  8002d0:	dfc00517 	ldw	ra,20(sp)
  8002d4:	df000417 	ldw	fp,16(sp)
  8002d8:	dec00604 	addi	sp,sp,24
  8002dc:	f800283a 	ret

008002e0 <check_wall_collide_ew>:

/*---------------------------------------------------------------------------------------------
 * (function: check_wall_collide_ew)
 *-------------------------------------------------------------------------------------------*/
short check_wall_collide_ew(float **matrix, int points_to_check)
{
  8002e0:	defffa04 	addi	sp,sp,-24
  8002e4:	dfc00515 	stw	ra,20(sp)
  8002e8:	df000415 	stw	fp,16(sp)
  8002ec:	df000404 	addi	fp,sp,16
  8002f0:	e13ffc15 	stw	r4,-16(fp)
  8002f4:	e17ffd15 	stw	r5,-12(fp)
	int i;

	/* check if any of the points are hitting the boundary */
	for (i = 0; i < points_to_check; i++)
  8002f8:	e03ffe15 	stw	zero,-8(fp)
  8002fc:	e0fffe17 	ldw	r3,-8(fp)
  800300:	e0bffd17 	ldw	r2,-12(fp)
  800304:	1880220e 	bge	r3,r2,800390 <check_wall_collide_ew+0xb0>
	{
		if (matrix[i][X] <= WEST_WALL) 
  800308:	e0bffe17 	ldw	r2,-8(fp)
  80030c:	10c00124 	muli	r3,r2,4
  800310:	e0bffc17 	ldw	r2,-16(fp)
  800314:	1885883a 	add	r2,r3,r2
  800318:	10800017 	ldw	r2,0(r2)
  80031c:	11000017 	ldw	r4,0(r2)
  800320:	01504034 	movhi	r5,16640
  800324:	29400004 	addi	r5,r5,0
  800328:	080ac140 	call	80ac14 <__lesf2>
  80032c:	10800050 	cmplti	r2,r2,1
  800330:	1000011e 	bne	r2,zero,800338 <check_wall_collide_ew+0x58>
  800334:	00000306 	br	800344 <check_wall_collide_ew+0x64>
			return WALL_W;
  800338:	00800144 	movi	r2,5
  80033c:	e0bfff15 	stw	r2,-4(fp)
  800340:	00001406 	br	800394 <check_wall_collide_ew+0xb4>
		if (matrix[i][X] >= EAST_WALL) 
  800344:	e0bffe17 	ldw	r2,-8(fp)
  800348:	10c00124 	muli	r3,r2,4
  80034c:	e0bffc17 	ldw	r2,-16(fp)
  800350:	1885883a 	add	r2,r3,r2
  800354:	10800017 	ldw	r2,0(r2)
  800358:	11000017 	ldw	r4,0(r2)
  80035c:	0150e734 	movhi	r5,17308
  800360:	29400004 	addi	r5,r5,0
  800364:	080ab140 	call	80ab14 <__gesf2>
  800368:	1004403a 	cmpge	r2,r2,zero
  80036c:	1000011e 	bne	r2,zero,800374 <check_wall_collide_ew+0x94>
  800370:	00000306 	br	800380 <check_wall_collide_ew+0xa0>
			return WALL_E;
  800374:	00800104 	movi	r2,4
  800378:	e0bfff15 	stw	r2,-4(fp)
  80037c:	00000506 	br	800394 <check_wall_collide_ew+0xb4>
  800380:	e0bffe17 	ldw	r2,-8(fp)
  800384:	10800044 	addi	r2,r2,1
  800388:	e0bffe15 	stw	r2,-8(fp)
  80038c:	003fdb06 	br	8002fc <check_wall_collide_ew+0x1c>
	}
	return NO_COLLISION;
  800390:	e03fff15 	stw	zero,-4(fp)
}
  800394:	e0bfff17 	ldw	r2,-4(fp)
  800398:	dfc00517 	ldw	ra,20(sp)
  80039c:	df000417 	ldw	fp,16(sp)
  8003a0:	dec00604 	addi	sp,sp,24
  8003a4:	f800283a 	ret

008003a8 <check_ships_collide>:

/*---------------------------------------------------------------------------------------------
 * (function: check_ships_collide)
 *   Currently calculated based on temp_matrix, so make sure updated before call
 *-------------------------------------------------------------------------------------------*/
short check_ships_collide(ship_t *ship1, ship_t *ship2)
{
  8003a8:	defffb04 	addi	sp,sp,-20
  8003ac:	dfc00415 	stw	ra,16(sp)
  8003b0:	df000315 	stw	fp,12(sp)
  8003b4:	df000304 	addi	fp,sp,12
  8003b8:	e13ffd15 	stw	r4,-12(fp)
  8003bc:	e17ffe15 	stw	r5,-8(fp)
	if (ships_seperating_axis_theorem_collision_detect(ship1, ship2) == TRUE)	
  8003c0:	e13ffd17 	ldw	r4,-12(fp)
  8003c4:	e17ffe17 	ldw	r5,-8(fp)
  8003c8:	08004040 	call	800404 <ships_seperating_axis_theorem_collision_detect>
  8003cc:	10bfffcc 	andi	r2,r2,65535
  8003d0:	10a0001c 	xori	r2,r2,32768
  8003d4:	10a00004 	addi	r2,r2,-32768
  8003d8:	10800058 	cmpnei	r2,r2,1
  8003dc:	1000031e 	bne	r2,zero,8003ec <check_ships_collide+0x44>
	{
		/* If 2 ships are colliding, deal with it */
		return SHIP;
  8003e0:	008000c4 	movi	r2,3
  8003e4:	e0bfff15 	stw	r2,-4(fp)
  8003e8:	00000106 	br	8003f0 <check_ships_collide+0x48>
	}
	
	return NO_COLLISION;
  8003ec:	e03fff15 	stw	zero,-4(fp)
}
  8003f0:	e0bfff17 	ldw	r2,-4(fp)
  8003f4:	dfc00417 	ldw	ra,16(sp)
  8003f8:	df000317 	ldw	fp,12(sp)
  8003fc:	dec00504 	addi	sp,sp,20
  800400:	f800283a 	ret

00800404 <ships_seperating_axis_theorem_collision_detect>:

/*---------------------------------------------------------------------------------------------
 * (function: ships_seperating_axis_theorem_collision_detect)
 *-------------------------------------------------------------------------------------------*/
short ships_seperating_axis_theorem_collision_detect(ship_t *ship1, ship_t *ship2)
{
  800404:	deffdc04 	addi	sp,sp,-144
  800408:	dfc02315 	stw	ra,140(sp)
  80040c:	df002215 	stw	fp,136(sp)
  800410:	dc002115 	stw	r16,132(sp)
  800414:	df002204 	addi	fp,sp,136
  800418:	e13fde15 	stw	r4,-136(fp)
  80041c:	e17fdf15 	stw	r5,-132(fp)
	int i, j;
	vector_t normal;
	vector_t ship1_projections[4];
	vector_t ship1_max_projections;
	vector_t ship1_min_projections;
	vector_t ship2_projections[4];
	vector_t ship2_max_projections;
	vector_t ship2_min_projections;

	/* go through two axis for ship 1 */
	for (i = 0; i < 2; i++)
  800420:	e03fe015 	stw	zero,-128(fp)
  800424:	e0bfe017 	ldw	r2,-128(fp)
  800428:	10800088 	cmpgei	r2,r2,2
  80042c:	10015a1e 	bne	r2,zero,800998 <ships_seperating_axis_theorem_collision_detect+0x594>
	{
		/* calculate the axis */
		calculate_axis_of_ship(ship1, i);
  800430:	e13fde17 	ldw	r4,-136(fp)
  800434:	e17fe017 	ldw	r5,-128(fp)
  800438:	0800f300 	call	800f30 <calculate_axis_of_ship>
		/* find normal of the first axis */
		normal.x = -(ship1->axis[i].y);
  80043c:	e13fde17 	ldw	r4,-136(fp)
  800440:	e0bfe017 	ldw	r2,-128(fp)
  800444:	10c00224 	muli	r3,r2,8
  800448:	20800617 	ldw	r2,24(r4)
  80044c:	1885883a 	add	r2,r3,r2
  800450:	10800117 	ldw	r2,4(r2)
  800454:	10a0003c 	xorhi	r2,r2,32768
  800458:	e0bfe215 	stw	r2,-120(fp)
		normal.y = ship1->axis[i].x;
  80045c:	e13fde17 	ldw	r4,-136(fp)
  800460:	e0bfe017 	ldw	r2,-128(fp)
  800464:	10c00224 	muli	r3,r2,8
  800468:	20800617 	ldw	r2,24(r4)
  80046c:	1885883a 	add	r2,r3,r2
  800470:	10800017 	ldw	r2,0(r2)
  800474:	e0bfe315 	stw	r2,-116(fp)

		/* project all the points in both ships to the normal */
		for (j = 0; j < 4; j++)
  800478:	e03fe115 	stw	zero,-124(fp)
  80047c:	e0bfe117 	ldw	r2,-124(fp)
  800480:	10800108 	cmpgei	r2,r2,4
  800484:	1000921e 	bne	r2,zero,8006d0 <ships_seperating_axis_theorem_collision_detect+0x2cc>
		{
			/* calculate the dot product */
			float dp;
			float project_part;
			dp = ship1->temp_matrix[j][X]*normal.x + ship1->temp_matrix[j][Y]*normal.y;
  800488:	e13fde17 	ldw	r4,-136(fp)
  80048c:	e0bfe117 	ldw	r2,-124(fp)
  800490:	10c00124 	muli	r3,r2,4
  800494:	20800517 	ldw	r2,20(r4)
  800498:	1885883a 	add	r2,r3,r2
  80049c:	10800017 	ldw	r2,0(r2)
  8004a0:	11000017 	ldw	r4,0(r2)
  8004a4:	e17fe217 	ldw	r5,-120(fp)
  8004a8:	080a6980 	call	80a698 <__mulsf3>
  8004ac:	1021883a 	mov	r16,r2
  8004b0:	e13fde17 	ldw	r4,-136(fp)
  8004b4:	e0bfe117 	ldw	r2,-124(fp)
  8004b8:	10c00124 	muli	r3,r2,4
  8004bc:	20800517 	ldw	r2,20(r4)
  8004c0:	1885883a 	add	r2,r3,r2
  8004c4:	10800017 	ldw	r2,0(r2)
  8004c8:	10800104 	addi	r2,r2,4
  8004cc:	11000017 	ldw	r4,0(r2)
  8004d0:	e17fe317 	ldw	r5,-116(fp)
  8004d4:	080a6980 	call	80a698 <__mulsf3>
  8004d8:	8009883a 	mov	r4,r16
  8004dc:	100b883a 	mov	r5,r2
  8004e0:	080a5dc0 	call	80a5dc <__addsf3>
  8004e4:	e0bffc15 	stw	r2,-16(fp)
			project_part = dp/(normal.x*normal.x + normal.y*normal.y);
  8004e8:	e13fe217 	ldw	r4,-120(fp)
  8004ec:	e17fe217 	ldw	r5,-120(fp)
  8004f0:	080a6980 	call	80a698 <__mulsf3>
  8004f4:	1021883a 	mov	r16,r2
  8004f8:	e13fe317 	ldw	r4,-116(fp)
  8004fc:	e17fe317 	ldw	r5,-116(fp)
  800500:	080a6980 	call	80a698 <__mulsf3>
  800504:	8009883a 	mov	r4,r16
  800508:	100b883a 	mov	r5,r2
  80050c:	080a5dc0 	call	80a5dc <__addsf3>
  800510:	e13ffc17 	ldw	r4,-16(fp)
  800514:	100b883a 	mov	r5,r2
  800518:	080a85c0 	call	80a85c <__divsf3>
  80051c:	e0bffd15 	stw	r2,-12(fp)

			ship1_projections[j].x = project_part * normal.x;
  800520:	e0bfe117 	ldw	r2,-124(fp)
  800524:	10800224 	muli	r2,r2,8
  800528:	e0ffde04 	addi	r3,fp,-136
  80052c:	10c5883a 	add	r2,r2,r3
  800530:	14000604 	addi	r16,r2,24
  800534:	e13fe217 	ldw	r4,-120(fp)
  800538:	e17ffd17 	ldw	r5,-12(fp)
  80053c:	080a6980 	call	80a698 <__mulsf3>
  800540:	80800015 	stw	r2,0(r16)
			ship1_projections[j].y = project_part * normal.y;
  800544:	e0bfe117 	ldw	r2,-124(fp)
  800548:	10800224 	muli	r2,r2,8
  80054c:	e0ffde04 	addi	r3,fp,-136
  800550:	10c5883a 	add	r2,r2,r3
  800554:	14000704 	addi	r16,r2,28
  800558:	e13fe317 	ldw	r4,-116(fp)
  80055c:	e17ffd17 	ldw	r5,-12(fp)
  800560:	080a6980 	call	80a698 <__mulsf3>
  800564:	80800015 	stw	r2,0(r16)

			/* calculate the min and max */
			if (j == 0)
  800568:	e0bfe117 	ldw	r2,-124(fp)
  80056c:	1004c03a 	cmpne	r2,r2,zero
  800570:	10000f1e 	bne	r2,zero,8005b0 <ships_seperating_axis_theorem_collision_detect+0x1ac>
			{
				ship1_max_projections.x = ship1_projections[j].x;
  800574:	e0bfe117 	ldw	r2,-124(fp)
  800578:	10800224 	muli	r2,r2,8
  80057c:	e0ffde04 	addi	r3,fp,-136
  800580:	10c5883a 	add	r2,r2,r3
  800584:	10800604 	addi	r2,r2,24
  800588:	10800017 	ldw	r2,0(r2)
  80058c:	e0bfec15 	stw	r2,-80(fp)
				ship1_max_projections.y = ship1_projections[j].y;
  800590:	e0bfe117 	ldw	r2,-124(fp)
  800594:	10800224 	muli	r2,r2,8
  800598:	e0ffde04 	addi	r3,fp,-136
  80059c:	10c5883a 	add	r2,r2,r3
  8005a0:	10800704 	addi	r2,r2,28
  8005a4:	10800017 	ldw	r2,0(r2)
  8005a8:	e0bfed15 	stw	r2,-76(fp)
  8005ac:	00001906 	br	800614 <ships_seperating_axis_theorem_collision_detect+0x210>
			}
			else if (ship1_projections[j].x > ship1_max_projections.x)
  8005b0:	e0bfe117 	ldw	r2,-124(fp)
  8005b4:	10800224 	muli	r2,r2,8
  8005b8:	e0ffde04 	addi	r3,fp,-136
  8005bc:	10c5883a 	add	r2,r2,r3
  8005c0:	10800604 	addi	r2,r2,24
  8005c4:	11000017 	ldw	r4,0(r2)
  8005c8:	e17fec17 	ldw	r5,-80(fp)
  8005cc:	080aa940 	call	80aa94 <__gtsf2>
  8005d0:	10800048 	cmpgei	r2,r2,1
  8005d4:	1000011e 	bne	r2,zero,8005dc <ships_seperating_axis_theorem_collision_detect+0x1d8>
  8005d8:	00000e06 	br	800614 <ships_seperating_axis_theorem_collision_detect+0x210>
			{
				ship1_max_projections.x = ship1_projections[j].x;
  8005dc:	e0bfe117 	ldw	r2,-124(fp)
  8005e0:	10800224 	muli	r2,r2,8
  8005e4:	e0ffde04 	addi	r3,fp,-136
  8005e8:	10c5883a 	add	r2,r2,r3
  8005ec:	10800604 	addi	r2,r2,24
  8005f0:	10800017 	ldw	r2,0(r2)
  8005f4:	e0bfec15 	stw	r2,-80(fp)
				ship1_max_projections.y = ship1_projections[j].y;
  8005f8:	e0bfe117 	ldw	r2,-124(fp)
  8005fc:	10800224 	muli	r2,r2,8
  800600:	e0ffde04 	addi	r3,fp,-136
  800604:	10c5883a 	add	r2,r2,r3
  800608:	10800704 	addi	r2,r2,28
  80060c:	10800017 	ldw	r2,0(r2)
  800610:	e0bfed15 	stw	r2,-76(fp)
			}
			if (j == 0)
  800614:	e0bfe117 	ldw	r2,-124(fp)
  800618:	1004c03a 	cmpne	r2,r2,zero
  80061c:	10000f1e 	bne	r2,zero,80065c <ships_seperating_axis_theorem_collision_detect+0x258>
			{
				ship1_min_projections.x = ship1_projections[j].x;
  800620:	e0bfe117 	ldw	r2,-124(fp)
  800624:	10800224 	muli	r2,r2,8
  800628:	e0ffde04 	addi	r3,fp,-136
  80062c:	10c5883a 	add	r2,r2,r3
  800630:	10800604 	addi	r2,r2,24
  800634:	10800017 	ldw	r2,0(r2)
  800638:	e0bfee15 	stw	r2,-72(fp)
				ship1_min_projections.y = ship1_projections[j].y;
  80063c:	e0bfe117 	ldw	r2,-124(fp)
  800640:	10800224 	muli	r2,r2,8
  800644:	e0ffde04 	addi	r3,fp,-136
  800648:	10c5883a 	add	r2,r2,r3
  80064c:	10800704 	addi	r2,r2,28
  800650:	10800017 	ldw	r2,0(r2)
  800654:	e0bfef15 	stw	r2,-68(fp)
  800658:	00001906 	br	8006c0 <ships_seperating_axis_theorem_collision_detect+0x2bc>
			}
			else if (ship1_projections[j].x < ship1_min_projections.x)
  80065c:	e0bfe117 	ldw	r2,-124(fp)
  800660:	10800224 	muli	r2,r2,8
  800664:	e0ffde04 	addi	r3,fp,-136
  800668:	10c5883a 	add	r2,r2,r3
  80066c:	10800604 	addi	r2,r2,24
  800670:	11000017 	ldw	r4,0(r2)
  800674:	e17fee17 	ldw	r5,-72(fp)
  800678:	080ab940 	call	80ab94 <__ltsf2>
  80067c:	1004803a 	cmplt	r2,r2,zero
  800680:	1000011e 	bne	r2,zero,800688 <ships_seperating_axis_theorem_collision_detect+0x284>
  800684:	00000e06 	br	8006c0 <ships_seperating_axis_theorem_collision_detect+0x2bc>
			{
				ship1_min_projections.x = ship1_projections[j].x;
  800688:	e0bfe117 	ldw	r2,-124(fp)
  80068c:	10800224 	muli	r2,r2,8
  800690:	e0ffde04 	addi	r3,fp,-136
  800694:	10c5883a 	add	r2,r2,r3
  800698:	10800604 	addi	r2,r2,24
  80069c:	10800017 	ldw	r2,0(r2)
  8006a0:	e0bfee15 	stw	r2,-72(fp)
				ship1_min_projections.y = ship1_projections[j].y;
  8006a4:	e0bfe117 	ldw	r2,-124(fp)
  8006a8:	10800224 	muli	r2,r2,8
  8006ac:	e0ffde04 	addi	r3,fp,-136
  8006b0:	10c5883a 	add	r2,r2,r3
  8006b4:	10800704 	addi	r2,r2,28
  8006b8:	10800017 	ldw	r2,0(r2)
  8006bc:	e0bfef15 	stw	r2,-68(fp)
  8006c0:	e0bfe117 	ldw	r2,-124(fp)
  8006c4:	10800044 	addi	r2,r2,1
  8006c8:	e0bfe115 	stw	r2,-124(fp)
  8006cc:	003f6b06 	br	80047c <ships_seperating_axis_theorem_collision_detect+0x78>
			}
		}
		for (j = 0; j < 4; j++)
  8006d0:	e03fe115 	stw	zero,-124(fp)
  8006d4:	e0bfe117 	ldw	r2,-124(fp)
  8006d8:	10800108 	cmpgei	r2,r2,4
  8006dc:	1000921e 	bne	r2,zero,800928 <ships_seperating_axis_theorem_collision_detect+0x524>
		{
			/* calculate the dot product */
			float dp;
			float project_part;
			dp = ship2->temp_matrix[j][X]*normal.x + ship2->temp_matrix[j][Y]*normal.y;
  8006e0:	e13fdf17 	ldw	r4,-132(fp)
  8006e4:	e0bfe117 	ldw	r2,-124(fp)
  8006e8:	10c00124 	muli	r3,r2,4
  8006ec:	20800517 	ldw	r2,20(r4)
  8006f0:	1885883a 	add	r2,r3,r2
  8006f4:	10800017 	ldw	r2,0(r2)
  8006f8:	11000017 	ldw	r4,0(r2)
  8006fc:	e17fe217 	ldw	r5,-120(fp)
  800700:	080a6980 	call	80a698 <__mulsf3>
  800704:	1021883a 	mov	r16,r2
  800708:	e13fdf17 	ldw	r4,-132(fp)
  80070c:	e0bfe117 	ldw	r2,-124(fp)
  800710:	10c00124 	muli	r3,r2,4
  800714:	20800517 	ldw	r2,20(r4)
  800718:	1885883a 	add	r2,r3,r2
  80071c:	10800017 	ldw	r2,0(r2)
  800720:	10800104 	addi	r2,r2,4
  800724:	11000017 	ldw	r4,0(r2)
  800728:	e17fe317 	ldw	r5,-116(fp)
  80072c:	080a6980 	call	80a698 <__mulsf3>
  800730:	8009883a 	mov	r4,r16
  800734:	100b883a 	mov	r5,r2
  800738:	080a5dc0 	call	80a5dc <__addsf3>
  80073c:	e0bffd15 	stw	r2,-12(fp)
			project_part = dp/(normal.x*normal.x + normal.y*normal.y);
  800740:	e13fe217 	ldw	r4,-120(fp)
  800744:	e17fe217 	ldw	r5,-120(fp)
  800748:	080a6980 	call	80a698 <__mulsf3>
  80074c:	1021883a 	mov	r16,r2
  800750:	e13fe317 	ldw	r4,-116(fp)
  800754:	e17fe317 	ldw	r5,-116(fp)
  800758:	080a6980 	call	80a698 <__mulsf3>
  80075c:	8009883a 	mov	r4,r16
  800760:	100b883a 	mov	r5,r2
  800764:	080a5dc0 	call	80a5dc <__addsf3>
  800768:	e13ffd17 	ldw	r4,-12(fp)
  80076c:	100b883a 	mov	r5,r2
  800770:	080a85c0 	call	80a85c <__divsf3>
  800774:	e0bffc15 	stw	r2,-16(fp)

			ship2_projections[j].x = project_part * normal.x;
  800778:	e0bfe117 	ldw	r2,-124(fp)
  80077c:	10800224 	muli	r2,r2,8
  800780:	e0ffde04 	addi	r3,fp,-136
  800784:	10c5883a 	add	r2,r2,r3
  800788:	14001204 	addi	r16,r2,72
  80078c:	e13fe217 	ldw	r4,-120(fp)
  800790:	e17ffc17 	ldw	r5,-16(fp)
  800794:	080a6980 	call	80a698 <__mulsf3>
  800798:	80800015 	stw	r2,0(r16)
			ship2_projections[j].y = project_part * normal.y;
  80079c:	e0bfe117 	ldw	r2,-124(fp)
  8007a0:	10800224 	muli	r2,r2,8
  8007a4:	e0ffde04 	addi	r3,fp,-136
  8007a8:	10c5883a 	add	r2,r2,r3
  8007ac:	14001304 	addi	r16,r2,76
  8007b0:	e13fe317 	ldw	r4,-116(fp)
  8007b4:	e17ffc17 	ldw	r5,-16(fp)
  8007b8:	080a6980 	call	80a698 <__mulsf3>
  8007bc:	80800015 	stw	r2,0(r16)

			/* calculate the min and max */
			if (j == 0)
  8007c0:	e0bfe117 	ldw	r2,-124(fp)
  8007c4:	1004c03a 	cmpne	r2,r2,zero
  8007c8:	10000f1e 	bne	r2,zero,800808 <ships_seperating_axis_theorem_collision_detect+0x404>
			{
				ship2_max_projections.x = ship2_projections[j].x;
  8007cc:	e0bfe117 	ldw	r2,-124(fp)
  8007d0:	10800224 	muli	r2,r2,8
  8007d4:	e0ffde04 	addi	r3,fp,-136
  8007d8:	10c5883a 	add	r2,r2,r3
  8007dc:	10801204 	addi	r2,r2,72
  8007e0:	10800017 	ldw	r2,0(r2)
  8007e4:	e0bff815 	stw	r2,-32(fp)
				ship2_max_projections.y = ship2_projections[j].y;
  8007e8:	e0bfe117 	ldw	r2,-124(fp)
  8007ec:	10800224 	muli	r2,r2,8
  8007f0:	e0ffde04 	addi	r3,fp,-136
  8007f4:	10c5883a 	add	r2,r2,r3
  8007f8:	10801304 	addi	r2,r2,76
  8007fc:	10800017 	ldw	r2,0(r2)
  800800:	e0bff915 	stw	r2,-28(fp)
  800804:	00001906 	br	80086c <ships_seperating_axis_theorem_collision_detect+0x468>
			}
			else if (ship2_projections[j].x > ship2_max_projections.x)
  800808:	e0bfe117 	ldw	r2,-124(fp)
  80080c:	10800224 	muli	r2,r2,8
  800810:	e0ffde04 	addi	r3,fp,-136
  800814:	10c5883a 	add	r2,r2,r3
  800818:	10801204 	addi	r2,r2,72
  80081c:	11000017 	ldw	r4,0(r2)
  800820:	e17ff817 	ldw	r5,-32(fp)
  800824:	080aa940 	call	80aa94 <__gtsf2>
  800828:	10800048 	cmpgei	r2,r2,1
  80082c:	1000011e 	bne	r2,zero,800834 <ships_seperating_axis_theorem_collision_detect+0x430>
  800830:	00000e06 	br	80086c <ships_seperating_axis_theorem_collision_detect+0x468>
			{
				ship2_max_projections.x = ship2_projections[j].x;
  800834:	e0bfe117 	ldw	r2,-124(fp)
  800838:	10800224 	muli	r2,r2,8
  80083c:	e0ffde04 	addi	r3,fp,-136
  800840:	10c5883a 	add	r2,r2,r3
  800844:	10801204 	addi	r2,r2,72
  800848:	10800017 	ldw	r2,0(r2)
  80084c:	e0bff815 	stw	r2,-32(fp)
				ship2_max_projections.y = ship2_projections[j].y;
  800850:	e0bfe117 	ldw	r2,-124(fp)
  800854:	10800224 	muli	r2,r2,8
  800858:	e0ffde04 	addi	r3,fp,-136
  80085c:	10c5883a 	add	r2,r2,r3
  800860:	10801304 	addi	r2,r2,76
  800864:	10800017 	ldw	r2,0(r2)
  800868:	e0bff915 	stw	r2,-28(fp)
			}
			if (j == 0)
  80086c:	e0bfe117 	ldw	r2,-124(fp)
  800870:	1004c03a 	cmpne	r2,r2,zero
  800874:	10000f1e 	bne	r2,zero,8008b4 <ships_seperating_axis_theorem_collision_detect+0x4b0>
			{
				ship2_min_projections.x = ship2_projections[j].x;
  800878:	e0bfe117 	ldw	r2,-124(fp)
  80087c:	10800224 	muli	r2,r2,8
  800880:	e0ffde04 	addi	r3,fp,-136
  800884:	10c5883a 	add	r2,r2,r3
  800888:	10801204 	addi	r2,r2,72
  80088c:	10800017 	ldw	r2,0(r2)
  800890:	e0bffa15 	stw	r2,-24(fp)
				ship2_min_projections.y = ship2_projections[j].y;
  800894:	e0bfe117 	ldw	r2,-124(fp)
  800898:	10800224 	muli	r2,r2,8
  80089c:	e0ffde04 	addi	r3,fp,-136
  8008a0:	10c5883a 	add	r2,r2,r3
  8008a4:	10801304 	addi	r2,r2,76
  8008a8:	10800017 	ldw	r2,0(r2)
  8008ac:	e0bffb15 	stw	r2,-20(fp)
  8008b0:	00001906 	br	800918 <ships_seperating_axis_theorem_collision_detect+0x514>
			}
			else if (ship2_projections[j].x < ship2_min_projections.x)
  8008b4:	e0bfe117 	ldw	r2,-124(fp)
  8008b8:	10800224 	muli	r2,r2,8
  8008bc:	e0ffde04 	addi	r3,fp,-136
  8008c0:	10c5883a 	add	r2,r2,r3
  8008c4:	10801204 	addi	r2,r2,72
  8008c8:	11000017 	ldw	r4,0(r2)
  8008cc:	e17ffa17 	ldw	r5,-24(fp)
  8008d0:	080ab940 	call	80ab94 <__ltsf2>
  8008d4:	1004803a 	cmplt	r2,r2,zero
  8008d8:	1000011e 	bne	r2,zero,8008e0 <ships_seperating_axis_theorem_collision_detect+0x4dc>
  8008dc:	00000e06 	br	800918 <ships_seperating_axis_theorem_collision_detect+0x514>
			{
				ship2_min_projections.x = ship2_projections[j].x;
  8008e0:	e0bfe117 	ldw	r2,-124(fp)
  8008e4:	10800224 	muli	r2,r2,8
  8008e8:	e0ffde04 	addi	r3,fp,-136
  8008ec:	10c5883a 	add	r2,r2,r3
  8008f0:	10801204 	addi	r2,r2,72
  8008f4:	10800017 	ldw	r2,0(r2)
  8008f8:	e0bffa15 	stw	r2,-24(fp)
				ship2_min_projections.y = ship2_projections[j].y;
  8008fc:	e0bfe117 	ldw	r2,-124(fp)
  800900:	10800224 	muli	r2,r2,8
  800904:	e0ffde04 	addi	r3,fp,-136
  800908:	10c5883a 	add	r2,r2,r3
  80090c:	10801304 	addi	r2,r2,76
  800910:	10800017 	ldw	r2,0(r2)
  800914:	e0bffb15 	stw	r2,-20(fp)
  800918:	e0bfe117 	ldw	r2,-124(fp)
  80091c:	10800044 	addi	r2,r2,1
  800920:	e0bfe115 	stw	r2,-124(fp)
  800924:	003f6b06 	br	8006d4 <ships_seperating_axis_theorem_collision_detect+0x2d0>
			}
		}

		if (!((ship1_min_projections.x <= ship2_min_projections.x && ship2_min_projections.x <= ship1_max_projections.x) ||
  800928:	e13fee17 	ldw	r4,-72(fp)
  80092c:	e17ffa17 	ldw	r5,-24(fp)
  800930:	080ac140 	call	80ac14 <__lesf2>
  800934:	10800050 	cmplti	r2,r2,1
  800938:	1000011e 	bne	r2,zero,800940 <ships_seperating_axis_theorem_collision_detect+0x53c>
  80093c:	00000506 	br	800954 <ships_seperating_axis_theorem_collision_detect+0x550>
  800940:	e13ffa17 	ldw	r4,-24(fp)
  800944:	e17fec17 	ldw	r5,-80(fp)
  800948:	080ac140 	call	80ac14 <__lesf2>
  80094c:	10800050 	cmplti	r2,r2,1
  800950:	10000d1e 	bne	r2,zero,800988 <ships_seperating_axis_theorem_collision_detect+0x584>
  800954:	e13ffa17 	ldw	r4,-24(fp)
  800958:	e17fee17 	ldw	r5,-72(fp)
  80095c:	080ac140 	call	80ac14 <__lesf2>
  800960:	10800050 	cmplti	r2,r2,1
  800964:	1000011e 	bne	r2,zero,80096c <ships_seperating_axis_theorem_collision_detect+0x568>
  800968:	00000506 	br	800980 <ships_seperating_axis_theorem_collision_detect+0x57c>
  80096c:	e13fee17 	ldw	r4,-72(fp)
  800970:	e17ff817 	ldw	r5,-32(fp)
  800974:	080ac140 	call	80ac14 <__lesf2>
  800978:	10800050 	cmplti	r2,r2,1
  80097c:	1000021e 	bne	r2,zero,800988 <ships_seperating_axis_theorem_collision_detect+0x584>
			(ship2_min_projections.x <= ship1_min_projections.x && ship1_min_projections.x <= ship2_max_projections.x)))
		{
			/* IF the condition above is ! true then Collision not detected since we've found a separating axis */
			return FALSE;
  800980:	e03ffe15 	stw	zero,-8(fp)
  800984:	00016406 	br	800f18 <ships_seperating_axis_theorem_collision_detect+0xb14>
  800988:	e0bfe017 	ldw	r2,-128(fp)
  80098c:	10800044 	addi	r2,r2,1
  800990:	e0bfe015 	stw	r2,-128(fp)
  800994:	003ea306 	br	800424 <ships_seperating_axis_theorem_collision_detect+0x20>
		}
	}
	/* go through two axis for ship 2 */
	for (i = 0; i < 2; i++)
  800998:	e03fe015 	stw	zero,-128(fp)
  80099c:	e0bfe017 	ldw	r2,-128(fp)
  8009a0:	10800088 	cmpgei	r2,r2,2
  8009a4:	10015a1e 	bne	r2,zero,800f10 <ships_seperating_axis_theorem_collision_detect+0xb0c>
	{
		/* calculate the axis */
		calculate_axis_of_ship(ship2, i);
  8009a8:	e13fdf17 	ldw	r4,-132(fp)
  8009ac:	e17fe017 	ldw	r5,-128(fp)
  8009b0:	0800f300 	call	800f30 <calculate_axis_of_ship>
		/* find normal of the first axis */
		normal.x = -(ship2->axis[i].y);
  8009b4:	e13fdf17 	ldw	r4,-132(fp)
  8009b8:	e0bfe017 	ldw	r2,-128(fp)
  8009bc:	10c00224 	muli	r3,r2,8
  8009c0:	20800617 	ldw	r2,24(r4)
  8009c4:	1885883a 	add	r2,r3,r2
  8009c8:	10800117 	ldw	r2,4(r2)
  8009cc:	10a0003c 	xorhi	r2,r2,32768
  8009d0:	e0bfe215 	stw	r2,-120(fp)
		normal.y = ship2->axis[i].x;
  8009d4:	e13fdf17 	ldw	r4,-132(fp)
  8009d8:	e0bfe017 	ldw	r2,-128(fp)
  8009dc:	10c00224 	muli	r3,r2,8
  8009e0:	20800617 	ldw	r2,24(r4)
  8009e4:	1885883a 	add	r2,r3,r2
  8009e8:	10800017 	ldw	r2,0(r2)
  8009ec:	e0bfe315 	stw	r2,-116(fp)

		/* project all the points in both ships to the normal */
		for (j = 0; j < 4; j++)
  8009f0:	e03fe115 	stw	zero,-124(fp)
  8009f4:	e0bfe117 	ldw	r2,-124(fp)
  8009f8:	10800108 	cmpgei	r2,r2,4
  8009fc:	1000921e 	bne	r2,zero,800c48 <ships_seperating_axis_theorem_collision_detect+0x844>
		{
			/* calculate the dot product */
			float dp;
			float project_part;
			dp = ship1->temp_matrix[j][X]*normal.x + ship1->temp_matrix[j][Y]*normal.y;
  800a00:	e13fde17 	ldw	r4,-136(fp)
  800a04:	e0bfe117 	ldw	r2,-124(fp)
  800a08:	10c00124 	muli	r3,r2,4
  800a0c:	20800517 	ldw	r2,20(r4)
  800a10:	1885883a 	add	r2,r3,r2
  800a14:	10800017 	ldw	r2,0(r2)
  800a18:	11000017 	ldw	r4,0(r2)
  800a1c:	e17fe217 	ldw	r5,-120(fp)
  800a20:	080a6980 	call	80a698 <__mulsf3>
  800a24:	1021883a 	mov	r16,r2
  800a28:	e13fde17 	ldw	r4,-136(fp)
  800a2c:	e0bfe117 	ldw	r2,-124(fp)
  800a30:	10c00124 	muli	r3,r2,4
  800a34:	20800517 	ldw	r2,20(r4)
  800a38:	1885883a 	add	r2,r3,r2
  800a3c:	10800017 	ldw	r2,0(r2)
  800a40:	10800104 	addi	r2,r2,4
  800a44:	11000017 	ldw	r4,0(r2)
  800a48:	e17fe317 	ldw	r5,-116(fp)
  800a4c:	080a6980 	call	80a698 <__mulsf3>
  800a50:	8009883a 	mov	r4,r16
  800a54:	100b883a 	mov	r5,r2
  800a58:	080a5dc0 	call	80a5dc <__addsf3>
  800a5c:	e0bffd15 	stw	r2,-12(fp)
			project_part = dp/(normal.x*normal.x + normal.y*normal.y);
  800a60:	e13fe217 	ldw	r4,-120(fp)
  800a64:	e17fe217 	ldw	r5,-120(fp)
  800a68:	080a6980 	call	80a698 <__mulsf3>
  800a6c:	1021883a 	mov	r16,r2
  800a70:	e13fe317 	ldw	r4,-116(fp)
  800a74:	e17fe317 	ldw	r5,-116(fp)
  800a78:	080a6980 	call	80a698 <__mulsf3>
  800a7c:	8009883a 	mov	r4,r16
  800a80:	100b883a 	mov	r5,r2
  800a84:	080a5dc0 	call	80a5dc <__addsf3>
  800a88:	e13ffd17 	ldw	r4,-12(fp)
  800a8c:	100b883a 	mov	r5,r2
  800a90:	080a85c0 	call	80a85c <__divsf3>
  800a94:	e0bffc15 	stw	r2,-16(fp)

			ship1_projections[j].x = project_part * normal.x;
  800a98:	e0bfe117 	ldw	r2,-124(fp)
  800a9c:	10800224 	muli	r2,r2,8
  800aa0:	e0ffde04 	addi	r3,fp,-136
  800aa4:	10c5883a 	add	r2,r2,r3
  800aa8:	14000604 	addi	r16,r2,24
  800aac:	e13fe217 	ldw	r4,-120(fp)
  800ab0:	e17ffc17 	ldw	r5,-16(fp)
  800ab4:	080a6980 	call	80a698 <__mulsf3>
  800ab8:	80800015 	stw	r2,0(r16)
			ship1_projections[j].y = project_part * normal.y;
  800abc:	e0bfe117 	ldw	r2,-124(fp)
  800ac0:	10800224 	muli	r2,r2,8
  800ac4:	e0ffde04 	addi	r3,fp,-136
  800ac8:	10c5883a 	add	r2,r2,r3
  800acc:	14000704 	addi	r16,r2,28
  800ad0:	e13fe317 	ldw	r4,-116(fp)
  800ad4:	e17ffc17 	ldw	r5,-16(fp)
  800ad8:	080a6980 	call	80a698 <__mulsf3>
  800adc:	80800015 	stw	r2,0(r16)

			/* calculate the min and max */
			if (j == 0)
  800ae0:	e0bfe117 	ldw	r2,-124(fp)
  800ae4:	1004c03a 	cmpne	r2,r2,zero
  800ae8:	10000f1e 	bne	r2,zero,800b28 <ships_seperating_axis_theorem_collision_detect+0x724>
			{
				ship1_max_projections.x = ship1_projections[j].x;
  800aec:	e0bfe117 	ldw	r2,-124(fp)
  800af0:	10800224 	muli	r2,r2,8
  800af4:	e0ffde04 	addi	r3,fp,-136
  800af8:	10c5883a 	add	r2,r2,r3
  800afc:	10800604 	addi	r2,r2,24
  800b00:	10800017 	ldw	r2,0(r2)
  800b04:	e0bfec15 	stw	r2,-80(fp)
				ship1_max_projections.y = ship1_projections[j].y;
  800b08:	e0bfe117 	ldw	r2,-124(fp)
  800b0c:	10800224 	muli	r2,r2,8
  800b10:	e0ffde04 	addi	r3,fp,-136
  800b14:	10c5883a 	add	r2,r2,r3
  800b18:	10800704 	addi	r2,r2,28
  800b1c:	10800017 	ldw	r2,0(r2)
  800b20:	e0bfed15 	stw	r2,-76(fp)
  800b24:	00001906 	br	800b8c <ships_seperating_axis_theorem_collision_detect+0x788>
			}
			else if (ship1_projections[j].x > ship1_max_projections.x)
  800b28:	e0bfe117 	ldw	r2,-124(fp)
  800b2c:	10800224 	muli	r2,r2,8
  800b30:	e0ffde04 	addi	r3,fp,-136
  800b34:	10c5883a 	add	r2,r2,r3
  800b38:	10800604 	addi	r2,r2,24
  800b3c:	11000017 	ldw	r4,0(r2)
  800b40:	e17fec17 	ldw	r5,-80(fp)
  800b44:	080aa940 	call	80aa94 <__gtsf2>
  800b48:	10800048 	cmpgei	r2,r2,1
  800b4c:	1000011e 	bne	r2,zero,800b54 <ships_seperating_axis_theorem_collision_detect+0x750>
  800b50:	00000e06 	br	800b8c <ships_seperating_axis_theorem_collision_detect+0x788>
			{
				ship1_max_projections.x = ship1_projections[j].x;
  800b54:	e0bfe117 	ldw	r2,-124(fp)
  800b58:	10800224 	muli	r2,r2,8
  800b5c:	e0ffde04 	addi	r3,fp,-136
  800b60:	10c5883a 	add	r2,r2,r3
  800b64:	10800604 	addi	r2,r2,24
  800b68:	10800017 	ldw	r2,0(r2)
  800b6c:	e0bfec15 	stw	r2,-80(fp)
				ship1_max_projections.y = ship1_projections[j].y;
  800b70:	e0bfe117 	ldw	r2,-124(fp)
  800b74:	10800224 	muli	r2,r2,8
  800b78:	e0ffde04 	addi	r3,fp,-136
  800b7c:	10c5883a 	add	r2,r2,r3
  800b80:	10800704 	addi	r2,r2,28
  800b84:	10800017 	ldw	r2,0(r2)
  800b88:	e0bfed15 	stw	r2,-76(fp)
			}
			if (j == 0)
  800b8c:	e0bfe117 	ldw	r2,-124(fp)
  800b90:	1004c03a 	cmpne	r2,r2,zero
  800b94:	10000f1e 	bne	r2,zero,800bd4 <ships_seperating_axis_theorem_collision_detect+0x7d0>
			{
				ship1_min_projections.x = ship1_projections[j].x;
  800b98:	e0bfe117 	ldw	r2,-124(fp)
  800b9c:	10800224 	muli	r2,r2,8
  800ba0:	e0ffde04 	addi	r3,fp,-136
  800ba4:	10c5883a 	add	r2,r2,r3
  800ba8:	10800604 	addi	r2,r2,24
  800bac:	10800017 	ldw	r2,0(r2)
  800bb0:	e0bfee15 	stw	r2,-72(fp)
				ship1_min_projections.y = ship1_projections[j].y;
  800bb4:	e0bfe117 	ldw	r2,-124(fp)
  800bb8:	10800224 	muli	r2,r2,8
  800bbc:	e0ffde04 	addi	r3,fp,-136
  800bc0:	10c5883a 	add	r2,r2,r3
  800bc4:	10800704 	addi	r2,r2,28
  800bc8:	10800017 	ldw	r2,0(r2)
  800bcc:	e0bfef15 	stw	r2,-68(fp)
  800bd0:	00001906 	br	800c38 <ships_seperating_axis_theorem_collision_detect+0x834>
			}
			else if (ship1_projections[j].x < ship1_min_projections.x)
  800bd4:	e0bfe117 	ldw	r2,-124(fp)
  800bd8:	10800224 	muli	r2,r2,8
  800bdc:	e0ffde04 	addi	r3,fp,-136
  800be0:	10c5883a 	add	r2,r2,r3
  800be4:	10800604 	addi	r2,r2,24
  800be8:	11000017 	ldw	r4,0(r2)
  800bec:	e17fee17 	ldw	r5,-72(fp)
  800bf0:	080ab940 	call	80ab94 <__ltsf2>
  800bf4:	1004803a 	cmplt	r2,r2,zero
  800bf8:	1000011e 	bne	r2,zero,800c00 <ships_seperating_axis_theorem_collision_detect+0x7fc>
  800bfc:	00000e06 	br	800c38 <ships_seperating_axis_theorem_collision_detect+0x834>
			{
				ship1_min_projections.x = ship1_projections[j].x;
  800c00:	e0bfe117 	ldw	r2,-124(fp)
  800c04:	10800224 	muli	r2,r2,8
  800c08:	e0ffde04 	addi	r3,fp,-136
  800c0c:	10c5883a 	add	r2,r2,r3
  800c10:	10800604 	addi	r2,r2,24
  800c14:	10800017 	ldw	r2,0(r2)
  800c18:	e0bfee15 	stw	r2,-72(fp)
				ship1_min_projections.y = ship1_projections[j].y;
  800c1c:	e0bfe117 	ldw	r2,-124(fp)
  800c20:	10800224 	muli	r2,r2,8
  800c24:	e0ffde04 	addi	r3,fp,-136
  800c28:	10c5883a 	add	r2,r2,r3
  800c2c:	10800704 	addi	r2,r2,28
  800c30:	10800017 	ldw	r2,0(r2)
  800c34:	e0bfef15 	stw	r2,-68(fp)
  800c38:	e0bfe117 	ldw	r2,-124(fp)
  800c3c:	10800044 	addi	r2,r2,1
  800c40:	e0bfe115 	stw	r2,-124(fp)
  800c44:	003f6b06 	br	8009f4 <ships_seperating_axis_theorem_collision_detect+0x5f0>
			}
		}
		for (j = 0; j < 4; j++)
  800c48:	e03fe115 	stw	zero,-124(fp)
  800c4c:	e0bfe117 	ldw	r2,-124(fp)
  800c50:	10800108 	cmpgei	r2,r2,4
  800c54:	1000921e 	bne	r2,zero,800ea0 <ships_seperating_axis_theorem_collision_detect+0xa9c>
		{
			/* calculate the dot product */
			float dp;
			float project_part;
			dp = ship2->temp_matrix[j][X]*normal.x + ship2->temp_matrix[j][Y]*normal.y;
  800c58:	e13fdf17 	ldw	r4,-132(fp)
  800c5c:	e0bfe117 	ldw	r2,-124(fp)
  800c60:	10c00124 	muli	r3,r2,4
  800c64:	20800517 	ldw	r2,20(r4)
  800c68:	1885883a 	add	r2,r3,r2
  800c6c:	10800017 	ldw	r2,0(r2)
  800c70:	11000017 	ldw	r4,0(r2)
  800c74:	e17fe217 	ldw	r5,-120(fp)
  800c78:	080a6980 	call	80a698 <__mulsf3>
  800c7c:	1021883a 	mov	r16,r2
  800c80:	e13fdf17 	ldw	r4,-132(fp)
  800c84:	e0bfe117 	ldw	r2,-124(fp)
  800c88:	10c00124 	muli	r3,r2,4
  800c8c:	20800517 	ldw	r2,20(r4)
  800c90:	1885883a 	add	r2,r3,r2
  800c94:	10800017 	ldw	r2,0(r2)
  800c98:	10800104 	addi	r2,r2,4
  800c9c:	11000017 	ldw	r4,0(r2)
  800ca0:	e17fe317 	ldw	r5,-116(fp)
  800ca4:	080a6980 	call	80a698 <__mulsf3>
  800ca8:	8009883a 	mov	r4,r16
  800cac:	100b883a 	mov	r5,r2
  800cb0:	080a5dc0 	call	80a5dc <__addsf3>
  800cb4:	e0bffd15 	stw	r2,-12(fp)
			project_part = dp/(normal.x*normal.x + normal.y*normal.y);
  800cb8:	e13fe217 	ldw	r4,-120(fp)
  800cbc:	e17fe217 	ldw	r5,-120(fp)
  800cc0:	080a6980 	call	80a698 <__mulsf3>
  800cc4:	1021883a 	mov	r16,r2
  800cc8:	e13fe317 	ldw	r4,-116(fp)
  800ccc:	e17fe317 	ldw	r5,-116(fp)
  800cd0:	080a6980 	call	80a698 <__mulsf3>
  800cd4:	8009883a 	mov	r4,r16
  800cd8:	100b883a 	mov	r5,r2
  800cdc:	080a5dc0 	call	80a5dc <__addsf3>
  800ce0:	e13ffd17 	ldw	r4,-12(fp)
  800ce4:	100b883a 	mov	r5,r2
  800ce8:	080a85c0 	call	80a85c <__divsf3>
  800cec:	e0bffc15 	stw	r2,-16(fp)

			ship2_projections[j].x = project_part * normal.x;
  800cf0:	e0bfe117 	ldw	r2,-124(fp)
  800cf4:	10800224 	muli	r2,r2,8
  800cf8:	e0ffde04 	addi	r3,fp,-136
  800cfc:	10c5883a 	add	r2,r2,r3
  800d00:	14001204 	addi	r16,r2,72
  800d04:	e13fe217 	ldw	r4,-120(fp)
  800d08:	e17ffc17 	ldw	r5,-16(fp)
  800d0c:	080a6980 	call	80a698 <__mulsf3>
  800d10:	80800015 	stw	r2,0(r16)
			ship2_projections[j].y = project_part * normal.y;
  800d14:	e0bfe117 	ldw	r2,-124(fp)
  800d18:	10800224 	muli	r2,r2,8
  800d1c:	e0ffde04 	addi	r3,fp,-136
  800d20:	10c5883a 	add	r2,r2,r3
  800d24:	14001304 	addi	r16,r2,76
  800d28:	e13fe317 	ldw	r4,-116(fp)
  800d2c:	e17ffc17 	ldw	r5,-16(fp)
  800d30:	080a6980 	call	80a698 <__mulsf3>
  800d34:	80800015 	stw	r2,0(r16)

			/* calculate the min and max */
			if (j == 0)
  800d38:	e0bfe117 	ldw	r2,-124(fp)
  800d3c:	1004c03a 	cmpne	r2,r2,zero
  800d40:	10000f1e 	bne	r2,zero,800d80 <ships_seperating_axis_theorem_collision_detect+0x97c>
			{
				ship2_max_projections.x = ship2_projections[j].x;
  800d44:	e0bfe117 	ldw	r2,-124(fp)
  800d48:	10800224 	muli	r2,r2,8
  800d4c:	e0ffde04 	addi	r3,fp,-136
  800d50:	10c5883a 	add	r2,r2,r3
  800d54:	10801204 	addi	r2,r2,72
  800d58:	10800017 	ldw	r2,0(r2)
  800d5c:	e0bff815 	stw	r2,-32(fp)
				ship2_max_projections.y = ship2_projections[j].y;
  800d60:	e0bfe117 	ldw	r2,-124(fp)
  800d64:	10800224 	muli	r2,r2,8
  800d68:	e0ffde04 	addi	r3,fp,-136
  800d6c:	10c5883a 	add	r2,r2,r3
  800d70:	10801304 	addi	r2,r2,76
  800d74:	10800017 	ldw	r2,0(r2)
  800d78:	e0bff915 	stw	r2,-28(fp)
  800d7c:	00001906 	br	800de4 <ships_seperating_axis_theorem_collision_detect+0x9e0>
			}
			else if (ship2_projections[j].x > ship2_max_projections.x)
  800d80:	e0bfe117 	ldw	r2,-124(fp)
  800d84:	10800224 	muli	r2,r2,8
  800d88:	e0ffde04 	addi	r3,fp,-136
  800d8c:	10c5883a 	add	r2,r2,r3
  800d90:	10801204 	addi	r2,r2,72
  800d94:	11000017 	ldw	r4,0(r2)
  800d98:	e17ff817 	ldw	r5,-32(fp)
  800d9c:	080aa940 	call	80aa94 <__gtsf2>
  800da0:	10800048 	cmpgei	r2,r2,1
  800da4:	1000011e 	bne	r2,zero,800dac <ships_seperating_axis_theorem_collision_detect+0x9a8>
  800da8:	00000e06 	br	800de4 <ships_seperating_axis_theorem_collision_detect+0x9e0>
			{
				ship2_max_projections.x = ship2_projections[j].x;
  800dac:	e0bfe117 	ldw	r2,-124(fp)
  800db0:	10800224 	muli	r2,r2,8
  800db4:	e0ffde04 	addi	r3,fp,-136
  800db8:	10c5883a 	add	r2,r2,r3
  800dbc:	10801204 	addi	r2,r2,72
  800dc0:	10800017 	ldw	r2,0(r2)
  800dc4:	e0bff815 	stw	r2,-32(fp)
				ship2_max_projections.y = ship2_projections[j].y;
  800dc8:	e0bfe117 	ldw	r2,-124(fp)
  800dcc:	10800224 	muli	r2,r2,8
  800dd0:	e0ffde04 	addi	r3,fp,-136
  800dd4:	10c5883a 	add	r2,r2,r3
  800dd8:	10801304 	addi	r2,r2,76
  800ddc:	10800017 	ldw	r2,0(r2)
  800de0:	e0bff915 	stw	r2,-28(fp)
			}
			if (j == 0)
  800de4:	e0bfe117 	ldw	r2,-124(fp)
  800de8:	1004c03a 	cmpne	r2,r2,zero
  800dec:	10000f1e 	bne	r2,zero,800e2c <ships_seperating_axis_theorem_collision_detect+0xa28>
			{
				ship2_min_projections.x = ship2_projections[j].x;
  800df0:	e0bfe117 	ldw	r2,-124(fp)
  800df4:	10800224 	muli	r2,r2,8
  800df8:	e0ffde04 	addi	r3,fp,-136
  800dfc:	10c5883a 	add	r2,r2,r3
  800e00:	10801204 	addi	r2,r2,72
  800e04:	10800017 	ldw	r2,0(r2)
  800e08:	e0bffa15 	stw	r2,-24(fp)
				ship2_min_projections.y = ship2_projections[j].y;
  800e0c:	e0bfe117 	ldw	r2,-124(fp)
  800e10:	10800224 	muli	r2,r2,8
  800e14:	e0ffde04 	addi	r3,fp,-136
  800e18:	10c5883a 	add	r2,r2,r3
  800e1c:	10801304 	addi	r2,r2,76
  800e20:	10800017 	ldw	r2,0(r2)
  800e24:	e0bffb15 	stw	r2,-20(fp)
  800e28:	00001906 	br	800e90 <ships_seperating_axis_theorem_collision_detect+0xa8c>
			}
			else if (ship2_projections[j].x < ship2_min_projections.x)
  800e2c:	e0bfe117 	ldw	r2,-124(fp)
  800e30:	10800224 	muli	r2,r2,8
  800e34:	e0ffde04 	addi	r3,fp,-136
  800e38:	10c5883a 	add	r2,r2,r3
  800e3c:	10801204 	addi	r2,r2,72
  800e40:	11000017 	ldw	r4,0(r2)
  800e44:	e17ffa17 	ldw	r5,-24(fp)
  800e48:	080ab940 	call	80ab94 <__ltsf2>
  800e4c:	1004803a 	cmplt	r2,r2,zero
  800e50:	1000011e 	bne	r2,zero,800e58 <ships_seperating_axis_theorem_collision_detect+0xa54>
  800e54:	00000e06 	br	800e90 <ships_seperating_axis_theorem_collision_detect+0xa8c>
			{
				ship2_min_projections.x = ship2_projections[j].x;
  800e58:	e0bfe117 	ldw	r2,-124(fp)
  800e5c:	10800224 	muli	r2,r2,8
  800e60:	e0ffde04 	addi	r3,fp,-136
  800e64:	10c5883a 	add	r2,r2,r3
  800e68:	10801204 	addi	r2,r2,72
  800e6c:	10800017 	ldw	r2,0(r2)
  800e70:	e0bffa15 	stw	r2,-24(fp)
				ship2_min_projections.y = ship2_projections[j].y;
  800e74:	e0bfe117 	ldw	r2,-124(fp)
  800e78:	10800224 	muli	r2,r2,8
  800e7c:	e0ffde04 	addi	r3,fp,-136
  800e80:	10c5883a 	add	r2,r2,r3
  800e84:	10801304 	addi	r2,r2,76
  800e88:	10800017 	ldw	r2,0(r2)
  800e8c:	e0bffb15 	stw	r2,-20(fp)
  800e90:	e0bfe117 	ldw	r2,-124(fp)
  800e94:	10800044 	addi	r2,r2,1
  800e98:	e0bfe115 	stw	r2,-124(fp)
  800e9c:	003f6b06 	br	800c4c <ships_seperating_axis_theorem_collision_detect+0x848>
			}
		}

		if (!((ship1_min_projections.x <= ship2_min_projections.x && ship2_min_projections.x <= ship1_max_projections.x) ||
  800ea0:	e13fee17 	ldw	r4,-72(fp)
  800ea4:	e17ffa17 	ldw	r5,-24(fp)
  800ea8:	080ac140 	call	80ac14 <__lesf2>
  800eac:	10800050 	cmplti	r2,r2,1
  800eb0:	1000011e 	bne	r2,zero,800eb8 <ships_seperating_axis_theorem_collision_detect+0xab4>
  800eb4:	00000506 	br	800ecc <ships_seperating_axis_theorem_collision_detect+0xac8>
  800eb8:	e13ffa17 	ldw	r4,-24(fp)
  800ebc:	e17fec17 	ldw	r5,-80(fp)
  800ec0:	080ac140 	call	80ac14 <__lesf2>
  800ec4:	10800050 	cmplti	r2,r2,1
  800ec8:	10000d1e 	bne	r2,zero,800f00 <ships_seperating_axis_theorem_collision_detect+0xafc>
  800ecc:	e13ffa17 	ldw	r4,-24(fp)
  800ed0:	e17fee17 	ldw	r5,-72(fp)
  800ed4:	080ac140 	call	80ac14 <__lesf2>
  800ed8:	10800050 	cmplti	r2,r2,1
  800edc:	1000011e 	bne	r2,zero,800ee4 <ships_seperating_axis_theorem_collision_detect+0xae0>
  800ee0:	00000506 	br	800ef8 <ships_seperating_axis_theorem_collision_detect+0xaf4>
  800ee4:	e13fee17 	ldw	r4,-72(fp)
  800ee8:	e17ff817 	ldw	r5,-32(fp)
  800eec:	080ac140 	call	80ac14 <__lesf2>
  800ef0:	10800050 	cmplti	r2,r2,1
  800ef4:	1000021e 	bne	r2,zero,800f00 <ships_seperating_axis_theorem_collision_detect+0xafc>
			(ship2_min_projections.x <= ship1_min_projections.x && ship1_min_projections.x <= ship2_max_projections.x)))
		{
			/* IF the condition above is ! true then Collision not detected since we've found a separating axis */
			return FALSE;
  800ef8:	e03ffe15 	stw	zero,-8(fp)
  800efc:	00000606 	br	800f18 <ships_seperating_axis_theorem_collision_detect+0xb14>
  800f00:	e0bfe017 	ldw	r2,-128(fp)
  800f04:	10800044 	addi	r2,r2,1
  800f08:	e0bfe015 	stw	r2,-128(fp)
  800f0c:	003ea306 	br	80099c <ships_seperating_axis_theorem_collision_detect+0x598>
		}
	}

	/* IF all sepration axis are overlapping then yes, we have a collision */
	return TRUE;
  800f10:	00800044 	movi	r2,1
  800f14:	e0bffe15 	stw	r2,-8(fp)
}
  800f18:	e0bffe17 	ldw	r2,-8(fp)
  800f1c:	dfc02317 	ldw	ra,140(sp)
  800f20:	df002217 	ldw	fp,136(sp)
  800f24:	dc002117 	ldw	r16,132(sp)
  800f28:	dec02404 	addi	sp,sp,144
  800f2c:	f800283a 	ret

00800f30 <calculate_axis_of_ship>:

/*---------------------------------------------------------------------------------------------
 * (function: calculate_axis_of_ship)
 *	Point 1 - Point 2 ... since the rectangle for the ship is in the order P1, P2, P3, P4 then P4 to P1
 *-------------------------------------------------------------------------------------------*/
void calculate_axis_of_ship(ship_t *ship, int axis_idx)
{
  800f30:	defffb04 	addi	sp,sp,-20
  800f34:	dfc00415 	stw	ra,16(sp)
  800f38:	df000315 	stw	fp,12(sp)
  800f3c:	dc000215 	stw	r16,8(sp)
  800f40:	df000304 	addi	fp,sp,12
  800f44:	e13ffd15 	stw	r4,-12(fp)
  800f48:	e17ffe15 	stw	r5,-8(fp)
	ship->axis[axis_idx].x = ship->temp_matrix[axis_idx][X] - ship->temp_matrix[axis_idx + 1][X];
  800f4c:	e13ffd17 	ldw	r4,-12(fp)
  800f50:	e0bffe17 	ldw	r2,-8(fp)
  800f54:	10c00224 	muli	r3,r2,8
  800f58:	20800617 	ldw	r2,24(r4)
  800f5c:	18a1883a 	add	r16,r3,r2
  800f60:	e13ffd17 	ldw	r4,-12(fp)
  800f64:	e0bffe17 	ldw	r2,-8(fp)
  800f68:	10c00124 	muli	r3,r2,4
  800f6c:	20800517 	ldw	r2,20(r4)
  800f70:	1885883a 	add	r2,r3,r2
  800f74:	11400017 	ldw	r5,0(r2)
  800f78:	e13ffd17 	ldw	r4,-12(fp)
  800f7c:	e0bffe17 	ldw	r2,-8(fp)
  800f80:	10c00124 	muli	r3,r2,4
  800f84:	20800517 	ldw	r2,20(r4)
  800f88:	1885883a 	add	r2,r3,r2
  800f8c:	10800104 	addi	r2,r2,4
  800f90:	10800017 	ldw	r2,0(r2)
  800f94:	29000017 	ldw	r4,0(r5)
  800f98:	11400017 	ldw	r5,0(r2)
  800f9c:	080a6340 	call	80a634 <__subsf3>
  800fa0:	80800015 	stw	r2,0(r16)
	ship->axis[axis_idx].y = ship->temp_matrix[axis_idx][Y] - ship->temp_matrix[axis_idx + 1][Y];
  800fa4:	e13ffd17 	ldw	r4,-12(fp)
  800fa8:	e0bffe17 	ldw	r2,-8(fp)
  800fac:	10c00224 	muli	r3,r2,8
  800fb0:	20800617 	ldw	r2,24(r4)
  800fb4:	18a1883a 	add	r16,r3,r2
  800fb8:	e13ffd17 	ldw	r4,-12(fp)
  800fbc:	e0bffe17 	ldw	r2,-8(fp)
  800fc0:	10c00124 	muli	r3,r2,4
  800fc4:	20800517 	ldw	r2,20(r4)
  800fc8:	1885883a 	add	r2,r3,r2
  800fcc:	10800017 	ldw	r2,0(r2)
  800fd0:	11400104 	addi	r5,r2,4
  800fd4:	e13ffd17 	ldw	r4,-12(fp)
  800fd8:	e0bffe17 	ldw	r2,-8(fp)
  800fdc:	10c00124 	muli	r3,r2,4
  800fe0:	20800517 	ldw	r2,20(r4)
  800fe4:	1885883a 	add	r2,r3,r2
  800fe8:	10800104 	addi	r2,r2,4
  800fec:	10800017 	ldw	r2,0(r2)
  800ff0:	10800104 	addi	r2,r2,4
  800ff4:	29000017 	ldw	r4,0(r5)
  800ff8:	11400017 	ldw	r5,0(r2)
  800ffc:	080a6340 	call	80a634 <__subsf3>
  801000:	80800115 	stw	r2,4(r16)
}
  801004:	dfc00417 	ldw	ra,16(sp)
  801008:	df000317 	ldw	fp,12(sp)
  80100c:	dc000217 	ldw	r16,8(sp)
  801010:	dec00504 	addi	sp,sp,20
  801014:	f800283a 	ret

00801018 <straight_line_vector_projection>:

/*---------------------------------------------------------------------------------------------
 * (function: straight_line_vector)
 *-------------------------------------------------------------------------------------------*/
short straight_line_vector_projection(ship_t *ship, int angle, float x, float y, int is_shot)
{
  801018:	deffdf04 	addi	sp,sp,-132
  80101c:	dfc02015 	stw	ra,128(sp)
  801020:	df001f15 	stw	fp,124(sp)
  801024:	dc001e15 	stw	r16,120(sp)
  801028:	dc401d15 	stw	r17,116(sp)
  80102c:	df001f04 	addi	fp,sp,124
  801030:	e13fe315 	stw	r4,-116(fp)
  801034:	e17fe415 	stw	r5,-112(fp)
  801038:	e1bfe515 	stw	r6,-108(fp)
  80103c:	e1ffe615 	stw	r7,-104(fp)
	ship_t* current_ship;
	int i;
	int j;
	vector_t point1;
	vector_t point2;
	vector_t slope_point;
	float line_slope;
	float c;
	
	point1.x = x;
  801040:	e0bfe517 	ldw	r2,-108(fp)
  801044:	e0bfea15 	stw	r2,-88(fp)
	point1.y = y;
  801048:	e0bfe617 	ldw	r2,-104(fp)
  80104c:	e0bfeb15 	stw	r2,-84(fp)

	for (i = 0; i < 2; i++)
  801050:	e03fe815 	stw	zero,-96(fp)
  801054:	e0bfe817 	ldw	r2,-96(fp)
  801058:	10800088 	cmpgei	r2,r2,2
  80105c:	1001c71e 	bne	r2,zero,80177c <straight_line_vector_projection+0x764>
	{
		
		if (i == 0)
  801060:	e0bfe817 	ldw	r2,-96(fp)
  801064:	1004c03a 	cmpne	r2,r2,zero
  801068:	1000041e 	bne	r2,zero,80107c <straight_line_vector_projection+0x64>
		{
			current_ship = &p1_ship;
  80106c:	008020b4 	movhi	r2,130
  801070:	10afc004 	addi	r2,r2,-16640
  801074:	e0bfe715 	stw	r2,-100(fp)
  801078:	00000306 	br	801088 <straight_line_vector_projection+0x70>
		}
		else
		{
			current_ship = &p2_ship;
  80107c:	008020b4 	movhi	r2,130
  801080:	10b0e804 	addi	r2,r2,-15456
  801084:	e0bfe715 	stw	r2,-100(fp)
		}

		if ((ship == current_ship) || (ship == current_ship))
  801088:	e0ffe317 	ldw	r3,-116(fp)
  80108c:	e0bfe717 	ldw	r2,-100(fp)
  801090:	1881b626 	beq	r3,r2,80176c <straight_line_vector_projection+0x754>
  801094:	e0ffe317 	ldw	r3,-116(fp)
  801098:	e0bfe717 	ldw	r2,-100(fp)
  80109c:	1881b326 	beq	r3,r2,80176c <straight_line_vector_projection+0x754>
		{
			continue;
		}

		slope_point.x = cos((angle-270)*PI/180) + x;
  8010a0:	e0bfe417 	ldw	r2,-112(fp)
  8010a4:	113fbc84 	addi	r4,r2,-270
  8010a8:	080bb280 	call	80bb28 <__floatsidf>
  8010ac:	100b883a 	mov	r5,r2
  8010b0:	180d883a 	mov	r6,r3
  8010b4:	2809883a 	mov	r4,r5
  8010b8:	300b883a 	mov	r5,r6
  8010bc:	0194f274 	movhi	r6,21449
  8010c0:	31b53c44 	addi	r6,r6,-11023
  8010c4:	01d00274 	movhi	r7,16393
  8010c8:	39c87ec4 	addi	r7,r7,8699
  8010cc:	080b21c0 	call	80b21c <__muldf3>
  8010d0:	100b883a 	mov	r5,r2
  8010d4:	180d883a 	mov	r6,r3
  8010d8:	2809883a 	mov	r4,r5
  8010dc:	300b883a 	mov	r5,r6
  8010e0:	000d883a 	mov	r6,zero
  8010e4:	01d019f4 	movhi	r7,16487
  8010e8:	39e00004 	addi	r7,r7,-32768
  8010ec:	080b61c0 	call	80b61c <__divdf3>
  8010f0:	100b883a 	mov	r5,r2
  8010f4:	180d883a 	mov	r6,r3
  8010f8:	2809883a 	mov	r4,r5
  8010fc:	300b883a 	mov	r5,r6
  801100:	0807a1c0 	call	807a1c <cos>
  801104:	1009883a 	mov	r4,r2
  801108:	180b883a 	mov	r5,r3
  80110c:	2021883a 	mov	r16,r4
  801110:	2823883a 	mov	r17,r5
  801114:	e13fe517 	ldw	r4,-108(fp)
  801118:	080adc00 	call	80adc0 <__extendsfdf2>
  80111c:	100f883a 	mov	r7,r2
  801120:	1811883a 	mov	r8,r3
  801124:	8009883a 	mov	r4,r16
  801128:	880b883a 	mov	r5,r17
  80112c:	380d883a 	mov	r6,r7
  801130:	400f883a 	mov	r7,r8
  801134:	080b1380 	call	80b138 <__adddf3>
  801138:	100b883a 	mov	r5,r2
  80113c:	180d883a 	mov	r6,r3
  801140:	2809883a 	mov	r4,r5
  801144:	300b883a 	mov	r5,r6
  801148:	080bce80 	call	80bce8 <__truncdfsf2>
  80114c:	e0bfee15 	stw	r2,-72(fp)
		slope_point.y = sin((angle-270)*PI/180) + y;
  801150:	e0bfe417 	ldw	r2,-112(fp)
  801154:	113fbc84 	addi	r4,r2,-270
  801158:	080bb280 	call	80bb28 <__floatsidf>
  80115c:	100b883a 	mov	r5,r2
  801160:	180d883a 	mov	r6,r3
  801164:	2809883a 	mov	r4,r5
  801168:	300b883a 	mov	r5,r6
  80116c:	0194f274 	movhi	r6,21449
  801170:	31b53c44 	addi	r6,r6,-11023
  801174:	01d00274 	movhi	r7,16393
  801178:	39c87ec4 	addi	r7,r7,8699
  80117c:	080b21c0 	call	80b21c <__muldf3>
  801180:	100b883a 	mov	r5,r2
  801184:	180d883a 	mov	r6,r3
  801188:	2809883a 	mov	r4,r5
  80118c:	300b883a 	mov	r5,r6
  801190:	000d883a 	mov	r6,zero
  801194:	01d019f4 	movhi	r7,16487
  801198:	39e00004 	addi	r7,r7,-32768
  80119c:	080b61c0 	call	80b61c <__divdf3>
  8011a0:	100b883a 	mov	r5,r2
  8011a4:	180d883a 	mov	r6,r3
  8011a8:	2809883a 	mov	r4,r5
  8011ac:	300b883a 	mov	r5,r6
  8011b0:	0807b8c0 	call	807b8c <sin>
  8011b4:	1009883a 	mov	r4,r2
  8011b8:	180b883a 	mov	r5,r3
  8011bc:	2021883a 	mov	r16,r4
  8011c0:	2823883a 	mov	r17,r5
  8011c4:	e13fe617 	ldw	r4,-104(fp)
  8011c8:	080adc00 	call	80adc0 <__extendsfdf2>
  8011cc:	100f883a 	mov	r7,r2
  8011d0:	1811883a 	mov	r8,r3
  8011d4:	8009883a 	mov	r4,r16
  8011d8:	880b883a 	mov	r5,r17
  8011dc:	380d883a 	mov	r6,r7
  8011e0:	400f883a 	mov	r7,r8
  8011e4:	080b1380 	call	80b138 <__adddf3>
  8011e8:	100b883a 	mov	r5,r2
  8011ec:	180d883a 	mov	r6,r3
  8011f0:	2809883a 	mov	r4,r5
  8011f4:	300b883a 	mov	r5,r6
  8011f8:	080bce80 	call	80bce8 <__truncdfsf2>
  8011fc:	e0bfef15 	stw	r2,-68(fp)
		if ((x - slope_point.x) != 0)
  801200:	e13fe517 	ldw	r4,-108(fp)
  801204:	e17fee17 	ldw	r5,-72(fp)
  801208:	080a6340 	call	80a634 <__subsf3>
  80120c:	1009883a 	mov	r4,r2
  801210:	000b883a 	mov	r5,zero
  801214:	080aa140 	call	80aa14 <__nesf2>
  801218:	1004c03a 	cmpne	r2,r2,zero
  80121c:	1000011e 	bne	r2,zero,801224 <straight_line_vector_projection+0x20c>
  801220:	00007306 	br	8013f0 <straight_line_vector_projection+0x3d8>
		{
			line_slope = (slope_point.y - y)/(slope_point.x - x);  
  801224:	e13fef17 	ldw	r4,-68(fp)
  801228:	e17fe617 	ldw	r5,-104(fp)
  80122c:	080a6340 	call	80a634 <__subsf3>
  801230:	1021883a 	mov	r16,r2
  801234:	e13fee17 	ldw	r4,-72(fp)
  801238:	e17fe517 	ldw	r5,-108(fp)
  80123c:	080a6340 	call	80a634 <__subsf3>
  801240:	8009883a 	mov	r4,r16
  801244:	100b883a 	mov	r5,r2
  801248:	080a85c0 	call	80a85c <__divsf3>
  80124c:	e0bff015 	stw	r2,-64(fp)

			if ((slope_point.x - x) < 0)
  801250:	e13fee17 	ldw	r4,-72(fp)
  801254:	e17fe517 	ldw	r5,-108(fp)
  801258:	080a6340 	call	80a634 <__subsf3>
  80125c:	1009883a 	mov	r4,r2
  801260:	000b883a 	mov	r5,zero
  801264:	080ab940 	call	80ab94 <__ltsf2>
  801268:	1004803a 	cmplt	r2,r2,zero
  80126c:	1000011e 	bne	r2,zero,801274 <straight_line_vector_projection+0x25c>
  801270:	00002c06 	br	801324 <straight_line_vector_projection+0x30c>
			{
				/* heading towards x = 0 get the c of the line equation "y = mx + b" */
				c = y - line_slope*x;
  801274:	e13ff017 	ldw	r4,-64(fp)
  801278:	e17fe517 	ldw	r5,-108(fp)
  80127c:	080a6980 	call	80a698 <__mulsf3>
  801280:	e13fe617 	ldw	r4,-104(fp)
  801284:	100b883a 	mov	r5,r2
  801288:	080a6340 	call	80a634 <__subsf3>
  80128c:	e0bff115 	stw	r2,-60(fp)
				point2.x = 0;
  801290:	e03fec15 	stw	zero,-80(fp)
				point2.y = c; 
  801294:	e0bff117 	ldw	r2,-60(fp)
  801298:	e0bfed15 	stw	r2,-76(fp)

				/* don't go outside screen boundary */
				if (point2.y < 0)
  80129c:	e13fed17 	ldw	r4,-76(fp)
  8012a0:	000b883a 	mov	r5,zero
  8012a4:	080ab940 	call	80ab94 <__ltsf2>
  8012a8:	1004803a 	cmplt	r2,r2,zero
  8012ac:	1000011e 	bne	r2,zero,8012b4 <straight_line_vector_projection+0x29c>
  8012b0:	00000906 	br	8012d8 <straight_line_vector_projection+0x2c0>
				{
					point2.y = 0;
  8012b4:	e03fed15 	stw	zero,-76(fp)
					point2.x = (0 - c)/line_slope;
  8012b8:	0009883a 	mov	r4,zero
  8012bc:	e17ff117 	ldw	r5,-60(fp)
  8012c0:	080a6340 	call	80a634 <__subsf3>
  8012c4:	1009883a 	mov	r4,r2
  8012c8:	e17ff017 	ldw	r5,-64(fp)
  8012cc:	080a85c0 	call	80a85c <__divsf3>
  8012d0:	e0bfec15 	stw	r2,-80(fp)
  8012d4:	00005806 	br	801438 <straight_line_vector_projection+0x420>
				}
				else if (point2.y > 240)
  8012d8:	e13fed17 	ldw	r4,-76(fp)
  8012dc:	0150dc34 	movhi	r5,17264
  8012e0:	29400004 	addi	r5,r5,0
  8012e4:	080aa940 	call	80aa94 <__gtsf2>
  8012e8:	10800048 	cmpgei	r2,r2,1
  8012ec:	1000011e 	bne	r2,zero,8012f4 <straight_line_vector_projection+0x2dc>
  8012f0:	00005106 	br	801438 <straight_line_vector_projection+0x420>
				{
					point2.y = 240;
  8012f4:	0090dc34 	movhi	r2,17264
  8012f8:	10800004 	addi	r2,r2,0
  8012fc:	e0bfed15 	stw	r2,-76(fp)
					point2.x = (240 - c)/line_slope;
  801300:	0110dc34 	movhi	r4,17264
  801304:	21000004 	addi	r4,r4,0
  801308:	e17ff117 	ldw	r5,-60(fp)
  80130c:	080a6340 	call	80a634 <__subsf3>
  801310:	1009883a 	mov	r4,r2
  801314:	e17ff017 	ldw	r5,-64(fp)
  801318:	080a85c0 	call	80a85c <__divsf3>
  80131c:	e0bfec15 	stw	r2,-80(fp)
  801320:	00004506 	br	801438 <straight_line_vector_projection+0x420>
				}
			}
			else 
			{
				/* heading towards 320*240 */
				c = y - line_slope*x;
  801324:	e13ff017 	ldw	r4,-64(fp)
  801328:	e17fe517 	ldw	r5,-108(fp)
  80132c:	080a6980 	call	80a698 <__mulsf3>
  801330:	e13fe617 	ldw	r4,-104(fp)
  801334:	100b883a 	mov	r5,r2
  801338:	080a6340 	call	80a634 <__subsf3>
  80133c:	e0bff115 	stw	r2,-60(fp)
				point2.x = 320;
  801340:	0090e834 	movhi	r2,17312
  801344:	10800004 	addi	r2,r2,0
  801348:	e0bfec15 	stw	r2,-80(fp)
				point2.y = line_slope*point2.x + c;
  80134c:	e13fec17 	ldw	r4,-80(fp)
  801350:	e17ff017 	ldw	r5,-64(fp)
  801354:	080a6980 	call	80a698 <__mulsf3>
  801358:	1009883a 	mov	r4,r2
  80135c:	e17ff117 	ldw	r5,-60(fp)
  801360:	080a5dc0 	call	80a5dc <__addsf3>
  801364:	e0bfed15 	stw	r2,-76(fp)

				/* don't go outside screen boundary */
				if (point2.y < 0)
  801368:	e13fed17 	ldw	r4,-76(fp)
  80136c:	000b883a 	mov	r5,zero
  801370:	080ab940 	call	80ab94 <__ltsf2>
  801374:	1004803a 	cmplt	r2,r2,zero
  801378:	1000011e 	bne	r2,zero,801380 <straight_line_vector_projection+0x368>
  80137c:	00000906 	br	8013a4 <straight_line_vector_projection+0x38c>
				{
					point2.y = 0;
  801380:	e03fed15 	stw	zero,-76(fp)
					point2.x = (0 - c)/line_slope;
  801384:	0009883a 	mov	r4,zero
  801388:	e17ff117 	ldw	r5,-60(fp)
  80138c:	080a6340 	call	80a634 <__subsf3>
  801390:	1009883a 	mov	r4,r2
  801394:	e17ff017 	ldw	r5,-64(fp)
  801398:	080a85c0 	call	80a85c <__divsf3>
  80139c:	e0bfec15 	stw	r2,-80(fp)
  8013a0:	00002506 	br	801438 <straight_line_vector_projection+0x420>
				}
				else if (point2.y > 240)
  8013a4:	e13fed17 	ldw	r4,-76(fp)
  8013a8:	0150dc34 	movhi	r5,17264
  8013ac:	29400004 	addi	r5,r5,0
  8013b0:	080aa940 	call	80aa94 <__gtsf2>
  8013b4:	10800048 	cmpgei	r2,r2,1
  8013b8:	1000011e 	bne	r2,zero,8013c0 <straight_line_vector_projection+0x3a8>
  8013bc:	00001e06 	br	801438 <straight_line_vector_projection+0x420>
				{
					point2.y = 240;
  8013c0:	0090dc34 	movhi	r2,17264
  8013c4:	10800004 	addi	r2,r2,0
  8013c8:	e0bfed15 	stw	r2,-76(fp)
					point2.x = (240 - c)/line_slope;
  8013cc:	0110dc34 	movhi	r4,17264
  8013d0:	21000004 	addi	r4,r4,0
  8013d4:	e17ff117 	ldw	r5,-60(fp)
  8013d8:	080a6340 	call	80a634 <__subsf3>
  8013dc:	1009883a 	mov	r4,r2
  8013e0:	e17ff017 	ldw	r5,-64(fp)
  8013e4:	080a85c0 	call	80a85c <__divsf3>
  8013e8:	e0bfec15 	stw	r2,-80(fp)
  8013ec:	00001206 	br	801438 <straight_line_vector_projection+0x420>
				}
			}
		}
		else
		{
			/* x component of slope is 0, therefore line is perpendicular to x-axis */
			if (angle == 360 || angle == 0)
  8013f0:	e0bfe417 	ldw	r2,-112(fp)
  8013f4:	10805a20 	cmpeqi	r2,r2,360
  8013f8:	1000031e 	bne	r2,zero,801408 <straight_line_vector_projection+0x3f0>
  8013fc:	e0bfe417 	ldw	r2,-112(fp)
  801400:	1004c03a 	cmpne	r2,r2,zero
  801404:	1000061e 	bne	r2,zero,801420 <straight_line_vector_projection+0x408>
			{
				/* pointing to y = 240 */
				point2.x = point1.x;
  801408:	e0bfea17 	ldw	r2,-88(fp)
  80140c:	e0bfec15 	stw	r2,-80(fp)
				point2.y = 240;
  801410:	0090dc34 	movhi	r2,17264
  801414:	10800004 	addi	r2,r2,0
  801418:	e0bfed15 	stw	r2,-76(fp)
  80141c:	00000606 	br	801438 <straight_line_vector_projection+0x420>
			}
			else if (angle == 180)
  801420:	e0bfe417 	ldw	r2,-112(fp)
  801424:	10802d18 	cmpnei	r2,r2,180
  801428:	1000031e 	bne	r2,zero,801438 <straight_line_vector_projection+0x420>
			{
				point2.x = point1.x;
  80142c:	e0bfea17 	ldw	r2,-88(fp)
  801430:	e0bfec15 	stw	r2,-80(fp)
				point2.y = 0;
  801434:	e03fed15 	stw	zero,-76(fp)
			}
		}

		if (is_shot)
  801438:	e0800217 	ldw	r2,8(fp)
  80143c:	1005003a 	cmpeq	r2,r2,zero
  801440:	10000d1e 	bne	r2,zero,801478 <straight_line_vector_projection+0x460>
		{
			ship->shot_start.x = x;
  801444:	e0ffe317 	ldw	r3,-116(fp)
  801448:	e0bfe517 	ldw	r2,-108(fp)
  80144c:	18800e15 	stw	r2,56(r3)
			ship->shot_start.y = y;
  801450:	e0ffe317 	ldw	r3,-116(fp)
  801454:	e0bfe617 	ldw	r2,-104(fp)
  801458:	18800f15 	stw	r2,60(r3)
			ship->shot_end.x = point2.x;
  80145c:	e0ffe317 	ldw	r3,-116(fp)
  801460:	e0bfec17 	ldw	r2,-80(fp)
  801464:	18801015 	stw	r2,64(r3)
			ship->shot_end.y = point2.y;
  801468:	e0ffe317 	ldw	r3,-116(fp)
  80146c:	e0bfed17 	ldw	r2,-76(fp)
  801470:	18801115 	stw	r2,68(r3)
  801474:	00000c06 	br	8014a8 <straight_line_vector_projection+0x490>
		}
		else // is sensor beam
		{
			ship->sensor_start.x = x;
  801478:	e0ffe317 	ldw	r3,-116(fp)
  80147c:	e0bfe517 	ldw	r2,-108(fp)
  801480:	18801215 	stw	r2,72(r3)
			ship->sensor_start.y = y;
  801484:	e0ffe317 	ldw	r3,-116(fp)
  801488:	e0bfe617 	ldw	r2,-104(fp)
  80148c:	18801315 	stw	r2,76(r3)
			ship->sensor_end.x = point2.x;
  801490:	e0ffe317 	ldw	r3,-116(fp)
  801494:	e0bfec17 	ldw	r2,-80(fp)
  801498:	18801415 	stw	r2,80(r3)
			ship->sensor_end.y = point2.y;
  80149c:	e0ffe317 	ldw	r3,-116(fp)
  8014a0:	e0bfed17 	ldw	r2,-76(fp)
  8014a4:	18801515 	stw	r2,84(r3)
		}

		/* now that we have the line projection, return what it hits - first check for ship */
		for (j = 0; j < 4; j++)
  8014a8:	e03fe915 	stw	zero,-92(fp)
  8014ac:	e0bfe917 	ldw	r2,-92(fp)
  8014b0:	10800108 	cmpgei	r2,r2,4
  8014b4:	10006d1e 	bne	r2,zero,80166c <straight_line_vector_projection+0x654>
		{
			vector_t ship_vertices1;
			vector_t ship_vertices2;
			short test1;
			short test2;

			ship_vertices1.x = current_ship->matrix_location[j][X];
  8014b8:	e13fe717 	ldw	r4,-100(fp)
  8014bc:	e0bfe917 	ldw	r2,-92(fp)
  8014c0:	10c00124 	muli	r3,r2,4
  8014c4:	20800417 	ldw	r2,16(r4)
  8014c8:	1885883a 	add	r2,r3,r2
  8014cc:	10800017 	ldw	r2,0(r2)
  8014d0:	10800017 	ldw	r2,0(r2)
  8014d4:	e0bff215 	stw	r2,-56(fp)
			ship_vertices1.y = current_ship->matrix_location[j][Y];
  8014d8:	e13fe717 	ldw	r4,-100(fp)
  8014dc:	e0bfe917 	ldw	r2,-92(fp)
  8014e0:	10c00124 	muli	r3,r2,4
  8014e4:	20800417 	ldw	r2,16(r4)
  8014e8:	1885883a 	add	r2,r3,r2
  8014ec:	10800017 	ldw	r2,0(r2)
  8014f0:	10800104 	addi	r2,r2,4
  8014f4:	10800017 	ldw	r2,0(r2)
  8014f8:	e0bff315 	stw	r2,-52(fp)
			ship_vertices2.x = current_ship->matrix_location[(j+1)%4][X];
  8014fc:	e0bfe717 	ldw	r2,-100(fp)
  801500:	e0bff815 	stw	r2,-32(fp)
  801504:	e0bfe917 	ldw	r2,-92(fp)
  801508:	10800044 	addi	r2,r2,1
  80150c:	e0bff915 	stw	r2,-28(fp)
  801510:	e0fff917 	ldw	r3,-28(fp)
  801514:	e0fffa15 	stw	r3,-24(fp)
  801518:	e13ffa17 	ldw	r4,-24(fp)
  80151c:	2004403a 	cmpge	r2,r4,zero
  801520:	1000031e 	bne	r2,zero,801530 <straight_line_vector_projection+0x518>
  801524:	e0bffa17 	ldw	r2,-24(fp)
  801528:	108000c4 	addi	r2,r2,3
  80152c:	e0bffa15 	stw	r2,-24(fp)
  801530:	e0fffa17 	ldw	r3,-24(fp)
  801534:	1805d0ba 	srai	r2,r3,2
  801538:	10800124 	muli	r2,r2,4
  80153c:	e13ff917 	ldw	r4,-28(fp)
  801540:	2085c83a 	sub	r2,r4,r2
  801544:	10c00124 	muli	r3,r2,4
  801548:	e13ff817 	ldw	r4,-32(fp)
  80154c:	20800417 	ldw	r2,16(r4)
  801550:	1885883a 	add	r2,r3,r2
  801554:	10800017 	ldw	r2,0(r2)
  801558:	10800017 	ldw	r2,0(r2)
  80155c:	e0bff415 	stw	r2,-48(fp)
			ship_vertices2.y = current_ship->matrix_location[(j+1)%4][Y];
  801560:	e0bfe717 	ldw	r2,-100(fp)
  801564:	e0bffb15 	stw	r2,-20(fp)
  801568:	e0bfe917 	ldw	r2,-92(fp)
  80156c:	10800044 	addi	r2,r2,1
  801570:	e0bffc15 	stw	r2,-16(fp)
  801574:	e0fffc17 	ldw	r3,-16(fp)
  801578:	e0fffd15 	stw	r3,-12(fp)
  80157c:	e13ffd17 	ldw	r4,-12(fp)
  801580:	2004403a 	cmpge	r2,r4,zero
  801584:	1000031e 	bne	r2,zero,801594 <straight_line_vector_projection+0x57c>
  801588:	e0bffd17 	ldw	r2,-12(fp)
  80158c:	108000c4 	addi	r2,r2,3
  801590:	e0bffd15 	stw	r2,-12(fp)
  801594:	e0fffd17 	ldw	r3,-12(fp)
  801598:	1805d0ba 	srai	r2,r3,2
  80159c:	10800124 	muli	r2,r2,4
  8015a0:	e13ffc17 	ldw	r4,-16(fp)
  8015a4:	2085c83a 	sub	r2,r4,r2
  8015a8:	10c00124 	muli	r3,r2,4
  8015ac:	e13ffb17 	ldw	r4,-20(fp)
  8015b0:	20800417 	ldw	r2,16(r4)
  8015b4:	1885883a 	add	r2,r3,r2
  8015b8:	10800017 	ldw	r2,0(r2)
  8015bc:	10800104 	addi	r2,r2,4
  8015c0:	10800017 	ldw	r2,0(r2)
  8015c4:	e0bff515 	stw	r2,-44(fp)

			test1 = is_ccw_abc(point1.x, point1.y, ship_vertices1.x, ship_vertices1.y, point2.x, point2.y);
  8015c8:	e0bfec17 	ldw	r2,-80(fp)
  8015cc:	d8800015 	stw	r2,0(sp)
  8015d0:	e0bfed17 	ldw	r2,-76(fp)
  8015d4:	d8800115 	stw	r2,4(sp)
  8015d8:	e13fea17 	ldw	r4,-88(fp)
  8015dc:	e17feb17 	ldw	r5,-84(fp)
  8015e0:	e1bff217 	ldw	r6,-56(fp)
  8015e4:	e1fff317 	ldw	r7,-52(fp)
  8015e8:	080179c0 	call	80179c <is_ccw_abc>
  8015ec:	e0bff60d 	sth	r2,-40(fp)
			test2 = is_ccw_abc(point1.x, point1.y, ship_vertices2.x, ship_vertices2.y, point2.x, point2.y);
  8015f0:	e0bfec17 	ldw	r2,-80(fp)
  8015f4:	d8800015 	stw	r2,0(sp)
  8015f8:	e0bfed17 	ldw	r2,-76(fp)
  8015fc:	d8800115 	stw	r2,4(sp)
  801600:	e13fea17 	ldw	r4,-88(fp)
  801604:	e17feb17 	ldw	r5,-84(fp)
  801608:	e1bff417 	ldw	r6,-48(fp)
  80160c:	e1fff517 	ldw	r7,-44(fp)
  801610:	080179c0 	call	80179c <is_ccw_abc>
  801614:	e0bff68d 	sth	r2,-38(fp)

			/* theres is a collision if the clockwise tests are XOR TRUE */
			if ((test1 == TRUE && test2 == FALSE) || (test1 == FALSE && test2 == TRUE))
  801618:	e0bff60f 	ldh	r2,-40(fp)
  80161c:	10800058 	cmpnei	r2,r2,1
  801620:	1000041e 	bne	r2,zero,801634 <straight_line_vector_projection+0x61c>
  801624:	e0bff68f 	ldh	r2,-38(fp)
  801628:	1004c03a 	cmpne	r2,r2,zero
  80162c:	1000011e 	bne	r2,zero,801634 <straight_line_vector_projection+0x61c>
  801630:	00000706 	br	801650 <straight_line_vector_projection+0x638>
  801634:	e0bff60f 	ldh	r2,-40(fp)
  801638:	1004c03a 	cmpne	r2,r2,zero
  80163c:	1000071e 	bne	r2,zero,80165c <straight_line_vector_projection+0x644>
  801640:	e0bff68f 	ldh	r2,-38(fp)
  801644:	10800060 	cmpeqi	r2,r2,1
  801648:	1000011e 	bne	r2,zero,801650 <straight_line_vector_projection+0x638>
  80164c:	00000306 	br	80165c <straight_line_vector_projection+0x644>
			{
				/* ship collision */
				return SHIP;
  801650:	008000c4 	movi	r2,3
  801654:	e0bff715 	stw	r2,-36(fp)
  801658:	00004906 	br	801780 <straight_line_vector_projection+0x768>
  80165c:	e0bfe917 	ldw	r2,-92(fp)
  801660:	10800044 	addi	r2,r2,1
  801664:	e0bfe915 	stw	r2,-92(fp)
  801668:	003f9006 	br	8014ac <straight_line_vector_projection+0x494>
			}
		}

		/* if it's not a ship, return wall it hits */
		if (point2.x >= 0 && point2.x <= 320)
  80166c:	e13fec17 	ldw	r4,-80(fp)
  801670:	000b883a 	mov	r5,zero
  801674:	080ab140 	call	80ab14 <__gesf2>
  801678:	1004403a 	cmpge	r2,r2,zero
  80167c:	1000011e 	bne	r2,zero,801684 <straight_line_vector_projection+0x66c>
  801680:	00001a06 	br	8016ec <straight_line_vector_projection+0x6d4>
  801684:	e13fec17 	ldw	r4,-80(fp)
  801688:	0150e834 	movhi	r5,17312
  80168c:	29400004 	addi	r5,r5,0
  801690:	080ac140 	call	80ac14 <__lesf2>
  801694:	10800050 	cmplti	r2,r2,1
  801698:	1000011e 	bne	r2,zero,8016a0 <straight_line_vector_projection+0x688>
  80169c:	00001306 	br	8016ec <straight_line_vector_projection+0x6d4>
		{
			if (point2.y == 0)
  8016a0:	e13fed17 	ldw	r4,-76(fp)
  8016a4:	000b883a 	mov	r5,zero
  8016a8:	080a9940 	call	80a994 <__eqsf2>
  8016ac:	1005003a 	cmpeq	r2,r2,zero
  8016b0:	1000011e 	bne	r2,zero,8016b8 <straight_line_vector_projection+0x6a0>
  8016b4:	00000306 	br	8016c4 <straight_line_vector_projection+0x6ac>
				return WALL_N;
  8016b8:	00c00044 	movi	r3,1
  8016bc:	e0fff715 	stw	r3,-36(fp)
  8016c0:	00002f06 	br	801780 <straight_line_vector_projection+0x768>
			else if (point2.y == 240)
  8016c4:	e13fed17 	ldw	r4,-76(fp)
  8016c8:	0150dc34 	movhi	r5,17264
  8016cc:	29400004 	addi	r5,r5,0
  8016d0:	080a9940 	call	80a994 <__eqsf2>
  8016d4:	1005003a 	cmpeq	r2,r2,zero
  8016d8:	1000011e 	bne	r2,zero,8016e0 <straight_line_vector_projection+0x6c8>
  8016dc:	00002306 	br	80176c <straight_line_vector_projection+0x754>
				return WALL_S;
  8016e0:	01000084 	movi	r4,2
  8016e4:	e13ff715 	stw	r4,-36(fp)
  8016e8:	00002506 	br	801780 <straight_line_vector_projection+0x768>
		}
		else if (point2.y >= 0 && point2.y <=240)
  8016ec:	e13fed17 	ldw	r4,-76(fp)
  8016f0:	000b883a 	mov	r5,zero
  8016f4:	080ab140 	call	80ab14 <__gesf2>
  8016f8:	1004403a 	cmpge	r2,r2,zero
  8016fc:	1000011e 	bne	r2,zero,801704 <straight_line_vector_projection+0x6ec>
  801700:	00001a06 	br	80176c <straight_line_vector_projection+0x754>
  801704:	e13fed17 	ldw	r4,-76(fp)
  801708:	0150dc34 	movhi	r5,17264
  80170c:	29400004 	addi	r5,r5,0
  801710:	080ac140 	call	80ac14 <__lesf2>
  801714:	10800050 	cmplti	r2,r2,1
  801718:	1000011e 	bne	r2,zero,801720 <straight_line_vector_projection+0x708>
  80171c:	00001306 	br	80176c <straight_line_vector_projection+0x754>
		{
			if (point2.x == 0)
  801720:	e13fec17 	ldw	r4,-80(fp)
  801724:	000b883a 	mov	r5,zero
  801728:	080a9940 	call	80a994 <__eqsf2>
  80172c:	1005003a 	cmpeq	r2,r2,zero
  801730:	1000011e 	bne	r2,zero,801738 <straight_line_vector_projection+0x720>
  801734:	00000306 	br	801744 <straight_line_vector_projection+0x72c>
				return WALL_W;
  801738:	00800144 	movi	r2,5
  80173c:	e0bff715 	stw	r2,-36(fp)
  801740:	00000f06 	br	801780 <straight_line_vector_projection+0x768>
			else if (point2.x == 320)
  801744:	e13fec17 	ldw	r4,-80(fp)
  801748:	0150e834 	movhi	r5,17312
  80174c:	29400004 	addi	r5,r5,0
  801750:	080a9940 	call	80a994 <__eqsf2>
  801754:	1005003a 	cmpeq	r2,r2,zero
  801758:	1000011e 	bne	r2,zero,801760 <straight_line_vector_projection+0x748>
  80175c:	00000306 	br	80176c <straight_line_vector_projection+0x754>
				return WALL_E;
  801760:	00c00104 	movi	r3,4
  801764:	e0fff715 	stw	r3,-36(fp)
  801768:	00000506 	br	801780 <straight_line_vector_projection+0x768>
  80176c:	e0bfe817 	ldw	r2,-96(fp)
  801770:	10800044 	addi	r2,r2,1
  801774:	e0bfe815 	stw	r2,-96(fp)
  801778:	003e3606 	br	801054 <straight_line_vector_projection+0x3c>
		}
	}

	return NO_COLLISION;
  80177c:	e03ff715 	stw	zero,-36(fp)
}
  801780:	e0bff717 	ldw	r2,-36(fp)
  801784:	dfc02017 	ldw	ra,128(sp)
  801788:	df001f17 	ldw	fp,124(sp)
  80178c:	dc001e17 	ldw	r16,120(sp)
  801790:	dc401d17 	ldw	r17,116(sp)
  801794:	dec02104 	addi	sp,sp,132
  801798:	f800283a 	ret

0080179c <is_ccw_abc>:

/*---------------------------------------------------------------------------------------------
 * (function: is_ccw_abc)
 * 	checks if the points a, b, c are in the clockwise detection
 *-------------------------------------------------------------------------------------------*/
short is_ccw_abc(float a_x, float a_y, float b_x, float b_y, float c_x, float c_y)
{
  80179c:	defff604 	addi	sp,sp,-40
  8017a0:	dfc00915 	stw	ra,36(sp)
  8017a4:	df000815 	stw	fp,32(sp)
  8017a8:	dc000715 	stw	r16,28(sp)
  8017ac:	df000804 	addi	fp,sp,32
  8017b0:	e13ff815 	stw	r4,-32(fp)
  8017b4:	e17ff915 	stw	r5,-28(fp)
  8017b8:	e1bffa15 	stw	r6,-24(fp)
  8017bc:	e1fffb15 	stw	r7,-20(fp)
	float slope_ab = (b_y - a_y) / (b_x - a_x);
  8017c0:	e13ffb17 	ldw	r4,-20(fp)
  8017c4:	e17ff917 	ldw	r5,-28(fp)
  8017c8:	080a6340 	call	80a634 <__subsf3>
  8017cc:	1021883a 	mov	r16,r2
  8017d0:	e13ffa17 	ldw	r4,-24(fp)
  8017d4:	e17ff817 	ldw	r5,-32(fp)
  8017d8:	080a6340 	call	80a634 <__subsf3>
  8017dc:	8009883a 	mov	r4,r16
  8017e0:	100b883a 	mov	r5,r2
  8017e4:	080a85c0 	call	80a85c <__divsf3>
  8017e8:	e0bffc15 	stw	r2,-16(fp)
	float slope_bc = (c_y - b_y) / (c_x - b_x);
  8017ec:	e1000317 	ldw	r4,12(fp)
  8017f0:	e17ffb17 	ldw	r5,-20(fp)
  8017f4:	080a6340 	call	80a634 <__subsf3>
  8017f8:	1021883a 	mov	r16,r2
  8017fc:	e1000217 	ldw	r4,8(fp)
  801800:	e17ffa17 	ldw	r5,-24(fp)
  801804:	080a6340 	call	80a634 <__subsf3>
  801808:	8009883a 	mov	r4,r16
  80180c:	100b883a 	mov	r5,r2
  801810:	080a85c0 	call	80a85c <__divsf3>
  801814:	e0bffd15 	stw	r2,-12(fp)

	if (slope_ab < slope_bc)
  801818:	e13ffc17 	ldw	r4,-16(fp)
  80181c:	e17ffd17 	ldw	r5,-12(fp)
  801820:	080ab940 	call	80ab94 <__ltsf2>
  801824:	1004803a 	cmplt	r2,r2,zero
  801828:	1000011e 	bne	r2,zero,801830 <is_ccw_abc+0x94>
  80182c:	00000306 	br	80183c <is_ccw_abc+0xa0>
		return TRUE;
  801830:	00800044 	movi	r2,1
  801834:	e0bffe15 	stw	r2,-8(fp)
  801838:	00000106 	br	801840 <is_ccw_abc+0xa4>
	else
		return FALSE;
  80183c:	e03ffe15 	stw	zero,-8(fp)
}
  801840:	e0bffe17 	ldw	r2,-8(fp)
  801844:	dfc00917 	ldw	ra,36(sp)
  801848:	df000817 	ldw	fp,32(sp)
  80184c:	dc000717 	ldw	r16,28(sp)
  801850:	dec00a04 	addi	sp,sp,40
  801854:	f800283a 	ret

00801858 <draw_ship>:
 * (function: draw_ship)
 *	SHIP is a rectangle held in a matrix...the 0th row holds x coord and the 1st row holds y coord
 *-------------------------------------------------------------------------------------------*/
void draw_ship(ship_t *ship, alt_up_pixel_buffer_dev *pixel_buffer, int buf)
{
  801858:	defff504 	addi	sp,sp,-44
  80185c:	dfc00a15 	stw	ra,40(sp)
  801860:	df000915 	stw	fp,36(sp)
  801864:	dc000815 	stw	r16,32(sp)
  801868:	dc400715 	stw	r17,28(sp)
  80186c:	dc800615 	stw	r18,24(sp)
  801870:	df000904 	addi	fp,sp,36
  801874:	e13ffa15 	stw	r4,-24(fp)
  801878:	e17ffb15 	stw	r5,-20(fp)
  80187c:	e1bffc15 	stw	r6,-16(fp)
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  801880:	e0bffa17 	ldw	r2,-24(fp)
  801884:	10800417 	ldw	r2,16(r2)
  801888:	10800017 	ldw	r2,0(r2)
  80188c:	11000017 	ldw	r4,0(r2)
  801890:	080ad2c0 	call	80ad2c <__fixsfsi>
  801894:	1021883a 	mov	r16,r2
  801898:	e0bffa17 	ldw	r2,-24(fp)
  80189c:	10800417 	ldw	r2,16(r2)
  8018a0:	10800017 	ldw	r2,0(r2)
  8018a4:	10800104 	addi	r2,r2,4
  8018a8:	11000017 	ldw	r4,0(r2)
  8018ac:	080ad2c0 	call	80ad2c <__fixsfsi>
  8018b0:	1023883a 	mov	r17,r2
  8018b4:	e0bffa17 	ldw	r2,-24(fp)
  8018b8:	10800417 	ldw	r2,16(r2)
  8018bc:	10800104 	addi	r2,r2,4
  8018c0:	10800017 	ldw	r2,0(r2)
  8018c4:	11000017 	ldw	r4,0(r2)
  8018c8:	080ad2c0 	call	80ad2c <__fixsfsi>
  8018cc:	1025883a 	mov	r18,r2
  8018d0:	e0bffa17 	ldw	r2,-24(fp)
  8018d4:	10800417 	ldw	r2,16(r2)
  8018d8:	10800104 	addi	r2,r2,4
  8018dc:	10800017 	ldw	r2,0(r2)
  8018e0:	10800104 	addi	r2,r2,4
  8018e4:	11000017 	ldw	r4,0(r2)
  8018e8:	080ad2c0 	call	80ad2c <__fixsfsi>
  8018ec:	d8800015 	stw	r2,0(sp)
  8018f0:	e0bffa17 	ldw	r2,-24(fp)
  8018f4:	10800717 	ldw	r2,28(r2)
  8018f8:	d8800115 	stw	r2,4(sp)
  8018fc:	e0bffc17 	ldw	r2,-16(fp)
  801900:	d8800215 	stw	r2,8(sp)
  801904:	e13ffb17 	ldw	r4,-20(fp)
  801908:	800b883a 	mov	r5,r16
  80190c:	880d883a 	mov	r6,r17
  801910:	900f883a 	mov	r7,r18
  801914:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			ship->matrix_location[0][0], ship->matrix_location[0][1], 
			ship->matrix_location[1][0], ship->matrix_location[1][1], 
			ship->color[0], buf);
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  801918:	e0bffa17 	ldw	r2,-24(fp)
  80191c:	10800417 	ldw	r2,16(r2)
  801920:	10800104 	addi	r2,r2,4
  801924:	10800017 	ldw	r2,0(r2)
  801928:	11000017 	ldw	r4,0(r2)
  80192c:	080ad2c0 	call	80ad2c <__fixsfsi>
  801930:	1021883a 	mov	r16,r2
  801934:	e0bffa17 	ldw	r2,-24(fp)
  801938:	10800417 	ldw	r2,16(r2)
  80193c:	10800104 	addi	r2,r2,4
  801940:	10800017 	ldw	r2,0(r2)
  801944:	10800104 	addi	r2,r2,4
  801948:	11000017 	ldw	r4,0(r2)
  80194c:	080ad2c0 	call	80ad2c <__fixsfsi>
  801950:	1023883a 	mov	r17,r2
  801954:	e0bffa17 	ldw	r2,-24(fp)
  801958:	10800417 	ldw	r2,16(r2)
  80195c:	10800204 	addi	r2,r2,8
  801960:	10800017 	ldw	r2,0(r2)
  801964:	11000017 	ldw	r4,0(r2)
  801968:	080ad2c0 	call	80ad2c <__fixsfsi>
  80196c:	1025883a 	mov	r18,r2
  801970:	e0bffa17 	ldw	r2,-24(fp)
  801974:	10800417 	ldw	r2,16(r2)
  801978:	10800204 	addi	r2,r2,8
  80197c:	10800017 	ldw	r2,0(r2)
  801980:	10800104 	addi	r2,r2,4
  801984:	11000017 	ldw	r4,0(r2)
  801988:	080ad2c0 	call	80ad2c <__fixsfsi>
  80198c:	d8800015 	stw	r2,0(sp)
  801990:	e0bffa17 	ldw	r2,-24(fp)
  801994:	10800717 	ldw	r2,28(r2)
  801998:	d8800115 	stw	r2,4(sp)
  80199c:	e0bffc17 	ldw	r2,-16(fp)
  8019a0:	d8800215 	stw	r2,8(sp)
  8019a4:	e13ffb17 	ldw	r4,-20(fp)
  8019a8:	800b883a 	mov	r5,r16
  8019ac:	880d883a 	mov	r6,r17
  8019b0:	900f883a 	mov	r7,r18
  8019b4:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			ship->matrix_location[1][0], ship->matrix_location[1][1], 
			ship->matrix_location[2][0], ship->matrix_location[2][1], 
			ship->color[0], buf);
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  8019b8:	e0bffa17 	ldw	r2,-24(fp)
  8019bc:	10800417 	ldw	r2,16(r2)
  8019c0:	10800204 	addi	r2,r2,8
  8019c4:	10800017 	ldw	r2,0(r2)
  8019c8:	11000017 	ldw	r4,0(r2)
  8019cc:	080ad2c0 	call	80ad2c <__fixsfsi>
  8019d0:	1021883a 	mov	r16,r2
  8019d4:	e0bffa17 	ldw	r2,-24(fp)
  8019d8:	10800417 	ldw	r2,16(r2)
  8019dc:	10800204 	addi	r2,r2,8
  8019e0:	10800017 	ldw	r2,0(r2)
  8019e4:	10800104 	addi	r2,r2,4
  8019e8:	11000017 	ldw	r4,0(r2)
  8019ec:	080ad2c0 	call	80ad2c <__fixsfsi>
  8019f0:	1023883a 	mov	r17,r2
  8019f4:	e0bffa17 	ldw	r2,-24(fp)
  8019f8:	10800417 	ldw	r2,16(r2)
  8019fc:	10800304 	addi	r2,r2,12
  801a00:	10800017 	ldw	r2,0(r2)
  801a04:	11000017 	ldw	r4,0(r2)
  801a08:	080ad2c0 	call	80ad2c <__fixsfsi>
  801a0c:	1025883a 	mov	r18,r2
  801a10:	e0bffa17 	ldw	r2,-24(fp)
  801a14:	10800417 	ldw	r2,16(r2)
  801a18:	10800304 	addi	r2,r2,12
  801a1c:	10800017 	ldw	r2,0(r2)
  801a20:	10800104 	addi	r2,r2,4
  801a24:	11000017 	ldw	r4,0(r2)
  801a28:	080ad2c0 	call	80ad2c <__fixsfsi>
  801a2c:	d8800015 	stw	r2,0(sp)
  801a30:	e0bffa17 	ldw	r2,-24(fp)
  801a34:	10800717 	ldw	r2,28(r2)
  801a38:	d8800115 	stw	r2,4(sp)
  801a3c:	e0bffc17 	ldw	r2,-16(fp)
  801a40:	d8800215 	stw	r2,8(sp)
  801a44:	e13ffb17 	ldw	r4,-20(fp)
  801a48:	800b883a 	mov	r5,r16
  801a4c:	880d883a 	mov	r6,r17
  801a50:	900f883a 	mov	r7,r18
  801a54:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			ship->matrix_location[2][0], ship->matrix_location[2][1], 
			ship->matrix_location[3][0], ship->matrix_location[3][1], 
			ship->color[0], buf);
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  801a58:	e0bffa17 	ldw	r2,-24(fp)
  801a5c:	10800417 	ldw	r2,16(r2)
  801a60:	10800304 	addi	r2,r2,12
  801a64:	10800017 	ldw	r2,0(r2)
  801a68:	11000017 	ldw	r4,0(r2)
  801a6c:	080ad2c0 	call	80ad2c <__fixsfsi>
  801a70:	1021883a 	mov	r16,r2
  801a74:	e0bffa17 	ldw	r2,-24(fp)
  801a78:	10800417 	ldw	r2,16(r2)
  801a7c:	10800304 	addi	r2,r2,12
  801a80:	10800017 	ldw	r2,0(r2)
  801a84:	10800104 	addi	r2,r2,4
  801a88:	11000017 	ldw	r4,0(r2)
  801a8c:	080ad2c0 	call	80ad2c <__fixsfsi>
  801a90:	1023883a 	mov	r17,r2
  801a94:	e0bffa17 	ldw	r2,-24(fp)
  801a98:	10800417 	ldw	r2,16(r2)
  801a9c:	10800017 	ldw	r2,0(r2)
  801aa0:	11000017 	ldw	r4,0(r2)
  801aa4:	080ad2c0 	call	80ad2c <__fixsfsi>
  801aa8:	1025883a 	mov	r18,r2
  801aac:	e0bffa17 	ldw	r2,-24(fp)
  801ab0:	10800417 	ldw	r2,16(r2)
  801ab4:	10800017 	ldw	r2,0(r2)
  801ab8:	10800104 	addi	r2,r2,4
  801abc:	11000017 	ldw	r4,0(r2)
  801ac0:	080ad2c0 	call	80ad2c <__fixsfsi>
  801ac4:	d8800015 	stw	r2,0(sp)
  801ac8:	e0bffa17 	ldw	r2,-24(fp)
  801acc:	10800717 	ldw	r2,28(r2)
  801ad0:	d8800115 	stw	r2,4(sp)
  801ad4:	e0bffc17 	ldw	r2,-16(fp)
  801ad8:	d8800215 	stw	r2,8(sp)
  801adc:	e13ffb17 	ldw	r4,-20(fp)
  801ae0:	800b883a 	mov	r5,r16
  801ae4:	880d883a 	mov	r6,r17
  801ae8:	900f883a 	mov	r7,r18
  801aec:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			ship->matrix_location[3][0], ship->matrix_location[3][1], 
			ship->matrix_location[0][0], ship->matrix_location[0][1], 
			ship->color[0], buf);
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  801af0:	e0bffa17 	ldw	r2,-24(fp)
  801af4:	10800417 	ldw	r2,16(r2)
  801af8:	10800404 	addi	r2,r2,16
  801afc:	10800017 	ldw	r2,0(r2)
  801b00:	11000017 	ldw	r4,0(r2)
  801b04:	080ad2c0 	call	80ad2c <__fixsfsi>
  801b08:	1021883a 	mov	r16,r2
  801b0c:	e0bffa17 	ldw	r2,-24(fp)
  801b10:	10800417 	ldw	r2,16(r2)
  801b14:	10800404 	addi	r2,r2,16
  801b18:	10800017 	ldw	r2,0(r2)
  801b1c:	10800104 	addi	r2,r2,4
  801b20:	11000017 	ldw	r4,0(r2)
  801b24:	080ad2c0 	call	80ad2c <__fixsfsi>
  801b28:	1023883a 	mov	r17,r2
  801b2c:	e0bffa17 	ldw	r2,-24(fp)
  801b30:	10800417 	ldw	r2,16(r2)
  801b34:	10800504 	addi	r2,r2,20
  801b38:	10800017 	ldw	r2,0(r2)
  801b3c:	11000017 	ldw	r4,0(r2)
  801b40:	080ad2c0 	call	80ad2c <__fixsfsi>
  801b44:	1025883a 	mov	r18,r2
  801b48:	e0bffa17 	ldw	r2,-24(fp)
  801b4c:	10800417 	ldw	r2,16(r2)
  801b50:	10800504 	addi	r2,r2,20
  801b54:	10800017 	ldw	r2,0(r2)
  801b58:	10800104 	addi	r2,r2,4
  801b5c:	11000017 	ldw	r4,0(r2)
  801b60:	080ad2c0 	call	80ad2c <__fixsfsi>
  801b64:	d8800015 	stw	r2,0(sp)
  801b68:	e0bffa17 	ldw	r2,-24(fp)
  801b6c:	10800817 	ldw	r2,32(r2)
  801b70:	d8800115 	stw	r2,4(sp)
  801b74:	e0bffc17 	ldw	r2,-16(fp)
  801b78:	d8800215 	stw	r2,8(sp)
  801b7c:	e13ffb17 	ldw	r4,-20(fp)
  801b80:	800b883a 	mov	r5,r16
  801b84:	880d883a 	mov	r6,r17
  801b88:	900f883a 	mov	r7,r18
  801b8c:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			ship->matrix_location[4][0], ship->matrix_location[4][1], 
			ship->matrix_location[5][0], ship->matrix_location[5][1], 
			ship->color[1], buf);
}
  801b90:	dfc00a17 	ldw	ra,40(sp)
  801b94:	df000917 	ldw	fp,36(sp)
  801b98:	dc000817 	ldw	r16,32(sp)
  801b9c:	dc400717 	ldw	r17,28(sp)
  801ba0:	dc800617 	ldw	r18,24(sp)
  801ba4:	dec00b04 	addi	sp,sp,44
  801ba8:	f800283a 	ret

00801bac <clean_ship>:

/*---------------------------------------------------------------------------------------------
 * (function: clean_ship)
 *-------------------------------------------------------------------------------------------*/
void clean_ship(ship_t *ship, alt_up_pixel_buffer_dev *pixel_buffer, int buf)
{
  801bac:	defff504 	addi	sp,sp,-44
  801bb0:	dfc00a15 	stw	ra,40(sp)
  801bb4:	df000915 	stw	fp,36(sp)
  801bb8:	dc000815 	stw	r16,32(sp)
  801bbc:	dc400715 	stw	r17,28(sp)
  801bc0:	dc800615 	stw	r18,24(sp)
  801bc4:	df000904 	addi	fp,sp,36
  801bc8:	e13ffa15 	stw	r4,-24(fp)
  801bcc:	e17ffb15 	stw	r5,-20(fp)
  801bd0:	e1bffc15 	stw	r6,-16(fp)
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  801bd4:	e0bffa17 	ldw	r2,-24(fp)
  801bd8:	10800417 	ldw	r2,16(r2)
  801bdc:	10800017 	ldw	r2,0(r2)
  801be0:	11000017 	ldw	r4,0(r2)
  801be4:	080ad2c0 	call	80ad2c <__fixsfsi>
  801be8:	1021883a 	mov	r16,r2
  801bec:	e0bffa17 	ldw	r2,-24(fp)
  801bf0:	10800417 	ldw	r2,16(r2)
  801bf4:	10800017 	ldw	r2,0(r2)
  801bf8:	10800104 	addi	r2,r2,4
  801bfc:	11000017 	ldw	r4,0(r2)
  801c00:	080ad2c0 	call	80ad2c <__fixsfsi>
  801c04:	1023883a 	mov	r17,r2
  801c08:	e0bffa17 	ldw	r2,-24(fp)
  801c0c:	10800417 	ldw	r2,16(r2)
  801c10:	10800104 	addi	r2,r2,4
  801c14:	10800017 	ldw	r2,0(r2)
  801c18:	11000017 	ldw	r4,0(r2)
  801c1c:	080ad2c0 	call	80ad2c <__fixsfsi>
  801c20:	1025883a 	mov	r18,r2
  801c24:	e0bffa17 	ldw	r2,-24(fp)
  801c28:	10800417 	ldw	r2,16(r2)
  801c2c:	10800104 	addi	r2,r2,4
  801c30:	10800017 	ldw	r2,0(r2)
  801c34:	10800104 	addi	r2,r2,4
  801c38:	11000017 	ldw	r4,0(r2)
  801c3c:	080ad2c0 	call	80ad2c <__fixsfsi>
  801c40:	d8800015 	stw	r2,0(sp)
  801c44:	d8000115 	stw	zero,4(sp)
  801c48:	e0bffc17 	ldw	r2,-16(fp)
  801c4c:	d8800215 	stw	r2,8(sp)
  801c50:	e13ffb17 	ldw	r4,-20(fp)
  801c54:	800b883a 	mov	r5,r16
  801c58:	880d883a 	mov	r6,r17
  801c5c:	900f883a 	mov	r7,r18
  801c60:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			ship->matrix_location[0][0], ship->matrix_location[0][1], 
			ship->matrix_location[1][0], ship->matrix_location[1][1], 
			0x0000, buf);
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  801c64:	e0bffa17 	ldw	r2,-24(fp)
  801c68:	10800417 	ldw	r2,16(r2)
  801c6c:	10800104 	addi	r2,r2,4
  801c70:	10800017 	ldw	r2,0(r2)
  801c74:	11000017 	ldw	r4,0(r2)
  801c78:	080ad2c0 	call	80ad2c <__fixsfsi>
  801c7c:	1021883a 	mov	r16,r2
  801c80:	e0bffa17 	ldw	r2,-24(fp)
  801c84:	10800417 	ldw	r2,16(r2)
  801c88:	10800104 	addi	r2,r2,4
  801c8c:	10800017 	ldw	r2,0(r2)
  801c90:	10800104 	addi	r2,r2,4
  801c94:	11000017 	ldw	r4,0(r2)
  801c98:	080ad2c0 	call	80ad2c <__fixsfsi>
  801c9c:	1023883a 	mov	r17,r2
  801ca0:	e0bffa17 	ldw	r2,-24(fp)
  801ca4:	10800417 	ldw	r2,16(r2)
  801ca8:	10800204 	addi	r2,r2,8
  801cac:	10800017 	ldw	r2,0(r2)
  801cb0:	11000017 	ldw	r4,0(r2)
  801cb4:	080ad2c0 	call	80ad2c <__fixsfsi>
  801cb8:	1025883a 	mov	r18,r2
  801cbc:	e0bffa17 	ldw	r2,-24(fp)
  801cc0:	10800417 	ldw	r2,16(r2)
  801cc4:	10800204 	addi	r2,r2,8
  801cc8:	10800017 	ldw	r2,0(r2)
  801ccc:	10800104 	addi	r2,r2,4
  801cd0:	11000017 	ldw	r4,0(r2)
  801cd4:	080ad2c0 	call	80ad2c <__fixsfsi>
  801cd8:	d8800015 	stw	r2,0(sp)
  801cdc:	d8000115 	stw	zero,4(sp)
  801ce0:	e0bffc17 	ldw	r2,-16(fp)
  801ce4:	d8800215 	stw	r2,8(sp)
  801ce8:	e13ffb17 	ldw	r4,-20(fp)
  801cec:	800b883a 	mov	r5,r16
  801cf0:	880d883a 	mov	r6,r17
  801cf4:	900f883a 	mov	r7,r18
  801cf8:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			ship->matrix_location[1][0], ship->matrix_location[1][1], 
			ship->matrix_location[2][0], ship->matrix_location[2][1], 
			0x0000, buf);
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  801cfc:	e0bffa17 	ldw	r2,-24(fp)
  801d00:	10800417 	ldw	r2,16(r2)
  801d04:	10800204 	addi	r2,r2,8
  801d08:	10800017 	ldw	r2,0(r2)
  801d0c:	11000017 	ldw	r4,0(r2)
  801d10:	080ad2c0 	call	80ad2c <__fixsfsi>
  801d14:	1021883a 	mov	r16,r2
  801d18:	e0bffa17 	ldw	r2,-24(fp)
  801d1c:	10800417 	ldw	r2,16(r2)
  801d20:	10800204 	addi	r2,r2,8
  801d24:	10800017 	ldw	r2,0(r2)
  801d28:	10800104 	addi	r2,r2,4
  801d2c:	11000017 	ldw	r4,0(r2)
  801d30:	080ad2c0 	call	80ad2c <__fixsfsi>
  801d34:	1023883a 	mov	r17,r2
  801d38:	e0bffa17 	ldw	r2,-24(fp)
  801d3c:	10800417 	ldw	r2,16(r2)
  801d40:	10800304 	addi	r2,r2,12
  801d44:	10800017 	ldw	r2,0(r2)
  801d48:	11000017 	ldw	r4,0(r2)
  801d4c:	080ad2c0 	call	80ad2c <__fixsfsi>
  801d50:	1025883a 	mov	r18,r2
  801d54:	e0bffa17 	ldw	r2,-24(fp)
  801d58:	10800417 	ldw	r2,16(r2)
  801d5c:	10800304 	addi	r2,r2,12
  801d60:	10800017 	ldw	r2,0(r2)
  801d64:	10800104 	addi	r2,r2,4
  801d68:	11000017 	ldw	r4,0(r2)
  801d6c:	080ad2c0 	call	80ad2c <__fixsfsi>
  801d70:	d8800015 	stw	r2,0(sp)
  801d74:	d8000115 	stw	zero,4(sp)
  801d78:	e0bffc17 	ldw	r2,-16(fp)
  801d7c:	d8800215 	stw	r2,8(sp)
  801d80:	e13ffb17 	ldw	r4,-20(fp)
  801d84:	800b883a 	mov	r5,r16
  801d88:	880d883a 	mov	r6,r17
  801d8c:	900f883a 	mov	r7,r18
  801d90:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			ship->matrix_location[2][0], ship->matrix_location[2][1], 
			ship->matrix_location[3][0], ship->matrix_location[3][1], 
			0x0000, buf);
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  801d94:	e0bffa17 	ldw	r2,-24(fp)
  801d98:	10800417 	ldw	r2,16(r2)
  801d9c:	10800304 	addi	r2,r2,12
  801da0:	10800017 	ldw	r2,0(r2)
  801da4:	11000017 	ldw	r4,0(r2)
  801da8:	080ad2c0 	call	80ad2c <__fixsfsi>
  801dac:	1021883a 	mov	r16,r2
  801db0:	e0bffa17 	ldw	r2,-24(fp)
  801db4:	10800417 	ldw	r2,16(r2)
  801db8:	10800304 	addi	r2,r2,12
  801dbc:	10800017 	ldw	r2,0(r2)
  801dc0:	10800104 	addi	r2,r2,4
  801dc4:	11000017 	ldw	r4,0(r2)
  801dc8:	080ad2c0 	call	80ad2c <__fixsfsi>
  801dcc:	1023883a 	mov	r17,r2
  801dd0:	e0bffa17 	ldw	r2,-24(fp)
  801dd4:	10800417 	ldw	r2,16(r2)
  801dd8:	10800017 	ldw	r2,0(r2)
  801ddc:	11000017 	ldw	r4,0(r2)
  801de0:	080ad2c0 	call	80ad2c <__fixsfsi>
  801de4:	1025883a 	mov	r18,r2
  801de8:	e0bffa17 	ldw	r2,-24(fp)
  801dec:	10800417 	ldw	r2,16(r2)
  801df0:	10800017 	ldw	r2,0(r2)
  801df4:	10800104 	addi	r2,r2,4
  801df8:	11000017 	ldw	r4,0(r2)
  801dfc:	080ad2c0 	call	80ad2c <__fixsfsi>
  801e00:	d8800015 	stw	r2,0(sp)
  801e04:	d8000115 	stw	zero,4(sp)
  801e08:	e0bffc17 	ldw	r2,-16(fp)
  801e0c:	d8800215 	stw	r2,8(sp)
  801e10:	e13ffb17 	ldw	r4,-20(fp)
  801e14:	800b883a 	mov	r5,r16
  801e18:	880d883a 	mov	r6,r17
  801e1c:	900f883a 	mov	r7,r18
  801e20:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			ship->matrix_location[3][0], ship->matrix_location[3][1], 
			ship->matrix_location[0][0], ship->matrix_location[0][1], 
			0x0000, buf);
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  801e24:	e0bffa17 	ldw	r2,-24(fp)
  801e28:	10800417 	ldw	r2,16(r2)
  801e2c:	10800404 	addi	r2,r2,16
  801e30:	10800017 	ldw	r2,0(r2)
  801e34:	11000017 	ldw	r4,0(r2)
  801e38:	080ad2c0 	call	80ad2c <__fixsfsi>
  801e3c:	1021883a 	mov	r16,r2
  801e40:	e0bffa17 	ldw	r2,-24(fp)
  801e44:	10800417 	ldw	r2,16(r2)
  801e48:	10800404 	addi	r2,r2,16
  801e4c:	10800017 	ldw	r2,0(r2)
  801e50:	10800104 	addi	r2,r2,4
  801e54:	11000017 	ldw	r4,0(r2)
  801e58:	080ad2c0 	call	80ad2c <__fixsfsi>
  801e5c:	1023883a 	mov	r17,r2
  801e60:	e0bffa17 	ldw	r2,-24(fp)
  801e64:	10800417 	ldw	r2,16(r2)
  801e68:	10800504 	addi	r2,r2,20
  801e6c:	10800017 	ldw	r2,0(r2)
  801e70:	11000017 	ldw	r4,0(r2)
  801e74:	080ad2c0 	call	80ad2c <__fixsfsi>
  801e78:	1025883a 	mov	r18,r2
  801e7c:	e0bffa17 	ldw	r2,-24(fp)
  801e80:	10800417 	ldw	r2,16(r2)
  801e84:	10800504 	addi	r2,r2,20
  801e88:	10800017 	ldw	r2,0(r2)
  801e8c:	10800104 	addi	r2,r2,4
  801e90:	11000017 	ldw	r4,0(r2)
  801e94:	080ad2c0 	call	80ad2c <__fixsfsi>
  801e98:	d8800015 	stw	r2,0(sp)
  801e9c:	d8000115 	stw	zero,4(sp)
  801ea0:	e0bffc17 	ldw	r2,-16(fp)
  801ea4:	d8800215 	stw	r2,8(sp)
  801ea8:	e13ffb17 	ldw	r4,-20(fp)
  801eac:	800b883a 	mov	r5,r16
  801eb0:	880d883a 	mov	r6,r17
  801eb4:	900f883a 	mov	r7,r18
  801eb8:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			ship->matrix_location[4][0], ship->matrix_location[4][1], 
			ship->matrix_location[5][0], ship->matrix_location[5][1], 
			0x0000, buf);
}
  801ebc:	dfc00a17 	ldw	ra,40(sp)
  801ec0:	df000917 	ldw	fp,36(sp)
  801ec4:	dc000817 	ldw	r16,32(sp)
  801ec8:	dc400717 	ldw	r17,28(sp)
  801ecc:	dc800617 	ldw	r18,24(sp)
  801ed0:	dec00b04 	addi	sp,sp,44
  801ed4:	f800283a 	ret

00801ed8 <init_draw>:

/*---------------------------------------------------------------------------------------------
 * (function: init_draw)
 *-------------------------------------------------------------------------------------------*/
void init_draw()
{
  801ed8:	defffe04 	addi	sp,sp,-8
  801edc:	dfc00115 	stw	ra,4(sp)
  801ee0:	df000015 	stw	fp,0(sp)
  801ee4:	d839883a 	mov	fp,sp
	translate_matrix = allocate_matrix(3, 3);
  801ee8:	010000c4 	movi	r4,3
  801eec:	014000c4 	movi	r5,3
  801ef0:	08023840 	call	802384 <allocate_matrix>
  801ef4:	d0a01e15 	stw	r2,-32648(gp)
	translate_matrix[0][0] = 1.0;
  801ef8:	d0a01e17 	ldw	r2,-32648(gp)
  801efc:	10c00017 	ldw	r3,0(r2)
  801f00:	008fe034 	movhi	r2,16256
  801f04:	10800004 	addi	r2,r2,0
  801f08:	18800015 	stw	r2,0(r3)
	translate_matrix[1][1] = 1.0;
  801f0c:	d0a01e17 	ldw	r2,-32648(gp)
  801f10:	10800104 	addi	r2,r2,4
  801f14:	10800017 	ldw	r2,0(r2)
  801f18:	10c00104 	addi	r3,r2,4
  801f1c:	008fe034 	movhi	r2,16256
  801f20:	10800004 	addi	r2,r2,0
  801f24:	18800015 	stw	r2,0(r3)
	translate_matrix[2][2] = 1.0;
  801f28:	d0a01e17 	ldw	r2,-32648(gp)
  801f2c:	10800204 	addi	r2,r2,8
  801f30:	10800017 	ldw	r2,0(r2)
  801f34:	10c00204 	addi	r3,r2,8
  801f38:	008fe034 	movhi	r2,16256
  801f3c:	10800004 	addi	r2,r2,0
  801f40:	18800015 	stw	r2,0(r3)

	rotate_matrix = allocate_matrix(3, 3);
  801f44:	010000c4 	movi	r4,3
  801f48:	014000c4 	movi	r5,3
  801f4c:	08023840 	call	802384 <allocate_matrix>
  801f50:	d0a01f15 	stw	r2,-32644(gp)
	rotate_matrix[2][2] = 1.0;
  801f54:	d0a01f17 	ldw	r2,-32644(gp)
  801f58:	10800204 	addi	r2,r2,8
  801f5c:	10800017 	ldw	r2,0(r2)
  801f60:	10c00204 	addi	r3,r2,8
  801f64:	008fe034 	movhi	r2,16256
  801f68:	10800004 	addi	r2,r2,0
  801f6c:	18800015 	stw	r2,0(r3)
}
  801f70:	dfc00117 	ldw	ra,4(sp)
  801f74:	df000017 	ldw	fp,0(sp)
  801f78:	dec00204 	addi	sp,sp,8
  801f7c:	f800283a 	ret

00801f80 <translate_a_matrix>:

/*---------------------------------------------------------------------------------------------
 * (function: translate_matrix)
 *-------------------------------------------------------------------------------------------*/
void translate_a_matrix(float **matrix, int row, int column, int x, int y)
{
  801f80:	defff604 	addi	sp,sp,-40
  801f84:	dfc00915 	stw	ra,36(sp)
  801f88:	df000815 	stw	fp,32(sp)
  801f8c:	dc000715 	stw	r16,28(sp)
  801f90:	df000804 	addi	fp,sp,32
  801f94:	e13ffa15 	stw	r4,-24(fp)
  801f98:	e17ffb15 	stw	r5,-20(fp)
  801f9c:	e1bffc15 	stw	r6,-16(fp)
  801fa0:	e1fffd15 	stw	r7,-12(fp)
	float **temp_matrix;

	/* update the translate matrix with x and y */
	translate_matrix[2][0] = (float)x;
  801fa4:	d0a01e17 	ldw	r2,-32648(gp)
  801fa8:	10800204 	addi	r2,r2,8
  801fac:	14000017 	ldw	r16,0(r2)
  801fb0:	e13ffd17 	ldw	r4,-12(fp)
  801fb4:	080ac940 	call	80ac94 <__floatsisf>
  801fb8:	80800015 	stw	r2,0(r16)
	translate_matrix[2][1] = (float)y;
  801fbc:	d0a01e17 	ldw	r2,-32648(gp)
  801fc0:	10800204 	addi	r2,r2,8
  801fc4:	10800017 	ldw	r2,0(r2)
  801fc8:	14000104 	addi	r16,r2,4
  801fcc:	e1000217 	ldw	r4,8(fp)
  801fd0:	080ac940 	call	80ac94 <__floatsisf>
  801fd4:	80800015 	stw	r2,0(r16)

	/* translate */
	temp_matrix = matrix_mult(translate_matrix, 3, 3, matrix, row, column);
  801fd8:	e0bffb17 	ldw	r2,-20(fp)
  801fdc:	d8800015 	stw	r2,0(sp)
  801fe0:	e0bffc17 	ldw	r2,-16(fp)
  801fe4:	d8800115 	stw	r2,4(sp)
  801fe8:	d1201e17 	ldw	r4,-32648(gp)
  801fec:	014000c4 	movi	r5,3
  801ff0:	018000c4 	movi	r6,3
  801ff4:	e1fffa17 	ldw	r7,-24(fp)
  801ff8:	08024740 	call	802474 <matrix_mult>
  801ffc:	e0bffe15 	stw	r2,-8(fp)
	/* copy the return values into the data structure */
	copy_matrix_and_round(temp_matrix, row, column, matrix);
  802000:	e13ffe17 	ldw	r4,-8(fp)
  802004:	e17ffb17 	ldw	r5,-20(fp)
  802008:	e1bffc17 	ldw	r6,-16(fp)
  80200c:	e1fffa17 	ldw	r7,-24(fp)
  802010:	08022140 	call	802214 <copy_matrix_and_round>
	/* delete the temp_matrix */
	free_matrix(temp_matrix, row, column);
  802014:	e13ffe17 	ldw	r4,-8(fp)
  802018:	e17ffb17 	ldw	r5,-20(fp)
  80201c:	e1bffc17 	ldw	r6,-16(fp)
  802020:	08024080 	call	802408 <free_matrix>
}
  802024:	dfc00917 	ldw	ra,36(sp)
  802028:	df000817 	ldw	fp,32(sp)
  80202c:	dc000717 	ldw	r16,28(sp)
  802030:	dec00a04 	addi	sp,sp,40
  802034:	f800283a 	ret

00802038 <rotate_a_matrix>:

/*---------------------------------------------------------------------------------------------
 * (function: rotate_a_matrix)
 *-------------------------------------------------------------------------------------------*/
void rotate_a_matrix(float **matrix, int row, int column, int angle)
{
  802038:	defff604 	addi	sp,sp,-40
  80203c:	dfc00915 	stw	ra,36(sp)
  802040:	df000815 	stw	fp,32(sp)
  802044:	dc000715 	stw	r16,28(sp)
  802048:	df000804 	addi	fp,sp,32
  80204c:	e13ffa15 	stw	r4,-24(fp)
  802050:	e17ffb15 	stw	r5,-20(fp)
  802054:	e1bffc15 	stw	r6,-16(fp)
  802058:	e1fffd15 	stw	r7,-12(fp)
	float **temp_matrix;

	/* calculate cos of the angle */
	rotate_matrix[0][0] = cos(angle*PI/180);
  80205c:	d0a01f17 	ldw	r2,-32644(gp)
  802060:	14000017 	ldw	r16,0(r2)
  802064:	e13ffd17 	ldw	r4,-12(fp)
  802068:	080bb280 	call	80bb28 <__floatsidf>
  80206c:	100b883a 	mov	r5,r2
  802070:	180d883a 	mov	r6,r3
  802074:	2809883a 	mov	r4,r5
  802078:	300b883a 	mov	r5,r6
  80207c:	0194f274 	movhi	r6,21449
  802080:	31b53c44 	addi	r6,r6,-11023
  802084:	01d00274 	movhi	r7,16393
  802088:	39c87ec4 	addi	r7,r7,8699
  80208c:	080b21c0 	call	80b21c <__muldf3>
  802090:	100b883a 	mov	r5,r2
  802094:	180d883a 	mov	r6,r3
  802098:	2809883a 	mov	r4,r5
  80209c:	300b883a 	mov	r5,r6
  8020a0:	000d883a 	mov	r6,zero
  8020a4:	01d019f4 	movhi	r7,16487
  8020a8:	39e00004 	addi	r7,r7,-32768
  8020ac:	080b61c0 	call	80b61c <__divdf3>
  8020b0:	100b883a 	mov	r5,r2
  8020b4:	180d883a 	mov	r6,r3
  8020b8:	2809883a 	mov	r4,r5
  8020bc:	300b883a 	mov	r5,r6
  8020c0:	0807a1c0 	call	807a1c <cos>
  8020c4:	1009883a 	mov	r4,r2
  8020c8:	180b883a 	mov	r5,r3
  8020cc:	2005883a 	mov	r2,r4
  8020d0:	2807883a 	mov	r3,r5
  8020d4:	1009883a 	mov	r4,r2
  8020d8:	180b883a 	mov	r5,r3
  8020dc:	080bce80 	call	80bce8 <__truncdfsf2>
  8020e0:	80800015 	stw	r2,0(r16)
	rotate_matrix[1][1] = rotate_matrix[0][0];
  8020e4:	d0a01f17 	ldw	r2,-32644(gp)
  8020e8:	10800104 	addi	r2,r2,4
  8020ec:	10800017 	ldw	r2,0(r2)
  8020f0:	10c00104 	addi	r3,r2,4
  8020f4:	d0a01f17 	ldw	r2,-32644(gp)
  8020f8:	10800017 	ldw	r2,0(r2)
  8020fc:	10800017 	ldw	r2,0(r2)
  802100:	18800015 	stw	r2,0(r3)
	/* calculate sin of the angle */
	rotate_matrix[0][1] = sin(angle*PI/180);
  802104:	d0a01f17 	ldw	r2,-32644(gp)
  802108:	10800017 	ldw	r2,0(r2)
  80210c:	14000104 	addi	r16,r2,4
  802110:	e13ffd17 	ldw	r4,-12(fp)
  802114:	080bb280 	call	80bb28 <__floatsidf>
  802118:	100b883a 	mov	r5,r2
  80211c:	180d883a 	mov	r6,r3
  802120:	2809883a 	mov	r4,r5
  802124:	300b883a 	mov	r5,r6
  802128:	0194f274 	movhi	r6,21449
  80212c:	31b53c44 	addi	r6,r6,-11023
  802130:	01d00274 	movhi	r7,16393
  802134:	39c87ec4 	addi	r7,r7,8699
  802138:	080b21c0 	call	80b21c <__muldf3>
  80213c:	100b883a 	mov	r5,r2
  802140:	180d883a 	mov	r6,r3
  802144:	2809883a 	mov	r4,r5
  802148:	300b883a 	mov	r5,r6
  80214c:	000d883a 	mov	r6,zero
  802150:	01d019f4 	movhi	r7,16487
  802154:	39e00004 	addi	r7,r7,-32768
  802158:	080b61c0 	call	80b61c <__divdf3>
  80215c:	100b883a 	mov	r5,r2
  802160:	180d883a 	mov	r6,r3
  802164:	2809883a 	mov	r4,r5
  802168:	300b883a 	mov	r5,r6
  80216c:	0807b8c0 	call	807b8c <sin>
  802170:	1009883a 	mov	r4,r2
  802174:	180b883a 	mov	r5,r3
  802178:	2005883a 	mov	r2,r4
  80217c:	2807883a 	mov	r3,r5
  802180:	1009883a 	mov	r4,r2
  802184:	180b883a 	mov	r5,r3
  802188:	080bce80 	call	80bce8 <__truncdfsf2>
  80218c:	80800015 	stw	r2,0(r16)
	rotate_matrix[1][0] = -rotate_matrix[0][1];
  802190:	d0a01f17 	ldw	r2,-32644(gp)
  802194:	10800104 	addi	r2,r2,4
  802198:	10c00017 	ldw	r3,0(r2)
  80219c:	d0a01f17 	ldw	r2,-32644(gp)
  8021a0:	10800017 	ldw	r2,0(r2)
  8021a4:	10800104 	addi	r2,r2,4
  8021a8:	10800017 	ldw	r2,0(r2)
  8021ac:	10a0003c 	xorhi	r2,r2,32768
  8021b0:	18800015 	stw	r2,0(r3)

	/* rotate */
	temp_matrix = matrix_mult(rotate_matrix, 3, 3, matrix, row, column);
  8021b4:	e0bffb17 	ldw	r2,-20(fp)
  8021b8:	d8800015 	stw	r2,0(sp)
  8021bc:	e0bffc17 	ldw	r2,-16(fp)
  8021c0:	d8800115 	stw	r2,4(sp)
  8021c4:	d1201f17 	ldw	r4,-32644(gp)
  8021c8:	014000c4 	movi	r5,3
  8021cc:	018000c4 	movi	r6,3
  8021d0:	e1fffa17 	ldw	r7,-24(fp)
  8021d4:	08024740 	call	802474 <matrix_mult>
  8021d8:	e0bffe15 	stw	r2,-8(fp)
	/* copy the return values into the data structure */
	copy_matrix_and_round(temp_matrix, row, column, matrix);
  8021dc:	e13ffe17 	ldw	r4,-8(fp)
  8021e0:	e17ffb17 	ldw	r5,-20(fp)
  8021e4:	e1bffc17 	ldw	r6,-16(fp)
  8021e8:	e1fffa17 	ldw	r7,-24(fp)
  8021ec:	08022140 	call	802214 <copy_matrix_and_round>
	/* delete the temp_matrix */
	free_matrix(temp_matrix, row, column);
  8021f0:	e13ffe17 	ldw	r4,-8(fp)
  8021f4:	e17ffb17 	ldw	r5,-20(fp)
  8021f8:	e1bffc17 	ldw	r6,-16(fp)
  8021fc:	08024080 	call	802408 <free_matrix>
}
  802200:	dfc00917 	ldw	ra,36(sp)
  802204:	df000817 	ldw	fp,32(sp)
  802208:	dc000717 	ldw	r16,28(sp)
  80220c:	dec00a04 	addi	sp,sp,40
  802210:	f800283a 	ret

00802214 <copy_matrix_and_round>:

/*---------------------------------------------------------------------------------------------
 * (function: copy_matrix_and_round)
 *-------------------------------------------------------------------------------------------*/
void copy_matrix_and_round(float **from, int row1, int column1, float **to)
{
  802214:	defff804 	addi	sp,sp,-32
  802218:	dfc00715 	stw	ra,28(sp)
  80221c:	df000615 	stw	fp,24(sp)
  802220:	df000604 	addi	fp,sp,24
  802224:	e13ffa15 	stw	r4,-24(fp)
  802228:	e17ffb15 	stw	r5,-20(fp)
  80222c:	e1bffc15 	stw	r6,-16(fp)
  802230:	e1fffd15 	stw	r7,-12(fp)
	int i, j;

	for (i = 0; i < column1; i++)
  802234:	e03ffe15 	stw	zero,-8(fp)
  802238:	e0fffe17 	ldw	r3,-8(fp)
  80223c:	e0bffc17 	ldw	r2,-16(fp)
  802240:	1880200e 	bge	r3,r2,8022c4 <copy_matrix_and_round+0xb0>
	{
		for (j = 0; j < row1; j++)
  802244:	e03fff15 	stw	zero,-4(fp)
  802248:	e0ffff17 	ldw	r3,-4(fp)
  80224c:	e0bffb17 	ldw	r2,-20(fp)
  802250:	1880180e 	bge	r3,r2,8022b4 <copy_matrix_and_round+0xa0>
		{
			to[i][j] = (float)roundf(from[i][j]);
  802254:	e0bffe17 	ldw	r2,-8(fp)
  802258:	10c00124 	muli	r3,r2,4
  80225c:	e0bffa17 	ldw	r2,-24(fp)
  802260:	1889883a 	add	r4,r3,r2
  802264:	e0bfff17 	ldw	r2,-4(fp)
  802268:	10c00124 	muli	r3,r2,4
  80226c:	20800017 	ldw	r2,0(r4)
  802270:	1885883a 	add	r2,r3,r2
  802274:	11000017 	ldw	r4,0(r2)
  802278:	0807cfc0 	call	807cfc <roundf>
  80227c:	100b883a 	mov	r5,r2
  802280:	e0bffe17 	ldw	r2,-8(fp)
  802284:	10c00124 	muli	r3,r2,4
  802288:	e0bffd17 	ldw	r2,-12(fp)
  80228c:	1889883a 	add	r4,r3,r2
  802290:	e0bfff17 	ldw	r2,-4(fp)
  802294:	10c00124 	muli	r3,r2,4
  802298:	20800017 	ldw	r2,0(r4)
  80229c:	1885883a 	add	r2,r3,r2
  8022a0:	11400015 	stw	r5,0(r2)
  8022a4:	e0bfff17 	ldw	r2,-4(fp)
  8022a8:	10800044 	addi	r2,r2,1
  8022ac:	e0bfff15 	stw	r2,-4(fp)
  8022b0:	003fe506 	br	802248 <copy_matrix_and_round+0x34>
  8022b4:	e0bffe17 	ldw	r2,-8(fp)
  8022b8:	10800044 	addi	r2,r2,1
  8022bc:	e0bffe15 	stw	r2,-8(fp)
  8022c0:	003fdd06 	br	802238 <copy_matrix_and_round+0x24>
		}
	}
}
  8022c4:	dfc00717 	ldw	ra,28(sp)
  8022c8:	df000617 	ldw	fp,24(sp)
  8022cc:	dec00804 	addi	sp,sp,32
  8022d0:	f800283a 	ret

008022d4 <copy_matrix>:

/*---------------------------------------------------------------------------------------------
 * (function: copy_matrix_and_round)
 *-------------------------------------------------------------------------------------------*/
void copy_matrix(float **from, int row1, int column1, float **to)
{
  8022d4:	defff904 	addi	sp,sp,-28
  8022d8:	df000615 	stw	fp,24(sp)
  8022dc:	df000604 	addi	fp,sp,24
  8022e0:	e13ffa15 	stw	r4,-24(fp)
  8022e4:	e17ffb15 	stw	r5,-20(fp)
  8022e8:	e1bffc15 	stw	r6,-16(fp)
  8022ec:	e1fffd15 	stw	r7,-12(fp)
	int i, j;

	for (i = 0; i < column1; i++)
  8022f0:	e03ffe15 	stw	zero,-8(fp)
  8022f4:	e0fffe17 	ldw	r3,-8(fp)
  8022f8:	e0bffc17 	ldw	r2,-16(fp)
  8022fc:	18801e0e 	bge	r3,r2,802378 <copy_matrix+0xa4>
	{
		for (j = 0; j < row1; j++)
  802300:	e03fff15 	stw	zero,-4(fp)
  802304:	e0ffff17 	ldw	r3,-4(fp)
  802308:	e0bffb17 	ldw	r2,-20(fp)
  80230c:	1880160e 	bge	r3,r2,802368 <copy_matrix+0x94>
		{
			to[i][j] = from[i][j];
  802310:	e0bffe17 	ldw	r2,-8(fp)
  802314:	10c00124 	muli	r3,r2,4
  802318:	e0bffd17 	ldw	r2,-12(fp)
  80231c:	1889883a 	add	r4,r3,r2
  802320:	e0bfff17 	ldw	r2,-4(fp)
  802324:	10c00124 	muli	r3,r2,4
  802328:	20800017 	ldw	r2,0(r4)
  80232c:	188b883a 	add	r5,r3,r2
  802330:	e0bffe17 	ldw	r2,-8(fp)
  802334:	10c00124 	muli	r3,r2,4
  802338:	e0bffa17 	ldw	r2,-24(fp)
  80233c:	1889883a 	add	r4,r3,r2
  802340:	e0bfff17 	ldw	r2,-4(fp)
  802344:	10c00124 	muli	r3,r2,4
  802348:	20800017 	ldw	r2,0(r4)
  80234c:	1885883a 	add	r2,r3,r2
  802350:	10800017 	ldw	r2,0(r2)
  802354:	28800015 	stw	r2,0(r5)
  802358:	e0bfff17 	ldw	r2,-4(fp)
  80235c:	10800044 	addi	r2,r2,1
  802360:	e0bfff15 	stw	r2,-4(fp)
  802364:	003fe706 	br	802304 <copy_matrix+0x30>
  802368:	e0bffe17 	ldw	r2,-8(fp)
  80236c:	10800044 	addi	r2,r2,1
  802370:	e0bffe15 	stw	r2,-8(fp)
  802374:	003fdf06 	br	8022f4 <copy_matrix+0x20>
		}
	}
}
  802378:	df000617 	ldw	fp,24(sp)
  80237c:	dec00704 	addi	sp,sp,28
  802380:	f800283a 	ret

00802384 <allocate_matrix>:
/*---------------------------------------------------------------------------------------------
 * (function: allocate_matrix)
 *-------------------------------------------------------------------------------------------*/
float **allocate_matrix(int row1, int column1)
{
  802384:	defff904 	addi	sp,sp,-28
  802388:	dfc00615 	stw	ra,24(sp)
  80238c:	df000515 	stw	fp,20(sp)
  802390:	dc000415 	stw	r16,16(sp)
  802394:	df000504 	addi	fp,sp,20
  802398:	e13ffb15 	stw	r4,-20(fp)
  80239c:	e17ffc15 	stw	r5,-16(fp)
	int i;
	float **matrix;

	matrix = (float**)malloc(sizeof(float*)*column1);
  8023a0:	e0bffc17 	ldw	r2,-16(fp)
  8023a4:	11000124 	muli	r4,r2,4
  8023a8:	080cf7c0 	call	80cf7c <malloc>
  8023ac:	e0bffe15 	stw	r2,-8(fp)
	for (i = 0; i < column1; i++)
  8023b0:	e03ffd15 	stw	zero,-12(fp)
  8023b4:	e0fffd17 	ldw	r3,-12(fp)
  8023b8:	e0bffc17 	ldw	r2,-16(fp)
  8023bc:	18800c0e 	bge	r3,r2,8023f0 <allocate_matrix+0x6c>
	{
		matrix[i] = (float*)calloc(sizeof(float),row1);
  8023c0:	e0bffd17 	ldw	r2,-12(fp)
  8023c4:	10c00124 	muli	r3,r2,4
  8023c8:	e0bffe17 	ldw	r2,-8(fp)
  8023cc:	18a1883a 	add	r16,r3,r2
  8023d0:	01000104 	movi	r4,4
  8023d4:	e17ffb17 	ldw	r5,-20(fp)
  8023d8:	080c7980 	call	80c798 <calloc>
  8023dc:	80800015 	stw	r2,0(r16)
  8023e0:	e0bffd17 	ldw	r2,-12(fp)
  8023e4:	10800044 	addi	r2,r2,1
  8023e8:	e0bffd15 	stw	r2,-12(fp)
  8023ec:	003ff106 	br	8023b4 <allocate_matrix+0x30>
	}

	return matrix;
  8023f0:	e0bffe17 	ldw	r2,-8(fp)
}
  8023f4:	dfc00617 	ldw	ra,24(sp)
  8023f8:	df000517 	ldw	fp,20(sp)
  8023fc:	dc000417 	ldw	r16,16(sp)
  802400:	dec00704 	addi	sp,sp,28
  802404:	f800283a 	ret

00802408 <free_matrix>:

/*---------------------------------------------------------------------------------------------
 * (function: free_matrix)
 *-------------------------------------------------------------------------------------------*/
void free_matrix(float **matrix, int row1, int column1)
{
  802408:	defffa04 	addi	sp,sp,-24
  80240c:	dfc00515 	stw	ra,20(sp)
  802410:	df000415 	stw	fp,16(sp)
  802414:	df000404 	addi	fp,sp,16
  802418:	e13ffc15 	stw	r4,-16(fp)
  80241c:	e17ffd15 	stw	r5,-12(fp)
  802420:	e1bffe15 	stw	r6,-8(fp)
	int i;

	for (i = 0; i < row1; i++)
  802424:	e03fff15 	stw	zero,-4(fp)
  802428:	e0ffff17 	ldw	r3,-4(fp)
  80242c:	e0bffd17 	ldw	r2,-12(fp)
  802430:	18800a0e 	bge	r3,r2,80245c <free_matrix+0x54>
	{
		free(matrix[i]);
  802434:	e0bfff17 	ldw	r2,-4(fp)
  802438:	10c00124 	muli	r3,r2,4
  80243c:	e0bffc17 	ldw	r2,-16(fp)
  802440:	1885883a 	add	r2,r3,r2
  802444:	11000017 	ldw	r4,0(r2)
  802448:	080cf900 	call	80cf90 <free>
  80244c:	e0bfff17 	ldw	r2,-4(fp)
  802450:	10800044 	addi	r2,r2,1
  802454:	e0bfff15 	stw	r2,-4(fp)
  802458:	003ff306 	br	802428 <free_matrix+0x20>
	}
	free(matrix);
  80245c:	e13ffc17 	ldw	r4,-16(fp)
  802460:	080cf900 	call	80cf90 <free>
}
  802464:	dfc00517 	ldw	ra,20(sp)
  802468:	df000417 	ldw	fp,16(sp)
  80246c:	dec00604 	addi	sp,sp,24
  802470:	f800283a 	ret

00802474 <matrix_mult>:

/*---------------------------------------------------------------------------------------------
 * (function: matrix_mult)
 * [c][r] is the matrix ordering in 2d array
 * matrix 1       * matrix 2		=> matrix 3
 * 
 * c = 3, r = 4   * c = 4, r = 3   	=> c = c2(4), r = r1(4) 
 *
 * [a b c]	[1 2 3 4]		[a1+b5+c9 a2+b6+cm a3+b7+cn a4+b8+co]
 * [d e f]	[5 6 7 8]		[d1+e5+f9 d2+e6+fm d3+e7+fn d4+e8+fo]
 * [g h i]	[9 m n o]		[g1+h5+i9 g2+h6+im g3+h7+in g4+h8+io]
 * [j k l]				[j1+k5+l9 j2+k6+lm j3+k7+ln j4+k8+lo]
 *-------------------------------------------------------------------------------------------*/
float **matrix_mult(float **matrix1, int row1, int column1, float **matrix2, int row2, int column2)
{
  802474:	defff204 	addi	sp,sp,-56
  802478:	dfc00d15 	stw	ra,52(sp)
  80247c:	df000c15 	stw	fp,48(sp)
  802480:	dc000b15 	stw	r16,44(sp)
  802484:	dc400a15 	stw	r17,40(sp)
  802488:	df000c04 	addi	fp,sp,48
  80248c:	e13ff415 	stw	r4,-48(fp)
  802490:	e17ff515 	stw	r5,-44(fp)
  802494:	e1bff615 	stw	r6,-40(fp)
  802498:	e1fff715 	stw	r7,-36(fp)
	int c, r, i;
	int column3 = column2;
  80249c:	e0800317 	ldw	r2,12(fp)
  8024a0:	e0bffb15 	stw	r2,-20(fp)
	int row3 = row1;
  8024a4:	e0bff517 	ldw	r2,-44(fp)
  8024a8:	e0bffc15 	stw	r2,-16(fp)
	float **matrix3 = (float**)malloc(sizeof(float*)*column3);
  8024ac:	e0bffb17 	ldw	r2,-20(fp)
  8024b0:	11000124 	muli	r4,r2,4
  8024b4:	080cf7c0 	call	80cf7c <malloc>
  8024b8:	e0bffd15 	stw	r2,-12(fp)

	for (c = 0; c < column3; c++)
  8024bc:	e03ff815 	stw	zero,-32(fp)
  8024c0:	e0fff817 	ldw	r3,-32(fp)
  8024c4:	e0bffb17 	ldw	r2,-20(fp)
  8024c8:	18800c0e 	bge	r3,r2,8024fc <matrix_mult+0x88>
	{
		matrix3[c] = (float*)calloc(sizeof(float), row3);
  8024cc:	e0bff817 	ldw	r2,-32(fp)
  8024d0:	10c00124 	muli	r3,r2,4
  8024d4:	e0bffd17 	ldw	r2,-12(fp)
  8024d8:	18a1883a 	add	r16,r3,r2
  8024dc:	01000104 	movi	r4,4
  8024e0:	e17ffc17 	ldw	r5,-16(fp)
  8024e4:	080c7980 	call	80c798 <calloc>
  8024e8:	80800015 	stw	r2,0(r16)
  8024ec:	e0bff817 	ldw	r2,-32(fp)
  8024f0:	10800044 	addi	r2,r2,1
  8024f4:	e0bff815 	stw	r2,-32(fp)
  8024f8:	003ff106 	br	8024c0 <matrix_mult+0x4c>
	}

	for (c = 0; c < column3; c++)
  8024fc:	e03ff815 	stw	zero,-32(fp)
  802500:	e0fff817 	ldw	r3,-32(fp)
  802504:	e0bffb17 	ldw	r2,-20(fp)
  802508:	18803b0e 	bge	r3,r2,8025f8 <matrix_mult+0x184>
	{	
		for (r = 0; r < row3; r++)
  80250c:	e03ff915 	stw	zero,-28(fp)
  802510:	e0fff917 	ldw	r3,-28(fp)
  802514:	e0bffc17 	ldw	r2,-16(fp)
  802518:	1880330e 	bge	r3,r2,8025e8 <matrix_mult+0x174>
		{
			for (i = 0; i < column1; i++)
  80251c:	e03ffa15 	stw	zero,-24(fp)
  802520:	e0fffa17 	ldw	r3,-24(fp)
  802524:	e0bff617 	ldw	r2,-40(fp)
  802528:	18802b0e 	bge	r3,r2,8025d8 <matrix_mult+0x164>
			{
				matrix3[c][r] += matrix1[i][r] * matrix2[c][i];
  80252c:	e0bff817 	ldw	r2,-32(fp)
  802530:	10c00124 	muli	r3,r2,4
  802534:	e0bffd17 	ldw	r2,-12(fp)
  802538:	1889883a 	add	r4,r3,r2
  80253c:	e0bff917 	ldw	r2,-28(fp)
  802540:	10c00124 	muli	r3,r2,4
  802544:	20800017 	ldw	r2,0(r4)
  802548:	18a1883a 	add	r16,r3,r2
  80254c:	e0bff817 	ldw	r2,-32(fp)
  802550:	10c00124 	muli	r3,r2,4
  802554:	e0bffd17 	ldw	r2,-12(fp)
  802558:	1889883a 	add	r4,r3,r2
  80255c:	e0bff917 	ldw	r2,-28(fp)
  802560:	10c00124 	muli	r3,r2,4
  802564:	20800017 	ldw	r2,0(r4)
  802568:	18a3883a 	add	r17,r3,r2
  80256c:	e0bffa17 	ldw	r2,-24(fp)
  802570:	10c00124 	muli	r3,r2,4
  802574:	e0bff417 	ldw	r2,-48(fp)
  802578:	1889883a 	add	r4,r3,r2
  80257c:	e0bff917 	ldw	r2,-28(fp)
  802580:	10c00124 	muli	r3,r2,4
  802584:	20800017 	ldw	r2,0(r4)
  802588:	188b883a 	add	r5,r3,r2
  80258c:	e0bff817 	ldw	r2,-32(fp)
  802590:	10c00124 	muli	r3,r2,4
  802594:	e0bff717 	ldw	r2,-36(fp)
  802598:	1889883a 	add	r4,r3,r2
  80259c:	e0bffa17 	ldw	r2,-24(fp)
  8025a0:	10c00124 	muli	r3,r2,4
  8025a4:	20800017 	ldw	r2,0(r4)
  8025a8:	1885883a 	add	r2,r3,r2
  8025ac:	29000017 	ldw	r4,0(r5)
  8025b0:	11400017 	ldw	r5,0(r2)
  8025b4:	080a6980 	call	80a698 <__mulsf3>
  8025b8:	89000017 	ldw	r4,0(r17)
  8025bc:	100b883a 	mov	r5,r2
  8025c0:	080a5dc0 	call	80a5dc <__addsf3>
  8025c4:	80800015 	stw	r2,0(r16)
  8025c8:	e0bffa17 	ldw	r2,-24(fp)
  8025cc:	10800044 	addi	r2,r2,1
  8025d0:	e0bffa15 	stw	r2,-24(fp)
  8025d4:	003fd206 	br	802520 <matrix_mult+0xac>
  8025d8:	e0bff917 	ldw	r2,-28(fp)
  8025dc:	10800044 	addi	r2,r2,1
  8025e0:	e0bff915 	stw	r2,-28(fp)
  8025e4:	003fca06 	br	802510 <matrix_mult+0x9c>
  8025e8:	e0bff817 	ldw	r2,-32(fp)
  8025ec:	10800044 	addi	r2,r2,1
  8025f0:	e0bff815 	stw	r2,-32(fp)
  8025f4:	003fc206 	br	802500 <matrix_mult+0x8c>
			}
		}
	}

	return matrix3;
  8025f8:	e0bffd17 	ldw	r2,-12(fp)
}
  8025fc:	dfc00d17 	ldw	ra,52(sp)
  802600:	df000c17 	ldw	fp,48(sp)
  802604:	dc000b17 	ldw	r16,44(sp)
  802608:	dc400a17 	ldw	r17,40(sp)
  80260c:	dec00e04 	addi	sp,sp,56
  802610:	f800283a 	ret

00802614 <clean_sensor>:


/*---------------------------------------------------------------------------------------------
 * (function: clean_sensor)
 *-------------------------------------------------------------------------------------------*/
void clean_sensor(ship_t *ship, alt_up_pixel_buffer_dev *pixel_buffer, int buf)
{
  802614:	defff504 	addi	sp,sp,-44
  802618:	dfc00a15 	stw	ra,40(sp)
  80261c:	df000915 	stw	fp,36(sp)
  802620:	dc000815 	stw	r16,32(sp)
  802624:	dc400715 	stw	r17,28(sp)
  802628:	dc800615 	stw	r18,24(sp)
  80262c:	df000904 	addi	fp,sp,36
  802630:	e13ffa15 	stw	r4,-24(fp)
  802634:	e17ffb15 	stw	r5,-20(fp)
  802638:	e1bffc15 	stw	r6,-16(fp)
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  80263c:	e0bffa17 	ldw	r2,-24(fp)
  802640:	11001217 	ldw	r4,72(r2)
  802644:	0807cfc0 	call	807cfc <roundf>
  802648:	1009883a 	mov	r4,r2
  80264c:	080ad2c0 	call	80ad2c <__fixsfsi>
  802650:	1021883a 	mov	r16,r2
  802654:	e0bffa17 	ldw	r2,-24(fp)
  802658:	11001317 	ldw	r4,76(r2)
  80265c:	0807cfc0 	call	807cfc <roundf>
  802660:	1009883a 	mov	r4,r2
  802664:	080ad2c0 	call	80ad2c <__fixsfsi>
  802668:	1023883a 	mov	r17,r2
  80266c:	e0bffa17 	ldw	r2,-24(fp)
  802670:	11001417 	ldw	r4,80(r2)
  802674:	0807cfc0 	call	807cfc <roundf>
  802678:	1009883a 	mov	r4,r2
  80267c:	080ad2c0 	call	80ad2c <__fixsfsi>
  802680:	1025883a 	mov	r18,r2
  802684:	e0bffa17 	ldw	r2,-24(fp)
  802688:	11001517 	ldw	r4,84(r2)
  80268c:	0807cfc0 	call	807cfc <roundf>
  802690:	1009883a 	mov	r4,r2
  802694:	080ad2c0 	call	80ad2c <__fixsfsi>
  802698:	d8800015 	stw	r2,0(sp)
  80269c:	d8000115 	stw	zero,4(sp)
  8026a0:	e0bffc17 	ldw	r2,-16(fp)
  8026a4:	d8800215 	stw	r2,8(sp)
  8026a8:	e13ffb17 	ldw	r4,-20(fp)
  8026ac:	800b883a 	mov	r5,r16
  8026b0:	880d883a 	mov	r6,r17
  8026b4:	900f883a 	mov	r7,r18
  8026b8:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			roundf(ship->sensor_start.x), roundf(ship->sensor_start.y),
			roundf(ship->sensor_end.x), roundf(ship->sensor_end.y),
			0x0000, buf);
}
  8026bc:	dfc00a17 	ldw	ra,40(sp)
  8026c0:	df000917 	ldw	fp,36(sp)
  8026c4:	dc000817 	ldw	r16,32(sp)
  8026c8:	dc400717 	ldw	r17,28(sp)
  8026cc:	dc800617 	ldw	r18,24(sp)
  8026d0:	dec00b04 	addi	sp,sp,44
  8026d4:	f800283a 	ret

008026d8 <draw_sensor>:
/*---------------------------------------------------------------------------------------------
 * (function: draw_sensor)
 *-------------------------------------------------------------------------------------------*/
void draw_sensor(ship_t *ship, alt_up_pixel_buffer_dev *pixel_buffer, int buf)
{
  8026d8:	defff504 	addi	sp,sp,-44
  8026dc:	dfc00a15 	stw	ra,40(sp)
  8026e0:	df000915 	stw	fp,36(sp)
  8026e4:	dc000815 	stw	r16,32(sp)
  8026e8:	dc400715 	stw	r17,28(sp)
  8026ec:	dc800615 	stw	r18,24(sp)
  8026f0:	df000904 	addi	fp,sp,36
  8026f4:	e13ffa15 	stw	r4,-24(fp)
  8026f8:	e17ffb15 	stw	r5,-20(fp)
  8026fc:	e1bffc15 	stw	r6,-16(fp)
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  802700:	e0bffa17 	ldw	r2,-24(fp)
  802704:	11001217 	ldw	r4,72(r2)
  802708:	0807cfc0 	call	807cfc <roundf>
  80270c:	1009883a 	mov	r4,r2
  802710:	080ad2c0 	call	80ad2c <__fixsfsi>
  802714:	1021883a 	mov	r16,r2
  802718:	e0bffa17 	ldw	r2,-24(fp)
  80271c:	11001317 	ldw	r4,76(r2)
  802720:	0807cfc0 	call	807cfc <roundf>
  802724:	1009883a 	mov	r4,r2
  802728:	080ad2c0 	call	80ad2c <__fixsfsi>
  80272c:	1023883a 	mov	r17,r2
  802730:	e0bffa17 	ldw	r2,-24(fp)
  802734:	11001417 	ldw	r4,80(r2)
  802738:	0807cfc0 	call	807cfc <roundf>
  80273c:	1009883a 	mov	r4,r2
  802740:	080ad2c0 	call	80ad2c <__fixsfsi>
  802744:	1025883a 	mov	r18,r2
  802748:	e0bffa17 	ldw	r2,-24(fp)
  80274c:	11001517 	ldw	r4,84(r2)
  802750:	0807cfc0 	call	807cfc <roundf>
  802754:	1009883a 	mov	r4,r2
  802758:	080ad2c0 	call	80ad2c <__fixsfsi>
  80275c:	d8800015 	stw	r2,0(sp)
  802760:	00803004 	movi	r2,192
  802764:	d8800115 	stw	r2,4(sp)
  802768:	e0bffc17 	ldw	r2,-16(fp)
  80276c:	d8800215 	stw	r2,8(sp)
  802770:	e13ffb17 	ldw	r4,-20(fp)
  802774:	800b883a 	mov	r5,r16
  802778:	880d883a 	mov	r6,r17
  80277c:	900f883a 	mov	r7,r18
  802780:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			roundf(ship->sensor_start.x), roundf(ship->sensor_start.y),
			roundf(ship->sensor_end.x), roundf(ship->sensor_end.y),
			0x00C0, buf);
}
  802784:	dfc00a17 	ldw	ra,40(sp)
  802788:	df000917 	ldw	fp,36(sp)
  80278c:	dc000817 	ldw	r16,32(sp)
  802790:	dc400717 	ldw	r17,28(sp)
  802794:	dc800617 	ldw	r18,24(sp)
  802798:	dec00b04 	addi	sp,sp,44
  80279c:	f800283a 	ret

008027a0 <clean_shot>:

/*---------------------------------------------------------------------------------------------
 * (function: clean_shot)
 *-------------------------------------------------------------------------------------------*/
void clean_shot(ship_t *ship, alt_up_pixel_buffer_dev *pixel_buffer, int buf)
{
  8027a0:	defff504 	addi	sp,sp,-44
  8027a4:	dfc00a15 	stw	ra,40(sp)
  8027a8:	df000915 	stw	fp,36(sp)
  8027ac:	dc000815 	stw	r16,32(sp)
  8027b0:	dc400715 	stw	r17,28(sp)
  8027b4:	dc800615 	stw	r18,24(sp)
  8027b8:	df000904 	addi	fp,sp,36
  8027bc:	e13ffa15 	stw	r4,-24(fp)
  8027c0:	e17ffb15 	stw	r5,-20(fp)
  8027c4:	e1bffc15 	stw	r6,-16(fp)
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  8027c8:	e0bffa17 	ldw	r2,-24(fp)
  8027cc:	11000e17 	ldw	r4,56(r2)
  8027d0:	0807cfc0 	call	807cfc <roundf>
  8027d4:	1009883a 	mov	r4,r2
  8027d8:	080ad2c0 	call	80ad2c <__fixsfsi>
  8027dc:	1021883a 	mov	r16,r2
  8027e0:	e0bffa17 	ldw	r2,-24(fp)
  8027e4:	11000f17 	ldw	r4,60(r2)
  8027e8:	0807cfc0 	call	807cfc <roundf>
  8027ec:	1009883a 	mov	r4,r2
  8027f0:	080ad2c0 	call	80ad2c <__fixsfsi>
  8027f4:	1023883a 	mov	r17,r2
  8027f8:	e0bffa17 	ldw	r2,-24(fp)
  8027fc:	11001017 	ldw	r4,64(r2)
  802800:	0807cfc0 	call	807cfc <roundf>
  802804:	1009883a 	mov	r4,r2
  802808:	080ad2c0 	call	80ad2c <__fixsfsi>
  80280c:	1025883a 	mov	r18,r2
  802810:	e0bffa17 	ldw	r2,-24(fp)
  802814:	11001117 	ldw	r4,68(r2)
  802818:	0807cfc0 	call	807cfc <roundf>
  80281c:	1009883a 	mov	r4,r2
  802820:	080ad2c0 	call	80ad2c <__fixsfsi>
  802824:	d8800015 	stw	r2,0(sp)
  802828:	d8000115 	stw	zero,4(sp)
  80282c:	e0bffc17 	ldw	r2,-16(fp)
  802830:	d8800215 	stw	r2,8(sp)
  802834:	e13ffb17 	ldw	r4,-20(fp)
  802838:	800b883a 	mov	r5,r16
  80283c:	880d883a 	mov	r6,r17
  802840:	900f883a 	mov	r7,r18
  802844:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			roundf(ship->shot_start.x), roundf(ship->shot_start.y),
			roundf(ship->shot_end.x), roundf(ship->shot_end.y),
			0x0000, buf);
}
  802848:	dfc00a17 	ldw	ra,40(sp)
  80284c:	df000917 	ldw	fp,36(sp)
  802850:	dc000817 	ldw	r16,32(sp)
  802854:	dc400717 	ldw	r17,28(sp)
  802858:	dc800617 	ldw	r18,24(sp)
  80285c:	dec00b04 	addi	sp,sp,44
  802860:	f800283a 	ret

00802864 <draw_shot>:

/*---------------------------------------------------------------------------------------------
 * (function: draw_shot)
 *-------------------------------------------------------------------------------------------*/
void draw_shot(ship_t *ship, alt_up_pixel_buffer_dev *pixel_buffer, int buf, int sec)
{
  802864:	defff404 	addi	sp,sp,-48
  802868:	dfc00b15 	stw	ra,44(sp)
  80286c:	df000a15 	stw	fp,40(sp)
  802870:	dc000915 	stw	r16,36(sp)
  802874:	dc400815 	stw	r17,32(sp)
  802878:	dc800715 	stw	r18,28(sp)
  80287c:	df000a04 	addi	fp,sp,40
  802880:	e13ff915 	stw	r4,-28(fp)
  802884:	e17ffa15 	stw	r5,-24(fp)
  802888:	e1bffb15 	stw	r6,-20(fp)
  80288c:	e1fffc15 	stw	r7,-16(fp)
	alt_up_pixel_buffer_draw_line(pixel_buffer, 
  802890:	e0bff917 	ldw	r2,-28(fp)
  802894:	11000e17 	ldw	r4,56(r2)
  802898:	0807cfc0 	call	807cfc <roundf>
  80289c:	1009883a 	mov	r4,r2
  8028a0:	080ad2c0 	call	80ad2c <__fixsfsi>
  8028a4:	1021883a 	mov	r16,r2
  8028a8:	e0bff917 	ldw	r2,-28(fp)
  8028ac:	11000f17 	ldw	r4,60(r2)
  8028b0:	0807cfc0 	call	807cfc <roundf>
  8028b4:	1009883a 	mov	r4,r2
  8028b8:	080ad2c0 	call	80ad2c <__fixsfsi>
  8028bc:	1023883a 	mov	r17,r2
  8028c0:	e0bff917 	ldw	r2,-28(fp)
  8028c4:	11001017 	ldw	r4,64(r2)
  8028c8:	0807cfc0 	call	807cfc <roundf>
  8028cc:	1009883a 	mov	r4,r2
  8028d0:	080ad2c0 	call	80ad2c <__fixsfsi>
  8028d4:	1025883a 	mov	r18,r2
  8028d8:	e0bff917 	ldw	r2,-28(fp)
  8028dc:	11001117 	ldw	r4,68(r2)
  8028e0:	0807cfc0 	call	807cfc <roundf>
  8028e4:	1009883a 	mov	r4,r2
  8028e8:	080ad2c0 	call	80ad2c <__fixsfsi>
  8028ec:	d8800015 	stw	r2,0(sp)
  8028f0:	e0bffc17 	ldw	r2,-16(fp)
  8028f4:	10c03c24 	muli	r3,r2,240
  8028f8:	0083fc04 	movi	r2,4080
  8028fc:	10c5c83a 	sub	r2,r2,r3
  802900:	d8800115 	stw	r2,4(sp)
  802904:	e0bffb17 	ldw	r2,-20(fp)
  802908:	d8800215 	stw	r2,8(sp)
  80290c:	e13ffa17 	ldw	r4,-24(fp)
  802910:	800b883a 	mov	r5,r16
  802914:	880d883a 	mov	r6,r17
  802918:	900f883a 	mov	r7,r18
  80291c:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
			roundf(ship->shot_start.x), roundf(ship->shot_start.y),
			roundf(ship->shot_end.x), roundf(ship->shot_end.y),
			0x0FF0 - (0x0F0*sec), buf);
}
  802920:	dfc00b17 	ldw	ra,44(sp)
  802924:	df000a17 	ldw	fp,40(sp)
  802928:	dc000917 	ldw	r16,36(sp)
  80292c:	dc400817 	ldw	r17,32(sp)
  802930:	dc800717 	ldw	r18,28(sp)
  802934:	dec00c04 	addi	sp,sp,48
  802938:	f800283a 	ret

0080293c <draw_string>:

/*---------------------------------------------------------------------------------------------
 * (function: draw_string)
 *-------------------------------------------------------------------------------------------*/
void draw_string(alt_up_pixel_buffer_dev *pixel_buffer, int color, int buf, int x0, int y0, char *string, int size)
{
  80293c:	defff704 	addi	sp,sp,-36
  802940:	dfc00815 	stw	ra,32(sp)
  802944:	df000715 	stw	fp,28(sp)
  802948:	df000704 	addi	fp,sp,28
  80294c:	e13ffb15 	stw	r4,-20(fp)
  802950:	e17ffc15 	stw	r5,-16(fp)
  802954:	e1bffd15 	stw	r6,-12(fp)
  802958:	e1fffe15 	stw	r7,-8(fp)
	int i;

	for (i = 0; i < size; i++)
  80295c:	e03fff15 	stw	zero,-4(fp)
  802960:	e0ffff17 	ldw	r3,-4(fp)
  802964:	e0800417 	ldw	r2,16(fp)
  802968:	1880130e 	bge	r3,r2,8029b8 <draw_string+0x7c>
	{
		draw_letter(pixel_buffer, color, buf, string[i], x0+(i*6), y0);
  80296c:	e0c00317 	ldw	r3,12(fp)
  802970:	e0bfff17 	ldw	r2,-4(fp)
  802974:	1885883a 	add	r2,r3,r2
  802978:	11c00007 	ldb	r7,0(r2)
  80297c:	e0bfff17 	ldw	r2,-4(fp)
  802980:	10c001a4 	muli	r3,r2,6
  802984:	e0bffe17 	ldw	r2,-8(fp)
  802988:	1885883a 	add	r2,r3,r2
  80298c:	d8800015 	stw	r2,0(sp)
  802990:	e0800217 	ldw	r2,8(fp)
  802994:	d8800115 	stw	r2,4(sp)
  802998:	e13ffb17 	ldw	r4,-20(fp)
  80299c:	e17ffc17 	ldw	r5,-16(fp)
  8029a0:	e1bffd17 	ldw	r6,-12(fp)
  8029a4:	08029c80 	call	8029c8 <draw_letter>
  8029a8:	e0bfff17 	ldw	r2,-4(fp)
  8029ac:	10800044 	addi	r2,r2,1
  8029b0:	e0bfff15 	stw	r2,-4(fp)
  8029b4:	003fea06 	br	802960 <draw_string+0x24>
	}
}
  8029b8:	dfc00817 	ldw	ra,32(sp)
  8029bc:	df000717 	ldw	fp,28(sp)
  8029c0:	dec00904 	addi	sp,sp,36
  8029c4:	f800283a 	ret

008029c8 <draw_letter>:

/*---------------------------------------------------------------------------------------------
 * (function: draw_letter)
 *-------------------------------------------------------------------------------------------*/
void draw_letter(alt_up_pixel_buffer_dev *pixel_buffer, int color, int buf, char letter, int x0, int y0)
{
  8029c8:	defff304 	addi	sp,sp,-52
  8029cc:	dfc00c15 	stw	ra,48(sp)
  8029d0:	df000b15 	stw	fp,44(sp)
  8029d4:	df000b04 	addi	fp,sp,44
  8029d8:	e13ffb15 	stw	r4,-20(fp)
  8029dc:	e17ffc15 	stw	r5,-16(fp)
  8029e0:	e1bffd15 	stw	r6,-12(fp)
  8029e4:	e1fffe05 	stb	r7,-8(fp)
	switch(letter)
  8029e8:	e0bffe07 	ldb	r2,-8(fp)
  8029ec:	10bff804 	addi	r2,r2,-32
  8029f0:	e0bfff15 	stw	r2,-4(fp)
  8029f4:	e0ffff17 	ldw	r3,-4(fp)
  8029f8:	188016e8 	cmpgeui	r2,r3,91
  8029fc:	1002ad1e 	bne	r2,zero,8034b4 <draw_letter+0xaec>
  802a00:	e0bfff17 	ldw	r2,-4(fp)
  802a04:	10c00124 	muli	r3,r2,4
  802a08:	008020b4 	movhi	r2,130
  802a0c:	10a53a04 	addi	r2,r2,-27416
  802a10:	1885883a 	add	r2,r3,r2
  802a14:	10800017 	ldw	r2,0(r2)
  802a18:	1000683a 	jmp	r2
	{
		case 'a':
			draw_font(pixel_buffer, color, buf, 0x1E, 0x05, 0x05, 0x05, 0x1E, x0, y0);
  802a1c:	00800144 	movi	r2,5
  802a20:	d8800015 	stw	r2,0(sp)
  802a24:	00800144 	movi	r2,5
  802a28:	d8800115 	stw	r2,4(sp)
  802a2c:	00800144 	movi	r2,5
  802a30:	d8800215 	stw	r2,8(sp)
  802a34:	00800784 	movi	r2,30
  802a38:	d8800315 	stw	r2,12(sp)
  802a3c:	e0800217 	ldw	r2,8(fp)
  802a40:	d8800415 	stw	r2,16(sp)
  802a44:	e0800317 	ldw	r2,12(fp)
  802a48:	d8800515 	stw	r2,20(sp)
  802a4c:	e13ffb17 	ldw	r4,-20(fp)
  802a50:	e17ffc17 	ldw	r5,-16(fp)
  802a54:	e1bffd17 	ldw	r6,-12(fp)
  802a58:	01c00784 	movi	r7,30
  802a5c:	08035080 	call	803508 <draw_font>
			break;
  802a60:	0002a506 	br	8034f8 <draw_letter+0xb30>
		case 'b':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x15, 0x15, 0x15, 0x0C, x0, y0);
  802a64:	00800544 	movi	r2,21
  802a68:	d8800015 	stw	r2,0(sp)
  802a6c:	00800544 	movi	r2,21
  802a70:	d8800115 	stw	r2,4(sp)
  802a74:	00800544 	movi	r2,21
  802a78:	d8800215 	stw	r2,8(sp)
  802a7c:	00800304 	movi	r2,12
  802a80:	d8800315 	stw	r2,12(sp)
  802a84:	e0800217 	ldw	r2,8(fp)
  802a88:	d8800415 	stw	r2,16(sp)
  802a8c:	e0800317 	ldw	r2,12(fp)
  802a90:	d8800515 	stw	r2,20(sp)
  802a94:	e13ffb17 	ldw	r4,-20(fp)
  802a98:	e17ffc17 	ldw	r5,-16(fp)
  802a9c:	e1bffd17 	ldw	r6,-12(fp)
  802aa0:	01c007c4 	movi	r7,31
  802aa4:	08035080 	call	803508 <draw_font>
			break;
  802aa8:	00029306 	br	8034f8 <draw_letter+0xb30>
		case 'c':
			draw_font(pixel_buffer, color, buf, 0x0E, 0x11, 0x11, 0x11, 0x11, x0, y0);
  802aac:	00800444 	movi	r2,17
  802ab0:	d8800015 	stw	r2,0(sp)
  802ab4:	00800444 	movi	r2,17
  802ab8:	d8800115 	stw	r2,4(sp)
  802abc:	00800444 	movi	r2,17
  802ac0:	d8800215 	stw	r2,8(sp)
  802ac4:	00800444 	movi	r2,17
  802ac8:	d8800315 	stw	r2,12(sp)
  802acc:	e0800217 	ldw	r2,8(fp)
  802ad0:	d8800415 	stw	r2,16(sp)
  802ad4:	e0800317 	ldw	r2,12(fp)
  802ad8:	d8800515 	stw	r2,20(sp)
  802adc:	e13ffb17 	ldw	r4,-20(fp)
  802ae0:	e17ffc17 	ldw	r5,-16(fp)
  802ae4:	e1bffd17 	ldw	r6,-12(fp)
  802ae8:	01c00384 	movi	r7,14
  802aec:	08035080 	call	803508 <draw_font>
			break;
  802af0:	00028106 	br	8034f8 <draw_letter+0xb30>
		case 'd':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x11, 0x11, 0x11, 0x0E, x0, y0);
  802af4:	00800444 	movi	r2,17
  802af8:	d8800015 	stw	r2,0(sp)
  802afc:	00800444 	movi	r2,17
  802b00:	d8800115 	stw	r2,4(sp)
  802b04:	00800444 	movi	r2,17
  802b08:	d8800215 	stw	r2,8(sp)
  802b0c:	00800384 	movi	r2,14
  802b10:	d8800315 	stw	r2,12(sp)
  802b14:	e0800217 	ldw	r2,8(fp)
  802b18:	d8800415 	stw	r2,16(sp)
  802b1c:	e0800317 	ldw	r2,12(fp)
  802b20:	d8800515 	stw	r2,20(sp)
  802b24:	e13ffb17 	ldw	r4,-20(fp)
  802b28:	e17ffc17 	ldw	r5,-16(fp)
  802b2c:	e1bffd17 	ldw	r6,-12(fp)
  802b30:	01c007c4 	movi	r7,31
  802b34:	08035080 	call	803508 <draw_font>
			break;
  802b38:	00026f06 	br	8034f8 <draw_letter+0xb30>
		case 'e':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x15, 0x15, 0x15, 0x15, x0, y0);
  802b3c:	00800544 	movi	r2,21
  802b40:	d8800015 	stw	r2,0(sp)
  802b44:	00800544 	movi	r2,21
  802b48:	d8800115 	stw	r2,4(sp)
  802b4c:	00800544 	movi	r2,21
  802b50:	d8800215 	stw	r2,8(sp)
  802b54:	00800544 	movi	r2,21
  802b58:	d8800315 	stw	r2,12(sp)
  802b5c:	e0800217 	ldw	r2,8(fp)
  802b60:	d8800415 	stw	r2,16(sp)
  802b64:	e0800317 	ldw	r2,12(fp)
  802b68:	d8800515 	stw	r2,20(sp)
  802b6c:	e13ffb17 	ldw	r4,-20(fp)
  802b70:	e17ffc17 	ldw	r5,-16(fp)
  802b74:	e1bffd17 	ldw	r6,-12(fp)
  802b78:	01c007c4 	movi	r7,31
  802b7c:	08035080 	call	803508 <draw_font>
			break;
  802b80:	00025d06 	br	8034f8 <draw_letter+0xb30>
		case 'f':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x05, 0x05, 0x01, 0x01, x0, y0);
  802b84:	00800144 	movi	r2,5
  802b88:	d8800015 	stw	r2,0(sp)
  802b8c:	00800144 	movi	r2,5
  802b90:	d8800115 	stw	r2,4(sp)
  802b94:	00800044 	movi	r2,1
  802b98:	d8800215 	stw	r2,8(sp)
  802b9c:	00800044 	movi	r2,1
  802ba0:	d8800315 	stw	r2,12(sp)
  802ba4:	e0800217 	ldw	r2,8(fp)
  802ba8:	d8800415 	stw	r2,16(sp)
  802bac:	e0800317 	ldw	r2,12(fp)
  802bb0:	d8800515 	stw	r2,20(sp)
  802bb4:	e13ffb17 	ldw	r4,-20(fp)
  802bb8:	e17ffc17 	ldw	r5,-16(fp)
  802bbc:	e1bffd17 	ldw	r6,-12(fp)
  802bc0:	01c007c4 	movi	r7,31
  802bc4:	08035080 	call	803508 <draw_font>
			break;
  802bc8:	00024b06 	br	8034f8 <draw_letter+0xb30>
		case 'g':
			draw_font(pixel_buffer, color, buf, 0x0E, 0x11, 0x15, 0x15, 0x1D, x0, y0);
  802bcc:	00800444 	movi	r2,17
  802bd0:	d8800015 	stw	r2,0(sp)
  802bd4:	00800544 	movi	r2,21
  802bd8:	d8800115 	stw	r2,4(sp)
  802bdc:	00800544 	movi	r2,21
  802be0:	d8800215 	stw	r2,8(sp)
  802be4:	00800744 	movi	r2,29
  802be8:	d8800315 	stw	r2,12(sp)
  802bec:	e0800217 	ldw	r2,8(fp)
  802bf0:	d8800415 	stw	r2,16(sp)
  802bf4:	e0800317 	ldw	r2,12(fp)
  802bf8:	d8800515 	stw	r2,20(sp)
  802bfc:	e13ffb17 	ldw	r4,-20(fp)
  802c00:	e17ffc17 	ldw	r5,-16(fp)
  802c04:	e1bffd17 	ldw	r6,-12(fp)
  802c08:	01c00384 	movi	r7,14
  802c0c:	08035080 	call	803508 <draw_font>
			break;
  802c10:	00023906 	br	8034f8 <draw_letter+0xb30>
		case 'h':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x04, 0x04, 0x04, 0x1F, x0, y0);
  802c14:	00800104 	movi	r2,4
  802c18:	d8800015 	stw	r2,0(sp)
  802c1c:	00800104 	movi	r2,4
  802c20:	d8800115 	stw	r2,4(sp)
  802c24:	00800104 	movi	r2,4
  802c28:	d8800215 	stw	r2,8(sp)
  802c2c:	008007c4 	movi	r2,31
  802c30:	d8800315 	stw	r2,12(sp)
  802c34:	e0800217 	ldw	r2,8(fp)
  802c38:	d8800415 	stw	r2,16(sp)
  802c3c:	e0800317 	ldw	r2,12(fp)
  802c40:	d8800515 	stw	r2,20(sp)
  802c44:	e13ffb17 	ldw	r4,-20(fp)
  802c48:	e17ffc17 	ldw	r5,-16(fp)
  802c4c:	e1bffd17 	ldw	r6,-12(fp)
  802c50:	01c007c4 	movi	r7,31
  802c54:	08035080 	call	803508 <draw_font>
			break;
  802c58:	00022706 	br	8034f8 <draw_letter+0xb30>
		case 'i':
			draw_font(pixel_buffer, color, buf, 0x11, 0x11, 0x1F, 0x11, 0x11, x0, y0);
  802c5c:	00800444 	movi	r2,17
  802c60:	d8800015 	stw	r2,0(sp)
  802c64:	008007c4 	movi	r2,31
  802c68:	d8800115 	stw	r2,4(sp)
  802c6c:	00800444 	movi	r2,17
  802c70:	d8800215 	stw	r2,8(sp)
  802c74:	00800444 	movi	r2,17
  802c78:	d8800315 	stw	r2,12(sp)
  802c7c:	e0800217 	ldw	r2,8(fp)
  802c80:	d8800415 	stw	r2,16(sp)
  802c84:	e0800317 	ldw	r2,12(fp)
  802c88:	d8800515 	stw	r2,20(sp)
  802c8c:	e13ffb17 	ldw	r4,-20(fp)
  802c90:	e17ffc17 	ldw	r5,-16(fp)
  802c94:	e1bffd17 	ldw	r6,-12(fp)
  802c98:	01c00444 	movi	r7,17
  802c9c:	08035080 	call	803508 <draw_font>
			break;
  802ca0:	00021506 	br	8034f8 <draw_letter+0xb30>
		case 'j':
			draw_font(pixel_buffer, color, buf, 0x08, 0x10, 0x11, 0x11, 0x0F, x0, y0);
  802ca4:	00800404 	movi	r2,16
  802ca8:	d8800015 	stw	r2,0(sp)
  802cac:	00800444 	movi	r2,17
  802cb0:	d8800115 	stw	r2,4(sp)
  802cb4:	00800444 	movi	r2,17
  802cb8:	d8800215 	stw	r2,8(sp)
  802cbc:	008003c4 	movi	r2,15
  802cc0:	d8800315 	stw	r2,12(sp)
  802cc4:	e0800217 	ldw	r2,8(fp)
  802cc8:	d8800415 	stw	r2,16(sp)
  802ccc:	e0800317 	ldw	r2,12(fp)
  802cd0:	d8800515 	stw	r2,20(sp)
  802cd4:	e13ffb17 	ldw	r4,-20(fp)
  802cd8:	e17ffc17 	ldw	r5,-16(fp)
  802cdc:	e1bffd17 	ldw	r6,-12(fp)
  802ce0:	01c00204 	movi	r7,8
  802ce4:	08035080 	call	803508 <draw_font>
			break;
  802ce8:	00020306 	br	8034f8 <draw_letter+0xb30>
		case 'k':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x04, 0x06, 0x05, 0x18, x0, y0);
  802cec:	00800104 	movi	r2,4
  802cf0:	d8800015 	stw	r2,0(sp)
  802cf4:	00800184 	movi	r2,6
  802cf8:	d8800115 	stw	r2,4(sp)
  802cfc:	00800144 	movi	r2,5
  802d00:	d8800215 	stw	r2,8(sp)
  802d04:	00800604 	movi	r2,24
  802d08:	d8800315 	stw	r2,12(sp)
  802d0c:	e0800217 	ldw	r2,8(fp)
  802d10:	d8800415 	stw	r2,16(sp)
  802d14:	e0800317 	ldw	r2,12(fp)
  802d18:	d8800515 	stw	r2,20(sp)
  802d1c:	e13ffb17 	ldw	r4,-20(fp)
  802d20:	e17ffc17 	ldw	r5,-16(fp)
  802d24:	e1bffd17 	ldw	r6,-12(fp)
  802d28:	01c007c4 	movi	r7,31
  802d2c:	08035080 	call	803508 <draw_font>
			break;
  802d30:	0001f106 	br	8034f8 <draw_letter+0xb30>
		case 'l':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x10, 0x10, 0x10, 0x10, x0, y0);
  802d34:	00800404 	movi	r2,16
  802d38:	d8800015 	stw	r2,0(sp)
  802d3c:	00800404 	movi	r2,16
  802d40:	d8800115 	stw	r2,4(sp)
  802d44:	00800404 	movi	r2,16
  802d48:	d8800215 	stw	r2,8(sp)
  802d4c:	00800404 	movi	r2,16
  802d50:	d8800315 	stw	r2,12(sp)
  802d54:	e0800217 	ldw	r2,8(fp)
  802d58:	d8800415 	stw	r2,16(sp)
  802d5c:	e0800317 	ldw	r2,12(fp)
  802d60:	d8800515 	stw	r2,20(sp)
  802d64:	e13ffb17 	ldw	r4,-20(fp)
  802d68:	e17ffc17 	ldw	r5,-16(fp)
  802d6c:	e1bffd17 	ldw	r6,-12(fp)
  802d70:	01c007c4 	movi	r7,31
  802d74:	08035080 	call	803508 <draw_font>
			break;
  802d78:	0001df06 	br	8034f8 <draw_letter+0xb30>
		case 'm':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x02, 0x04, 0x02, 0x1F, x0, y0);
  802d7c:	00800084 	movi	r2,2
  802d80:	d8800015 	stw	r2,0(sp)
  802d84:	00800104 	movi	r2,4
  802d88:	d8800115 	stw	r2,4(sp)
  802d8c:	00800084 	movi	r2,2
  802d90:	d8800215 	stw	r2,8(sp)
  802d94:	008007c4 	movi	r2,31
  802d98:	d8800315 	stw	r2,12(sp)
  802d9c:	e0800217 	ldw	r2,8(fp)
  802da0:	d8800415 	stw	r2,16(sp)
  802da4:	e0800317 	ldw	r2,12(fp)
  802da8:	d8800515 	stw	r2,20(sp)
  802dac:	e13ffb17 	ldw	r4,-20(fp)
  802db0:	e17ffc17 	ldw	r5,-16(fp)
  802db4:	e1bffd17 	ldw	r6,-12(fp)
  802db8:	01c007c4 	movi	r7,31
  802dbc:	08035080 	call	803508 <draw_font>
			break;
  802dc0:	0001cd06 	br	8034f8 <draw_letter+0xb30>
		case 'n':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x01, 0x0E, 0x10, 0x1F, x0, y0);
  802dc4:	00800044 	movi	r2,1
  802dc8:	d8800015 	stw	r2,0(sp)
  802dcc:	00800384 	movi	r2,14
  802dd0:	d8800115 	stw	r2,4(sp)
  802dd4:	00800404 	movi	r2,16
  802dd8:	d8800215 	stw	r2,8(sp)
  802ddc:	008007c4 	movi	r2,31
  802de0:	d8800315 	stw	r2,12(sp)
  802de4:	e0800217 	ldw	r2,8(fp)
  802de8:	d8800415 	stw	r2,16(sp)
  802dec:	e0800317 	ldw	r2,12(fp)
  802df0:	d8800515 	stw	r2,20(sp)
  802df4:	e13ffb17 	ldw	r4,-20(fp)
  802df8:	e17ffc17 	ldw	r5,-16(fp)
  802dfc:	e1bffd17 	ldw	r6,-12(fp)
  802e00:	01c007c4 	movi	r7,31
  802e04:	08035080 	call	803508 <draw_font>
			break;
  802e08:	0001bb06 	br	8034f8 <draw_letter+0xb30>
		case 'o':
			draw_font(pixel_buffer, color, buf, 0x0E, 0x11, 0x11, 0x11, 0x0E, x0, y0);
  802e0c:	00800444 	movi	r2,17
  802e10:	d8800015 	stw	r2,0(sp)
  802e14:	00800444 	movi	r2,17
  802e18:	d8800115 	stw	r2,4(sp)
  802e1c:	00800444 	movi	r2,17
  802e20:	d8800215 	stw	r2,8(sp)
  802e24:	00800384 	movi	r2,14
  802e28:	d8800315 	stw	r2,12(sp)
  802e2c:	e0800217 	ldw	r2,8(fp)
  802e30:	d8800415 	stw	r2,16(sp)
  802e34:	e0800317 	ldw	r2,12(fp)
  802e38:	d8800515 	stw	r2,20(sp)
  802e3c:	e13ffb17 	ldw	r4,-20(fp)
  802e40:	e17ffc17 	ldw	r5,-16(fp)
  802e44:	e1bffd17 	ldw	r6,-12(fp)
  802e48:	01c00384 	movi	r7,14
  802e4c:	08035080 	call	803508 <draw_font>
			break;
  802e50:	0001a906 	br	8034f8 <draw_letter+0xb30>
		case 'p':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x05, 0x05, 0x05, 0x02, x0, y0);
  802e54:	00800144 	movi	r2,5
  802e58:	d8800015 	stw	r2,0(sp)
  802e5c:	00800144 	movi	r2,5
  802e60:	d8800115 	stw	r2,4(sp)
  802e64:	00800144 	movi	r2,5
  802e68:	d8800215 	stw	r2,8(sp)
  802e6c:	00800084 	movi	r2,2
  802e70:	d8800315 	stw	r2,12(sp)
  802e74:	e0800217 	ldw	r2,8(fp)
  802e78:	d8800415 	stw	r2,16(sp)
  802e7c:	e0800317 	ldw	r2,12(fp)
  802e80:	d8800515 	stw	r2,20(sp)
  802e84:	e13ffb17 	ldw	r4,-20(fp)
  802e88:	e17ffc17 	ldw	r5,-16(fp)
  802e8c:	e1bffd17 	ldw	r6,-12(fp)
  802e90:	01c007c4 	movi	r7,31
  802e94:	08035080 	call	803508 <draw_font>
			break;
  802e98:	00019706 	br	8034f8 <draw_letter+0xb30>
		case 'q':
			draw_font(pixel_buffer, color, buf, 0x0E, 0x11, 0x11, 0x1E, 0x10, x0, y0);
  802e9c:	00800444 	movi	r2,17
  802ea0:	d8800015 	stw	r2,0(sp)
  802ea4:	00800444 	movi	r2,17
  802ea8:	d8800115 	stw	r2,4(sp)
  802eac:	00800784 	movi	r2,30
  802eb0:	d8800215 	stw	r2,8(sp)
  802eb4:	00800404 	movi	r2,16
  802eb8:	d8800315 	stw	r2,12(sp)
  802ebc:	e0800217 	ldw	r2,8(fp)
  802ec0:	d8800415 	stw	r2,16(sp)
  802ec4:	e0800317 	ldw	r2,12(fp)
  802ec8:	d8800515 	stw	r2,20(sp)
  802ecc:	e13ffb17 	ldw	r4,-20(fp)
  802ed0:	e17ffc17 	ldw	r5,-16(fp)
  802ed4:	e1bffd17 	ldw	r6,-12(fp)
  802ed8:	01c00384 	movi	r7,14
  802edc:	08035080 	call	803508 <draw_font>
			break;
  802ee0:	00018506 	br	8034f8 <draw_letter+0xb30>
		case 'r':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x05, 0x05, 0x0D, 0x12, x0, y0);
  802ee4:	00800144 	movi	r2,5
  802ee8:	d8800015 	stw	r2,0(sp)
  802eec:	00800144 	movi	r2,5
  802ef0:	d8800115 	stw	r2,4(sp)
  802ef4:	00800344 	movi	r2,13
  802ef8:	d8800215 	stw	r2,8(sp)
  802efc:	00800484 	movi	r2,18
  802f00:	d8800315 	stw	r2,12(sp)
  802f04:	e0800217 	ldw	r2,8(fp)
  802f08:	d8800415 	stw	r2,16(sp)
  802f0c:	e0800317 	ldw	r2,12(fp)
  802f10:	d8800515 	stw	r2,20(sp)
  802f14:	e13ffb17 	ldw	r4,-20(fp)
  802f18:	e17ffc17 	ldw	r5,-16(fp)
  802f1c:	e1bffd17 	ldw	r6,-12(fp)
  802f20:	01c007c4 	movi	r7,31
  802f24:	08035080 	call	803508 <draw_font>
			break;
  802f28:	00017306 	br	8034f8 <draw_letter+0xb30>
		case 's':
			draw_font(pixel_buffer, color, buf, 0x12, 0x15, 0x15, 0x15, 0x09, x0, y0);
  802f2c:	00800544 	movi	r2,21
  802f30:	d8800015 	stw	r2,0(sp)
  802f34:	00800544 	movi	r2,21
  802f38:	d8800115 	stw	r2,4(sp)
  802f3c:	00800544 	movi	r2,21
  802f40:	d8800215 	stw	r2,8(sp)
  802f44:	00800244 	movi	r2,9
  802f48:	d8800315 	stw	r2,12(sp)
  802f4c:	e0800217 	ldw	r2,8(fp)
  802f50:	d8800415 	stw	r2,16(sp)
  802f54:	e0800317 	ldw	r2,12(fp)
  802f58:	d8800515 	stw	r2,20(sp)
  802f5c:	e13ffb17 	ldw	r4,-20(fp)
  802f60:	e17ffc17 	ldw	r5,-16(fp)
  802f64:	e1bffd17 	ldw	r6,-12(fp)
  802f68:	01c00484 	movi	r7,18
  802f6c:	08035080 	call	803508 <draw_font>
			break;
  802f70:	00016106 	br	8034f8 <draw_letter+0xb30>
		case 't':
			draw_font(pixel_buffer, color, buf, 0x01, 0x01, 0x1F, 0x01, 0x01, x0, y0);
  802f74:	00800044 	movi	r2,1
  802f78:	d8800015 	stw	r2,0(sp)
  802f7c:	008007c4 	movi	r2,31
  802f80:	d8800115 	stw	r2,4(sp)
  802f84:	00800044 	movi	r2,1
  802f88:	d8800215 	stw	r2,8(sp)
  802f8c:	00800044 	movi	r2,1
  802f90:	d8800315 	stw	r2,12(sp)
  802f94:	e0800217 	ldw	r2,8(fp)
  802f98:	d8800415 	stw	r2,16(sp)
  802f9c:	e0800317 	ldw	r2,12(fp)
  802fa0:	d8800515 	stw	r2,20(sp)
  802fa4:	e13ffb17 	ldw	r4,-20(fp)
  802fa8:	e17ffc17 	ldw	r5,-16(fp)
  802fac:	e1bffd17 	ldw	r6,-12(fp)
  802fb0:	01c00044 	movi	r7,1
  802fb4:	08035080 	call	803508 <draw_font>
			break;
  802fb8:	00014f06 	br	8034f8 <draw_letter+0xb30>
		case 'u':
			draw_font(pixel_buffer, color, buf, 0x0E, 0x10, 0x10, 0x10, 0x0E, x0, y0);
  802fbc:	00800404 	movi	r2,16
  802fc0:	d8800015 	stw	r2,0(sp)
  802fc4:	00800404 	movi	r2,16
  802fc8:	d8800115 	stw	r2,4(sp)
  802fcc:	00800404 	movi	r2,16
  802fd0:	d8800215 	stw	r2,8(sp)
  802fd4:	00800384 	movi	r2,14
  802fd8:	d8800315 	stw	r2,12(sp)
  802fdc:	e0800217 	ldw	r2,8(fp)
  802fe0:	d8800415 	stw	r2,16(sp)
  802fe4:	e0800317 	ldw	r2,12(fp)
  802fe8:	d8800515 	stw	r2,20(sp)
  802fec:	e13ffb17 	ldw	r4,-20(fp)
  802ff0:	e17ffc17 	ldw	r5,-16(fp)
  802ff4:	e1bffd17 	ldw	r6,-12(fp)
  802ff8:	01c00384 	movi	r7,14
  802ffc:	08035080 	call	803508 <draw_font>
			break;
  803000:	00013d06 	br	8034f8 <draw_letter+0xb30>
		case 'v':
			draw_font(pixel_buffer, color, buf, 0x03, 0x0C, 0x10, 0x0C, 0x03, x0, y0);
  803004:	00800304 	movi	r2,12
  803008:	d8800015 	stw	r2,0(sp)
  80300c:	00800404 	movi	r2,16
  803010:	d8800115 	stw	r2,4(sp)
  803014:	00800304 	movi	r2,12
  803018:	d8800215 	stw	r2,8(sp)
  80301c:	008000c4 	movi	r2,3
  803020:	d8800315 	stw	r2,12(sp)
  803024:	e0800217 	ldw	r2,8(fp)
  803028:	d8800415 	stw	r2,16(sp)
  80302c:	e0800317 	ldw	r2,12(fp)
  803030:	d8800515 	stw	r2,20(sp)
  803034:	e13ffb17 	ldw	r4,-20(fp)
  803038:	e17ffc17 	ldw	r5,-16(fp)
  80303c:	e1bffd17 	ldw	r6,-12(fp)
  803040:	01c000c4 	movi	r7,3
  803044:	08035080 	call	803508 <draw_font>
			break;
  803048:	00012b06 	br	8034f8 <draw_letter+0xb30>
		case 'w':
			draw_font(pixel_buffer, color, buf, 0x1F, 0x08, 0x04, 0x08, 0x1F, x0, y0);
  80304c:	00800204 	movi	r2,8
  803050:	d8800015 	stw	r2,0(sp)
  803054:	00800104 	movi	r2,4
  803058:	d8800115 	stw	r2,4(sp)
  80305c:	00800204 	movi	r2,8
  803060:	d8800215 	stw	r2,8(sp)
  803064:	008007c4 	movi	r2,31
  803068:	d8800315 	stw	r2,12(sp)
  80306c:	e0800217 	ldw	r2,8(fp)
  803070:	d8800415 	stw	r2,16(sp)
  803074:	e0800317 	ldw	r2,12(fp)
  803078:	d8800515 	stw	r2,20(sp)
  80307c:	e13ffb17 	ldw	r4,-20(fp)
  803080:	e17ffc17 	ldw	r5,-16(fp)
  803084:	e1bffd17 	ldw	r6,-12(fp)
  803088:	01c007c4 	movi	r7,31
  80308c:	08035080 	call	803508 <draw_font>
			break;
  803090:	00011906 	br	8034f8 <draw_letter+0xb30>
		case 'x':
			draw_font(pixel_buffer, color, buf, 0x11, 0x0A, 0x04, 0x0A, 0x11, x0, y0);
  803094:	00800284 	movi	r2,10
  803098:	d8800015 	stw	r2,0(sp)
  80309c:	00800104 	movi	r2,4
  8030a0:	d8800115 	stw	r2,4(sp)
  8030a4:	00800284 	movi	r2,10
  8030a8:	d8800215 	stw	r2,8(sp)
  8030ac:	00800444 	movi	r2,17
  8030b0:	d8800315 	stw	r2,12(sp)
  8030b4:	e0800217 	ldw	r2,8(fp)
  8030b8:	d8800415 	stw	r2,16(sp)
  8030bc:	e0800317 	ldw	r2,12(fp)
  8030c0:	d8800515 	stw	r2,20(sp)
  8030c4:	e13ffb17 	ldw	r4,-20(fp)
  8030c8:	e17ffc17 	ldw	r5,-16(fp)
  8030cc:	e1bffd17 	ldw	r6,-12(fp)
  8030d0:	01c00444 	movi	r7,17
  8030d4:	08035080 	call	803508 <draw_font>
			break;
  8030d8:	00010706 	br	8034f8 <draw_letter+0xb30>
		case 'y':
			draw_font(pixel_buffer, color, buf, 0x03, 0x04, 0x1C, 0x04, 0x03, x0, y0);
  8030dc:	00800104 	movi	r2,4
  8030e0:	d8800015 	stw	r2,0(sp)
  8030e4:	00800704 	movi	r2,28
  8030e8:	d8800115 	stw	r2,4(sp)
  8030ec:	00800104 	movi	r2,4
  8030f0:	d8800215 	stw	r2,8(sp)
  8030f4:	008000c4 	movi	r2,3
  8030f8:	d8800315 	stw	r2,12(sp)
  8030fc:	e0800217 	ldw	r2,8(fp)
  803100:	d8800415 	stw	r2,16(sp)
  803104:	e0800317 	ldw	r2,12(fp)
  803108:	d8800515 	stw	r2,20(sp)
  80310c:	e13ffb17 	ldw	r4,-20(fp)
  803110:	e17ffc17 	ldw	r5,-16(fp)
  803114:	e1bffd17 	ldw	r6,-12(fp)
  803118:	01c000c4 	movi	r7,3
  80311c:	08035080 	call	803508 <draw_font>
			break;
  803120:	0000f506 	br	8034f8 <draw_letter+0xb30>
		case 'z':
			draw_font(pixel_buffer, color, buf, 0x19, 0x15, 0x15, 0x15, 0x13, x0, y0);
  803124:	00800544 	movi	r2,21
  803128:	d8800015 	stw	r2,0(sp)
  80312c:	00800544 	movi	r2,21
  803130:	d8800115 	stw	r2,4(sp)
  803134:	00800544 	movi	r2,21
  803138:	d8800215 	stw	r2,8(sp)
  80313c:	008004c4 	movi	r2,19
  803140:	d8800315 	stw	r2,12(sp)
  803144:	e0800217 	ldw	r2,8(fp)
  803148:	d8800415 	stw	r2,16(sp)
  80314c:	e0800317 	ldw	r2,12(fp)
  803150:	d8800515 	stw	r2,20(sp)
  803154:	e13ffb17 	ldw	r4,-20(fp)
  803158:	e17ffc17 	ldw	r5,-16(fp)
  80315c:	e1bffd17 	ldw	r6,-12(fp)
  803160:	01c00644 	movi	r7,25
  803164:	08035080 	call	803508 <draw_font>
			break;
  803168:	0000e306 	br	8034f8 <draw_letter+0xb30>
		case '-':
			draw_font(pixel_buffer, color, buf, 0x04, 0x04, 0x04, 0x04, 0x04, x0, y0);
  80316c:	00800104 	movi	r2,4
  803170:	d8800015 	stw	r2,0(sp)
  803174:	00800104 	movi	r2,4
  803178:	d8800115 	stw	r2,4(sp)
  80317c:	00800104 	movi	r2,4
  803180:	d8800215 	stw	r2,8(sp)
  803184:	00800104 	movi	r2,4
  803188:	d8800315 	stw	r2,12(sp)
  80318c:	e0800217 	ldw	r2,8(fp)
  803190:	d8800415 	stw	r2,16(sp)
  803194:	e0800317 	ldw	r2,12(fp)
  803198:	d8800515 	stw	r2,20(sp)
  80319c:	e13ffb17 	ldw	r4,-20(fp)
  8031a0:	e17ffc17 	ldw	r5,-16(fp)
  8031a4:	e1bffd17 	ldw	r6,-12(fp)
  8031a8:	01c00104 	movi	r7,4
  8031ac:	08035080 	call	803508 <draw_font>
			break;
  8031b0:	0000d106 	br	8034f8 <draw_letter+0xb30>
		case '0':
			draw_font(pixel_buffer, color, buf, 0x0E, 0x13, 0x15, 0x19, 0x0E, x0, y0);
  8031b4:	008004c4 	movi	r2,19
  8031b8:	d8800015 	stw	r2,0(sp)
  8031bc:	00800544 	movi	r2,21
  8031c0:	d8800115 	stw	r2,4(sp)
  8031c4:	00800644 	movi	r2,25
  8031c8:	d8800215 	stw	r2,8(sp)
  8031cc:	00800384 	movi	r2,14
  8031d0:	d8800315 	stw	r2,12(sp)
  8031d4:	e0800217 	ldw	r2,8(fp)
  8031d8:	d8800415 	stw	r2,16(sp)
  8031dc:	e0800317 	ldw	r2,12(fp)
  8031e0:	d8800515 	stw	r2,20(sp)
  8031e4:	e13ffb17 	ldw	r4,-20(fp)
  8031e8:	e17ffc17 	ldw	r5,-16(fp)
  8031ec:	e1bffd17 	ldw	r6,-12(fp)
  8031f0:	01c00384 	movi	r7,14
  8031f4:	08035080 	call	803508 <draw_font>
			break;
  8031f8:	0000bf06 	br	8034f8 <draw_letter+0xb30>
		case '1':
			draw_font(pixel_buffer, color, buf, 0x10, 0x12, 0x1F, 0x10, 0x10, x0, y0);
  8031fc:	00800484 	movi	r2,18
  803200:	d8800015 	stw	r2,0(sp)
  803204:	008007c4 	movi	r2,31
  803208:	d8800115 	stw	r2,4(sp)
  80320c:	00800404 	movi	r2,16
  803210:	d8800215 	stw	r2,8(sp)
  803214:	00800404 	movi	r2,16
  803218:	d8800315 	stw	r2,12(sp)
  80321c:	e0800217 	ldw	r2,8(fp)
  803220:	d8800415 	stw	r2,16(sp)
  803224:	e0800317 	ldw	r2,12(fp)
  803228:	d8800515 	stw	r2,20(sp)
  80322c:	e13ffb17 	ldw	r4,-20(fp)
  803230:	e17ffc17 	ldw	r5,-16(fp)
  803234:	e1bffd17 	ldw	r6,-12(fp)
  803238:	01c00404 	movi	r7,16
  80323c:	08035080 	call	803508 <draw_font>
			break;
  803240:	0000ad06 	br	8034f8 <draw_letter+0xb30>
		case '2':
			draw_font(pixel_buffer, color, buf, 0x12, 0x19, 0x15, 0x12, 0x00, x0, y0);
  803244:	00800644 	movi	r2,25
  803248:	d8800015 	stw	r2,0(sp)
  80324c:	00800544 	movi	r2,21
  803250:	d8800115 	stw	r2,4(sp)
  803254:	00800484 	movi	r2,18
  803258:	d8800215 	stw	r2,8(sp)
  80325c:	d8000315 	stw	zero,12(sp)
  803260:	e0800217 	ldw	r2,8(fp)
  803264:	d8800415 	stw	r2,16(sp)
  803268:	e0800317 	ldw	r2,12(fp)
  80326c:	d8800515 	stw	r2,20(sp)
  803270:	e13ffb17 	ldw	r4,-20(fp)
  803274:	e17ffc17 	ldw	r5,-16(fp)
  803278:	e1bffd17 	ldw	r6,-12(fp)
  80327c:	01c00484 	movi	r7,18
  803280:	08035080 	call	803508 <draw_font>
			break;
  803284:	00009c06 	br	8034f8 <draw_letter+0xb30>
		case '3':
			draw_font(pixel_buffer, color, buf, 0x0A, 0x11, 0x15, 0x15, 0x0A, x0, y0);
  803288:	00800444 	movi	r2,17
  80328c:	d8800015 	stw	r2,0(sp)
  803290:	00800544 	movi	r2,21
  803294:	d8800115 	stw	r2,4(sp)
  803298:	00800544 	movi	r2,21
  80329c:	d8800215 	stw	r2,8(sp)
  8032a0:	00800284 	movi	r2,10
  8032a4:	d8800315 	stw	r2,12(sp)
  8032a8:	e0800217 	ldw	r2,8(fp)
  8032ac:	d8800415 	stw	r2,16(sp)
  8032b0:	e0800317 	ldw	r2,12(fp)
  8032b4:	d8800515 	stw	r2,20(sp)
  8032b8:	e13ffb17 	ldw	r4,-20(fp)
  8032bc:	e17ffc17 	ldw	r5,-16(fp)
  8032c0:	e1bffd17 	ldw	r6,-12(fp)
  8032c4:	01c00284 	movi	r7,10
  8032c8:	08035080 	call	803508 <draw_font>
			break;
  8032cc:	00008a06 	br	8034f8 <draw_letter+0xb30>
		case '4':
			draw_font(pixel_buffer, color, buf, 0x07, 0x04, 0x04, 0x1F, 0x04, x0, y0);
  8032d0:	00800104 	movi	r2,4
  8032d4:	d8800015 	stw	r2,0(sp)
  8032d8:	00800104 	movi	r2,4
  8032dc:	d8800115 	stw	r2,4(sp)
  8032e0:	008007c4 	movi	r2,31
  8032e4:	d8800215 	stw	r2,8(sp)
  8032e8:	00800104 	movi	r2,4
  8032ec:	d8800315 	stw	r2,12(sp)
  8032f0:	e0800217 	ldw	r2,8(fp)
  8032f4:	d8800415 	stw	r2,16(sp)
  8032f8:	e0800317 	ldw	r2,12(fp)
  8032fc:	d8800515 	stw	r2,20(sp)
  803300:	e13ffb17 	ldw	r4,-20(fp)
  803304:	e17ffc17 	ldw	r5,-16(fp)
  803308:	e1bffd17 	ldw	r6,-12(fp)
  80330c:	01c001c4 	movi	r7,7
  803310:	08035080 	call	803508 <draw_font>
			break;
  803314:	00007806 	br	8034f8 <draw_letter+0xb30>
		case '5':
			draw_font(pixel_buffer, color, buf, 0x17, 0x15, 0x15, 0x09, 0x00, x0, y0);
  803318:	00800544 	movi	r2,21
  80331c:	d8800015 	stw	r2,0(sp)
  803320:	00800544 	movi	r2,21
  803324:	d8800115 	stw	r2,4(sp)
  803328:	00800244 	movi	r2,9
  80332c:	d8800215 	stw	r2,8(sp)
  803330:	d8000315 	stw	zero,12(sp)
  803334:	e0800217 	ldw	r2,8(fp)
  803338:	d8800415 	stw	r2,16(sp)
  80333c:	e0800317 	ldw	r2,12(fp)
  803340:	d8800515 	stw	r2,20(sp)
  803344:	e13ffb17 	ldw	r4,-20(fp)
  803348:	e17ffc17 	ldw	r5,-16(fp)
  80334c:	e1bffd17 	ldw	r6,-12(fp)
  803350:	01c005c4 	movi	r7,23
  803354:	08035080 	call	803508 <draw_font>
			break;
  803358:	00006706 	br	8034f8 <draw_letter+0xb30>
		case '6':
			draw_font(pixel_buffer, color, buf, 0x0E, 0x15, 0x15, 0x15, 0x08, x0, y0);
  80335c:	00800544 	movi	r2,21
  803360:	d8800015 	stw	r2,0(sp)
  803364:	00800544 	movi	r2,21
  803368:	d8800115 	stw	r2,4(sp)
  80336c:	00800544 	movi	r2,21
  803370:	d8800215 	stw	r2,8(sp)
  803374:	00800204 	movi	r2,8
  803378:	d8800315 	stw	r2,12(sp)
  80337c:	e0800217 	ldw	r2,8(fp)
  803380:	d8800415 	stw	r2,16(sp)
  803384:	e0800317 	ldw	r2,12(fp)
  803388:	d8800515 	stw	r2,20(sp)
  80338c:	e13ffb17 	ldw	r4,-20(fp)
  803390:	e17ffc17 	ldw	r5,-16(fp)
  803394:	e1bffd17 	ldw	r6,-12(fp)
  803398:	01c00384 	movi	r7,14
  80339c:	08035080 	call	803508 <draw_font>
			break;
  8033a0:	00005506 	br	8034f8 <draw_letter+0xb30>
		case '7':
			draw_font(pixel_buffer, color, buf, 0x01, 0x01, 0x1D, 0x03, 0x01, x0, y0);
  8033a4:	00800044 	movi	r2,1
  8033a8:	d8800015 	stw	r2,0(sp)
  8033ac:	00800744 	movi	r2,29
  8033b0:	d8800115 	stw	r2,4(sp)
  8033b4:	008000c4 	movi	r2,3
  8033b8:	d8800215 	stw	r2,8(sp)
  8033bc:	00800044 	movi	r2,1
  8033c0:	d8800315 	stw	r2,12(sp)
  8033c4:	e0800217 	ldw	r2,8(fp)
  8033c8:	d8800415 	stw	r2,16(sp)
  8033cc:	e0800317 	ldw	r2,12(fp)
  8033d0:	d8800515 	stw	r2,20(sp)
  8033d4:	e13ffb17 	ldw	r4,-20(fp)
  8033d8:	e17ffc17 	ldw	r5,-16(fp)
  8033dc:	e1bffd17 	ldw	r6,-12(fp)
  8033e0:	01c00044 	movi	r7,1
  8033e4:	08035080 	call	803508 <draw_font>
			break;
  8033e8:	00004306 	br	8034f8 <draw_letter+0xb30>
		case '8':
			draw_font(pixel_buffer, color, buf, 0x0A, 0x15, 0x15, 0x15, 0x0A, x0, y0);
  8033ec:	00800544 	movi	r2,21
  8033f0:	d8800015 	stw	r2,0(sp)
  8033f4:	00800544 	movi	r2,21
  8033f8:	d8800115 	stw	r2,4(sp)
  8033fc:	00800544 	movi	r2,21
  803400:	d8800215 	stw	r2,8(sp)
  803404:	00800284 	movi	r2,10
  803408:	d8800315 	stw	r2,12(sp)
  80340c:	e0800217 	ldw	r2,8(fp)
  803410:	d8800415 	stw	r2,16(sp)
  803414:	e0800317 	ldw	r2,12(fp)
  803418:	d8800515 	stw	r2,20(sp)
  80341c:	e13ffb17 	ldw	r4,-20(fp)
  803420:	e17ffc17 	ldw	r5,-16(fp)
  803424:	e1bffd17 	ldw	r6,-12(fp)
  803428:	01c00284 	movi	r7,10
  80342c:	08035080 	call	803508 <draw_font>
			break;
  803430:	00003106 	br	8034f8 <draw_letter+0xb30>
		case '9':
			draw_font(pixel_buffer, color, buf, 0x02, 0x15, 0x15, 0x15, 0x0E, x0, y0);
  803434:	00800544 	movi	r2,21
  803438:	d8800015 	stw	r2,0(sp)
  80343c:	00800544 	movi	r2,21
  803440:	d8800115 	stw	r2,4(sp)
  803444:	00800544 	movi	r2,21
  803448:	d8800215 	stw	r2,8(sp)
  80344c:	00800384 	movi	r2,14
  803450:	d8800315 	stw	r2,12(sp)
  803454:	e0800217 	ldw	r2,8(fp)
  803458:	d8800415 	stw	r2,16(sp)
  80345c:	e0800317 	ldw	r2,12(fp)
  803460:	d8800515 	stw	r2,20(sp)
  803464:	e13ffb17 	ldw	r4,-20(fp)
  803468:	e17ffc17 	ldw	r5,-16(fp)
  80346c:	e1bffd17 	ldw	r6,-12(fp)
  803470:	01c00084 	movi	r7,2
  803474:	08035080 	call	803508 <draw_font>
			break;
  803478:	00001f06 	br	8034f8 <draw_letter+0xb30>
		case ' ':
			draw_font(pixel_buffer, color, buf, 0x00, 0x00, 0x00, 0x00, 0x00, x0, y0);
  80347c:	d8000015 	stw	zero,0(sp)
  803480:	d8000115 	stw	zero,4(sp)
  803484:	d8000215 	stw	zero,8(sp)
  803488:	d8000315 	stw	zero,12(sp)
  80348c:	e0800217 	ldw	r2,8(fp)
  803490:	d8800415 	stw	r2,16(sp)
  803494:	e0800317 	ldw	r2,12(fp)
  803498:	d8800515 	stw	r2,20(sp)
  80349c:	e13ffb17 	ldw	r4,-20(fp)
  8034a0:	e17ffc17 	ldw	r5,-16(fp)
  8034a4:	e1bffd17 	ldw	r6,-12(fp)
  8034a8:	000f883a 	mov	r7,zero
  8034ac:	08035080 	call	803508 <draw_font>
			break;
  8034b0:	00001106 	br	8034f8 <draw_letter+0xb30>
		default:
			draw_font(pixel_buffer, color, buf, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, x0, y0);
  8034b4:	008007c4 	movi	r2,31
  8034b8:	d8800015 	stw	r2,0(sp)
  8034bc:	008007c4 	movi	r2,31
  8034c0:	d8800115 	stw	r2,4(sp)
  8034c4:	008007c4 	movi	r2,31
  8034c8:	d8800215 	stw	r2,8(sp)
  8034cc:	008007c4 	movi	r2,31
  8034d0:	d8800315 	stw	r2,12(sp)
  8034d4:	e0800217 	ldw	r2,8(fp)
  8034d8:	d8800415 	stw	r2,16(sp)
  8034dc:	e0800317 	ldw	r2,12(fp)
  8034e0:	d8800515 	stw	r2,20(sp)
  8034e4:	e13ffb17 	ldw	r4,-20(fp)
  8034e8:	e17ffc17 	ldw	r5,-16(fp)
  8034ec:	e1bffd17 	ldw	r6,-12(fp)
  8034f0:	01c007c4 	movi	r7,31
  8034f4:	08035080 	call	803508 <draw_font>
			break;
	}
}
  8034f8:	dfc00c17 	ldw	ra,48(sp)
  8034fc:	df000b17 	ldw	fp,44(sp)
  803500:	dec00d04 	addi	sp,sp,52
  803504:	f800283a 	ret

00803508 <draw_font>:

/*---------------------------------------------------------------------------------------------
 * (function: draw_font)
 * Goes through the 32 bit code from top point in the y direction
 *-------------------------------------------------------------------------------------------*/
void draw_font(alt_up_pixel_buffer_dev *pixel_buffer, int color, int buf, alt_u8 r0, alt_u8 r1, alt_u8 r2, alt_u8 r3, alt_u8 r4, int x0, int y0)
{
  803508:	defff304 	addi	sp,sp,-52
  80350c:	dfc00c15 	stw	ra,48(sp)
  803510:	df000b15 	stw	fp,44(sp)
  803514:	df000b04 	addi	fp,sp,44
  803518:	e13ff815 	stw	r4,-32(fp)
  80351c:	e17ff915 	stw	r5,-28(fp)
  803520:	e1bffa15 	stw	r6,-24(fp)
  803524:	e0800217 	ldw	r2,8(fp)
  803528:	e0c00317 	ldw	r3,12(fp)
  80352c:	e1000417 	ldw	r4,16(fp)
  803530:	e1400517 	ldw	r5,20(fp)
  803534:	e1fffb05 	stb	r7,-20(fp)
  803538:	e0bffb45 	stb	r2,-19(fp)
  80353c:	e0fffb85 	stb	r3,-18(fp)
  803540:	e13ffbc5 	stb	r4,-17(fp)
  803544:	e17ffc05 	stb	r5,-16(fp)
	int i, j;
	alt_u8 mask = 1;
  803548:	00800044 	movi	r2,1
  80354c:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 row;

	for (i = 0; i < 5; i++)
  803550:	e03ffd15 	stw	zero,-12(fp)
  803554:	e0bffd17 	ldw	r2,-12(fp)
  803558:	10800148 	cmpgei	r2,r2,5
  80355c:	1000471e 	bne	r2,zero,80367c <draw_font+0x174>
	{
		if (i == 0)
  803560:	e0bffd17 	ldw	r2,-12(fp)
  803564:	1004c03a 	cmpne	r2,r2,zero
  803568:	1000031e 	bne	r2,zero,803578 <draw_font+0x70>
			row = r0;
  80356c:	e0bffb03 	ldbu	r2,-20(fp)
  803570:	e0bfff45 	stb	r2,-3(fp)
  803574:	00001706 	br	8035d4 <draw_font+0xcc>
		else if (i == 1)
  803578:	e0bffd17 	ldw	r2,-12(fp)
  80357c:	10800058 	cmpnei	r2,r2,1
  803580:	1000031e 	bne	r2,zero,803590 <draw_font+0x88>
			row = r1;
  803584:	e0bffb43 	ldbu	r2,-19(fp)
  803588:	e0bfff45 	stb	r2,-3(fp)
  80358c:	00001106 	br	8035d4 <draw_font+0xcc>
		else if (i == 2)
  803590:	e0bffd17 	ldw	r2,-12(fp)
  803594:	10800098 	cmpnei	r2,r2,2
  803598:	1000031e 	bne	r2,zero,8035a8 <draw_font+0xa0>
			row = r2;
  80359c:	e0bffb83 	ldbu	r2,-18(fp)
  8035a0:	e0bfff45 	stb	r2,-3(fp)
  8035a4:	00000b06 	br	8035d4 <draw_font+0xcc>
		else if (i == 3)
  8035a8:	e0bffd17 	ldw	r2,-12(fp)
  8035ac:	108000d8 	cmpnei	r2,r2,3
  8035b0:	1000031e 	bne	r2,zero,8035c0 <draw_font+0xb8>
			row = r3;
  8035b4:	e0bffbc3 	ldbu	r2,-17(fp)
  8035b8:	e0bfff45 	stb	r2,-3(fp)
  8035bc:	00000506 	br	8035d4 <draw_font+0xcc>
		else if (i == 4)
  8035c0:	e0bffd17 	ldw	r2,-12(fp)
  8035c4:	10800118 	cmpnei	r2,r2,4
  8035c8:	1000021e 	bne	r2,zero,8035d4 <draw_font+0xcc>
			row = r4;
  8035cc:	e0bffc03 	ldbu	r2,-16(fp)
  8035d0:	e0bfff45 	stb	r2,-3(fp)
		mask = 1;
  8035d4:	00800044 	movi	r2,1
  8035d8:	e0bfff05 	stb	r2,-4(fp)

		for (j = 0; j < 5; j++)
  8035dc:	e03ffe15 	stw	zero,-8(fp)
  8035e0:	e0bffe17 	ldw	r2,-8(fp)
  8035e4:	10800148 	cmpgei	r2,r2,5
  8035e8:	1000201e 	bne	r2,zero,80366c <draw_font+0x164>
		{
			if ((mask & row) > 0)
  8035ec:	e0ffff03 	ldbu	r3,-4(fp)
  8035f0:	e0bfff43 	ldbu	r2,-3(fp)
  8035f4:	1884703a 	and	r2,r3,r2
  8035f8:	10803fcc 	andi	r2,r2,255
  8035fc:	1005003a 	cmpeq	r2,r2,zero
  803600:	1000131e 	bne	r2,zero,803650 <draw_font+0x148>
			{
				/* there's a bit here */
				alt_up_pixel_buffer_draw_line(pixel_buffer, 
  803604:	e0c00617 	ldw	r3,24(fp)
  803608:	e0bffd17 	ldw	r2,-12(fp)
  80360c:	188b883a 	add	r5,r3,r2
  803610:	e0c00717 	ldw	r3,28(fp)
  803614:	e0bffe17 	ldw	r2,-8(fp)
  803618:	188d883a 	add	r6,r3,r2
  80361c:	e0c00617 	ldw	r3,24(fp)
  803620:	e0bffd17 	ldw	r2,-12(fp)
  803624:	188f883a 	add	r7,r3,r2
  803628:	e0c00717 	ldw	r3,28(fp)
  80362c:	e0bffe17 	ldw	r2,-8(fp)
  803630:	1885883a 	add	r2,r3,r2
  803634:	d8800015 	stw	r2,0(sp)
  803638:	e0bff917 	ldw	r2,-28(fp)
  80363c:	d8800115 	stw	r2,4(sp)
  803640:	e0bffa17 	ldw	r2,-24(fp)
  803644:	d8800215 	stw	r2,8(sp)
  803648:	e13ff817 	ldw	r4,-32(fp)
  80364c:	08184080 	call	818408 <alt_up_pixel_buffer_draw_line>
					x0+i, y0+j,
					x0+i, y0+j,
					color, buf);
			}
			mask = mask << 1;
  803650:	e0bfff03 	ldbu	r2,-4(fp)
  803654:	1085883a 	add	r2,r2,r2
  803658:	e0bfff05 	stb	r2,-4(fp)
  80365c:	e0bffe17 	ldw	r2,-8(fp)
  803660:	10800044 	addi	r2,r2,1
  803664:	e0bffe15 	stw	r2,-8(fp)
  803668:	003fdd06 	br	8035e0 <draw_font+0xd8>
  80366c:	e0bffd17 	ldw	r2,-12(fp)
  803670:	10800044 	addi	r2,r2,1
  803674:	e0bffd15 	stw	r2,-12(fp)
  803678:	003fb606 	br	803554 <draw_font+0x4c>
		}
	}
}
  80367c:	dfc00c17 	ldw	ra,48(sp)
  803680:	df000b17 	ldw	fp,44(sp)
  803684:	dec00d04 	addi	sp,sp,52
  803688:	f800283a 	ret

0080368c <timer_packet_interrupt_isr>:
void timer_packet_interrupt_isr(void* context)
#else
void timer_packet_interrupt_isr(void* context, alt_u32 id)
#endif
{
  80368c:	defffb04 	addi	sp,sp,-20
  803690:	dfc00415 	stw	ra,16(sp)
  803694:	df000315 	stw	fp,12(sp)
  803698:	df000304 	addi	fp,sp,12
  80369c:	e13ffd15 	stw	r4,-12(fp)
  8036a0:	e17ffe15 	stw	r5,-8(fp)
	volatile int* p_edge_capture_ptr = (volatile int*) context;
  8036a4:	e0bffd17 	ldw	r2,-12(fp)
  8036a8:	e0bfff15 	stw	r2,-4(fp)

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PUSH_BUTTONS_BASE, 0x0 );
  8036ac:	00804434 	movhi	r2,272
  8036b0:	10841e04 	addi	r2,r2,4216
  8036b4:	10000035 	stwio	zero,0(r2)

	// get the packet
	get_player_info();
  8036b8:	080370c0 	call	80370c <get_player_info>

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PUSH_BUTTONS_BASE, 0xf );
  8036bc:	00c04434 	movhi	r3,272
  8036c0:	18c41e04 	addi	r3,r3,4216
  8036c4:	008003c4 	movi	r2,15
  8036c8:	18800035 	stwio	r2,0(r3)
	/* Store the value in the Button's edge capture register in *context. */
	*p_edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTONS_BASE);
  8036cc:	00804434 	movhi	r2,272
  8036d0:	10841f04 	addi	r2,r2,4220
  8036d4:	10c00037 	ldwio	r3,0(r2)
  8036d8:	e0bfff17 	ldw	r2,-4(fp)
  8036dc:	10c00015 	stw	r3,0(r2)
	/* Reset the Button's edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTONS_BASE, 0xf);
  8036e0:	00c04434 	movhi	r3,272
  8036e4:	18c41f04 	addi	r3,r3,4220
  8036e8:	008003c4 	movi	r2,15
  8036ec:	18800035 	stwio	r2,0(r3)

	/* Read the PIO to delay ISR exit. This is done to prevent a spurious
	 * interrupt in systems with high processor -> pio latency and fast
	 * interrupts.  */
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTONS_BASE);
  8036f0:	00804434 	movhi	r2,272
  8036f4:	10841f04 	addi	r2,r2,4220
  8036f8:	10800037 	ldwio	r2,0(r2)
}
  8036fc:	dfc00417 	ldw	ra,16(sp)
  803700:	df000317 	ldw	fp,12(sp)
  803704:	dec00504 	addi	sp,sp,20
  803708:	f800283a 	ret

0080370c <get_player_info>:

/*---------------------------------------------------------------------------------------------
 * get_player_info
 * Goes to the ethernet core on the board and gets all the player data
 *-------------------------------------------------------------------------------------------*/
void get_player_info()
{
  80370c:	defffc04 	addi	sp,sp,-16
  803710:	df000315 	stw	fp,12(sp)
  803714:	df000304 	addi	fp,sp,12
	volatile alt_u32 input_packet_reg;
//	alt_u32 output_packet_reg = 0;
	alt_u32 mask;
	int i;

	isr_update = TRUE;
  803718:	00800044 	movi	r2,1
  80371c:	d0a0200d 	sth	r2,-32640(gp)

	/* tell the core your ready to receive data */
	mask = 1 << 30; // bit 31 is the rdy_read
  803720:	00900034 	movhi	r2,16384
  803724:	10800004 	addi	r2,r2,0
  803728:	e0bffe15 	stw	r2,-8(fp)
	output_packet_reg = output_packet_reg | mask;
  80372c:	d0e02617 	ldw	r3,-32616(gp)
  803730:	e0bffe17 	ldw	r2,-8(fp)
  803734:	1884b03a 	or	r2,r3,r2
  803738:	d0a02615 	stw	r2,-32616(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  80373c:	00c04434 	movhi	r3,272
  803740:	18c40804 	addi	r3,r3,4128
  803744:	d0a02617 	ldw	r2,-32616(gp)
  803748:	18800035 	stwio	r2,0(r3)

	for (i = 0; i < 256; i++)
  80374c:	e03fff15 	stw	zero,-4(fp)
  803750:	e0bfff17 	ldw	r2,-4(fp)
  803754:	10804008 	cmpgei	r2,r2,256
  803758:	10002c1e 	bne	r2,zero,80380c <get_player_info+0x100>
	{
		/* spin for send data */
		input_packet_reg = IORD_ALTERA_AVALON_PIO_DATA(INPUT_PACKET_BASE);
  80375c:	00804434 	movhi	r2,272
  803760:	10842804 	addi	r2,r2,4256
  803764:	10800037 	ldwio	r2,0(r2)
  803768:	e0bffd15 	stw	r2,-12(fp)
		mask = 1 << 16; // bit 17 will go high when the send packet can be read
  80376c:	00800074 	movhi	r2,1
  803770:	10800004 	addi	r2,r2,0
  803774:	e0bffe15 	stw	r2,-8(fp)

		while ((input_packet_reg & mask) == 0)
  803778:	e0fffd17 	ldw	r3,-12(fp)
  80377c:	e0bffe17 	ldw	r2,-8(fp)
  803780:	1884703a 	and	r2,r3,r2
  803784:	1004c03a 	cmpne	r2,r2,zero
  803788:	1000051e 	bne	r2,zero,8037a0 <get_player_info+0x94>
		{
			//printf("%x: Spin for packet: %x\n", i, input_packet_reg);
			input_packet_reg = IORD_ALTERA_AVALON_PIO_DATA(INPUT_PACKET_BASE);
  80378c:	00804434 	movhi	r2,272
  803790:	10842804 	addi	r2,r2,4256
  803794:	10800037 	ldwio	r2,0(r2)
  803798:	e0bffd15 	stw	r2,-12(fp)
  80379c:	003ff606 	br	803778 <get_player_info+0x6c>
		}
	
		/* store the packet and increment the counter */
		packets[i+256] = (alt_u16)input_packet_reg;
  8037a0:	010020b4 	movhi	r4,130
  8037a4:	212fe804 	addi	r4,r4,-16480
  8037a8:	e0ffff17 	ldw	r3,-4(fp)
  8037ac:	1805883a 	mov	r2,r3
  8037b0:	10c5883a 	add	r2,r2,r3
  8037b4:	1105883a 	add	r2,r2,r4
  8037b8:	10c08004 	addi	r3,r2,512
  8037bc:	e0bffd17 	ldw	r2,-12(fp)
  8037c0:	1880000d 	sth	r2,0(r3)

		/* send the ack bit */
		mask = 1 << 31; 
  8037c4:	00a00034 	movhi	r2,32768
  8037c8:	10800004 	addi	r2,r2,0
  8037cc:	e0bffe15 	stw	r2,-8(fp)
		output_packet_reg = mask;
  8037d0:	e0bffe17 	ldw	r2,-8(fp)
  8037d4:	d0a02615 	stw	r2,-32616(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  8037d8:	00c04434 	movhi	r3,272
  8037dc:	18c40804 	addi	r3,r3,4128
  8037e0:	d0a02617 	ldw	r2,-32616(gp)
  8037e4:	18800035 	stwio	r2,0(r3)
		/* turn off - assumes NIOS slower than design ... might throw delay */
		output_packet_reg = 0;
  8037e8:	d0202615 	stw	zero,-32616(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  8037ec:	00c04434 	movhi	r3,272
  8037f0:	18c40804 	addi	r3,r3,4128
  8037f4:	d0a02617 	ldw	r2,-32616(gp)
  8037f8:	18800035 	stwio	r2,0(r3)
  8037fc:	e0bfff17 	ldw	r2,-4(fp)
  803800:	10800044 	addi	r2,r2,1
  803804:	e0bfff15 	stw	r2,-4(fp)
  803808:	003fd106 	br	803750 <get_player_info+0x44>
	}

	/* find the bits for each of the actions - Player 1 */
	p1_ship.cA_hookedup_to = 	(packets[256] & 0xE000) >> 13;
  80380c:	00c020b4 	movhi	r3,130
  803810:	18efc004 	addi	r3,r3,-16640
  803814:	008020b4 	movhi	r2,130
  803818:	10afe804 	addi	r2,r2,-16480
  80381c:	1080800b 	ldhu	r2,512(r2)
  803820:	10b8000c 	andi	r2,r2,57344
  803824:	1005d37a 	srai	r2,r2,13
  803828:	18801605 	stb	r2,88(r3)
	p1_ship.c2_hookedup_to = 	(packets[256] & 0x1C00) >> 10;
  80382c:	00c020b4 	movhi	r3,130
  803830:	18efc004 	addi	r3,r3,-16640
  803834:	008020b4 	movhi	r2,130
  803838:	10afe804 	addi	r2,r2,-16480
  80383c:	1080800b 	ldhu	r2,512(r2)
  803840:	1087000c 	andi	r2,r2,7168
  803844:	1005d2ba 	srai	r2,r2,10
  803848:	18801645 	stb	r2,89(r3)
	p1_ship.c3_hookedup_to = 	(packets[256] & 0x0380) >> 7;
  80384c:	00c020b4 	movhi	r3,130
  803850:	18efc004 	addi	r3,r3,-16640
  803854:	008020b4 	movhi	r2,130
  803858:	10afe804 	addi	r2,r2,-16480
  80385c:	1080800b 	ldhu	r2,512(r2)
  803860:	1080e00c 	andi	r2,r2,896
  803864:	1005d1fa 	srai	r2,r2,7
  803868:	18801685 	stb	r2,90(r3)
	p1_ship.c4_hookedup_to = 	(packets[256] & 0x0070) >> 4;
  80386c:	00c020b4 	movhi	r3,130
  803870:	18efc004 	addi	r3,r3,-16640
  803874:	008020b4 	movhi	r2,130
  803878:	10afe804 	addi	r2,r2,-16480
  80387c:	1080800b 	ldhu	r2,512(r2)
  803880:	10801c0c 	andi	r2,r2,112
  803884:	1005d13a 	srai	r2,r2,4
  803888:	188016c5 	stb	r2,91(r3)
	p1_ship.engine = 		(packets[256] & 0x0008) >> 3;
  80388c:	00c020b4 	movhi	r3,130
  803890:	18efc004 	addi	r3,r3,-16640
  803894:	008020b4 	movhi	r2,130
  803898:	10afe804 	addi	r2,r2,-16480
  80389c:	1080800b 	ldhu	r2,512(r2)
  8038a0:	1080020c 	andi	r2,r2,8
  8038a4:	1005d0fa 	srai	r2,r2,3
  8038a8:	18801805 	stb	r2,96(r3)
	p1_ship.c5_hookedup_to = 	(packets[257] & 0xE000) >> 13;
  8038ac:	00c020b4 	movhi	r3,130
  8038b0:	18efc004 	addi	r3,r3,-16640
  8038b4:	008020b4 	movhi	r2,130
  8038b8:	10afe804 	addi	r2,r2,-16480
  8038bc:	1080808b 	ldhu	r2,514(r2)
  8038c0:	10b8000c 	andi	r2,r2,57344
  8038c4:	1005d37a 	srai	r2,r2,13
  8038c8:	18801705 	stb	r2,92(r3)
	p1_ship.c6_hookedup_to = 	(packets[257] & 0x1C00) >> 10;
  8038cc:	00c020b4 	movhi	r3,130
  8038d0:	18efc004 	addi	r3,r3,-16640
  8038d4:	008020b4 	movhi	r2,130
  8038d8:	10afe804 	addi	r2,r2,-16480
  8038dc:	1080808b 	ldhu	r2,514(r2)
  8038e0:	1087000c 	andi	r2,r2,7168
  8038e4:	1005d2ba 	srai	r2,r2,10
  8038e8:	18801745 	stb	r2,93(r3)
	p1_ship.c7_hookedup_to = 	(packets[257] & 0x0380) >> 7;
  8038ec:	00c020b4 	movhi	r3,130
  8038f0:	18efc004 	addi	r3,r3,-16640
  8038f4:	008020b4 	movhi	r2,130
  8038f8:	10afe804 	addi	r2,r2,-16480
  8038fc:	1080808b 	ldhu	r2,514(r2)
  803900:	1080e00c 	andi	r2,r2,896
  803904:	1005d1fa 	srai	r2,r2,7
  803908:	18801785 	stb	r2,94(r3)
	p1_ship.c8_hookedup_to = 	(packets[257] & 0x0070) >> 4;
  80390c:	00c020b4 	movhi	r3,130
  803910:	18efc004 	addi	r3,r3,-16640
  803914:	008020b4 	movhi	r2,130
  803918:	10afe804 	addi	r2,r2,-16480
  80391c:	1080808b 	ldhu	r2,514(r2)
  803920:	10801c0c 	andi	r2,r2,112
  803924:	1005d13a 	srai	r2,r2,4
  803928:	188017c5 	stb	r2,95(r3)
	p1_ship.engine_left_right = 	(packets[257] & 0x000C) >> 2;
  80392c:	00c020b4 	movhi	r3,130
  803930:	18efc004 	addi	r3,r3,-16640
  803934:	008020b4 	movhi	r2,130
  803938:	10afe804 	addi	r2,r2,-16480
  80393c:	1080808b 	ldhu	r2,514(r2)
  803940:	1080030c 	andi	r2,r2,12
  803944:	1005d0ba 	srai	r2,r2,2
  803948:	18801845 	stb	r2,97(r3)
	p1_ship.sensor_state = 	(packets[258] &	0x00C0) >> 6;
  80394c:	00c020b4 	movhi	r3,130
  803950:	18efc004 	addi	r3,r3,-16640
  803954:	008020b4 	movhi	r2,130
  803958:	10afe804 	addi	r2,r2,-16480
  80395c:	1080810b 	ldhu	r2,516(r2)
  803960:	1080300c 	andi	r2,r2,192
  803964:	1005d1ba 	srai	r2,r2,6
  803968:	18801885 	stb	r2,98(r3)
	p1_ship.sensor_move = 	(packets[258] & 0xFF00) >> 8;
  80396c:	00c020b4 	movhi	r3,130
  803970:	18efc004 	addi	r3,r3,-16640
  803974:	008020b4 	movhi	r2,130
  803978:	10afe804 	addi	r2,r2,-16480
  80397c:	1080810b 	ldhu	r2,516(r2)
  803980:	10bfc00c 	andi	r2,r2,65280
  803984:	1005d23a 	srai	r2,r2,8
  803988:	188018c5 	stb	r2,99(r3)
	p1_ship.cannon_fire = 	(packets[259] &	0x8000) >> 15;
  80398c:	00c020b4 	movhi	r3,130
  803990:	18efc004 	addi	r3,r3,-16640
  803994:	008020b4 	movhi	r2,130
  803998:	10afe804 	addi	r2,r2,-16480
  80399c:	1080818b 	ldhu	r2,518(r2)
  8039a0:	10a0000c 	andi	r2,r2,32768
  8039a4:	1005d3fa 	srai	r2,r2,15
  8039a8:	18801905 	stb	r2,100(r3)
	p1_ship.cannon_power = 	(packets[259] & 0x7FC0) >> 5;
  8039ac:	00c020b4 	movhi	r3,130
  8039b0:	18efc004 	addi	r3,r3,-16640
  8039b4:	008020b4 	movhi	r2,130
  8039b8:	10afe804 	addi	r2,r2,-16480
  8039bc:	1080818b 	ldhu	r2,518(r2)
  8039c0:	109ff00c 	andi	r2,r2,32704
  8039c4:	1005d17a 	srai	r2,r2,5
  8039c8:	1880198d 	sth	r2,102(r3)
	p1_ship.checksum =		packets[260];
  8039cc:	00c020b4 	movhi	r3,130
  8039d0:	18efc004 	addi	r3,r3,-16640
  8039d4:	008020b4 	movhi	r2,130
  8039d8:	10afe804 	addi	r2,r2,-16480
  8039dc:	1080820b 	ldhu	r2,520(r2)
  8039e0:	18801a0d 	sth	r2,104(r3)

	/* player 2 */
	p2_ship.cA_hookedup_to = 	(packets[320] & 0xE000) >> 13;
  8039e4:	00c020b4 	movhi	r3,130
  8039e8:	18f0e804 	addi	r3,r3,-15456
  8039ec:	008020b4 	movhi	r2,130
  8039f0:	10afe804 	addi	r2,r2,-16480
  8039f4:	1080a00b 	ldhu	r2,640(r2)
  8039f8:	10b8000c 	andi	r2,r2,57344
  8039fc:	1005d37a 	srai	r2,r2,13
  803a00:	18801605 	stb	r2,88(r3)
	p2_ship.c2_hookedup_to = 	(packets[320] & 0x1C00) >> 10;
  803a04:	00c020b4 	movhi	r3,130
  803a08:	18f0e804 	addi	r3,r3,-15456
  803a0c:	008020b4 	movhi	r2,130
  803a10:	10afe804 	addi	r2,r2,-16480
  803a14:	1080a00b 	ldhu	r2,640(r2)
  803a18:	1087000c 	andi	r2,r2,7168
  803a1c:	1005d2ba 	srai	r2,r2,10
  803a20:	18801645 	stb	r2,89(r3)
	p2_ship.c3_hookedup_to = 	(packets[320] & 0x0380) >> 7;
  803a24:	00c020b4 	movhi	r3,130
  803a28:	18f0e804 	addi	r3,r3,-15456
  803a2c:	008020b4 	movhi	r2,130
  803a30:	10afe804 	addi	r2,r2,-16480
  803a34:	1080a00b 	ldhu	r2,640(r2)
  803a38:	1080e00c 	andi	r2,r2,896
  803a3c:	1005d1fa 	srai	r2,r2,7
  803a40:	18801685 	stb	r2,90(r3)
	p2_ship.c4_hookedup_to = 	(packets[320] & 0x0070) >> 4;
  803a44:	00c020b4 	movhi	r3,130
  803a48:	18f0e804 	addi	r3,r3,-15456
  803a4c:	008020b4 	movhi	r2,130
  803a50:	10afe804 	addi	r2,r2,-16480
  803a54:	1080a00b 	ldhu	r2,640(r2)
  803a58:	10801c0c 	andi	r2,r2,112
  803a5c:	1005d13a 	srai	r2,r2,4
  803a60:	188016c5 	stb	r2,91(r3)
	p2_ship.engine = 	(packets[320] & 0x0008) >> 3;
  803a64:	00c020b4 	movhi	r3,130
  803a68:	18f0e804 	addi	r3,r3,-15456
  803a6c:	008020b4 	movhi	r2,130
  803a70:	10afe804 	addi	r2,r2,-16480
  803a74:	1080a00b 	ldhu	r2,640(r2)
  803a78:	1080020c 	andi	r2,r2,8
  803a7c:	1005d0fa 	srai	r2,r2,3
  803a80:	18801805 	stb	r2,96(r3)
	p2_ship.c5_hookedup_to = 	(packets[321] & 0xE000) >> 13;
  803a84:	00c020b4 	movhi	r3,130
  803a88:	18f0e804 	addi	r3,r3,-15456
  803a8c:	008020b4 	movhi	r2,130
  803a90:	10afe804 	addi	r2,r2,-16480
  803a94:	1080a08b 	ldhu	r2,642(r2)
  803a98:	10b8000c 	andi	r2,r2,57344
  803a9c:	1005d37a 	srai	r2,r2,13
  803aa0:	18801705 	stb	r2,92(r3)
	p2_ship.c6_hookedup_to = 	(packets[321] & 0x1C00) >> 10;
  803aa4:	00c020b4 	movhi	r3,130
  803aa8:	18f0e804 	addi	r3,r3,-15456
  803aac:	008020b4 	movhi	r2,130
  803ab0:	10afe804 	addi	r2,r2,-16480
  803ab4:	1080a08b 	ldhu	r2,642(r2)
  803ab8:	1087000c 	andi	r2,r2,7168
  803abc:	1005d2ba 	srai	r2,r2,10
  803ac0:	18801745 	stb	r2,93(r3)
	p2_ship.c7_hookedup_to = 	(packets[321] & 0x0380) >> 7;
  803ac4:	00c020b4 	movhi	r3,130
  803ac8:	18f0e804 	addi	r3,r3,-15456
  803acc:	008020b4 	movhi	r2,130
  803ad0:	10afe804 	addi	r2,r2,-16480
  803ad4:	1080a08b 	ldhu	r2,642(r2)
  803ad8:	1080e00c 	andi	r2,r2,896
  803adc:	1005d1fa 	srai	r2,r2,7
  803ae0:	18801785 	stb	r2,94(r3)
	p2_ship.c8_hookedup_to = 	(packets[321] & 0x0070) >> 4;
  803ae4:	00c020b4 	movhi	r3,130
  803ae8:	18f0e804 	addi	r3,r3,-15456
  803aec:	008020b4 	movhi	r2,130
  803af0:	10afe804 	addi	r2,r2,-16480
  803af4:	1080a08b 	ldhu	r2,642(r2)
  803af8:	10801c0c 	andi	r2,r2,112
  803afc:	1005d13a 	srai	r2,r2,4
  803b00:	188017c5 	stb	r2,95(r3)
	p2_ship.engine_left_right = 	(packets[321] & 0x000C) >> 2;
  803b04:	00c020b4 	movhi	r3,130
  803b08:	18f0e804 	addi	r3,r3,-15456
  803b0c:	008020b4 	movhi	r2,130
  803b10:	10afe804 	addi	r2,r2,-16480
  803b14:	1080a08b 	ldhu	r2,642(r2)
  803b18:	1080030c 	andi	r2,r2,12
  803b1c:	1005d0ba 	srai	r2,r2,2
  803b20:	18801845 	stb	r2,97(r3)
	p2_ship.sensor_state = 	(packets[322] &	0x00C0) >> 6;
  803b24:	00c020b4 	movhi	r3,130
  803b28:	18f0e804 	addi	r3,r3,-15456
  803b2c:	008020b4 	movhi	r2,130
  803b30:	10afe804 	addi	r2,r2,-16480
  803b34:	1080a10b 	ldhu	r2,644(r2)
  803b38:	1080300c 	andi	r2,r2,192
  803b3c:	1005d1ba 	srai	r2,r2,6
  803b40:	18801885 	stb	r2,98(r3)
	p2_ship.sensor_move = 	(packets[322] & 0xFF00) >> 8;
  803b44:	00c020b4 	movhi	r3,130
  803b48:	18f0e804 	addi	r3,r3,-15456
  803b4c:	008020b4 	movhi	r2,130
  803b50:	10afe804 	addi	r2,r2,-16480
  803b54:	1080a10b 	ldhu	r2,644(r2)
  803b58:	10bfc00c 	andi	r2,r2,65280
  803b5c:	1005d23a 	srai	r2,r2,8
  803b60:	188018c5 	stb	r2,99(r3)
	p2_ship.cannon_fire = 	(packets[323] &	0x8000) >> 15;
  803b64:	00c020b4 	movhi	r3,130
  803b68:	18f0e804 	addi	r3,r3,-15456
  803b6c:	008020b4 	movhi	r2,130
  803b70:	10afe804 	addi	r2,r2,-16480
  803b74:	1080a18b 	ldhu	r2,646(r2)
  803b78:	10a0000c 	andi	r2,r2,32768
  803b7c:	1005d3fa 	srai	r2,r2,15
  803b80:	18801905 	stb	r2,100(r3)
	p2_ship.cannon_power = 	(packets[323] & 0x7FC0) >> 5;
  803b84:	00c020b4 	movhi	r3,130
  803b88:	18f0e804 	addi	r3,r3,-15456
  803b8c:	008020b4 	movhi	r2,130
  803b90:	10afe804 	addi	r2,r2,-16480
  803b94:	1080a18b 	ldhu	r2,646(r2)
  803b98:	109ff00c 	andi	r2,r2,32704
  803b9c:	1005d17a 	srai	r2,r2,5
  803ba0:	1880198d 	sth	r2,102(r3)
	p2_ship.checksum =		packets[324];
  803ba4:	00c020b4 	movhi	r3,130
  803ba8:	18f0e804 	addi	r3,r3,-15456
  803bac:	008020b4 	movhi	r2,130
  803bb0:	10afe804 	addi	r2,r2,-16480
  803bb4:	1080a20b 	ldhu	r2,648(r2)
  803bb8:	18801a0d 	sth	r2,104(r3)

	/* now send the packets of the ship back */
	for (i = 0; i < 256; i++)
  803bbc:	e03fff15 	stw	zero,-4(fp)
  803bc0:	e0bfff17 	ldw	r2,-4(fp)
  803bc4:	10804008 	cmpgei	r2,r2,256
  803bc8:	1000201e 	bne	r2,zero,803c4c <get_player_info+0x540>
	{
		/* send the word */
		output_packet_reg = packets[i]; 
  803bcc:	010020b4 	movhi	r4,130
  803bd0:	212fe804 	addi	r4,r4,-16480
  803bd4:	e0ffff17 	ldw	r3,-4(fp)
  803bd8:	1805883a 	mov	r2,r3
  803bdc:	10c5883a 	add	r2,r2,r3
  803be0:	1105883a 	add	r2,r2,r4
  803be4:	1080000b 	ldhu	r2,0(r2)
  803be8:	d0a02615 	stw	r2,-32616(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  803bec:	00c04434 	movhi	r3,272
  803bf0:	18c40804 	addi	r3,r3,4128
  803bf4:	d0a02617 	ldw	r2,-32616(gp)
  803bf8:	18800035 	stwio	r2,0(r3)
		/* send the next bit send ready on idx 29 */
		mask = 1 << 29; 
  803bfc:	00880034 	movhi	r2,8192
  803c00:	10800004 	addi	r2,r2,0
  803c04:	e0bffe15 	stw	r2,-8(fp)
		output_packet_reg = output_packet_reg | mask;
  803c08:	d0e02617 	ldw	r3,-32616(gp)
  803c0c:	e0bffe17 	ldw	r2,-8(fp)
  803c10:	1884b03a 	or	r2,r3,r2
  803c14:	d0a02615 	stw	r2,-32616(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  803c18:	00c04434 	movhi	r3,272
  803c1c:	18c40804 	addi	r3,r3,4128
  803c20:	d0a02617 	ldw	r2,-32616(gp)
  803c24:	18800035 	stwio	r2,0(r3)
		/* turn off - assumes NIOS slower than design ... might throw delay */
		output_packet_reg = 0;
  803c28:	d0202615 	stw	zero,-32616(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  803c2c:	00c04434 	movhi	r3,272
  803c30:	18c40804 	addi	r3,r3,4128
  803c34:	d0a02617 	ldw	r2,-32616(gp)
  803c38:	18800035 	stwio	r2,0(r3)
  803c3c:	e0bfff17 	ldw	r2,-4(fp)
  803c40:	10800044 	addi	r2,r2,1
  803c44:	e0bfff15 	stw	r2,-4(fp)
  803c48:	003fdd06 	br	803bc0 <get_player_info+0x4b4>
	}

	/* send all sends there */
	mask = 1 << 28; 
  803c4c:	00840034 	movhi	r2,4096
  803c50:	10800004 	addi	r2,r2,0
  803c54:	e0bffe15 	stw	r2,-8(fp)
	output_packet_reg = mask;
  803c58:	e0bffe17 	ldw	r2,-8(fp)
  803c5c:	d0a02615 	stw	r2,-32616(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  803c60:	00c04434 	movhi	r3,272
  803c64:	18c40804 	addi	r3,r3,4128
  803c68:	d0a02617 	ldw	r2,-32616(gp)
  803c6c:	18800035 	stwio	r2,0(r3)
}
  803c70:	df000317 	ldw	fp,12(sp)
  803c74:	dec00404 	addi	sp,sp,16
  803c78:	f800283a 	ret

00803c7c <init_packet_interrupt_isr>:

/*---------------------------------------------------------------------------------------------
 * init_packet_interrupt_isr
 *-------------------------------------------------------------------------------------------*/
void init_packet_interrupt_isr()
{
  803c7c:	defffd04 	addi	sp,sp,-12
  803c80:	dfc00215 	stw	ra,8(sp)
  803c84:	df000115 	stw	fp,4(sp)
  803c88:	df000104 	addi	fp,sp,4
	void* p_edge_capture_ptr = (void*) &p_edge_capture;
  803c8c:	d0a02104 	addi	r2,gp,-32636
  803c90:	e0bfff15 	stw	r2,-4(fp)
	/* Enable all 4 button interrupts. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PUSH_BUTTONS_BASE, 0xf);
  803c94:	00c04434 	movhi	r3,272
  803c98:	18c41e04 	addi	r3,r3,4216
  803c9c:	008003c4 	movi	r2,15
  803ca0:	18800035 	stwio	r2,0(r3)
	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTONS_BASE, 0xf); // needs to be high for all four buttons since the push button is high
  803ca4:	00c04434 	movhi	r3,272
  803ca8:	18c41f04 	addi	r3,r3,4220
  803cac:	008003c4 	movi	r2,15
  803cb0:	18800035 	stwio	r2,0(r3)

	/*
	 * Register the interrupt handler.
	 * Provision is made here for systems that might have either the
	 * legacy or enhanced interrupt API active, or for the Nios II IDE
	 * which does not support enhanced interrupts. For systems created using
	 * the Nios II softawre build tools, the enhanced API is recommended
	 * for new designs.
	 */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	alt_ic_isr_register(PUSH_BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,PUSH_BUTTONS_IRQ, timer_packet_interrupt_isr, p_edge_capture_ptr, 0x0);
#else
	alt_irq_register( PUSH_BUTTONS_IRQ, p_edge_capture_ptr, timer_packet_interrupt_isr);
  803cb4:	01000044 	movi	r4,1
  803cb8:	e17fff17 	ldw	r5,-4(fp)
  803cbc:	01802034 	movhi	r6,128
  803cc0:	318da304 	addi	r6,r6,13964
  803cc4:	08149f80 	call	8149f8 <alt_irq_register>
#endif
}
  803cc8:	dfc00217 	ldw	ra,8(sp)
  803ccc:	df000117 	ldw	fp,4(sp)
  803cd0:	dec00304 	addi	sp,sp,12
  803cd4:	f800283a 	ret

00803cd8 <disable_packet_interrupt>:

/*---------------------------------------------------------------------------------------------
 * disable_packet_interrupt
 *-------------------------------------------------------------------------------------------*/
void disable_packet_interrupt()
{
  803cd8:	defffe04 	addi	sp,sp,-8
  803cdc:	dfc00115 	stw	ra,4(sp)
  803ce0:	df000015 	stw	fp,0(sp)
  803ce4:	d839883a 	mov	fp,sp
	/* Disable interrupts from the button_pio PIO component. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PUSH_BUTTONS_BASE, 0x0);
  803ce8:	00804434 	movhi	r2,272
  803cec:	10841e04 	addi	r2,r2,4216
  803cf0:	10000035 	stwio	zero,0(r2)
	/* Un-register the IRQ handler by passing a null handler. */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	alt_ic_isr_register(PUSH_BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_PIO_IRQ, NULL, NULL, NULL);
#else
	alt_irq_register( PUSH_BUTTONS_IRQ, NULL, NULL );
  803cf4:	01000044 	movi	r4,1
  803cf8:	000b883a 	mov	r5,zero
  803cfc:	000d883a 	mov	r6,zero
  803d00:	08149f80 	call	8149f8 <alt_irq_register>
#endif
}
  803d04:	dfc00117 	ldw	ra,4(sp)
  803d08:	df000017 	ldw	fp,0(sp)
  803d0c:	dec00204 	addi	sp,sp,8
  803d10:	f800283a 	ret

00803d14 <update_packets_to_send_back>:
/*---------------------------------------------------------------------------------------------
 * update_packets_to_send_back
 *-------------------------------------------------------------------------------------------*/
void update_packets_to_send_back(ship_t *ship, int address_start)
{
  803d14:	defffb04 	addi	sp,sp,-20
  803d18:	dfc00415 	stw	ra,16(sp)
  803d1c:	df000315 	stw	fp,12(sp)
  803d20:	dc000215 	stw	r16,8(sp)
  803d24:	df000304 	addi	fp,sp,12
  803d28:	e13ffd15 	stw	r4,-12(fp)
  803d2c:	e17ffe15 	stw	r5,-8(fp)
	packets[address_start+0] = 	((ship->A_E_val << 12) & 0xF000) | 
  803d30:	010020b4 	movhi	r4,130
  803d34:	212fe804 	addi	r4,r4,-16480
  803d38:	e0fffe17 	ldw	r3,-8(fp)
  803d3c:	1805883a 	mov	r2,r3
  803d40:	10c5883a 	add	r2,r2,r3
  803d44:	1109883a 	add	r4,r2,r4
  803d48:	e0bffd17 	ldw	r2,-12(fp)
  803d4c:	108020c3 	ldbu	r2,131(r2)
  803d50:	1004933a 	slli	r2,r2,12
  803d54:	00fc0004 	movi	r3,-4096
  803d58:	1886703a 	and	r3,r3,r2
  803d5c:	e0bffd17 	ldw	r2,-12(fp)
  803d60:	10802083 	ldbu	r2,130(r2)
  803d64:	1004923a 	slli	r2,r2,8
  803d68:	1083c00c 	andi	r2,r2,3840
  803d6c:	1886b03a 	or	r3,r3,r2
  803d70:	e0bffd17 	ldw	r2,-12(fp)
  803d74:	10802043 	ldbu	r2,129(r2)
  803d78:	1004913a 	slli	r2,r2,4
  803d7c:	10803c0c 	andi	r2,r2,240
  803d80:	1886b03a 	or	r3,r3,r2
  803d84:	e0bffd17 	ldw	r2,-12(fp)
  803d88:	10802003 	ldbu	r2,128(r2)
  803d8c:	108003cc 	andi	r2,r2,15
  803d90:	1884b03a 	or	r2,r3,r2
  803d94:	2080000d 	sth	r2,0(r4)
					((ship->A_D_val << 8) &  0x0F00) |
					((ship->A_C_val << 4) &  0x00F0) |
					((ship->A_B_val) 	&  0x000F);
	packets[address_start+1] = 	((ship->B_C_val << 12) & 0xF000) | 
  803d98:	010020b4 	movhi	r4,130
  803d9c:	212fe804 	addi	r4,r4,-16480
  803da0:	e0fffe17 	ldw	r3,-8(fp)
  803da4:	1805883a 	mov	r2,r3
  803da8:	10c5883a 	add	r2,r2,r3
  803dac:	1105883a 	add	r2,r2,r4
  803db0:	11000084 	addi	r4,r2,2
  803db4:	e0bffd17 	ldw	r2,-12(fp)
  803db8:	108021c3 	ldbu	r2,135(r2)
  803dbc:	1004933a 	slli	r2,r2,12
  803dc0:	00fc0004 	movi	r3,-4096
  803dc4:	1886703a 	and	r3,r3,r2
  803dc8:	e0bffd17 	ldw	r2,-12(fp)
  803dcc:	10802183 	ldbu	r2,134(r2)
  803dd0:	1004923a 	slli	r2,r2,8
  803dd4:	1083c00c 	andi	r2,r2,3840
  803dd8:	1886b03a 	or	r3,r3,r2
  803ddc:	e0bffd17 	ldw	r2,-12(fp)
  803de0:	10802143 	ldbu	r2,133(r2)
  803de4:	1004913a 	slli	r2,r2,4
  803de8:	10803c0c 	andi	r2,r2,240
  803dec:	1886b03a 	or	r3,r3,r2
  803df0:	e0bffd17 	ldw	r2,-12(fp)
  803df4:	10802103 	ldbu	r2,132(r2)
  803df8:	108003cc 	andi	r2,r2,15
  803dfc:	1884b03a 	or	r2,r3,r2
  803e00:	2080000d 	sth	r2,0(r4)
					((ship->A_H_val << 8) &  0x0F00) |
					((ship->A_G_val << 4) &  0x00F0) |
					((ship->A_F_val) 	&  0x000F);
	packets[address_start+2] = 	((ship->B_G_val << 12) & 0xF000) | 
  803e04:	010020b4 	movhi	r4,130
  803e08:	212fe804 	addi	r4,r4,-16480
  803e0c:	e0fffe17 	ldw	r3,-8(fp)
  803e10:	1805883a 	mov	r2,r3
  803e14:	10c5883a 	add	r2,r2,r3
  803e18:	1105883a 	add	r2,r2,r4
  803e1c:	11000104 	addi	r4,r2,4
  803e20:	e0bffd17 	ldw	r2,-12(fp)
  803e24:	108022c3 	ldbu	r2,139(r2)
  803e28:	1004933a 	slli	r2,r2,12
  803e2c:	00fc0004 	movi	r3,-4096
  803e30:	1886703a 	and	r3,r3,r2
  803e34:	e0bffd17 	ldw	r2,-12(fp)
  803e38:	10802283 	ldbu	r2,138(r2)
  803e3c:	1004923a 	slli	r2,r2,8
  803e40:	1083c00c 	andi	r2,r2,3840
  803e44:	1886b03a 	or	r3,r3,r2
  803e48:	e0bffd17 	ldw	r2,-12(fp)
  803e4c:	10802243 	ldbu	r2,137(r2)
  803e50:	1004913a 	slli	r2,r2,4
  803e54:	10803c0c 	andi	r2,r2,240
  803e58:	1886b03a 	or	r3,r3,r2
  803e5c:	e0bffd17 	ldw	r2,-12(fp)
  803e60:	10802203 	ldbu	r2,136(r2)
  803e64:	108003cc 	andi	r2,r2,15
  803e68:	1884b03a 	or	r2,r3,r2
  803e6c:	2080000d 	sth	r2,0(r4)
					((ship->B_F_val << 8) &  0x0F00) |
					((ship->B_E_val << 4) &  0x00F0) |
					((ship->B_D_val) 	&  0x000F);
	packets[address_start+3] = 	((ship->C_F_val << 12) & 0xF000) | 
  803e70:	010020b4 	movhi	r4,130
  803e74:	212fe804 	addi	r4,r4,-16480
  803e78:	e0fffe17 	ldw	r3,-8(fp)
  803e7c:	1805883a 	mov	r2,r3
  803e80:	10c5883a 	add	r2,r2,r3
  803e84:	1105883a 	add	r2,r2,r4
  803e88:	11000184 	addi	r4,r2,6
  803e8c:	e0bffd17 	ldw	r2,-12(fp)
  803e90:	108023c3 	ldbu	r2,143(r2)
  803e94:	1004933a 	slli	r2,r2,12
  803e98:	00fc0004 	movi	r3,-4096
  803e9c:	1886703a 	and	r3,r3,r2
  803ea0:	e0bffd17 	ldw	r2,-12(fp)
  803ea4:	10802383 	ldbu	r2,142(r2)
  803ea8:	1004923a 	slli	r2,r2,8
  803eac:	1083c00c 	andi	r2,r2,3840
  803eb0:	1886b03a 	or	r3,r3,r2
  803eb4:	e0bffd17 	ldw	r2,-12(fp)
  803eb8:	10802343 	ldbu	r2,141(r2)
  803ebc:	1004913a 	slli	r2,r2,4
  803ec0:	10803c0c 	andi	r2,r2,240
  803ec4:	1886b03a 	or	r3,r3,r2
  803ec8:	e0bffd17 	ldw	r2,-12(fp)
  803ecc:	10802303 	ldbu	r2,140(r2)
  803ed0:	108003cc 	andi	r2,r2,15
  803ed4:	1884b03a 	or	r2,r3,r2
  803ed8:	2080000d 	sth	r2,0(r4)
					((ship->C_E_val << 8) &  0x0F00) |
					((ship->C_D_val << 4) &  0x00F0) |
					((ship->B_H_val) 	&  0x000F);
	packets[address_start+4] = 	((ship->D_F_val << 12) & 0xF000) | 
  803edc:	010020b4 	movhi	r4,130
  803ee0:	212fe804 	addi	r4,r4,-16480
  803ee4:	e0fffe17 	ldw	r3,-8(fp)
  803ee8:	1805883a 	mov	r2,r3
  803eec:	10c5883a 	add	r2,r2,r3
  803ef0:	1105883a 	add	r2,r2,r4
  803ef4:	11000204 	addi	r4,r2,8
  803ef8:	e0bffd17 	ldw	r2,-12(fp)
  803efc:	108024c3 	ldbu	r2,147(r2)
  803f00:	1004933a 	slli	r2,r2,12
  803f04:	00fc0004 	movi	r3,-4096
  803f08:	1886703a 	and	r3,r3,r2
  803f0c:	e0bffd17 	ldw	r2,-12(fp)
  803f10:	10802483 	ldbu	r2,146(r2)
  803f14:	1004923a 	slli	r2,r2,8
  803f18:	1083c00c 	andi	r2,r2,3840
  803f1c:	1886b03a 	or	r3,r3,r2
  803f20:	e0bffd17 	ldw	r2,-12(fp)
  803f24:	10802443 	ldbu	r2,145(r2)
  803f28:	1004913a 	slli	r2,r2,4
  803f2c:	10803c0c 	andi	r2,r2,240
  803f30:	1886b03a 	or	r3,r3,r2
  803f34:	e0bffd17 	ldw	r2,-12(fp)
  803f38:	10802403 	ldbu	r2,144(r2)
  803f3c:	108003cc 	andi	r2,r2,15
  803f40:	1884b03a 	or	r2,r3,r2
  803f44:	2080000d 	sth	r2,0(r4)
					((ship->D_E_val << 8) &  0x0F00) |
					((ship->C_H_val << 4) &  0x00F0) |
					((ship->C_G_val) 	&  0x000F);
	packets[address_start+5] = 	((ship->E_G_val << 12) & 0xF000) | 
  803f48:	010020b4 	movhi	r4,130
  803f4c:	212fe804 	addi	r4,r4,-16480
  803f50:	e0fffe17 	ldw	r3,-8(fp)
  803f54:	1805883a 	mov	r2,r3
  803f58:	10c5883a 	add	r2,r2,r3
  803f5c:	1105883a 	add	r2,r2,r4
  803f60:	11000284 	addi	r4,r2,10
  803f64:	e0bffd17 	ldw	r2,-12(fp)
  803f68:	108025c3 	ldbu	r2,151(r2)
  803f6c:	1004933a 	slli	r2,r2,12
  803f70:	00fc0004 	movi	r3,-4096
  803f74:	1886703a 	and	r3,r3,r2
  803f78:	e0bffd17 	ldw	r2,-12(fp)
  803f7c:	10802583 	ldbu	r2,150(r2)
  803f80:	1004923a 	slli	r2,r2,8
  803f84:	1083c00c 	andi	r2,r2,3840
  803f88:	1886b03a 	or	r3,r3,r2
  803f8c:	e0bffd17 	ldw	r2,-12(fp)
  803f90:	10802543 	ldbu	r2,149(r2)
  803f94:	1004913a 	slli	r2,r2,4
  803f98:	10803c0c 	andi	r2,r2,240
  803f9c:	1886b03a 	or	r3,r3,r2
  803fa0:	e0bffd17 	ldw	r2,-12(fp)
  803fa4:	10802503 	ldbu	r2,148(r2)
  803fa8:	108003cc 	andi	r2,r2,15
  803fac:	1884b03a 	or	r2,r3,r2
  803fb0:	2080000d 	sth	r2,0(r4)
					((ship->E_F_val << 8) &  0x0F00) |
					((ship->D_H_val << 4) &  0x00F0) |
					((ship->D_G_val) 	&  0x000F);
	packets[address_start+6] = 	((ship->G_H_val << 12) & 0xF000) | 
  803fb4:	010020b4 	movhi	r4,130
  803fb8:	212fe804 	addi	r4,r4,-16480
  803fbc:	e0fffe17 	ldw	r3,-8(fp)
  803fc0:	1805883a 	mov	r2,r3
  803fc4:	10c5883a 	add	r2,r2,r3
  803fc8:	1105883a 	add	r2,r2,r4
  803fcc:	11000304 	addi	r4,r2,12
  803fd0:	e0bffd17 	ldw	r2,-12(fp)
  803fd4:	108026c3 	ldbu	r2,155(r2)
  803fd8:	1004933a 	slli	r2,r2,12
  803fdc:	00fc0004 	movi	r3,-4096
  803fe0:	1886703a 	and	r3,r3,r2
  803fe4:	e0bffd17 	ldw	r2,-12(fp)
  803fe8:	10802683 	ldbu	r2,154(r2)
  803fec:	1004923a 	slli	r2,r2,8
  803ff0:	1083c00c 	andi	r2,r2,3840
  803ff4:	1886b03a 	or	r3,r3,r2
  803ff8:	e0bffd17 	ldw	r2,-12(fp)
  803ffc:	10802643 	ldbu	r2,153(r2)
  804000:	1004913a 	slli	r2,r2,4
  804004:	10803c0c 	andi	r2,r2,240
  804008:	1886b03a 	or	r3,r3,r2
  80400c:	e0bffd17 	ldw	r2,-12(fp)
  804010:	10802603 	ldbu	r2,152(r2)
  804014:	108003cc 	andi	r2,r2,15
  804018:	1884b03a 	or	r2,r3,r2
  80401c:	2080000d 	sth	r2,0(r4)
					((ship->F_H_val << 8) &  0x0F00) |
					((ship->F_G_val << 4) &  0x00F0) |
					((ship->E_H_val) 	&  0x000F);
	packets[address_start+7] = 	ship->sensor_detected_something;
  804020:	010020b4 	movhi	r4,130
  804024:	212fe804 	addi	r4,r4,-16480
  804028:	e0fffe17 	ldw	r3,-8(fp)
  80402c:	1805883a 	mov	r2,r3
  804030:	10c5883a 	add	r2,r2,r3
  804034:	1105883a 	add	r2,r2,r4
  804038:	10c00384 	addi	r3,r2,14
  80403c:	e0bffd17 	ldw	r2,-12(fp)
  804040:	10802703 	ldbu	r2,156(r2)
  804044:	1880000d 	sth	r2,0(r3)
	packets[address_start+8] = 	roundf(ship->x);
  804048:	010020b4 	movhi	r4,130
  80404c:	212fe804 	addi	r4,r4,-16480
  804050:	e0fffe17 	ldw	r3,-8(fp)
  804054:	1805883a 	mov	r2,r3
  804058:	10c5883a 	add	r2,r2,r3
  80405c:	1105883a 	add	r2,r2,r4
  804060:	14000404 	addi	r16,r2,16
  804064:	e0bffd17 	ldw	r2,-12(fp)
  804068:	11000a17 	ldw	r4,40(r2)
  80406c:	0807cfc0 	call	807cfc <roundf>
  804070:	1009883a 	mov	r4,r2
  804074:	080a3980 	call	80a398 <__fixunssfsi>
  804078:	8080000d 	sth	r2,0(r16)
	packets[address_start+9] = 	roundf(ship->y);
  80407c:	010020b4 	movhi	r4,130
  804080:	212fe804 	addi	r4,r4,-16480
  804084:	e0fffe17 	ldw	r3,-8(fp)
  804088:	1805883a 	mov	r2,r3
  80408c:	10c5883a 	add	r2,r2,r3
  804090:	1105883a 	add	r2,r2,r4
  804094:	14000484 	addi	r16,r2,18
  804098:	e0bffd17 	ldw	r2,-12(fp)
  80409c:	11000b17 	ldw	r4,44(r2)
  8040a0:	0807cfc0 	call	807cfc <roundf>
  8040a4:	1009883a 	mov	r4,r2
  8040a8:	080a3980 	call	80a398 <__fixunssfsi>
  8040ac:	8080000d 	sth	r2,0(r16)
	packets[address_start+10] = 	ship->rx_checksum;
  8040b0:	010020b4 	movhi	r4,130
  8040b4:	212fe804 	addi	r4,r4,-16480
  8040b8:	e0fffe17 	ldw	r3,-8(fp)
  8040bc:	1805883a 	mov	r2,r3
  8040c0:	10c5883a 	add	r2,r2,r3
  8040c4:	1105883a 	add	r2,r2,r4
  8040c8:	10c00504 	addi	r3,r2,20
  8040cc:	e0bffd17 	ldw	r2,-12(fp)
  8040d0:	1080278b 	ldhu	r2,158(r2)
  8040d4:	1880000d 	sth	r2,0(r3)
}
  8040d8:	dfc00417 	ldw	ra,16(sp)
  8040dc:	df000317 	ldw	fp,12(sp)
  8040e0:	dc000217 	ldw	r16,8(sp)
  8040e4:	dec00504 	addi	sp,sp,20
  8040e8:	f800283a 	ret

008040ec <game_loop>:
/*---------------------------------------------------------------------------------------------
 * (function: game_loop)
 *-------------------------------------------------------------------------------------------*/
short game_loop(int data_update, int second, int partial_second, short first_run)
{
  8040ec:	deffe104 	addi	sp,sp,-124
  8040f0:	dfc01e15 	stw	ra,120(sp)
  8040f4:	df001d15 	stw	fp,116(sp)
  8040f8:	dc001c15 	stw	r16,112(sp)
  8040fc:	dc401b15 	stw	r17,108(sp)
  804100:	df001d04 	addi	fp,sp,116
  804104:	e13fe615 	stw	r4,-104(fp)
  804108:	e17fe715 	stw	r5,-100(fp)
  80410c:	e1bfe815 	stw	r6,-96(fp)
  804110:	e1ffe90d 	sth	r7,-92(fp)
	int i;
	ship_t *ship;
	vector_t new_velocity;
	short hit;
	int x;
	int y;
	int angle;

	/* record anything that might be changed and needs refreshing */
	p1_ship.power_budget_this_minute_old = p1_ship.power_budget_this_minute;
  804114:	00c020b4 	movhi	r3,130
  804118:	18efc004 	addi	r3,r3,-16640
  80411c:	008020b4 	movhi	r2,130
  804120:	10afc004 	addi	r2,r2,-16640
  804124:	10801b17 	ldw	r2,108(r2)
  804128:	18801c15 	stw	r2,112(r3)
	p2_ship.power_budget_this_minute_old = p2_ship.power_budget_this_minute;
  80412c:	00c020b4 	movhi	r3,130
  804130:	18f0e804 	addi	r3,r3,-15456
  804134:	008020b4 	movhi	r2,130
  804138:	10b0e804 	addi	r2,r2,-15456
  80413c:	10801b17 	ldw	r2,108(r2)
  804140:	18801c15 	stw	r2,112(r3)

	if (second == -1)
  804144:	e0bfe717 	ldw	r2,-100(fp)
  804148:	10bfffd8 	cmpnei	r2,r2,-1
  80414c:	1000031e 	bne	r2,zero,80415c <game_loop+0x70>
	{
		/* waiting for game to start - will happen after messages sent */
		return LIVE;
  804150:	008000c4 	movi	r2,3
  804154:	e0bff715 	stw	r2,-36(fp)
  804158:	00036306 	br	804ee8 <game_loop+0xdfc>
	}
	/* check for energy stall, power levels, and game_over */
	else if (second == 0)
  80415c:	e0bfe717 	ldw	r2,-100(fp)
  804160:	1004c03a 	cmpne	r2,r2,zero
  804164:	1000561e 	bne	r2,zero,8042c0 <game_loop+0x1d4>
	{
		/* new minute */
		p1_ship.power_budget_this_minute = power_calculation(&p1_ship);
  804168:	040020b4 	movhi	r16,130
  80416c:	842fc004 	addi	r16,r16,-16640
  804170:	010020b4 	movhi	r4,130
  804174:	212fc004 	addi	r4,r4,-16640
  804178:	080693c0 	call	80693c <power_calculation>
  80417c:	80801b15 	stw	r2,108(r16)
		if (p1_ship.power_budget_this_minute > BASIC_POWER_COST)
  804180:	008020b4 	movhi	r2,130
  804184:	10afc004 	addi	r2,r2,-16640
  804188:	10801b17 	ldw	r2,108(r2)
  80418c:	108002d0 	cmplti	r2,r2,11
  804190:	1000071e 	bne	r2,zero,8041b0 <game_loop+0xc4>
		{
			p1_ship.stalled = FALSE;
  804194:	008020b4 	movhi	r2,130
  804198:	10afc004 	addi	r2,r2,-16640
  80419c:	10001e0d 	sth	zero,120(r2)
			p1_ship.stalled_for_minutes = 0;
  8041a0:	008020b4 	movhi	r2,130
  8041a4:	10afc004 	addi	r2,r2,-16640
  8041a8:	10001e8d 	sth	zero,122(r2)
  8041ac:	00000b06 	br	8041dc <game_loop+0xf0>
		}
		else
		{
			p1_ship.stalled = TRUE;
  8041b0:	00c020b4 	movhi	r3,130
  8041b4:	18efc004 	addi	r3,r3,-16640
  8041b8:	00800044 	movi	r2,1
  8041bc:	18801e0d 	sth	r2,120(r3)
			p1_ship.stalled_for_minutes ++;
  8041c0:	00c020b4 	movhi	r3,130
  8041c4:	18efc004 	addi	r3,r3,-16640
  8041c8:	008020b4 	movhi	r2,130
  8041cc:	10afc004 	addi	r2,r2,-16640
  8041d0:	10801e8b 	ldhu	r2,122(r2)
  8041d4:	10800044 	addi	r2,r2,1
  8041d8:	18801e8d 	sth	r2,122(r3)
		}

		p2_ship.power_budget_this_minute = power_calculation(&p2_ship);
  8041dc:	040020b4 	movhi	r16,130
  8041e0:	8430e804 	addi	r16,r16,-15456
  8041e4:	010020b4 	movhi	r4,130
  8041e8:	2130e804 	addi	r4,r4,-15456
  8041ec:	080693c0 	call	80693c <power_calculation>
  8041f0:	80801b15 	stw	r2,108(r16)
		if (p2_ship.power_budget_this_minute > BASIC_POWER_COST)
  8041f4:	008020b4 	movhi	r2,130
  8041f8:	10b0e804 	addi	r2,r2,-15456
  8041fc:	10801b17 	ldw	r2,108(r2)
  804200:	108002d0 	cmplti	r2,r2,11
  804204:	1000071e 	bne	r2,zero,804224 <game_loop+0x138>
		{
			p2_ship.stalled = FALSE;
  804208:	008020b4 	movhi	r2,130
  80420c:	10b0e804 	addi	r2,r2,-15456
  804210:	10001e0d 	sth	zero,120(r2)
			p2_ship.stalled_for_minutes = 0;
  804214:	008020b4 	movhi	r2,130
  804218:	10b0e804 	addi	r2,r2,-15456
  80421c:	10001e8d 	sth	zero,122(r2)
  804220:	00000b06 	br	804250 <game_loop+0x164>
		}
		else
		{
			p2_ship.stalled = TRUE;
  804224:	00c020b4 	movhi	r3,130
  804228:	18f0e804 	addi	r3,r3,-15456
  80422c:	00800044 	movi	r2,1
  804230:	18801e0d 	sth	r2,120(r3)
			p2_ship.stalled_for_minutes ++;
  804234:	00c020b4 	movhi	r3,130
  804238:	18f0e804 	addi	r3,r3,-15456
  80423c:	008020b4 	movhi	r2,130
  804240:	10b0e804 	addi	r2,r2,-15456
  804244:	10801e8b 	ldhu	r2,122(r2)
  804248:	10800044 	addi	r2,r2,1
  80424c:	18801e8d 	sth	r2,122(r3)
		}

		if (p1_ship.stalled_for_minutes >= GAME_OVER_STALL_TIME && p2_ship.stalled_for_minutes >= GAME_OVER_STALL_TIME)
  804250:	008020b4 	movhi	r2,130
  804254:	10afc004 	addi	r2,r2,-16640
  804258:	10801e8f 	ldh	r2,122(r2)
  80425c:	10800090 	cmplti	r2,r2,2
  804260:	1000071e 	bne	r2,zero,804280 <game_loop+0x194>
  804264:	008020b4 	movhi	r2,130
  804268:	10b0e804 	addi	r2,r2,-15456
  80426c:	10801e8f 	ldh	r2,122(r2)
  804270:	10800090 	cmplti	r2,r2,2
  804274:	1000021e 	bne	r2,zero,804280 <game_loop+0x194>
		{
			return TIE;
  804278:	e03ff715 	stw	zero,-36(fp)
  80427c:	00031a06 	br	804ee8 <game_loop+0xdfc>
		}
		else if (p1_ship.stalled_for_minutes >= GAME_OVER_STALL_TIME)
  804280:	008020b4 	movhi	r2,130
  804284:	10afc004 	addi	r2,r2,-16640
  804288:	10801e8f 	ldh	r2,122(r2)
  80428c:	10800090 	cmplti	r2,r2,2
  804290:	1000031e 	bne	r2,zero,8042a0 <game_loop+0x1b4>
		{
			return P1;
  804294:	00c00044 	movi	r3,1
  804298:	e0fff715 	stw	r3,-36(fp)
  80429c:	00031206 	br	804ee8 <game_loop+0xdfc>
		}
		else if (p2_ship.stalled_for_minutes >= GAME_OVER_STALL_TIME)
  8042a0:	008020b4 	movhi	r2,130
  8042a4:	10b0e804 	addi	r2,r2,-15456
  8042a8:	10801e8f 	ldh	r2,122(r2)
  8042ac:	10800090 	cmplti	r2,r2,2
  8042b0:	1000031e 	bne	r2,zero,8042c0 <game_loop+0x1d4>
		{
			return P2;
  8042b4:	00800084 	movi	r2,2
  8042b8:	e0bff715 	stw	r2,-36(fp)
  8042bc:	00030a06 	br	804ee8 <game_loop+0xdfc>
		}
	}

	if (partial_second == 0)
  8042c0:	e0bfe817 	ldw	r2,-96(fp)
  8042c4:	1004c03a 	cmpne	r2,r2,zero
  8042c8:	1000261e 	bne	r2,zero,804364 <game_loop+0x278>
	{
		/* new second */
		for (i = 0; i < 2; i++)
  8042cc:	e03fea15 	stw	zero,-88(fp)
  8042d0:	e0bfea17 	ldw	r2,-88(fp)
  8042d4:	10800088 	cmpgei	r2,r2,2
  8042d8:	1000221e 	bne	r2,zero,804364 <game_loop+0x278>
		{
			if (i == 0)
  8042dc:	e0bfea17 	ldw	r2,-88(fp)
  8042e0:	1004c03a 	cmpne	r2,r2,zero
  8042e4:	1000041e 	bne	r2,zero,8042f8 <game_loop+0x20c>
				ship = &p1_ship;
  8042e8:	008020b4 	movhi	r2,130
  8042ec:	10afc004 	addi	r2,r2,-16640
  8042f0:	e0bfeb15 	stw	r2,-84(fp)
  8042f4:	00000306 	br	804304 <game_loop+0x218>
			else
				ship = &p2_ship;
  8042f8:	008020b4 	movhi	r2,130
  8042fc:	10b0e804 	addi	r2,r2,-15456
  804300:	e0bfeb15 	stw	r2,-84(fp)

			/* only allow shots approximately every 5 seconds */
			if (ship->shot_fired_x_seconds_ago == 6)
  804304:	e0bfeb17 	ldw	r2,-84(fp)
  804308:	10801a8f 	ldh	r2,106(r2)
  80430c:	10800198 	cmpnei	r2,r2,6
  804310:	1000071e 	bne	r2,zero,804330 <game_loop+0x244>
			{
				ship->shot_fired_x_seconds_ago = 0;
  804314:	e0bfeb17 	ldw	r2,-84(fp)
  804318:	10001a8d 	sth	zero,106(r2)
				/* make the last shot disappear */
				clean_shot(ship, pixel_buf_dev, 0);
  80431c:	e13feb17 	ldw	r4,-84(fp)
  804320:	d1602417 	ldw	r5,-32624(gp)
  804324:	000d883a 	mov	r6,zero
  804328:	08027a00 	call	8027a0 <clean_shot>
  80432c:	00000906 	br	804354 <game_loop+0x268>
			}
			else if (ship->shot_fired_x_seconds_ago != 0)
  804330:	e0bfeb17 	ldw	r2,-84(fp)
  804334:	10801a8f 	ldh	r2,106(r2)
  804338:	1005003a 	cmpeq	r2,r2,zero
  80433c:	1000051e 	bne	r2,zero,804354 <game_loop+0x268>
			{
				ship->shot_fired_x_seconds_ago ++;
  804340:	e0ffeb17 	ldw	r3,-84(fp)
  804344:	e0bfeb17 	ldw	r2,-84(fp)
  804348:	10801a8b 	ldhu	r2,106(r2)
  80434c:	10800044 	addi	r2,r2,1
  804350:	18801a8d 	sth	r2,106(r3)
  804354:	e0bfea17 	ldw	r2,-88(fp)
  804358:	10800044 	addi	r2,r2,1
  80435c:	e0bfea15 	stw	r2,-88(fp)
  804360:	003fdb06 	br	8042d0 <game_loop+0x1e4>
			}
		}
	}

	for (i = 0; i < 2; i++)
  804364:	e03fea15 	stw	zero,-88(fp)
  804368:	e0bfea17 	ldw	r2,-88(fp)
  80436c:	10800088 	cmpgei	r2,r2,2
  804370:	1001311e 	bne	r2,zero,804838 <game_loop+0x74c>
	{
		if (i == 0)
  804374:	e0bfea17 	ldw	r2,-88(fp)
  804378:	1004c03a 	cmpne	r2,r2,zero
  80437c:	1000041e 	bne	r2,zero,804390 <game_loop+0x2a4>
			ship = &p1_ship;
  804380:	008020b4 	movhi	r2,130
  804384:	10afc004 	addi	r2,r2,-16640
  804388:	e0bfeb15 	stw	r2,-84(fp)
  80438c:	00000306 	br	80439c <game_loop+0x2b0>
		else
			ship = &p2_ship;
  804390:	008020b4 	movhi	r2,130
  804394:	10b0e804 	addi	r2,r2,-15456
  804398:	e0bfeb15 	stw	r2,-84(fp)

		new_velocity.x = 0;
  80439c:	e03fec15 	stw	zero,-80(fp)
		new_velocity.y = 0;
  8043a0:	e03fed15 	stw	zero,-76(fp)

		/* copy the temp matrix so we can figure out where you're going to be */
		copy_matrix(ship->matrix_start, ship->row, ship->column, ship->temp_matrix);
  8043a4:	e0bfeb17 	ldw	r2,-84(fp)
  8043a8:	e0ffeb17 	ldw	r3,-84(fp)
  8043ac:	e1bfeb17 	ldw	r6,-84(fp)
  8043b0:	e1ffeb17 	ldw	r7,-84(fp)
  8043b4:	11000317 	ldw	r4,12(r2)
  8043b8:	19400117 	ldw	r5,4(r3)
  8043bc:	31800217 	ldw	r6,8(r6)
  8043c0:	39c00517 	ldw	r7,20(r7)
  8043c4:	08022d40 	call	8022d4 <copy_matrix>

		if (data_update == 1 && ship->stalled == FALSE)
  8043c8:	e0bfe617 	ldw	r2,-104(fp)
  8043cc:	10800058 	cmpnei	r2,r2,1
  8043d0:	1000c21e 	bne	r2,zero,8046dc <game_loop+0x5f0>
  8043d4:	e0bfeb17 	ldw	r2,-84(fp)
  8043d8:	10801e0f 	ldh	r2,120(r2)
  8043dc:	1004c03a 	cmpne	r2,r2,zero
  8043e0:	1000be1e 	bne	r2,zero,8046dc <game_loop+0x5f0>
		{
			/* calculate player ones potential movement */
			/* check versus walls */
			if (ship->engine_left_right == 1)
  8043e4:	e0bfeb17 	ldw	r2,-84(fp)
  8043e8:	10801843 	ldbu	r2,97(r2)
  8043ec:	10800058 	cmpnei	r2,r2,1
  8043f0:	1000081e 	bne	r2,zero,804414 <game_loop+0x328>
			{
				/* turning left */
				ship->angle = (ship->angle - TURN_RATE) % 360;
  8043f4:	e43feb17 	ldw	r16,-84(fp)
  8043f8:	e0bfeb17 	ldw	r2,-84(fp)
  8043fc:	1080090b 	ldhu	r2,36(r2)
  804400:	113ffd84 	addi	r4,r2,-10
  804404:	01405a04 	movi	r5,360
  804408:	080be080 	call	80be08 <__modsi3>
  80440c:	8080090d 	sth	r2,36(r16)
  804410:	00000b06 	br	804440 <game_loop+0x354>
			}
			else if (ship->engine_left_right == 2)
  804414:	e0bfeb17 	ldw	r2,-84(fp)
  804418:	10801843 	ldbu	r2,97(r2)
  80441c:	10800098 	cmpnei	r2,r2,2
  804420:	1000071e 	bne	r2,zero,804440 <game_loop+0x354>
			{
				/* turning right */
				ship->angle = (ship->angle + TURN_RATE) % 360;
  804424:	e43feb17 	ldw	r16,-84(fp)
  804428:	e0bfeb17 	ldw	r2,-84(fp)
  80442c:	1080090b 	ldhu	r2,36(r2)
  804430:	11000284 	addi	r4,r2,10
  804434:	01405a04 	movi	r5,360
  804438:	080be080 	call	80be08 <__modsi3>
  80443c:	8080090d 	sth	r2,36(r16)
			}

			if (ship->engine > 0)
  804440:	e0bfeb17 	ldw	r2,-84(fp)
  804444:	10801803 	ldbu	r2,96(r2)
  804448:	1005003a 	cmpeq	r2,r2,zero
  80444c:	1000a31e 	bne	r2,zero,8046dc <game_loop+0x5f0>
			{
				/* trying to accelerate */
				float scalar;

				/* calculate the acceleration costs */
				ship->power_budget_this_minute -= ENGINE_POWER_COST;
  804450:	e0ffeb17 	ldw	r3,-84(fp)
  804454:	e0bfeb17 	ldw	r2,-84(fp)
  804458:	10801b17 	ldw	r2,108(r2)
  80445c:	10bfffc4 	addi	r2,r2,-1
  804460:	18801b15 	stw	r2,108(r3)
				if (ship->power_budget_this_minute < BASIC_POWER_COST)
  804464:	e0bfeb17 	ldw	r2,-84(fp)
  804468:	10801b17 	ldw	r2,108(r2)
  80446c:	10800288 	cmpgei	r2,r2,10
  804470:	1000041e 	bne	r2,zero,804484 <game_loop+0x398>
				{
					/* overused power budget for the minute...stall */
					ship->stalled = TRUE;
  804474:	e0ffeb17 	ldw	r3,-84(fp)
  804478:	00800044 	movi	r2,1
  80447c:	18801e0d 	sth	r2,120(r3)
  804480:	00009606 	br	8046dc <game_loop+0x5f0>
				}
				else
				{
					/* ship direction relative to our coordinate system */
					new_velocity.x = ship->velocity->x + cos((ship->angle-270)*PI/180);
  804484:	e0bfeb17 	ldw	r2,-84(fp)
  804488:	10800c17 	ldw	r2,48(r2)
  80448c:	11000017 	ldw	r4,0(r2)
  804490:	080adc00 	call	80adc0 <__extendsfdf2>
  804494:	1021883a 	mov	r16,r2
  804498:	1823883a 	mov	r17,r3
  80449c:	e0bfeb17 	ldw	r2,-84(fp)
  8044a0:	1080090b 	ldhu	r2,36(r2)
  8044a4:	113fbc84 	addi	r4,r2,-270
  8044a8:	080bb280 	call	80bb28 <__floatsidf>
  8044ac:	100b883a 	mov	r5,r2
  8044b0:	180d883a 	mov	r6,r3
  8044b4:	2809883a 	mov	r4,r5
  8044b8:	300b883a 	mov	r5,r6
  8044bc:	0194f274 	movhi	r6,21449
  8044c0:	31b53c44 	addi	r6,r6,-11023
  8044c4:	01d00274 	movhi	r7,16393
  8044c8:	39c87ec4 	addi	r7,r7,8699
  8044cc:	080b21c0 	call	80b21c <__muldf3>
  8044d0:	100b883a 	mov	r5,r2
  8044d4:	180d883a 	mov	r6,r3
  8044d8:	2809883a 	mov	r4,r5
  8044dc:	300b883a 	mov	r5,r6
  8044e0:	000d883a 	mov	r6,zero
  8044e4:	01d019f4 	movhi	r7,16487
  8044e8:	39e00004 	addi	r7,r7,-32768
  8044ec:	080b61c0 	call	80b61c <__divdf3>
  8044f0:	100b883a 	mov	r5,r2
  8044f4:	180d883a 	mov	r6,r3
  8044f8:	2809883a 	mov	r4,r5
  8044fc:	300b883a 	mov	r5,r6
  804500:	0807a1c0 	call	807a1c <cos>
  804504:	1009883a 	mov	r4,r2
  804508:	180b883a 	mov	r5,r3
  80450c:	2005883a 	mov	r2,r4
  804510:	2807883a 	mov	r3,r5
  804514:	8009883a 	mov	r4,r16
  804518:	880b883a 	mov	r5,r17
  80451c:	100d883a 	mov	r6,r2
  804520:	180f883a 	mov	r7,r3
  804524:	080b1380 	call	80b138 <__adddf3>
  804528:	100b883a 	mov	r5,r2
  80452c:	180d883a 	mov	r6,r3
  804530:	2809883a 	mov	r4,r5
  804534:	300b883a 	mov	r5,r6
  804538:	080bce80 	call	80bce8 <__truncdfsf2>
  80453c:	e0bfec15 	stw	r2,-80(fp)
					new_velocity.y = ship->velocity->y + sin((ship->angle-270)*PI/180);
  804540:	e0bfeb17 	ldw	r2,-84(fp)
  804544:	10800c17 	ldw	r2,48(r2)
  804548:	11000117 	ldw	r4,4(r2)
  80454c:	080adc00 	call	80adc0 <__extendsfdf2>
  804550:	1021883a 	mov	r16,r2
  804554:	1823883a 	mov	r17,r3
  804558:	e0bfeb17 	ldw	r2,-84(fp)
  80455c:	1080090b 	ldhu	r2,36(r2)
  804560:	113fbc84 	addi	r4,r2,-270
  804564:	080bb280 	call	80bb28 <__floatsidf>
  804568:	100b883a 	mov	r5,r2
  80456c:	180d883a 	mov	r6,r3
  804570:	2809883a 	mov	r4,r5
  804574:	300b883a 	mov	r5,r6
  804578:	0194f274 	movhi	r6,21449
  80457c:	31b53c44 	addi	r6,r6,-11023
  804580:	01d00274 	movhi	r7,16393
  804584:	39c87ec4 	addi	r7,r7,8699
  804588:	080b21c0 	call	80b21c <__muldf3>
  80458c:	100b883a 	mov	r5,r2
  804590:	180d883a 	mov	r6,r3
  804594:	2809883a 	mov	r4,r5
  804598:	300b883a 	mov	r5,r6
  80459c:	000d883a 	mov	r6,zero
  8045a0:	01d019f4 	movhi	r7,16487
  8045a4:	39e00004 	addi	r7,r7,-32768
  8045a8:	080b61c0 	call	80b61c <__divdf3>
  8045ac:	100b883a 	mov	r5,r2
  8045b0:	180d883a 	mov	r6,r3
  8045b4:	2809883a 	mov	r4,r5
  8045b8:	300b883a 	mov	r5,r6
  8045bc:	0807b8c0 	call	807b8c <sin>
  8045c0:	1009883a 	mov	r4,r2
  8045c4:	180b883a 	mov	r5,r3
  8045c8:	2005883a 	mov	r2,r4
  8045cc:	2807883a 	mov	r3,r5
  8045d0:	8009883a 	mov	r4,r16
  8045d4:	880b883a 	mov	r5,r17
  8045d8:	100d883a 	mov	r6,r2
  8045dc:	180f883a 	mov	r7,r3
  8045e0:	080b1380 	call	80b138 <__adddf3>
  8045e4:	100b883a 	mov	r5,r2
  8045e8:	180d883a 	mov	r6,r3
  8045ec:	2809883a 	mov	r4,r5
  8045f0:	300b883a 	mov	r5,r6
  8045f4:	080bce80 	call	80bce8 <__truncdfsf2>
  8045f8:	e0bfed15 	stw	r2,-76(fp)

					/* scalar to find speed */
					scalar = sqrt(new_velocity.x*new_velocity.x + ship->velocity->y*ship->velocity->y);
  8045fc:	e13fec17 	ldw	r4,-80(fp)
  804600:	e17fec17 	ldw	r5,-80(fp)
  804604:	080a6980 	call	80a698 <__mulsf3>
  804608:	1021883a 	mov	r16,r2
  80460c:	e0bfeb17 	ldw	r2,-84(fp)
  804610:	10800c17 	ldw	r2,48(r2)
  804614:	11000117 	ldw	r4,4(r2)
  804618:	11400117 	ldw	r5,4(r2)
  80461c:	080a6980 	call	80a698 <__mulsf3>
  804620:	8009883a 	mov	r4,r16
  804624:	100b883a 	mov	r5,r2
  804628:	080a5dc0 	call	80a5dc <__addsf3>
  80462c:	1009883a 	mov	r4,r2
  804630:	080adc00 	call	80adc0 <__extendsfdf2>
  804634:	100b883a 	mov	r5,r2
  804638:	180d883a 	mov	r6,r3
  80463c:	2809883a 	mov	r4,r5
  804640:	300b883a 	mov	r5,r6
  804644:	0807da40 	call	807da4 <sqrt>
  804648:	100b883a 	mov	r5,r2
  80464c:	180d883a 	mov	r6,r3
  804650:	2809883a 	mov	r4,r5
  804654:	300b883a 	mov	r5,r6
  804658:	080bce80 	call	80bce8 <__truncdfsf2>
  80465c:	e0bff215 	stw	r2,-56(fp)

					/* if too fast then scale back to max velocity */
					if (scalar > MAX_SPEED)
  804660:	e13ff217 	ldw	r4,-56(fp)
  804664:	01502834 	movhi	r5,16544
  804668:	29400004 	addi	r5,r5,0
  80466c:	080aa940 	call	80aa94 <__gtsf2>
  804670:	10800048 	cmpgei	r2,r2,1
  804674:	1000011e 	bne	r2,zero,80467c <game_loop+0x590>
  804678:	00001006 	br	8046bc <game_loop+0x5d0>
					{
						new_velocity.x = new_velocity.x/scalar * MAX_SPEED;
  80467c:	e13fec17 	ldw	r4,-80(fp)
  804680:	e17ff217 	ldw	r5,-56(fp)
  804684:	080a85c0 	call	80a85c <__divsf3>
  804688:	1009883a 	mov	r4,r2
  80468c:	01502834 	movhi	r5,16544
  804690:	29400004 	addi	r5,r5,0
  804694:	080a6980 	call	80a698 <__mulsf3>
  804698:	e0bfec15 	stw	r2,-80(fp)
						new_velocity.y = new_velocity.y/scalar * MAX_SPEED;
  80469c:	e13fed17 	ldw	r4,-76(fp)
  8046a0:	e17ff217 	ldw	r5,-56(fp)
  8046a4:	080a85c0 	call	80a85c <__divsf3>
  8046a8:	1009883a 	mov	r4,r2
  8046ac:	01502834 	movhi	r5,16544
  8046b0:	29400004 	addi	r5,r5,0
  8046b4:	080a6980 	call	80a698 <__mulsf3>
  8046b8:	e0bfed15 	stw	r2,-76(fp)
					}

					ship->velocity->x = new_velocity.x;
  8046bc:	e0bfeb17 	ldw	r2,-84(fp)
  8046c0:	10c00c17 	ldw	r3,48(r2)
  8046c4:	e0bfec17 	ldw	r2,-80(fp)
  8046c8:	18800015 	stw	r2,0(r3)
					ship->velocity->y = new_velocity.y;
  8046cc:	e0bfeb17 	ldw	r2,-84(fp)
  8046d0:	10c00c17 	ldw	r3,48(r2)
  8046d4:	e0bfed17 	ldw	r2,-76(fp)
  8046d8:	18800115 	stw	r2,4(r3)
				}
			}
		}

		/* now check if this speed would result in a wall hit */
		ship->x = ship->x + ship->velocity->x/UPDATES_PER_SECOND;
  8046dc:	e47feb17 	ldw	r17,-84(fp)
  8046e0:	e43feb17 	ldw	r16,-84(fp)
  8046e4:	e0bfeb17 	ldw	r2,-84(fp)
  8046e8:	10800c17 	ldw	r2,48(r2)
  8046ec:	11000017 	ldw	r4,0(r2)
  8046f0:	01505c34 	movhi	r5,16752
  8046f4:	29400004 	addi	r5,r5,0
  8046f8:	080a85c0 	call	80a85c <__divsf3>
  8046fc:	1009883a 	mov	r4,r2
  804700:	81400a17 	ldw	r5,40(r16)
  804704:	080a5dc0 	call	80a5dc <__addsf3>
  804708:	88800a15 	stw	r2,40(r17)
		ship->y = ship->y + ship->velocity->y/UPDATES_PER_SECOND;
  80470c:	e47feb17 	ldw	r17,-84(fp)
  804710:	e43feb17 	ldw	r16,-84(fp)
  804714:	e0bfeb17 	ldw	r2,-84(fp)
  804718:	10800c17 	ldw	r2,48(r2)
  80471c:	11000117 	ldw	r4,4(r2)
  804720:	01505c34 	movhi	r5,16752
  804724:	29400004 	addi	r5,r5,0
  804728:	080a85c0 	call	80a85c <__divsf3>
  80472c:	1009883a 	mov	r4,r2
  804730:	81400b17 	ldw	r5,44(r16)
  804734:	080a5dc0 	call	80a5dc <__addsf3>
  804738:	88800b15 	stw	r2,44(r17)
		/* update ship */
		rotate_a_matrix(ship->temp_matrix, ship->row, ship->column, ship->angle);
  80473c:	e0ffeb17 	ldw	r3,-84(fp)
  804740:	e17feb17 	ldw	r5,-84(fp)
  804744:	e1bfeb17 	ldw	r6,-84(fp)
  804748:	e0bfeb17 	ldw	r2,-84(fp)
  80474c:	11c0090b 	ldhu	r7,36(r2)
  804750:	19000517 	ldw	r4,20(r3)
  804754:	29400117 	ldw	r5,4(r5)
  804758:	31800217 	ldw	r6,8(r6)
  80475c:	08020380 	call	802038 <rotate_a_matrix>
		translate_a_matrix(ship->temp_matrix, ship->row, ship->column, roundf(ship->x), roundf(ship->y));
  804760:	e0bfeb17 	ldw	r2,-84(fp)
  804764:	11000a17 	ldw	r4,40(r2)
  804768:	0807cfc0 	call	807cfc <roundf>
  80476c:	1009883a 	mov	r4,r2
  804770:	080ad2c0 	call	80ad2c <__fixsfsi>
  804774:	1021883a 	mov	r16,r2
  804778:	e0bfeb17 	ldw	r2,-84(fp)
  80477c:	11000b17 	ldw	r4,44(r2)
  804780:	0807cfc0 	call	807cfc <roundf>
  804784:	1009883a 	mov	r4,r2
  804788:	080ad2c0 	call	80ad2c <__fixsfsi>
  80478c:	e0ffeb17 	ldw	r3,-84(fp)
  804790:	e17feb17 	ldw	r5,-84(fp)
  804794:	e1bfeb17 	ldw	r6,-84(fp)
  804798:	d8800015 	stw	r2,0(sp)
  80479c:	19000517 	ldw	r4,20(r3)
  8047a0:	29400117 	ldw	r5,4(r5)
  8047a4:	31800217 	ldw	r6,8(r6)
  8047a8:	800f883a 	mov	r7,r16
  8047ac:	0801f800 	call	801f80 <translate_a_matrix>

		hit = check_wall_collide_ns(ship->temp_matrix, 4);
  8047b0:	e0bfeb17 	ldw	r2,-84(fp)
  8047b4:	11000517 	ldw	r4,20(r2)
  8047b8:	01400104 	movi	r5,4
  8047bc:	08002100 	call	800210 <check_wall_collide_ns>
  8047c0:	e0bfee0d 	sth	r2,-72(fp)
		if (hit == WALL_N || hit == WALL_S)
  8047c4:	e0bfee0f 	ldh	r2,-72(fp)
  8047c8:	10800060 	cmpeqi	r2,r2,1
  8047cc:	1000041e 	bne	r2,zero,8047e0 <game_loop+0x6f4>
  8047d0:	e0bfee0f 	ldh	r2,-72(fp)
  8047d4:	108000a0 	cmpeqi	r2,r2,2
  8047d8:	1000011e 	bne	r2,zero,8047e0 <game_loop+0x6f4>
  8047dc:	00000306 	br	8047ec <game_loop+0x700>
		{
			ship->reset = TRUE;
  8047e0:	e0ffeb17 	ldw	r3,-84(fp)
  8047e4:	00800044 	movi	r2,1
  8047e8:	18800d0d 	sth	r2,52(r3)
		}

		hit = check_wall_collide_ew(ship->temp_matrix, 4);
  8047ec:	e0bfeb17 	ldw	r2,-84(fp)
  8047f0:	11000517 	ldw	r4,20(r2)
  8047f4:	01400104 	movi	r5,4
  8047f8:	08002e00 	call	8002e0 <check_wall_collide_ew>
  8047fc:	e0bfee0d 	sth	r2,-72(fp)
		if (hit == WALL_E || hit == WALL_W)
  804800:	e0bfee0f 	ldh	r2,-72(fp)
  804804:	10800120 	cmpeqi	r2,r2,4
  804808:	1000041e 	bne	r2,zero,80481c <game_loop+0x730>
  80480c:	e0bfee0f 	ldh	r2,-72(fp)
  804810:	10800160 	cmpeqi	r2,r2,5
  804814:	1000011e 	bne	r2,zero,80481c <game_loop+0x730>
  804818:	00000306 	br	804828 <game_loop+0x73c>
		{
			ship->reset = TRUE;
  80481c:	e0ffeb17 	ldw	r3,-84(fp)
  804820:	00800044 	movi	r2,1
  804824:	18800d0d 	sth	r2,52(r3)
  804828:	e0bfea17 	ldw	r2,-88(fp)
  80482c:	10800044 	addi	r2,r2,1
  804830:	e0bfea15 	stw	r2,-88(fp)
  804834:	003ecc06 	br	804368 <game_loop+0x27c>
		}
	}

	/* check collision of players - done on temp_matrix */
	if (check_ships_collide(&p1_ship, &p2_ship) == SHIP)
  804838:	010020b4 	movhi	r4,130
  80483c:	212fc004 	addi	r4,r4,-16640
  804840:	014020b4 	movhi	r5,130
  804844:	2970e804 	addi	r5,r5,-15456
  804848:	08003a80 	call	8003a8 <check_ships_collide>
  80484c:	10bfffcc 	andi	r2,r2,65535
  804850:	10a0001c 	xori	r2,r2,32768
  804854:	10a00004 	addi	r2,r2,-32768
  804858:	108000d8 	cmpnei	r2,r2,3
  80485c:	1000081e 	bne	r2,zero,804880 <game_loop+0x794>
	{
		p1_ship.reset = TRUE;
  804860:	00c020b4 	movhi	r3,130
  804864:	18efc004 	addi	r3,r3,-16640
  804868:	00800044 	movi	r2,1
  80486c:	18800d0d 	sth	r2,52(r3)
		p2_ship.reset = TRUE;
  804870:	00c020b4 	movhi	r3,130
  804874:	18f0e804 	addi	r3,r3,-15456
  804878:	00800044 	movi	r2,1
  80487c:	18800d0d 	sth	r2,52(r3)
	}

	/* check what we see */
	/* check shot fired */
	for (i = 0; i < 2; i++)
  804880:	e03fea15 	stw	zero,-88(fp)
  804884:	e0bfea17 	ldw	r2,-88(fp)
  804888:	10800088 	cmpgei	r2,r2,2
  80488c:	1000cb1e 	bne	r2,zero,804bbc <game_loop+0xad0>
	{
		if (i == 0)
  804890:	e0bfea17 	ldw	r2,-88(fp)
  804894:	1004c03a 	cmpne	r2,r2,zero
  804898:	1000041e 	bne	r2,zero,8048ac <game_loop+0x7c0>
			ship = &p1_ship;
  80489c:	008020b4 	movhi	r2,130
  8048a0:	10afc004 	addi	r2,r2,-16640
  8048a4:	e0bfeb15 	stw	r2,-84(fp)
  8048a8:	00000306 	br	8048b8 <game_loop+0x7cc>
		else
			ship = &p2_ship;
  8048ac:	008020b4 	movhi	r2,130
  8048b0:	10b0e804 	addi	r2,r2,-15456
  8048b4:	e0bfeb15 	stw	r2,-84(fp)

		if (ship->reset == TRUE)
  8048b8:	e0bfeb17 	ldw	r2,-84(fp)
  8048bc:	10800d0f 	ldh	r2,52(r2)
  8048c0:	10800058 	cmpnei	r2,r2,1
  8048c4:	1000011e 	bne	r2,zero,8048cc <game_loop+0x7e0>
			continue;
  8048c8:	0000b806 	br	804bac <game_loop+0xac0>

		/* animante sensor beam */
		clean_sensor(ship, pixel_buf_dev, 0);
  8048cc:	e13feb17 	ldw	r4,-84(fp)
  8048d0:	d1602417 	ldw	r5,-32624(gp)
  8048d4:	000d883a 	mov	r6,zero
  8048d8:	08026140 	call	802614 <clean_sensor>

		if (data_update == 1 && ship->stalled == FALSE)
  8048dc:	e0bfe617 	ldw	r2,-104(fp)
  8048e0:	10800058 	cmpnei	r2,r2,1
  8048e4:	1000a31e 	bne	r2,zero,804b74 <game_loop+0xa88>
  8048e8:	e0bfeb17 	ldw	r2,-84(fp)
  8048ec:	10801e0f 	ldh	r2,120(r2)
  8048f0:	1004c03a 	cmpne	r2,r2,zero
  8048f4:	10009f1e 	bne	r2,zero,804b74 <game_loop+0xa88>
		{
			if (ship->sensor_state == 1)
  8048f8:	e0bfeb17 	ldw	r2,-84(fp)
  8048fc:	10801883 	ldbu	r2,98(r2)
  804900:	10800058 	cmpnei	r2,r2,1
  804904:	10002a1e 	bne	r2,zero,8049b0 <game_loop+0x8c4>
			{
				/* turning left */
				ship->sensor_angle = (ship->sensor_angle - (((float)ship->sensor_move)/2));
  804908:	e0ffeb17 	ldw	r3,-84(fp)
  80490c:	e0fff815 	stw	r3,-32(fp)
  804910:	e0bfeb17 	ldw	r2,-84(fp)
  804914:	e0bff915 	stw	r2,-28(fp)
  804918:	e43feb17 	ldw	r16,-84(fp)
  80491c:	810018c7 	ldb	r4,99(r16)
  804920:	080ac940 	call	80ac94 <__floatsisf>
  804924:	e0bffa15 	stw	r2,-24(fp)
  804928:	808018c7 	ldb	r2,99(r16)
  80492c:	1004403a 	cmpge	r2,r2,zero
  804930:	1000051e 	bne	r2,zero,804948 <game_loop+0x85c>
  804934:	e13ffa17 	ldw	r4,-24(fp)
  804938:	0150e034 	movhi	r5,17280
  80493c:	29400004 	addi	r5,r5,0
  804940:	080a5dc0 	call	80a5dc <__addsf3>
  804944:	e0bffa15 	stw	r2,-24(fp)
  804948:	e13ffa17 	ldw	r4,-24(fp)
  80494c:	01500034 	movhi	r5,16384
  804950:	29400004 	addi	r5,r5,0
  804954:	080a85c0 	call	80a85c <__divsf3>
  804958:	e0fff917 	ldw	r3,-28(fp)
  80495c:	19001f17 	ldw	r4,124(r3)
  804960:	100b883a 	mov	r5,r2
  804964:	080a6340 	call	80a634 <__subsf3>
  804968:	e0fff817 	ldw	r3,-32(fp)
  80496c:	18801f15 	stw	r2,124(r3)
				if (ship->sensor_angle > 360)
  804970:	e0bfeb17 	ldw	r2,-84(fp)
  804974:	11001f17 	ldw	r4,124(r2)
  804978:	0150ed34 	movhi	r5,17332
  80497c:	29400004 	addi	r5,r5,0
  804980:	080aa940 	call	80aa94 <__gtsf2>
  804984:	10800048 	cmpgei	r2,r2,1
  804988:	1000011e 	bne	r2,zero,804990 <game_loop+0x8a4>
  80498c:	00003406 	br	804a60 <game_loop+0x974>
				{
					ship->sensor_angle = ship->sensor_angle - 360;
  804990:	e43feb17 	ldw	r16,-84(fp)
  804994:	e0bfeb17 	ldw	r2,-84(fp)
  804998:	11001f17 	ldw	r4,124(r2)
  80499c:	0150ed34 	movhi	r5,17332
  8049a0:	29400004 	addi	r5,r5,0
  8049a4:	080a6340 	call	80a634 <__subsf3>
  8049a8:	80801f15 	stw	r2,124(r16)
  8049ac:	00002c06 	br	804a60 <game_loop+0x974>
				}
			}
			else if (ship->sensor_state == 2)
  8049b0:	e0bfeb17 	ldw	r2,-84(fp)
  8049b4:	10801883 	ldbu	r2,98(r2)
  8049b8:	10800098 	cmpnei	r2,r2,2
  8049bc:	1000281e 	bne	r2,zero,804a60 <game_loop+0x974>
			{
				/* turning right */
				ship->sensor_angle = (ship->sensor_angle + (((float)ship->sensor_move)/2));
  8049c0:	e0bfeb17 	ldw	r2,-84(fp)
  8049c4:	e0bffb15 	stw	r2,-20(fp)
  8049c8:	e0ffeb17 	ldw	r3,-84(fp)
  8049cc:	e0fffc15 	stw	r3,-16(fp)
  8049d0:	e43feb17 	ldw	r16,-84(fp)
  8049d4:	810018c7 	ldb	r4,99(r16)
  8049d8:	080ac940 	call	80ac94 <__floatsisf>
  8049dc:	e0bffd15 	stw	r2,-12(fp)
  8049e0:	808018c7 	ldb	r2,99(r16)
  8049e4:	1004403a 	cmpge	r2,r2,zero
  8049e8:	1000051e 	bne	r2,zero,804a00 <game_loop+0x914>
  8049ec:	e13ffd17 	ldw	r4,-12(fp)
  8049f0:	0150e034 	movhi	r5,17280
  8049f4:	29400004 	addi	r5,r5,0
  8049f8:	080a5dc0 	call	80a5dc <__addsf3>
  8049fc:	e0bffd15 	stw	r2,-12(fp)
  804a00:	e13ffd17 	ldw	r4,-12(fp)
  804a04:	01500034 	movhi	r5,16384
  804a08:	29400004 	addi	r5,r5,0
  804a0c:	080a85c0 	call	80a85c <__divsf3>
  804a10:	1009883a 	mov	r4,r2
  804a14:	e0bffc17 	ldw	r2,-16(fp)
  804a18:	11401f17 	ldw	r5,124(r2)
  804a1c:	080a5dc0 	call	80a5dc <__addsf3>
  804a20:	e0fffb17 	ldw	r3,-20(fp)
  804a24:	18801f15 	stw	r2,124(r3)
				if (ship->sensor_angle < 0)
  804a28:	e0bfeb17 	ldw	r2,-84(fp)
  804a2c:	11001f17 	ldw	r4,124(r2)
  804a30:	000b883a 	mov	r5,zero
  804a34:	080ab940 	call	80ab94 <__ltsf2>
  804a38:	1004803a 	cmplt	r2,r2,zero
  804a3c:	1000011e 	bne	r2,zero,804a44 <game_loop+0x958>
  804a40:	00000706 	br	804a60 <game_loop+0x974>
				{
					ship->sensor_angle = ship->sensor_angle + 360;
  804a44:	e43feb17 	ldw	r16,-84(fp)
  804a48:	e0bfeb17 	ldw	r2,-84(fp)
  804a4c:	11001f17 	ldw	r4,124(r2)
  804a50:	0150ed34 	movhi	r5,17332
  804a54:	29400004 	addi	r5,r5,0
  804a58:	080a5dc0 	call	80a5dc <__addsf3>
  804a5c:	80801f15 	stw	r2,124(r16)
				}
			}

			/* project in that direction what's there */
			ship->sensor_detected_something = straight_line_vector_projection(ship, ship->angle+roundf(ship->sensor_angle), ship->x, ship->y, FALSE);
  804a60:	e47feb17 	ldw	r17,-84(fp)
  804a64:	e0bfeb17 	ldw	r2,-84(fp)
  804a68:	1100090b 	ldhu	r4,36(r2)
  804a6c:	080ac940 	call	80ac94 <__floatsisf>
  804a70:	1021883a 	mov	r16,r2
  804a74:	e0bfeb17 	ldw	r2,-84(fp)
  804a78:	11001f17 	ldw	r4,124(r2)
  804a7c:	0807cfc0 	call	807cfc <roundf>
  804a80:	8009883a 	mov	r4,r16
  804a84:	100b883a 	mov	r5,r2
  804a88:	080a5dc0 	call	80a5dc <__addsf3>
  804a8c:	1009883a 	mov	r4,r2
  804a90:	080ad2c0 	call	80ad2c <__fixsfsi>
  804a94:	100b883a 	mov	r5,r2
  804a98:	e0bfeb17 	ldw	r2,-84(fp)
  804a9c:	e0ffeb17 	ldw	r3,-84(fp)
  804aa0:	d8000015 	stw	zero,0(sp)
  804aa4:	e13feb17 	ldw	r4,-84(fp)
  804aa8:	11800a17 	ldw	r6,40(r2)
  804aac:	19c00b17 	ldw	r7,44(r3)
  804ab0:	08010180 	call	801018 <straight_line_vector_projection>
  804ab4:	88802705 	stb	r2,156(r17)

			/* Firing */
			if (ship->cannon_fire > 0 && ship->shot_fired_x_seconds_ago == 0)
  804ab8:	e0bfeb17 	ldw	r2,-84(fp)
  804abc:	10801903 	ldbu	r2,100(r2)
  804ac0:	1005003a 	cmpeq	r2,r2,zero
  804ac4:	10002b1e 	bne	r2,zero,804b74 <game_loop+0xa88>
  804ac8:	e0bfeb17 	ldw	r2,-84(fp)
  804acc:	10801a8f 	ldh	r2,106(r2)
  804ad0:	1004c03a 	cmpne	r2,r2,zero
  804ad4:	1000271e 	bne	r2,zero,804b74 <game_loop+0xa88>
			{
				/* calculate the power cost */
				ship->power_budget_this_minute -= ship->cannon_power;
  804ad8:	e17feb17 	ldw	r5,-84(fp)
  804adc:	e13feb17 	ldw	r4,-84(fp)
  804ae0:	e0bfeb17 	ldw	r2,-84(fp)
  804ae4:	10c0198b 	ldhu	r3,102(r2)
  804ae8:	20801b17 	ldw	r2,108(r4)
  804aec:	10c5c83a 	sub	r2,r2,r3
  804af0:	28801b15 	stw	r2,108(r5)

				if (ship->power_budget_this_minute < BASIC_POWER_COST)
  804af4:	e0bfeb17 	ldw	r2,-84(fp)
  804af8:	10801b17 	ldw	r2,108(r2)
  804afc:	10800288 	cmpgei	r2,r2,10
  804b00:	1000041e 	bne	r2,zero,804b14 <game_loop+0xa28>
				{
					/* overused power budget for the minute...stall */
					ship->stalled = TRUE;
  804b04:	e0ffeb17 	ldw	r3,-84(fp)
  804b08:	00800044 	movi	r2,1
  804b0c:	18801e0d 	sth	r2,120(r3)
  804b10:	00001806 	br	804b74 <game_loop+0xa88>
				}
				else
				{
					/* shot fired */
					ship->shot_fired_x_seconds_ago = 1;
  804b14:	e0ffeb17 	ldw	r3,-84(fp)
  804b18:	00800044 	movi	r2,1
  804b1c:	18801a8d 	sth	r2,106(r3)

					if (straight_line_vector_projection(ship, ship->angle, ship->x, ship->y, TRUE) == SHIP)
  804b20:	e0bfeb17 	ldw	r2,-84(fp)
  804b24:	1140090b 	ldhu	r5,36(r2)
  804b28:	e0ffeb17 	ldw	r3,-84(fp)
  804b2c:	e1ffeb17 	ldw	r7,-84(fp)
  804b30:	00800044 	movi	r2,1
  804b34:	d8800015 	stw	r2,0(sp)
  804b38:	e13feb17 	ldw	r4,-84(fp)
  804b3c:	19800a17 	ldw	r6,40(r3)
  804b40:	39c00b17 	ldw	r7,44(r7)
  804b44:	08010180 	call	801018 <straight_line_vector_projection>
  804b48:	10bfffcc 	andi	r2,r2,65535
  804b4c:	10a0001c 	xori	r2,r2,32768
  804b50:	10a00004 	addi	r2,r2,-32768
  804b54:	108000d8 	cmpnei	r2,r2,3
  804b58:	1000061e 	bne	r2,zero,804b74 <game_loop+0xa88>
					{
						/* causes damage to the opponent */
						degrade_crystals_based_on_shot(get_opponent_ship(ship), ship->cannon_power);
  804b5c:	e13feb17 	ldw	r4,-84(fp)
  804b60:	0804f040 	call	804f04 <get_opponent_ship>
  804b64:	1009883a 	mov	r4,r2
  804b68:	e0bfeb17 	ldw	r2,-84(fp)
  804b6c:	1140198b 	ldhu	r5,102(r2)
  804b70:	0805db80 	call	805db8 <degrade_crystals_based_on_shot>
					}
				}
			}
		}

		/* draw the sensor lines */
		draw_sensor(ship, pixel_buf_dev, 0);
  804b74:	e13feb17 	ldw	r4,-84(fp)
  804b78:	d1602417 	ldw	r5,-32624(gp)
  804b7c:	000d883a 	mov	r6,zero
  804b80:	08026d80 	call	8026d8 <draw_sensor>
		/* draw shot */
		if (ship->shot_fired_x_seconds_ago != 0)
  804b84:	e0bfeb17 	ldw	r2,-84(fp)
  804b88:	10801a8f 	ldh	r2,106(r2)
  804b8c:	1005003a 	cmpeq	r2,r2,zero
  804b90:	1000061e 	bne	r2,zero,804bac <game_loop+0xac0>
		{
			draw_shot(ship, pixel_buf_dev, 0, ship->shot_fired_x_seconds_ago);
  804b94:	e0bfeb17 	ldw	r2,-84(fp)
  804b98:	11c01a8f 	ldh	r7,106(r2)
  804b9c:	e13feb17 	ldw	r4,-84(fp)
  804ba0:	d1602417 	ldw	r5,-32624(gp)
  804ba4:	000d883a 	mov	r6,zero
  804ba8:	08028640 	call	802864 <draw_shot>
  804bac:	e0bfea17 	ldw	r2,-88(fp)
  804bb0:	10800044 	addi	r2,r2,1
  804bb4:	e0bfea15 	stw	r2,-88(fp)
  804bb8:	003f3206 	br	804884 <game_loop+0x798>
		}
	}

	/* update the info and clean ships */
	for (i = 0; i < 2; i++)
  804bbc:	e03fea15 	stw	zero,-88(fp)
  804bc0:	e0bfea17 	ldw	r2,-88(fp)
  804bc4:	10800088 	cmpgei	r2,r2,2
  804bc8:	1000351e 	bne	r2,zero,804ca0 <game_loop+0xbb4>
	{
		if (i == 0)
  804bcc:	e0bfea17 	ldw	r2,-88(fp)
  804bd0:	1004c03a 	cmpne	r2,r2,zero
  804bd4:	10000a1e 	bne	r2,zero,804c00 <game_loop+0xb14>
		{
			ship = &p1_ship;
  804bd8:	008020b4 	movhi	r2,130
  804bdc:	10afc004 	addi	r2,r2,-16640
  804be0:	e0bfeb15 	stw	r2,-84(fp)
			x = 22;
  804be4:	00800584 	movi	r2,22
  804be8:	e0bfef15 	stw	r2,-68(fp)
			y = 22;
  804bec:	00800584 	movi	r2,22
  804bf0:	e0bff015 	stw	r2,-64(fp)
			angle = 315;
  804bf4:	00804ec4 	movi	r2,315
  804bf8:	e0bff115 	stw	r2,-60(fp)
  804bfc:	00000906 	br	804c24 <game_loop+0xb38>
		}
		else
		{
			x = 298;
  804c00:	00804a84 	movi	r2,298
  804c04:	e0bfef15 	stw	r2,-68(fp)
			y = 218;
  804c08:	00803684 	movi	r2,218
  804c0c:	e0bff015 	stw	r2,-64(fp)
			angle = 135;
  804c10:	008021c4 	movi	r2,135
  804c14:	e0bff115 	stw	r2,-60(fp)
			ship = &p2_ship;
  804c18:	008020b4 	movhi	r2,130
  804c1c:	10b0e804 	addi	r2,r2,-15456
  804c20:	e0bfeb15 	stw	r2,-84(fp)
		}

		/* update values to be sent to ship at address gaps of 64 addresses */
		update_packets_to_send_back(ship, i * 64);
  804c24:	e0bfea17 	ldw	r2,-88(fp)
  804c28:	11401024 	muli	r5,r2,64
  804c2c:	e13feb17 	ldw	r4,-84(fp)
  804c30:	0803d140 	call	803d14 <update_packets_to_send_back>

		/* animate the ship */
		clean_ship(ship, pixel_buf_dev, 0);
  804c34:	e13feb17 	ldw	r4,-84(fp)
  804c38:	d1602417 	ldw	r5,-32624(gp)
  804c3c:	000d883a 	mov	r6,zero
  804c40:	0801bac0 	call	801bac <clean_ship>

		/* copy the temp matrix over */
		if (ship->reset == FALSE)
  804c44:	e0bfeb17 	ldw	r2,-84(fp)
  804c48:	10800d0f 	ldh	r2,52(r2)
  804c4c:	1004c03a 	cmpne	r2,r2,zero
  804c50:	10000a1e 	bne	r2,zero,804c7c <game_loop+0xb90>
		{
			copy_matrix(ship->temp_matrix, ship->row, ship->column, ship->matrix_location);
  804c54:	e0bfeb17 	ldw	r2,-84(fp)
  804c58:	e0ffeb17 	ldw	r3,-84(fp)
  804c5c:	e1bfeb17 	ldw	r6,-84(fp)
  804c60:	e1ffeb17 	ldw	r7,-84(fp)
  804c64:	11000517 	ldw	r4,20(r2)
  804c68:	19400117 	ldw	r5,4(r3)
  804c6c:	31800217 	ldw	r6,8(r6)
  804c70:	39c00417 	ldw	r7,16(r7)
  804c74:	08022d40 	call	8022d4 <copy_matrix>
  804c78:	00000506 	br	804c90 <game_loop+0xba4>
		}
		else
		{
			reset_ship(ship, angle, x, y);
  804c7c:	e13feb17 	ldw	r4,-84(fp)
  804c80:	e17ff117 	ldw	r5,-60(fp)
  804c84:	e1bfef17 	ldw	r6,-68(fp)
  804c88:	e1fff017 	ldw	r7,-64(fp)
  804c8c:	0805aac0 	call	805aac <reset_ship>
  804c90:	e0bfea17 	ldw	r2,-88(fp)
  804c94:	10800044 	addi	r2,r2,1
  804c98:	e0bfea15 	stw	r2,-88(fp)
  804c9c:	003fc806 	br	804bc0 <game_loop+0xad4>
		}
	}

	/* draw all screen text */
	{
		char power[7] = "power-";
  804ca0:	008020b4 	movhi	r2,130
  804ca4:	10a59504 	addi	r2,r2,-27052
  804ca8:	e13ff304 	addi	r4,fp,-52
  804cac:	100b883a 	mov	r5,r2
  804cb0:	018001c4 	movi	r6,7
  804cb4:	080d65c0 	call	80d65c <memcpy>
		int spot1_x = 5;
  804cb8:	00800144 	movi	r2,5
  804cbc:	e0bff515 	stw	r2,-44(fp)
		int spot2_x = 165;
  804cc0:	00802944 	movi	r2,165
  804cc4:	e0bff615 	stw	r2,-40(fp)

		/* draw power allocation */
		draw_string(pixel_buf_dev, p1_ship.color[0], 0, spot1_x, 230, power, 6);
  804cc8:	00c020b4 	movhi	r3,130
  804ccc:	18efc004 	addi	r3,r3,-16640
  804cd0:	00803984 	movi	r2,230
  804cd4:	d8800015 	stw	r2,0(sp)
  804cd8:	e0bff304 	addi	r2,fp,-52
  804cdc:	d8800115 	stw	r2,4(sp)
  804ce0:	00800184 	movi	r2,6
  804ce4:	d8800215 	stw	r2,8(sp)
  804ce8:	d1202417 	ldw	r4,-32624(gp)
  804cec:	19400717 	ldw	r5,28(r3)
  804cf0:	000d883a 	mov	r6,zero
  804cf4:	e1fff517 	ldw	r7,-44(fp)
  804cf8:	080293c0 	call	80293c <draw_string>
		spot1_x += 6*6;
  804cfc:	e0bff517 	ldw	r2,-44(fp)
  804d00:	10800904 	addi	r2,r2,36
  804d04:	e0bff515 	stw	r2,-44(fp)
		draw_string(pixel_buf_dev, p2_ship.color[0], 0, spot2_x, 230, power, 6);
  804d08:	00c020b4 	movhi	r3,130
  804d0c:	18f0e804 	addi	r3,r3,-15456
  804d10:	00803984 	movi	r2,230
  804d14:	d8800015 	stw	r2,0(sp)
  804d18:	e0bff304 	addi	r2,fp,-52
  804d1c:	d8800115 	stw	r2,4(sp)
  804d20:	00800184 	movi	r2,6
  804d24:	d8800215 	stw	r2,8(sp)
  804d28:	d1202417 	ldw	r4,-32624(gp)
  804d2c:	19400717 	ldw	r5,28(r3)
  804d30:	000d883a 	mov	r6,zero
  804d34:	e1fff617 	ldw	r7,-40(fp)
  804d38:	080293c0 	call	80293c <draw_string>
		spot2_x += 6*6;
  804d3c:	e0bff617 	ldw	r2,-40(fp)
  804d40:	10800904 	addi	r2,r2,36
  804d44:	e0bff615 	stw	r2,-40(fp)

		//if (p1_ship.power_budget_this_minute != p1_ship.power_budget_this_minute_old || first_run == TRUE)
		{
			draw_string(pixel_buf_dev, 0x0000, 0, spot1_x, 230, p1_ship.power_budget_string->string, p1_ship.power_budget_string->size);
  804d48:	00803984 	movi	r2,230
  804d4c:	d8800015 	stw	r2,0(sp)
  804d50:	008020b4 	movhi	r2,130
  804d54:	10afc004 	addi	r2,r2,-16640
  804d58:	10801d17 	ldw	r2,116(r2)
  804d5c:	10800017 	ldw	r2,0(r2)
  804d60:	d8800115 	stw	r2,4(sp)
  804d64:	008020b4 	movhi	r2,130
  804d68:	10afc004 	addi	r2,r2,-16640
  804d6c:	10801d17 	ldw	r2,116(r2)
  804d70:	10800117 	ldw	r2,4(r2)
  804d74:	d8800215 	stw	r2,8(sp)
  804d78:	d1202417 	ldw	r4,-32624(gp)
  804d7c:	000b883a 	mov	r5,zero
  804d80:	000d883a 	mov	r6,zero
  804d84:	e1fff517 	ldw	r7,-44(fp)
  804d88:	080293c0 	call	80293c <draw_string>
			number_to_character_string(p1_ship.power_budget_string, p1_ship.power_budget_this_minute);
  804d8c:	008020b4 	movhi	r2,130
  804d90:	10afc004 	addi	r2,r2,-16640
  804d94:	00c020b4 	movhi	r3,130
  804d98:	18efc004 	addi	r3,r3,-16640
  804d9c:	11001d17 	ldw	r4,116(r2)
  804da0:	19401b17 	ldw	r5,108(r3)
  804da4:	08079c00 	call	8079c0 <number_to_character_string>
			draw_string(pixel_buf_dev, p1_ship.color[0], 0, spot1_x, 230, p1_ship.power_budget_string->string, p1_ship.power_budget_string->size);
  804da8:	00c020b4 	movhi	r3,130
  804dac:	18efc004 	addi	r3,r3,-16640
  804db0:	00803984 	movi	r2,230
  804db4:	d8800015 	stw	r2,0(sp)
  804db8:	008020b4 	movhi	r2,130
  804dbc:	10afc004 	addi	r2,r2,-16640
  804dc0:	10801d17 	ldw	r2,116(r2)
  804dc4:	10800017 	ldw	r2,0(r2)
  804dc8:	d8800115 	stw	r2,4(sp)
  804dcc:	008020b4 	movhi	r2,130
  804dd0:	10afc004 	addi	r2,r2,-16640
  804dd4:	10801d17 	ldw	r2,116(r2)
  804dd8:	10800117 	ldw	r2,4(r2)
  804ddc:	d8800215 	stw	r2,8(sp)
  804de0:	d1202417 	ldw	r4,-32624(gp)
  804de4:	19400717 	ldw	r5,28(r3)
  804de8:	000d883a 	mov	r6,zero
  804dec:	e1fff517 	ldw	r7,-44(fp)
  804df0:	080293c0 	call	80293c <draw_string>
		}
		//if (p2_ship.power_budget_this_minute != p2_ship.power_budget_this_minute_old || first_run == TRUE)
		{
			draw_string(pixel_buf_dev, 0x0000, 0, spot2_x, 230, p2_ship.power_budget_string->string, p2_ship.power_budget_string->size);
  804df4:	00803984 	movi	r2,230
  804df8:	d8800015 	stw	r2,0(sp)
  804dfc:	008020b4 	movhi	r2,130
  804e00:	10b0e804 	addi	r2,r2,-15456
  804e04:	10801d17 	ldw	r2,116(r2)
  804e08:	10800017 	ldw	r2,0(r2)
  804e0c:	d8800115 	stw	r2,4(sp)
  804e10:	008020b4 	movhi	r2,130
  804e14:	10b0e804 	addi	r2,r2,-15456
  804e18:	10801d17 	ldw	r2,116(r2)
  804e1c:	10800117 	ldw	r2,4(r2)
  804e20:	d8800215 	stw	r2,8(sp)
  804e24:	d1202417 	ldw	r4,-32624(gp)
  804e28:	000b883a 	mov	r5,zero
  804e2c:	000d883a 	mov	r6,zero
  804e30:	e1fff617 	ldw	r7,-40(fp)
  804e34:	080293c0 	call	80293c <draw_string>
			number_to_character_string(p2_ship.power_budget_string, p2_ship.power_budget_this_minute);
  804e38:	008020b4 	movhi	r2,130
  804e3c:	10b0e804 	addi	r2,r2,-15456
  804e40:	00c020b4 	movhi	r3,130
  804e44:	18f0e804 	addi	r3,r3,-15456
  804e48:	11001d17 	ldw	r4,116(r2)
  804e4c:	19401b17 	ldw	r5,108(r3)
  804e50:	08079c00 	call	8079c0 <number_to_character_string>
			draw_string(pixel_buf_dev, p2_ship.color[0], 0, spot2_x, 230, p2_ship.power_budget_string->string, p2_ship.power_budget_string->size);
  804e54:	00c020b4 	movhi	r3,130
  804e58:	18f0e804 	addi	r3,r3,-15456
  804e5c:	00803984 	movi	r2,230
  804e60:	d8800015 	stw	r2,0(sp)
  804e64:	008020b4 	movhi	r2,130
  804e68:	10b0e804 	addi	r2,r2,-15456
  804e6c:	10801d17 	ldw	r2,116(r2)
  804e70:	10800017 	ldw	r2,0(r2)
  804e74:	d8800115 	stw	r2,4(sp)
  804e78:	008020b4 	movhi	r2,130
  804e7c:	10b0e804 	addi	r2,r2,-15456
  804e80:	10801d17 	ldw	r2,116(r2)
  804e84:	10800117 	ldw	r2,4(r2)
  804e88:	d8800215 	stw	r2,8(sp)
  804e8c:	d1202417 	ldw	r4,-32624(gp)
  804e90:	19400717 	ldw	r5,28(r3)
  804e94:	000d883a 	mov	r6,zero
  804e98:	e1fff617 	ldw	r7,-40(fp)
  804e9c:	080293c0 	call	80293c <draw_string>
		}
		spot1_x += 3*6;
  804ea0:	e0bff517 	ldw	r2,-44(fp)
  804ea4:	10800484 	addi	r2,r2,18
  804ea8:	e0bff515 	stw	r2,-44(fp)
		spot2_x += 3*6;
  804eac:	e0bff617 	ldw	r2,-40(fp)
  804eb0:	10800484 	addi	r2,r2,18
  804eb4:	e0bff615 	stw	r2,-40(fp)
	}

	/* update ship drawings */
	draw_ship(&p2_ship, pixel_buf_dev, 0);
  804eb8:	010020b4 	movhi	r4,130
  804ebc:	2130e804 	addi	r4,r4,-15456
  804ec0:	d1602417 	ldw	r5,-32624(gp)
  804ec4:	000d883a 	mov	r6,zero
  804ec8:	08018580 	call	801858 <draw_ship>
	draw_ship(&p1_ship, pixel_buf_dev, 0);
  804ecc:	010020b4 	movhi	r4,130
  804ed0:	212fc004 	addi	r4,r4,-16640
  804ed4:	d1602417 	ldw	r5,-32624(gp)
  804ed8:	000d883a 	mov	r6,zero
  804edc:	08018580 	call	801858 <draw_ship>

	return LIVE;
  804ee0:	008000c4 	movi	r2,3
  804ee4:	e0bff715 	stw	r2,-36(fp)
}
  804ee8:	e0bff717 	ldw	r2,-36(fp)
  804eec:	dfc01e17 	ldw	ra,120(sp)
  804ef0:	df001d17 	ldw	fp,116(sp)
  804ef4:	dc001c17 	ldw	r16,112(sp)
  804ef8:	dc401b17 	ldw	r17,108(sp)
  804efc:	dec01f04 	addi	sp,sp,124
  804f00:	f800283a 	ret

00804f04 <get_opponent_ship>:

/*---------------------------------------------------------------------------------------------
 * (function: get_opponent_ship)
 *---------------------------------------------------------------------------------------------*/
ship_t *get_opponent_ship(ship_t *ship)
{
  804f04:	defffd04 	addi	sp,sp,-12
  804f08:	df000215 	stw	fp,8(sp)
  804f0c:	df000204 	addi	fp,sp,8
  804f10:	e13ffe15 	stw	r4,-8(fp)
	if (ship == &p1_ship)
  804f14:	e0fffe17 	ldw	r3,-8(fp)
  804f18:	008020b4 	movhi	r2,130
  804f1c:	10afc004 	addi	r2,r2,-16640
  804f20:	1880041e 	bne	r3,r2,804f34 <get_opponent_ship+0x30>
		return &p2_ship;
  804f24:	008020b4 	movhi	r2,130
  804f28:	10b0e804 	addi	r2,r2,-15456
  804f2c:	e0bfff15 	stw	r2,-4(fp)
  804f30:	00000306 	br	804f40 <get_opponent_ship+0x3c>
	else
		return &p1_ship;
  804f34:	008020b4 	movhi	r2,130
  804f38:	10afc004 	addi	r2,r2,-16640
  804f3c:	e0bfff15 	stw	r2,-4(fp)
}
  804f40:	e0bfff17 	ldw	r2,-4(fp)
  804f44:	df000217 	ldw	fp,8(sp)
  804f48:	dec00304 	addi	sp,sp,12
  804f4c:	f800283a 	ret

00804f50 <main>:
/*---------------------------------------------------------------------------------------------
 * (function: main)
 *-------------------------------------------------------------------------------------------*/
int main()
{
  804f50:	deffd004 	addi	sp,sp,-192
  804f54:	dfc02f15 	stw	ra,188(sp)
  804f58:	df002e15 	stw	fp,184(sp)
  804f5c:	df002e04 	addi	fp,sp,184
	/* Declare variable for received character. */
	FILE *LCD;
	alt_u32 output_packet_reg = 0;
  804f60:	e03fed15 	stw	zero,-76(fp)
	int partial_second_counter;
	int second_counter = 1;
  804f64:	00800044 	movi	r2,1
  804f68:	e0bfef15 	stw	r2,-68(fp)
	short game_status;
	volatile alt_u32 input_packet_reg;
	alt_u32 mask;
	short start_up_system = TRUE;
  804f6c:	00800044 	movi	r2,1
  804f70:	e0bff30d 	sth	r2,-52(fp)
	short first_draw = TRUE;
  804f74:	00800044 	movi	r2,1
  804f78:	e0bff38d 	sth	r2,-50(fp)
	char game_start[9] = "new game";
  804f7c:	008020b4 	movhi	r2,130
  804f80:	10a59704 	addi	r2,r2,-27044
  804f84:	e13ff404 	addi	r4,fp,-48
  804f88:	100b883a 	mov	r5,r2
  804f8c:	01800244 	movi	r6,9
  804f90:	080d65c0 	call	80d65c <memcpy>
	static string_t time;

	/* initialize time */
	time.string = (char*)malloc(sizeof(char)*(10));
  804f94:	01000284 	movi	r4,10
  804f98:	080cf7c0 	call	80cf7c <malloc>
  804f9c:	d0a02215 	stw	r2,-32632(gp)
	number_to_character_string(&time, 0);
  804fa0:	d1202204 	addi	r4,gp,-32632
  804fa4:	000b883a 	mov	r5,zero
  804fa8:	08079c00 	call	8079c0 <number_to_character_string>

	/* intialize the new game */
	new_game = TRUE;
  804fac:	00800044 	movi	r2,1
  804fb0:	d0a0270d 	sth	r2,-32612(gp)

	/* initialize the lcd */
	LCD = fopen(LCD_0_NAME, "w");
  804fb4:	010020b4 	movhi	r4,130
  804fb8:	21259a04 	addi	r4,r4,-27032
  804fbc:	014020b4 	movhi	r5,130
  804fc0:	29659d04 	addi	r5,r5,-27020
  804fc4:	080c95c0 	call	80c95c <fopen>
  804fc8:	e0bfec15 	stw	r2,-80(fp)

	/* Write some simple text to the LCD. */
	if (LCD != NULL )
  804fcc:	e0bfec17 	ldw	r2,-80(fp)
  804fd0:	1005003a 	cmpeq	r2,r2,zero
  804fd4:	1000081e 	bne	r2,zero,804ff8 <main+0xa8>
	{
		fprintf(LCD, "\nThis is the LCD Display.\n");
  804fd8:	e13fec17 	ldw	r4,-80(fp)
  804fdc:	014020b4 	movhi	r5,130
  804fe0:	29659e04 	addi	r5,r5,-27016
  804fe4:	080c9780 	call	80c978 <fprintf>
		fprintf(LCD, "If you can see this, your LCD is functional.\n");
  804fe8:	e13fec17 	ldw	r4,-80(fp)
  804fec:	014020b4 	movhi	r5,130
  804ff0:	2965a504 	addi	r5,r5,-26988
  804ff4:	080c9780 	call	80c978 <fprintf>
	}

	/* initialize the output packet to all 0s */
	output_packet_reg = 0;
  804ff8:	e03fed15 	stw	zero,-76(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  804ffc:	00c04434 	movhi	r3,272
  805000:	18c40804 	addi	r3,r3,4128
  805004:	e0bfed17 	ldw	r2,-76(fp)
  805008:	18800035 	stwio	r2,0(r3)

	/* open the Pixel Buffer port */
	pixel_buf_dev =  alt_up_pixel_buffer_open_dev ("/dev/pixel_buffer_0"); // needed to make sure the library was loaded through university program !!!
  80500c:	010020b4 	movhi	r4,130
  805010:	2125b104 	addi	r4,r4,-26940
  805014:	081736c0 	call	81736c <alt_up_pixel_buffer_open_dev>
  805018:	d0a02415 	stw	r2,-32624(gp)
	if ( pixel_buf_dev == NULL)
  80501c:	d0a02417 	ldw	r2,-32624(gp)
  805020:	1004c03a 	cmpne	r2,r2,zero
  805024:	1000041e 	bne	r2,zero,805038 <main+0xe8>
		alt_printf ("Error: could not open pixel buffer device \n");
  805028:	010020b4 	movhi	r4,130
  80502c:	2125b604 	addi	r4,r4,-26920
  805030:	08151140 	call	815114 <alt_printf>
  805034:	00000306 	br	805044 <main+0xf4>
	else
		alt_printf ("Opened pixel buffer device \n");
  805038:	010020b4 	movhi	r4,130
  80503c:	2125c104 	addi	r4,r4,-26876
  805040:	08151140 	call	815114 <alt_printf>

	/* initialize the ships at opposite ends of the field of play */
	init_draw();
  805044:	0801ed80 	call	801ed8 <init_draw>
	init_ship(&p1_ship, 315, 22, 22, 0);
  805048:	d8000015 	stw	zero,0(sp)
  80504c:	010020b4 	movhi	r4,130
  805050:	212fc004 	addi	r4,r4,-16640
  805054:	01404ec4 	movi	r5,315
  805058:	01800584 	movi	r6,22
  80505c:	01c00584 	movi	r7,22
  805060:	080569c0 	call	80569c <init_ship>
	init_ship(&p2_ship, 135, 298, 218, 1);
  805064:	00800044 	movi	r2,1
  805068:	d8800015 	stw	r2,0(sp)
  80506c:	010020b4 	movhi	r4,130
  805070:	2130e804 	addi	r4,r4,-15456
  805074:	014021c4 	movi	r5,135
  805078:	01804a84 	movi	r6,298
  80507c:	01c03684 	movi	r7,218
  805080:	080569c0 	call	80569c <init_ship>

	while (1)
	{
		/* once all packets transmitted to nios display */
		if (new_game == TRUE)
  805084:	d0a0270f 	ldh	r2,-32612(gp)
  805088:	10800058 	cmpnei	r2,r2,1
  80508c:	10004c1e 	bne	r2,zero,8051c0 <main+0x270>
		{
			alt_u8 input_mode;

			mask = 1 << 27; // reserve input 28 for communicate game on
  805090:	00820034 	movhi	r2,2048
  805094:	10800004 	addi	r2,r2,0
  805098:	e0bff215 	stw	r2,-56(fp)

			/* tell the hardawre it's a new game */
			output_packet_reg = output_packet_reg | mask;
  80509c:	e0ffed17 	ldw	r3,-76(fp)
  8050a0:	e0bff217 	ldw	r2,-56(fp)
  8050a4:	1884b03a 	or	r2,r3,r2
  8050a8:	e0bfed15 	stw	r2,-76(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  8050ac:	00c04434 	movhi	r3,272
  8050b0:	18c40804 	addi	r3,r3,4128
  8050b4:	e0bfed17 	ldw	r2,-76(fp)
  8050b8:	18800035 	stwio	r2,0(r3)

			input_packet_reg = IORD_ALTERA_AVALON_PIO_DATA(INPUT_PACKET_BASE);
  8050bc:	00804434 	movhi	r2,272
  8050c0:	10842804 	addi	r2,r2,4256
  8050c4:	10800037 	ldwio	r2,0(r2)
  8050c8:	e0bff115 	stw	r2,-60(fp)
			while ((input_packet_reg & mask) == 0) // wait until it's = 1
  8050cc:	e0fff117 	ldw	r3,-60(fp)
  8050d0:	e0bff217 	ldw	r2,-56(fp)
  8050d4:	1884703a 	and	r2,r3,r2
  8050d8:	1004c03a 	cmpne	r2,r2,zero
  8050dc:	1000111e 	bne	r2,zero,805124 <main+0x1d4>
			{
				output_packet_reg = output_packet_reg | mask;
  8050e0:	e0ffed17 	ldw	r3,-76(fp)
  8050e4:	e0bff217 	ldw	r2,-56(fp)
  8050e8:	1884b03a 	or	r2,r3,r2
  8050ec:	e0bfed15 	stw	r2,-76(fp)
				IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  8050f0:	00c04434 	movhi	r3,272
  8050f4:	18c40804 	addi	r3,r3,4128
  8050f8:	e0bfed17 	ldw	r2,-76(fp)
  8050fc:	18800035 	stwio	r2,0(r3)
				input_packet_reg = IORD_ALTERA_AVALON_PIO_DATA(INPUT_PACKET_BASE);
  805100:	00804434 	movhi	r2,272
  805104:	10842804 	addi	r2,r2,4256
  805108:	10800037 	ldwio	r2,0(r2)
  80510c:	e0bff115 	stw	r2,-60(fp)

				fprintf(LCD, "Start game with switch 2 - High to Low\n");
  805110:	e13fec17 	ldw	r4,-80(fp)
  805114:	014020b4 	movhi	r5,130
  805118:	2965c904 	addi	r5,r5,-26844
  80511c:	080c9780 	call	80c978 <fprintf>
  805120:	003fea06 	br	8050cc <main+0x17c>
			}

			/* mode for the game */
			/* if 24 is high == 1 then crystal structure ignored */
			input_mode = (input_packet_reg >> 24) & 0x07;
  805124:	e0bff117 	ldw	r2,-60(fp)
  805128:	1004d63a 	srli	r2,r2,24
  80512c:	108001cc 	andi	r2,r2,7
  805130:	e0bff705 	stb	r2,-36(fp)
			if (input_mode == 1)
  805134:	e0bff703 	ldbu	r2,-36(fp)
  805138:	10800058 	cmpnei	r2,r2,1
  80513c:	1000031e 	bne	r2,zero,80514c <main+0x1fc>
			{
				game_mode = POWER_SIMPLE;
  805140:	00800044 	movi	r2,1
  805144:	d0a02505 	stb	r2,-32620(gp)
  805148:	00000106 	br	805150 <main+0x200>
			}
			else
			{
				game_mode = BASIC;
  80514c:	d0202505 	stb	zero,-32620(gp)
			}

			/* Clear the screen */
			alt_up_pixel_buffer_clear_screen (pixel_buf_dev, 0);
  805150:	d1202417 	ldw	r4,-32624(gp)
  805154:	000b883a 	mov	r5,zero
  805158:	08176180 	call	817618 <alt_up_pixel_buffer_clear_screen>

			/* disable while we set up the new game */
			disable_packet_interrupt();
  80515c:	0803cd80 	call	803cd8 <disable_packet_interrupt>
			isr_update = FALSE;
  805160:	d020200d 	sth	zero,-32640(gp)

			/* go into the game loop */
			new_game = FALSE;
  805164:	d020270d 	sth	zero,-32612(gp)

			/* reinitialize ships */
			re_init_ship(&p1_ship, 315, 22, 22, 0);
  805168:	d8000015 	stw	zero,0(sp)
  80516c:	010020b4 	movhi	r4,130
  805170:	212fc004 	addi	r4,r4,-16640
  805174:	01404ec4 	movi	r5,315
  805178:	01800584 	movi	r6,22
  80517c:	01c00584 	movi	r7,22
  805180:	0805bc80 	call	805bc8 <re_init_ship>
			re_init_ship(&p2_ship, 135, 298, 218, 1);
  805184:	00800044 	movi	r2,1
  805188:	d8800015 	stw	r2,0(sp)
  80518c:	010020b4 	movhi	r4,130
  805190:	2130e804 	addi	r4,r4,-15456
  805194:	014021c4 	movi	r5,135
  805198:	01804a84 	movi	r6,298
  80519c:	01c03684 	movi	r7,218
  8051a0:	0805bc80 	call	805bc8 <re_init_ship>

			/* tell the hardawre it's a new game */
			output_packet_reg = 0;
  8051a4:	e03fed15 	stw	zero,-76(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_PACKET_BASE, output_packet_reg);
  8051a8:	00c04434 	movhi	r3,272
  8051ac:	18c40804 	addi	r3,r3,4128
  8051b0:	e0bfed17 	ldw	r2,-76(fp)
  8051b4:	18800035 	stwio	r2,0(r3)

			/* initialize the receive path */
			init_packet_interrupt_isr();
  8051b8:	0803c7c0 	call	803c7c <init_packet_interrupt_isr>
  8051bc:	003fb106 	br	805084 <main+0x134>
		}
		else if (new_game == FALSE)
  8051c0:	d0a0270f 	ldh	r2,-32612(gp)
  8051c4:	1004c03a 	cmpne	r2,r2,zero
  8051c8:	103fae1e 	bne	r2,zero,805084 <main+0x134>
		{
			fprintf(LCD, "p1 c:%x%x%x%x%x%x%x%x;e:%x l_r:%x; dir:%x spe:%x; fire:%x pow:%x\np2 c:%x%x%x%x%x%x%x%x; e:%x l_r:%x; dir:%x spe:%x; fire:%x pow:%x\n",
  8051cc:	008020b4 	movhi	r2,130
  8051d0:	10afc004 	addi	r2,r2,-16640
  8051d4:	11801603 	ldbu	r6,88(r2)
  8051d8:	008020b4 	movhi	r2,130
  8051dc:	10afc004 	addi	r2,r2,-16640
  8051e0:	11c01643 	ldbu	r7,89(r2)
  8051e4:	008020b4 	movhi	r2,130
  8051e8:	10afc004 	addi	r2,r2,-16640
  8051ec:	10801683 	ldbu	r2,90(r2)
  8051f0:	d8800015 	stw	r2,0(sp)
  8051f4:	008020b4 	movhi	r2,130
  8051f8:	10afc004 	addi	r2,r2,-16640
  8051fc:	108016c3 	ldbu	r2,91(r2)
  805200:	d8800115 	stw	r2,4(sp)
  805204:	008020b4 	movhi	r2,130
  805208:	10afc004 	addi	r2,r2,-16640
  80520c:	10801703 	ldbu	r2,92(r2)
  805210:	d8800215 	stw	r2,8(sp)
  805214:	008020b4 	movhi	r2,130
  805218:	10afc004 	addi	r2,r2,-16640
  80521c:	10801743 	ldbu	r2,93(r2)
  805220:	d8800315 	stw	r2,12(sp)
  805224:	008020b4 	movhi	r2,130
  805228:	10afc004 	addi	r2,r2,-16640
  80522c:	10801783 	ldbu	r2,94(r2)
  805230:	d8800415 	stw	r2,16(sp)
  805234:	008020b4 	movhi	r2,130
  805238:	10afc004 	addi	r2,r2,-16640
  80523c:	108017c3 	ldbu	r2,95(r2)
  805240:	d8800515 	stw	r2,20(sp)
  805244:	008020b4 	movhi	r2,130
  805248:	10afc004 	addi	r2,r2,-16640
  80524c:	10801803 	ldbu	r2,96(r2)
  805250:	d8800615 	stw	r2,24(sp)
  805254:	008020b4 	movhi	r2,130
  805258:	10afc004 	addi	r2,r2,-16640
  80525c:	10801843 	ldbu	r2,97(r2)
  805260:	d8800715 	stw	r2,28(sp)
  805264:	008020b4 	movhi	r2,130
  805268:	10afc004 	addi	r2,r2,-16640
  80526c:	10801883 	ldbu	r2,98(r2)
  805270:	d8800815 	stw	r2,32(sp)
  805274:	008020b4 	movhi	r2,130
  805278:	10afc004 	addi	r2,r2,-16640
  80527c:	108018c3 	ldbu	r2,99(r2)
  805280:	d8800915 	stw	r2,36(sp)
  805284:	008020b4 	movhi	r2,130
  805288:	10afc004 	addi	r2,r2,-16640
  80528c:	10801903 	ldbu	r2,100(r2)
  805290:	d8800a15 	stw	r2,40(sp)
  805294:	008020b4 	movhi	r2,130
  805298:	10afc004 	addi	r2,r2,-16640
  80529c:	1080198b 	ldhu	r2,102(r2)
  8052a0:	d8800b15 	stw	r2,44(sp)
  8052a4:	008020b4 	movhi	r2,130
  8052a8:	10b0e804 	addi	r2,r2,-15456
  8052ac:	10801603 	ldbu	r2,88(r2)
  8052b0:	d8800c15 	stw	r2,48(sp)
  8052b4:	008020b4 	movhi	r2,130
  8052b8:	10b0e804 	addi	r2,r2,-15456
  8052bc:	10801643 	ldbu	r2,89(r2)
  8052c0:	d8800d15 	stw	r2,52(sp)
  8052c4:	008020b4 	movhi	r2,130
  8052c8:	10b0e804 	addi	r2,r2,-15456
  8052cc:	10801683 	ldbu	r2,90(r2)
  8052d0:	d8800e15 	stw	r2,56(sp)
  8052d4:	008020b4 	movhi	r2,130
  8052d8:	10b0e804 	addi	r2,r2,-15456
  8052dc:	108016c3 	ldbu	r2,91(r2)
  8052e0:	d8800f15 	stw	r2,60(sp)
  8052e4:	008020b4 	movhi	r2,130
  8052e8:	10b0e804 	addi	r2,r2,-15456
  8052ec:	10801703 	ldbu	r2,92(r2)
  8052f0:	d8801015 	stw	r2,64(sp)
  8052f4:	008020b4 	movhi	r2,130
  8052f8:	10b0e804 	addi	r2,r2,-15456
  8052fc:	10801743 	ldbu	r2,93(r2)
  805300:	d8801115 	stw	r2,68(sp)
  805304:	008020b4 	movhi	r2,130
  805308:	10b0e804 	addi	r2,r2,-15456
  80530c:	10801783 	ldbu	r2,94(r2)
  805310:	d8801215 	stw	r2,72(sp)
  805314:	008020b4 	movhi	r2,130
  805318:	10b0e804 	addi	r2,r2,-15456
  80531c:	108017c3 	ldbu	r2,95(r2)
  805320:	d8801315 	stw	r2,76(sp)
  805324:	008020b4 	movhi	r2,130
  805328:	10b0e804 	addi	r2,r2,-15456
  80532c:	10801803 	ldbu	r2,96(r2)
  805330:	d8801415 	stw	r2,80(sp)
  805334:	008020b4 	movhi	r2,130
  805338:	10b0e804 	addi	r2,r2,-15456
  80533c:	10801843 	ldbu	r2,97(r2)
  805340:	d8801515 	stw	r2,84(sp)
  805344:	008020b4 	movhi	r2,130
  805348:	10b0e804 	addi	r2,r2,-15456
  80534c:	10801883 	ldbu	r2,98(r2)
  805350:	d8801615 	stw	r2,88(sp)
  805354:	008020b4 	movhi	r2,130
  805358:	10b0e804 	addi	r2,r2,-15456
  80535c:	108018c3 	ldbu	r2,99(r2)
  805360:	d8801715 	stw	r2,92(sp)
  805364:	008020b4 	movhi	r2,130
  805368:	10b0e804 	addi	r2,r2,-15456
  80536c:	10801903 	ldbu	r2,100(r2)
  805370:	d8801815 	stw	r2,96(sp)
  805374:	008020b4 	movhi	r2,130
  805378:	10b0e804 	addi	r2,r2,-15456
  80537c:	1080198b 	ldhu	r2,102(r2)
  805380:	d8801915 	stw	r2,100(sp)
  805384:	e13fec17 	ldw	r4,-80(fp)
  805388:	014020b4 	movhi	r5,130
  80538c:	2965d304 	addi	r5,r5,-26804
  805390:	080c9780 	call	80c978 <fprintf>
					p1_ship.cA_hookedup_to,
					p1_ship.c2_hookedup_to,
					p1_ship.c3_hookedup_to,
					p1_ship.c4_hookedup_to,
					p1_ship.c5_hookedup_to,
					p1_ship.c6_hookedup_to,
					p1_ship.c7_hookedup_to,
					p1_ship.c8_hookedup_to,
					p1_ship.engine,
					p1_ship.engine_left_right,
					p1_ship.sensor_state,
					p1_ship.sensor_move,
					p1_ship.cannon_fire,
					p1_ship.cannon_power,
					p2_ship.cA_hookedup_to,
					p2_ship.c2_hookedup_to,
					p2_ship.c3_hookedup_to,
					p2_ship.c4_hookedup_to,
					p2_ship.c5_hookedup_to,
					p2_ship.c6_hookedup_to,
					p2_ship.c7_hookedup_to,
					p2_ship.c8_hookedup_to,
					p2_ship.engine,
					p2_ship.engine_left_right,
					p2_ship.sensor_state,
					p2_ship.sensor_move,
					p2_ship.cannon_fire,
					p2_ship.cannon_power);

			usleep(ONE_SEC/UPDATES_PER_SECOND); // every half second
  805394:	01000074 	movhi	r4,1
  805398:	21011a84 	addi	r4,r4,1130
  80539c:	08156000 	call	815600 <usleep>

			if (start_up_system == TRUE)
  8053a0:	e0bff30f 	ldh	r2,-52(fp)
  8053a4:	10800058 	cmpnei	r2,r2,1
  8053a8:	10001e1e 	bne	r2,zero,805424 <main+0x4d4>
			{
				game_status = LIVE;
  8053ac:	008000c4 	movi	r2,3
  8053b0:	e0bff00d 	sth	r2,-64(fp)

				draw_string(pixel_buf_dev, 0xFFFF, 0, 100, 100, game_start, 8);
  8053b4:	00801904 	movi	r2,100
  8053b8:	d8800015 	stw	r2,0(sp)
  8053bc:	e0bff404 	addi	r2,fp,-48
  8053c0:	d8800115 	stw	r2,4(sp)
  8053c4:	00800204 	movi	r2,8
  8053c8:	d8800215 	stw	r2,8(sp)
  8053cc:	d1202417 	ldw	r4,-32624(gp)
  8053d0:	017fffd4 	movui	r5,65535
  8053d4:	000d883a 	mov	r6,zero
  8053d8:	01c01904 	movi	r7,100
  8053dc:	080293c0 	call	80293c <draw_string>

				/* wait for a message so we can start */
				if (isr_update == TRUE)
  8053e0:	d0a0200f 	ldh	r2,-32640(gp)
  8053e4:	10800058 	cmpnei	r2,r2,1
  8053e8:	1000531e 	bne	r2,zero,805538 <main+0x5e8>
				{
					isr_update = FALSE;
  8053ec:	d020200d 	sth	zero,-32640(gp)
					start_up_system = FALSE;
  8053f0:	e03ff30d 	sth	zero,-52(fp)
					/* clean message */
					draw_string(pixel_buf_dev, 0x0000, 0, 100, 100, game_start, 8);
  8053f4:	00801904 	movi	r2,100
  8053f8:	d8800015 	stw	r2,0(sp)
  8053fc:	e0bff404 	addi	r2,fp,-48
  805400:	d8800115 	stw	r2,4(sp)
  805404:	00800204 	movi	r2,8
  805408:	d8800215 	stw	r2,8(sp)
  80540c:	d1202417 	ldw	r4,-32624(gp)
  805410:	000b883a 	mov	r5,zero
  805414:	000d883a 	mov	r6,zero
  805418:	01c01904 	movi	r7,100
  80541c:	080293c0 	call	80293c <draw_string>
  805420:	00004506 	br	805538 <main+0x5e8>
				}
			}
			else
			{
				if (isr_update == TRUE)
  805424:	d0a0200f 	ldh	r2,-32640(gp)
  805428:	10800058 	cmpnei	r2,r2,1
  80542c:	1000351e 	bne	r2,zero,805504 <main+0x5b4>
				{

					/* time keeping and drawing of seconds */
					draw_string(pixel_buf_dev, 0x0000, 0, 150, 3, time.string, time.size);
  805430:	008000c4 	movi	r2,3
  805434:	d8800015 	stw	r2,0(sp)
  805438:	d0a02217 	ldw	r2,-32632(gp)
  80543c:	d8800115 	stw	r2,4(sp)
  805440:	008020b4 	movhi	r2,130
  805444:	10afb804 	addi	r2,r2,-16672
  805448:	10800017 	ldw	r2,0(r2)
  80544c:	d8800215 	stw	r2,8(sp)
  805450:	d1202417 	ldw	r4,-32624(gp)
  805454:	000b883a 	mov	r5,zero
  805458:	000d883a 	mov	r6,zero
  80545c:	01c02584 	movi	r7,150
  805460:	080293c0 	call	80293c <draw_string>
					second_counter++;
  805464:	e0bfef17 	ldw	r2,-68(fp)
  805468:	10800044 	addi	r2,r2,1
  80546c:	e0bfef15 	stw	r2,-68(fp)
					number_to_character_string(&time, second_counter);
  805470:	d1202204 	addi	r4,gp,-32632
  805474:	e17fef17 	ldw	r5,-68(fp)
  805478:	08079c00 	call	8079c0 <number_to_character_string>
					draw_string(pixel_buf_dev, 0xFFFF, 0, 150, 3, time.string, time.size);
  80547c:	008000c4 	movi	r2,3
  805480:	d8800015 	stw	r2,0(sp)
  805484:	d0a02217 	ldw	r2,-32632(gp)
  805488:	d8800115 	stw	r2,4(sp)
  80548c:	008020b4 	movhi	r2,130
  805490:	10afb804 	addi	r2,r2,-16672
  805494:	10800017 	ldw	r2,0(r2)
  805498:	d8800215 	stw	r2,8(sp)
  80549c:	d1202417 	ldw	r4,-32624(gp)
  8054a0:	017fffd4 	movui	r5,65535
  8054a4:	000d883a 	mov	r6,zero
  8054a8:	01c02584 	movi	r7,150
  8054ac:	080293c0 	call	80293c <draw_string>

					partial_second_counter = 0;
  8054b0:	e03fee15 	stw	zero,-72(fp)
					isr_update = FALSE;
  8054b4:	d020200d 	sth	zero,-32640(gp)
					if (second_counter == 60)
  8054b8:	e0bfef17 	ldw	r2,-68(fp)
  8054bc:	10800f18 	cmpnei	r2,r2,60
  8054c0:	1000091e 	bne	r2,zero,8054e8 <main+0x598>
					{
						game_status = game_loop(1, 0, 0, first_draw);
  8054c4:	e1fff38f 	ldh	r7,-50(fp)
  8054c8:	01000044 	movi	r4,1
  8054cc:	000b883a 	mov	r5,zero
  8054d0:	000d883a 	mov	r6,zero
  8054d4:	08040ec0 	call	8040ec <game_loop>
  8054d8:	e0bff00d 	sth	r2,-64(fp)
						second_counter = 1;
  8054dc:	00800044 	movi	r2,1
  8054e0:	e0bfef15 	stw	r2,-68(fp)
  8054e4:	00001006 	br	805528 <main+0x5d8>
					}
					else
					{
						game_status = game_loop(1, second_counter, 0, first_draw);
  8054e8:	e1fff38f 	ldh	r7,-50(fp)
  8054ec:	01000044 	movi	r4,1
  8054f0:	e17fef17 	ldw	r5,-68(fp)
  8054f4:	000d883a 	mov	r6,zero
  8054f8:	08040ec0 	call	8040ec <game_loop>
  8054fc:	e0bff00d 	sth	r2,-64(fp)
  805500:	00000906 	br	805528 <main+0x5d8>
					}

				}
				else
				{
					partial_second_counter ++;
  805504:	e0bfee17 	ldw	r2,-72(fp)
  805508:	10800044 	addi	r2,r2,1
  80550c:	e0bfee15 	stw	r2,-72(fp)
					game_status = game_loop(0, second_counter, partial_second_counter, first_draw);
  805510:	e1fff38f 	ldh	r7,-50(fp)
  805514:	0009883a 	mov	r4,zero
  805518:	e17fef17 	ldw	r5,-68(fp)
  80551c:	e1bfee17 	ldw	r6,-72(fp)
  805520:	08040ec0 	call	8040ec <game_loop>
  805524:	e0bff00d 	sth	r2,-64(fp)
				}

				if (first_draw == TRUE)
  805528:	e0bff38f 	ldh	r2,-50(fp)
  80552c:	10800058 	cmpnei	r2,r2,1
  805530:	1000011e 	bne	r2,zero,805538 <main+0x5e8>
				{
					first_draw = FALSE;
  805534:	e03ff38d 	sth	zero,-50(fp)
				}
			}

			if (game_status != LIVE)
  805538:	e0bff00f 	ldh	r2,-64(fp)
  80553c:	108000e0 	cmpeqi	r2,r2,3
  805540:	103ed01e 	bne	r2,zero,805084 <main+0x134>
			{
				/* END of game */
				char game_over[10] = "game over";
  805544:	008020b4 	movhi	r2,130
  805548:	10a5f404 	addi	r2,r2,-26672
  80554c:	e13ff804 	addi	r4,fp,-32
  805550:	100b883a 	mov	r5,r2
  805554:	01800284 	movi	r6,10
  805558:	080d65c0 	call	80d65c <memcpy>
				char player1[8] = "p1 wins";
  80555c:	008020b4 	movhi	r2,130
  805560:	10a5f704 	addi	r2,r2,-26660
  805564:	e13ffb04 	addi	r4,fp,-20
  805568:	100b883a 	mov	r5,r2
  80556c:	01800204 	movi	r6,8
  805570:	080d65c0 	call	80d65c <memcpy>
				char player2[8] = "p2 wins";
  805574:	008020b4 	movhi	r2,130
  805578:	10a5f904 	addi	r2,r2,-26652
  80557c:	e13ffd04 	addi	r4,fp,-12
  805580:	100b883a 	mov	r5,r2
  805584:	01800204 	movi	r6,8
  805588:	080d65c0 	call	80d65c <memcpy>
				char tie[4] = "tie";
  80558c:	008020b4 	movhi	r2,130
  805590:	10a5fb04 	addi	r2,r2,-26644
  805594:	10800017 	ldw	r2,0(r2)
  805598:	e0bfff15 	stw	r2,-4(fp)

				draw_string(pixel_buf_dev, 0xFFFF, 0, 100, 100, game_over, 9);
  80559c:	00801904 	movi	r2,100
  8055a0:	d8800015 	stw	r2,0(sp)
  8055a4:	e0bff804 	addi	r2,fp,-32
  8055a8:	d8800115 	stw	r2,4(sp)
  8055ac:	00800244 	movi	r2,9
  8055b0:	d8800215 	stw	r2,8(sp)
  8055b4:	d1202417 	ldw	r4,-32624(gp)
  8055b8:	017fffd4 	movui	r5,65535
  8055bc:	000d883a 	mov	r6,zero
  8055c0:	01c01904 	movi	r7,100
  8055c4:	080293c0 	call	80293c <draw_string>
				if (game_status == P1)
  8055c8:	e0bff00f 	ldh	r2,-64(fp)
  8055cc:	10800058 	cmpnei	r2,r2,1
  8055d0:	10000c1e 	bne	r2,zero,805604 <main+0x6b4>
				{
					draw_string(pixel_buf_dev, 0xFFFF, 0, 100, 106, player1, 7);
  8055d4:	00801a84 	movi	r2,106
  8055d8:	d8800015 	stw	r2,0(sp)
  8055dc:	e0bffb04 	addi	r2,fp,-20
  8055e0:	d8800115 	stw	r2,4(sp)
  8055e4:	008001c4 	movi	r2,7
  8055e8:	d8800215 	stw	r2,8(sp)
  8055ec:	d1202417 	ldw	r4,-32624(gp)
  8055f0:	017fffd4 	movui	r5,65535
  8055f4:	000d883a 	mov	r6,zero
  8055f8:	01c01904 	movi	r7,100
  8055fc:	080293c0 	call	80293c <draw_string>
  805600:	00001d06 	br	805678 <main+0x728>
				}
				else if (game_status == P2)
  805604:	e0bff00f 	ldh	r2,-64(fp)
  805608:	10800098 	cmpnei	r2,r2,2
  80560c:	10000c1e 	bne	r2,zero,805640 <main+0x6f0>
				{
					draw_string(pixel_buf_dev, 0xFFFF, 0, 100, 106, player2, 7);
  805610:	00801a84 	movi	r2,106
  805614:	d8800015 	stw	r2,0(sp)
  805618:	e0bffd04 	addi	r2,fp,-12
  80561c:	d8800115 	stw	r2,4(sp)
  805620:	008001c4 	movi	r2,7
  805624:	d8800215 	stw	r2,8(sp)
  805628:	d1202417 	ldw	r4,-32624(gp)
  80562c:	017fffd4 	movui	r5,65535
  805630:	000d883a 	mov	r6,zero
  805634:	01c01904 	movi	r7,100
  805638:	080293c0 	call	80293c <draw_string>
  80563c:	00000e06 	br	805678 <main+0x728>
				}
				else if (game_status == TIE)
  805640:	e0bff00f 	ldh	r2,-64(fp)
  805644:	1004c03a 	cmpne	r2,r2,zero
  805648:	10000b1e 	bne	r2,zero,805678 <main+0x728>
				{
					draw_string(pixel_buf_dev, 0xFFFF, 0, 100, 106, tie, 3);
  80564c:	00801a84 	movi	r2,106
  805650:	d8800015 	stw	r2,0(sp)
  805654:	e0bfff04 	addi	r2,fp,-4
  805658:	d8800115 	stw	r2,4(sp)
  80565c:	008000c4 	movi	r2,3
  805660:	d8800215 	stw	r2,8(sp)
  805664:	d1202417 	ldw	r4,-32624(gp)
  805668:	017fffd4 	movui	r5,65535
  80566c:	000d883a 	mov	r6,zero
  805670:	01c01904 	movi	r7,100
  805674:	080293c0 	call	80293c <draw_string>
				}

				new_game = TRUE;
  805678:	00800044 	movi	r2,1
  80567c:	d0a0270d 	sth	r2,-32612(gp)
				second_counter = 1;
  805680:	00800044 	movi	r2,1
  805684:	e0bfef15 	stw	r2,-68(fp)
				start_up_system = TRUE;
  805688:	00800044 	movi	r2,1
  80568c:	e0bff30d 	sth	r2,-52(fp)
				first_draw = TRUE;
  805690:	00800044 	movi	r2,1
  805694:	e0bff38d 	sth	r2,-50(fp)
  805698:	003e7a06 	br	805084 <main+0x134>

0080569c <init_ship>:
 * (function: init_ship)
 *	SHIP is a rectangle held in a matrix...the 0th row holds x coord and the 1st row holds y coord
 *-------------------------------------------------------------------------------------------*/
void init_ship(ship_t *ship, int start_angle, int start_x, int start_y, int player_number)
{
  80569c:	defff704 	addi	sp,sp,-36
  8056a0:	dfc00815 	stw	ra,32(sp)
  8056a4:	df000715 	stw	fp,28(sp)
  8056a8:	dc000615 	stw	r16,24(sp)
  8056ac:	df000704 	addi	fp,sp,28
  8056b0:	e13ffa15 	stw	r4,-24(fp)
  8056b4:	e17ffb15 	stw	r5,-20(fp)
  8056b8:	e1bffc15 	stw	r6,-16(fp)
  8056bc:	e1fffd15 	stw	r7,-12(fp)
	int i;

	ship->player_number = player_number;
  8056c0:	e0fffa17 	ldw	r3,-24(fp)
  8056c4:	e0800217 	ldw	r2,8(fp)
  8056c8:	18800015 	stw	r2,0(r3)
	ship->angle = start_angle;
  8056cc:	e0fffa17 	ldw	r3,-24(fp)
  8056d0:	e0bffb17 	ldw	r2,-20(fp)
  8056d4:	1880090d 	sth	r2,36(r3)
	ship->x = start_x;
  8056d8:	e43ffa17 	ldw	r16,-24(fp)
  8056dc:	e13ffc17 	ldw	r4,-16(fp)
  8056e0:	080ac940 	call	80ac94 <__floatsisf>
  8056e4:	80800a15 	stw	r2,40(r16)
	ship->y = start_y;
  8056e8:	e43ffa17 	ldw	r16,-24(fp)
  8056ec:	e13ffd17 	ldw	r4,-12(fp)
  8056f0:	080ac940 	call	80ac94 <__floatsisf>
  8056f4:	80800b15 	stw	r2,44(r16)
	ship->sensor_angle = 0;
  8056f8:	e0bffa17 	ldw	r2,-24(fp)
  8056fc:	10001f15 	stw	zero,124(r2)

	ship->reset = FALSE;
  805700:	e0bffa17 	ldw	r2,-24(fp)
  805704:	10000d0d 	sth	zero,52(r2)
	ship->stalled = FALSE;
  805708:	e0bffa17 	ldw	r2,-24(fp)
  80570c:	10001e0d 	sth	zero,120(r2)
	ship->velocity = (vector_t*)malloc(sizeof(vector_t)*2);
  805710:	e43ffa17 	ldw	r16,-24(fp)
  805714:	01000404 	movi	r4,16
  805718:	080cf7c0 	call	80cf7c <malloc>
  80571c:	80800c15 	stw	r2,48(r16)
	ship->velocity->x = 0;
  805720:	e0bffa17 	ldw	r2,-24(fp)
  805724:	10800c17 	ldw	r2,48(r2)
  805728:	10000015 	stw	zero,0(r2)
	ship->velocity->y = 0;
  80572c:	e0bffa17 	ldw	r2,-24(fp)
  805730:	10800c17 	ldw	r2,48(r2)
  805734:	10000115 	stw	zero,4(r2)
	ship->axis = (vector_t*)malloc(sizeof(vector_t)*2);
  805738:	e43ffa17 	ldw	r16,-24(fp)
  80573c:	01000404 	movi	r4,16
  805740:	080cf7c0 	call	80cf7c <malloc>
  805744:	80800615 	stw	r2,24(r16)

	/* allocate string containers */
	ship->power_budget_string = (string_t *)malloc(sizeof(string_t));
  805748:	e43ffa17 	ldw	r16,-24(fp)
  80574c:	01000204 	movi	r4,8
  805750:	080cf7c0 	call	80cf7c <malloc>
  805754:	80801d15 	stw	r2,116(r16)
	ship->power_budget_string->string = (char*)malloc(sizeof(char)*(10+1));
  805758:	e0bffa17 	ldw	r2,-24(fp)
  80575c:	14001d17 	ldw	r16,116(r2)
  805760:	010002c4 	movi	r4,11
  805764:	080cf7c0 	call	80cf7c <malloc>
  805768:	80800015 	stw	r2,0(r16)
	number_to_character_string(ship->power_budget_string, 0);
  80576c:	e0bffa17 	ldw	r2,-24(fp)
  805770:	11001d17 	ldw	r4,116(r2)
  805774:	000b883a 	mov	r5,zero
  805778:	08079c00 	call	8079c0 <number_to_character_string>

	/* initialize colors for player ships */
	if (player_number == 0)
  80577c:	e0800217 	ldw	r2,8(fp)
  805780:	1004c03a 	cmpne	r2,r2,zero
  805784:	1000071e 	bne	r2,zero,8057a4 <init_ship+0x108>
	{
		ship->color[0] = 0xFC3F;
  805788:	e0fffa17 	ldw	r3,-24(fp)
  80578c:	00bf0fd4 	movui	r2,64575
  805790:	18800715 	stw	r2,28(r3)
		ship->color[1] = 0xFF00; // gun color
  805794:	e0fffa17 	ldw	r3,-24(fp)
  805798:	00bfc014 	movui	r2,65280
  80579c:	18800815 	stw	r2,32(r3)
  8057a0:	00000606 	br	8057bc <init_ship+0x120>
	}
	else
	{
		ship->color[0] = 0x00FF;
  8057a4:	e0fffa17 	ldw	r3,-24(fp)
  8057a8:	00803fc4 	movi	r2,255
  8057ac:	18800715 	stw	r2,28(r3)
		ship->color[1] = 0xFF00; // gun color
  8057b0:	e0fffa17 	ldw	r3,-24(fp)
  8057b4:	00bfc014 	movui	r2,65280
  8057b8:	18800815 	stw	r2,32(r3)
	}

	ship->row = 3;
  8057bc:	e0fffa17 	ldw	r3,-24(fp)
  8057c0:	008000c4 	movi	r2,3
  8057c4:	18800115 	stw	r2,4(r3)
	ship->column = SHIP_COLUMN_POINTS;
  8057c8:	e0fffa17 	ldw	r3,-24(fp)
  8057cc:	00800184 	movi	r2,6
  8057d0:	18800215 	stw	r2,8(r3)
	ship->matrix_start = (float**)malloc(sizeof(float*)*SHIP_COLUMN_POINTS);
  8057d4:	e43ffa17 	ldw	r16,-24(fp)
  8057d8:	01000604 	movi	r4,24
  8057dc:	080cf7c0 	call	80cf7c <malloc>
  8057e0:	80800315 	stw	r2,12(r16)
	ship->matrix_location = (float**)malloc(sizeof(float*)*SHIP_COLUMN_POINTS);
  8057e4:	e43ffa17 	ldw	r16,-24(fp)
  8057e8:	01000604 	movi	r4,24
  8057ec:	080cf7c0 	call	80cf7c <malloc>
  8057f0:	80800415 	stw	r2,16(r16)
	ship->temp_matrix = (float**)malloc(sizeof(float*)*SHIP_COLUMN_POINTS);
  8057f4:	e43ffa17 	ldw	r16,-24(fp)
  8057f8:	01000604 	movi	r4,24
  8057fc:	080cf7c0 	call	80cf7c <malloc>
  805800:	80800515 	stw	r2,20(r16)

	for (i = 0; i < SHIP_COLUMN_POINTS; i++)
  805804:	e03ffe15 	stw	zero,-8(fp)
  805808:	e0bffe17 	ldw	r2,-8(fp)
  80580c:	10800188 	cmpgei	r2,r2,6
  805810:	1000291e 	bne	r2,zero,8058b8 <init_ship+0x21c>
	{
		ship->matrix_start[i] = (float*)calloc(sizeof(float),3);
  805814:	e13ffa17 	ldw	r4,-24(fp)
  805818:	e0bffe17 	ldw	r2,-8(fp)
  80581c:	10c00124 	muli	r3,r2,4
  805820:	20800317 	ldw	r2,12(r4)
  805824:	18a1883a 	add	r16,r3,r2
  805828:	01000104 	movi	r4,4
  80582c:	014000c4 	movi	r5,3
  805830:	080c7980 	call	80c798 <calloc>
  805834:	80800015 	stw	r2,0(r16)
		/* init to 1 for the transformations */
		ship->matrix_start[i][2] = 1.0;
  805838:	e13ffa17 	ldw	r4,-24(fp)
  80583c:	e0bffe17 	ldw	r2,-8(fp)
  805840:	10c00124 	muli	r3,r2,4
  805844:	20800317 	ldw	r2,12(r4)
  805848:	1885883a 	add	r2,r3,r2
  80584c:	10800017 	ldw	r2,0(r2)
  805850:	10c00204 	addi	r3,r2,8
  805854:	008fe034 	movhi	r2,16256
  805858:	10800004 	addi	r2,r2,0
  80585c:	18800015 	stw	r2,0(r3)

		ship->temp_matrix[i] = (float*)calloc(sizeof(float),3);
  805860:	e13ffa17 	ldw	r4,-24(fp)
  805864:	e0bffe17 	ldw	r2,-8(fp)
  805868:	10c00124 	muli	r3,r2,4
  80586c:	20800517 	ldw	r2,20(r4)
  805870:	18a1883a 	add	r16,r3,r2
  805874:	01000104 	movi	r4,4
  805878:	014000c4 	movi	r5,3
  80587c:	080c7980 	call	80c798 <calloc>
  805880:	80800015 	stw	r2,0(r16)
		ship->matrix_location[i] = (float*)calloc(sizeof(float),3);
  805884:	e13ffa17 	ldw	r4,-24(fp)
  805888:	e0bffe17 	ldw	r2,-8(fp)
  80588c:	10c00124 	muli	r3,r2,4
  805890:	20800417 	ldw	r2,16(r4)
  805894:	18a1883a 	add	r16,r3,r2
  805898:	01000104 	movi	r4,4
  80589c:	014000c4 	movi	r5,3
  8058a0:	080c7980 	call	80c798 <calloc>
  8058a4:	80800015 	stw	r2,0(r16)
  8058a8:	e0bffe17 	ldw	r2,-8(fp)
  8058ac:	10800044 	addi	r2,r2,1
  8058b0:	e0bffe15 	stw	r2,-8(fp)
  8058b4:	003fd406 	br	805808 <init_ship+0x16c>
	}

	/* draw the box centered arround the origin */
	ship->matrix_start[0][0] = -(SHIP_SIZE/2);
  8058b8:	e0bffa17 	ldw	r2,-24(fp)
  8058bc:	10800317 	ldw	r2,12(r2)
  8058c0:	10c00017 	ldw	r3,0(r2)
  8058c4:	00b02834 	movhi	r2,49312
  8058c8:	10800004 	addi	r2,r2,0
  8058cc:	18800015 	stw	r2,0(r3)
	ship->matrix_start[0][1] = -(SHIP_SIZE/2);
  8058d0:	e0bffa17 	ldw	r2,-24(fp)
  8058d4:	10800317 	ldw	r2,12(r2)
  8058d8:	10800017 	ldw	r2,0(r2)
  8058dc:	10c00104 	addi	r3,r2,4
  8058e0:	00b02834 	movhi	r2,49312
  8058e4:	10800004 	addi	r2,r2,0
  8058e8:	18800015 	stw	r2,0(r3)
	ship->matrix_start[1][0] = -(SHIP_SIZE/2);
  8058ec:	e0bffa17 	ldw	r2,-24(fp)
  8058f0:	10800317 	ldw	r2,12(r2)
  8058f4:	10800104 	addi	r2,r2,4
  8058f8:	10c00017 	ldw	r3,0(r2)
  8058fc:	00b02834 	movhi	r2,49312
  805900:	10800004 	addi	r2,r2,0
  805904:	18800015 	stw	r2,0(r3)
	ship->matrix_start[1][1] = (SHIP_SIZE/2);
  805908:	e0bffa17 	ldw	r2,-24(fp)
  80590c:	10800317 	ldw	r2,12(r2)
  805910:	10800104 	addi	r2,r2,4
  805914:	10800017 	ldw	r2,0(r2)
  805918:	10c00104 	addi	r3,r2,4
  80591c:	00902834 	movhi	r2,16544
  805920:	10800004 	addi	r2,r2,0
  805924:	18800015 	stw	r2,0(r3)
	ship->matrix_start[2][0] = (SHIP_SIZE/2);
  805928:	e0bffa17 	ldw	r2,-24(fp)
  80592c:	10800317 	ldw	r2,12(r2)
  805930:	10800204 	addi	r2,r2,8
  805934:	10c00017 	ldw	r3,0(r2)
  805938:	00902834 	movhi	r2,16544
  80593c:	10800004 	addi	r2,r2,0
  805940:	18800015 	stw	r2,0(r3)
	ship->matrix_start[2][1] = (SHIP_SIZE/2);
  805944:	e0bffa17 	ldw	r2,-24(fp)
  805948:	10800317 	ldw	r2,12(r2)
  80594c:	10800204 	addi	r2,r2,8
  805950:	10800017 	ldw	r2,0(r2)
  805954:	10c00104 	addi	r3,r2,4
  805958:	00902834 	movhi	r2,16544
  80595c:	10800004 	addi	r2,r2,0
  805960:	18800015 	stw	r2,0(r3)
	ship->matrix_start[3][0] = (SHIP_SIZE/2);
  805964:	e0bffa17 	ldw	r2,-24(fp)
  805968:	10800317 	ldw	r2,12(r2)
  80596c:	10800304 	addi	r2,r2,12
  805970:	10c00017 	ldw	r3,0(r2)
  805974:	00902834 	movhi	r2,16544
  805978:	10800004 	addi	r2,r2,0
  80597c:	18800015 	stw	r2,0(r3)
	ship->matrix_start[3][1] = -(SHIP_SIZE/2);
  805980:	e0bffa17 	ldw	r2,-24(fp)
  805984:	10800317 	ldw	r2,12(r2)
  805988:	10800304 	addi	r2,r2,12
  80598c:	10800017 	ldw	r2,0(r2)
  805990:	10c00104 	addi	r3,r2,4
  805994:	00b02834 	movhi	r2,49312
  805998:	10800004 	addi	r2,r2,0
  80599c:	18800015 	stw	r2,0(r3)
	/* draw the line representing the laser */
	ship->matrix_start[4][0] = 0;
  8059a0:	e0bffa17 	ldw	r2,-24(fp)
  8059a4:	10800317 	ldw	r2,12(r2)
  8059a8:	10800404 	addi	r2,r2,16
  8059ac:	10800017 	ldw	r2,0(r2)
  8059b0:	10000015 	stw	zero,0(r2)
	ship->matrix_start[4][1] = 0;
  8059b4:	e0bffa17 	ldw	r2,-24(fp)
  8059b8:	10800317 	ldw	r2,12(r2)
  8059bc:	10800404 	addi	r2,r2,16
  8059c0:	10800017 	ldw	r2,0(r2)
  8059c4:	10800104 	addi	r2,r2,4
  8059c8:	10000015 	stw	zero,0(r2)
	ship->matrix_start[5][0] = 0;
  8059cc:	e0bffa17 	ldw	r2,-24(fp)
  8059d0:	10800317 	ldw	r2,12(r2)
  8059d4:	10800504 	addi	r2,r2,20
  8059d8:	10800017 	ldw	r2,0(r2)
  8059dc:	10000015 	stw	zero,0(r2)
	ship->matrix_start[5][1] = (SHIP_SIZE/2);
  8059e0:	e0bffa17 	ldw	r2,-24(fp)
  8059e4:	10800317 	ldw	r2,12(r2)
  8059e8:	10800504 	addi	r2,r2,20
  8059ec:	10800017 	ldw	r2,0(r2)
  8059f0:	10c00104 	addi	r3,r2,4
  8059f4:	00902834 	movhi	r2,16544
  8059f8:	10800004 	addi	r2,r2,0
  8059fc:	18800015 	stw	r2,0(r3)

	/* make a copy */
	copy_matrix(ship->matrix_start, ship->row, ship->column, ship->temp_matrix);
  805a00:	e0bffa17 	ldw	r2,-24(fp)
  805a04:	e0fffa17 	ldw	r3,-24(fp)
  805a08:	e1bffa17 	ldw	r6,-24(fp)
  805a0c:	e1fffa17 	ldw	r7,-24(fp)
  805a10:	11000317 	ldw	r4,12(r2)
  805a14:	19400117 	ldw	r5,4(r3)
  805a18:	31800217 	ldw	r6,8(r6)
  805a1c:	39c00517 	ldw	r7,20(r7)
  805a20:	08022d40 	call	8022d4 <copy_matrix>
	/* the location, now and then */
	/* rotate the ship to the start angle */
	rotate_a_matrix(ship->temp_matrix, ship->row, ship->column, start_angle);
  805a24:	e0bffa17 	ldw	r2,-24(fp)
  805a28:	e0fffa17 	ldw	r3,-24(fp)
  805a2c:	e1bffa17 	ldw	r6,-24(fp)
  805a30:	11000517 	ldw	r4,20(r2)
  805a34:	19400117 	ldw	r5,4(r3)
  805a38:	31800217 	ldw	r6,8(r6)
  805a3c:	e1fffb17 	ldw	r7,-20(fp)
  805a40:	08020380 	call	802038 <rotate_a_matrix>

	/* copy this into the moved version */
	copy_matrix(ship->temp_matrix, ship->row, ship->column, ship->matrix_location);
  805a44:	e0bffa17 	ldw	r2,-24(fp)
  805a48:	e0fffa17 	ldw	r3,-24(fp)
  805a4c:	e1bffa17 	ldw	r6,-24(fp)
  805a50:	e1fffa17 	ldw	r7,-24(fp)
  805a54:	11000517 	ldw	r4,20(r2)
  805a58:	19400117 	ldw	r5,4(r3)
  805a5c:	31800217 	ldw	r6,8(r6)
  805a60:	39c00417 	ldw	r7,16(r7)
  805a64:	08022d40 	call	8022d4 <copy_matrix>
	/* do translation on the location */
	translate_a_matrix(ship->matrix_location, ship->row, ship->column, start_x, start_y);
  805a68:	e0fffa17 	ldw	r3,-24(fp)
  805a6c:	e17ffa17 	ldw	r5,-24(fp)
  805a70:	e1bffa17 	ldw	r6,-24(fp)
  805a74:	e0bffd17 	ldw	r2,-12(fp)
  805a78:	d8800015 	stw	r2,0(sp)
  805a7c:	19000417 	ldw	r4,16(r3)
  805a80:	29400117 	ldw	r5,4(r5)
  805a84:	31800217 	ldw	r6,8(r6)
  805a88:	e1fffc17 	ldw	r7,-16(fp)
  805a8c:	0801f800 	call	801f80 <translate_a_matrix>

	ship->shot_fired_x_seconds_ago = 0;
  805a90:	e0bffa17 	ldw	r2,-24(fp)
  805a94:	10001a8d 	sth	zero,106(r2)
}
  805a98:	dfc00817 	ldw	ra,32(sp)
  805a9c:	df000717 	ldw	fp,28(sp)
  805aa0:	dc000617 	ldw	r16,24(sp)
  805aa4:	dec00904 	addi	sp,sp,36
  805aa8:	f800283a 	ret

00805aac <reset_ship>:

/*---------------------------------------------------------------------------------------------
 * (function: reset_ship)
 *-------------------------------------------------------------------------------------------*/
void reset_ship(ship_t *ship, int start_angle, int start_x, int start_y)
{
  805aac:	defff804 	addi	sp,sp,-32
  805ab0:	dfc00715 	stw	ra,28(sp)
  805ab4:	df000615 	stw	fp,24(sp)
  805ab8:	dc000515 	stw	r16,20(sp)
  805abc:	df000604 	addi	fp,sp,24
  805ac0:	e13ffb15 	stw	r4,-20(fp)
  805ac4:	e17ffc15 	stw	r5,-16(fp)
  805ac8:	e1bffd15 	stw	r6,-12(fp)
  805acc:	e1fffe15 	stw	r7,-8(fp)
	ship->angle = start_angle;
  805ad0:	e0fffb17 	ldw	r3,-20(fp)
  805ad4:	e0bffc17 	ldw	r2,-16(fp)
  805ad8:	1880090d 	sth	r2,36(r3)
	ship->x = start_x;
  805adc:	e43ffb17 	ldw	r16,-20(fp)
  805ae0:	e13ffd17 	ldw	r4,-12(fp)
  805ae4:	080ac940 	call	80ac94 <__floatsisf>
  805ae8:	80800a15 	stw	r2,40(r16)
	ship->y = start_y;
  805aec:	e43ffb17 	ldw	r16,-20(fp)
  805af0:	e13ffe17 	ldw	r4,-8(fp)
  805af4:	080ac940 	call	80ac94 <__floatsisf>
  805af8:	80800b15 	stw	r2,44(r16)

	ship->reset = FALSE;
  805afc:	e0bffb17 	ldw	r2,-20(fp)
  805b00:	10000d0d 	sth	zero,52(r2)
	ship->velocity->x = 0;
  805b04:	e0bffb17 	ldw	r2,-20(fp)
  805b08:	10800c17 	ldw	r2,48(r2)
  805b0c:	10000015 	stw	zero,0(r2)
	ship->velocity->y = 0;
  805b10:	e0bffb17 	ldw	r2,-20(fp)
  805b14:	10800c17 	ldw	r2,48(r2)
  805b18:	10000115 	stw	zero,4(r2)
	ship->sensor_angle = 0;
  805b1c:	e0bffb17 	ldw	r2,-20(fp)
  805b20:	10001f15 	stw	zero,124(r2)

	/* make a copy */
	copy_matrix(ship->matrix_start, ship->row, ship->column, ship->temp_matrix);
  805b24:	e0bffb17 	ldw	r2,-20(fp)
  805b28:	e0fffb17 	ldw	r3,-20(fp)
  805b2c:	e1bffb17 	ldw	r6,-20(fp)
  805b30:	e1fffb17 	ldw	r7,-20(fp)
  805b34:	11000317 	ldw	r4,12(r2)
  805b38:	19400117 	ldw	r5,4(r3)
  805b3c:	31800217 	ldw	r6,8(r6)
  805b40:	39c00517 	ldw	r7,20(r7)
  805b44:	08022d40 	call	8022d4 <copy_matrix>
	/* the location, now and then */
	/* rotate the ship to the start angle */
	rotate_a_matrix(ship->temp_matrix, ship->row, ship->column, start_angle);
  805b48:	e0bffb17 	ldw	r2,-20(fp)
  805b4c:	e0fffb17 	ldw	r3,-20(fp)
  805b50:	e1bffb17 	ldw	r6,-20(fp)
  805b54:	11000517 	ldw	r4,20(r2)
  805b58:	19400117 	ldw	r5,4(r3)
  805b5c:	31800217 	ldw	r6,8(r6)
  805b60:	e1fffc17 	ldw	r7,-16(fp)
  805b64:	08020380 	call	802038 <rotate_a_matrix>

	/* copy this into the moved version */
	copy_matrix(ship->temp_matrix, ship->row, ship->column, ship->matrix_location);
  805b68:	e0bffb17 	ldw	r2,-20(fp)
  805b6c:	e0fffb17 	ldw	r3,-20(fp)
  805b70:	e1bffb17 	ldw	r6,-20(fp)
  805b74:	e1fffb17 	ldw	r7,-20(fp)
  805b78:	11000517 	ldw	r4,20(r2)
  805b7c:	19400117 	ldw	r5,4(r3)
  805b80:	31800217 	ldw	r6,8(r6)
  805b84:	39c00417 	ldw	r7,16(r7)
  805b88:	08022d40 	call	8022d4 <copy_matrix>
	/* do translation on the location */
	translate_a_matrix(ship->matrix_location, ship->row, ship->column, start_x, start_y);
  805b8c:	e0fffb17 	ldw	r3,-20(fp)
  805b90:	e17ffb17 	ldw	r5,-20(fp)
  805b94:	e1bffb17 	ldw	r6,-20(fp)
  805b98:	e0bffe17 	ldw	r2,-8(fp)
  805b9c:	d8800015 	stw	r2,0(sp)
  805ba0:	19000417 	ldw	r4,16(r3)
  805ba4:	29400117 	ldw	r5,4(r5)
  805ba8:	31800217 	ldw	r6,8(r6)
  805bac:	e1fffd17 	ldw	r7,-12(fp)
  805bb0:	0801f800 	call	801f80 <translate_a_matrix>
}
  805bb4:	dfc00717 	ldw	ra,28(sp)
  805bb8:	df000617 	ldw	fp,24(sp)
  805bbc:	dc000517 	ldw	r16,20(sp)
  805bc0:	dec00804 	addi	sp,sp,32
  805bc4:	f800283a 	ret

00805bc8 <re_init_ship>:

/*---------------------------------------------------------------------------------------------
 * (function: init_ship)
 *-------------------------------------------------------------------------------------------*/
void re_init_ship(ship_t *ship, int start_angle, int start_x, int start_y, int player_number)
{
  805bc8:	defff804 	addi	sp,sp,-32
  805bcc:	dfc00715 	stw	ra,28(sp)
  805bd0:	df000615 	stw	fp,24(sp)
  805bd4:	dc000515 	stw	r16,20(sp)
  805bd8:	df000604 	addi	fp,sp,24
  805bdc:	e13ffb15 	stw	r4,-20(fp)
  805be0:	e17ffc15 	stw	r5,-16(fp)
  805be4:	e1bffd15 	stw	r6,-12(fp)
  805be8:	e1fffe15 	stw	r7,-8(fp)
	ship->player_number = player_number;
  805bec:	e0fffb17 	ldw	r3,-20(fp)
  805bf0:	e0800217 	ldw	r2,8(fp)
  805bf4:	18800015 	stw	r2,0(r3)
	ship->angle = start_angle;
  805bf8:	e0fffb17 	ldw	r3,-20(fp)
  805bfc:	e0bffc17 	ldw	r2,-16(fp)
  805c00:	1880090d 	sth	r2,36(r3)
	ship->x = start_x;
  805c04:	e43ffb17 	ldw	r16,-20(fp)
  805c08:	e13ffd17 	ldw	r4,-12(fp)
  805c0c:	080ac940 	call	80ac94 <__floatsisf>
  805c10:	80800a15 	stw	r2,40(r16)
	ship->y = start_y;
  805c14:	e43ffb17 	ldw	r16,-20(fp)
  805c18:	e13ffe17 	ldw	r4,-8(fp)
  805c1c:	080ac940 	call	80ac94 <__floatsisf>
  805c20:	80800b15 	stw	r2,44(r16)
	ship->sensor_angle = 0;
  805c24:	e0bffb17 	ldw	r2,-20(fp)
  805c28:	10001f15 	stw	zero,124(r2)

	ship->reset = FALSE;
  805c2c:	e0bffb17 	ldw	r2,-20(fp)
  805c30:	10000d0d 	sth	zero,52(r2)
	ship->stalled = TRUE;
  805c34:	e0fffb17 	ldw	r3,-20(fp)
  805c38:	00800044 	movi	r2,1
  805c3c:	18801e0d 	sth	r2,120(r3)
	ship->stalled_for_minutes = 0; 
  805c40:	e0bffb17 	ldw	r2,-20(fp)
  805c44:	10001e8d 	sth	zero,122(r2)
	ship->velocity->x = 0;
  805c48:	e0bffb17 	ldw	r2,-20(fp)
  805c4c:	10800c17 	ldw	r2,48(r2)
  805c50:	10000015 	stw	zero,0(r2)
	ship->velocity->y = 0;
  805c54:	e0bffb17 	ldw	r2,-20(fp)
  805c58:	10800c17 	ldw	r2,48(r2)
  805c5c:	10000115 	stw	zero,4(r2)
	ship->power_budget_this_minute = 0;
  805c60:	e0bffb17 	ldw	r2,-20(fp)
  805c64:	10001b15 	stw	zero,108(r2)
	ship->power_budget_this_minute_old = -1;
  805c68:	e0fffb17 	ldw	r3,-20(fp)
  805c6c:	00bfffc4 	movi	r2,-1
  805c70:	18801c15 	stw	r2,112(r3)
	number_to_character_string(ship->power_budget_string, 0);
  805c74:	e0bffb17 	ldw	r2,-20(fp)
  805c78:	11001d17 	ldw	r4,116(r2)
  805c7c:	000b883a 	mov	r5,zero
  805c80:	08079c00 	call	8079c0 <number_to_character_string>

	/* reset sensors */
	ship->shot_start.x = start_x;
  805c84:	e43ffb17 	ldw	r16,-20(fp)
  805c88:	e13ffd17 	ldw	r4,-12(fp)
  805c8c:	080ac940 	call	80ac94 <__floatsisf>
  805c90:	80800e15 	stw	r2,56(r16)
	ship->shot_start.y = start_y;
  805c94:	e43ffb17 	ldw	r16,-20(fp)
  805c98:	e13ffe17 	ldw	r4,-8(fp)
  805c9c:	080ac940 	call	80ac94 <__floatsisf>
  805ca0:	80800f15 	stw	r2,60(r16)
	ship->shot_end.x = start_x;
  805ca4:	e43ffb17 	ldw	r16,-20(fp)
  805ca8:	e13ffd17 	ldw	r4,-12(fp)
  805cac:	080ac940 	call	80ac94 <__floatsisf>
  805cb0:	80801015 	stw	r2,64(r16)
	ship->shot_end.y = start_y;
  805cb4:	e43ffb17 	ldw	r16,-20(fp)
  805cb8:	e13ffe17 	ldw	r4,-8(fp)
  805cbc:	080ac940 	call	80ac94 <__floatsisf>
  805cc0:	80801115 	stw	r2,68(r16)
	ship->sensor_start.x = start_x;
  805cc4:	e43ffb17 	ldw	r16,-20(fp)
  805cc8:	e13ffd17 	ldw	r4,-12(fp)
  805ccc:	080ac940 	call	80ac94 <__floatsisf>
  805cd0:	80801215 	stw	r2,72(r16)
	ship->sensor_start.y = start_y;
  805cd4:	e43ffb17 	ldw	r16,-20(fp)
  805cd8:	e13ffe17 	ldw	r4,-8(fp)
  805cdc:	080ac940 	call	80ac94 <__floatsisf>
  805ce0:	80801315 	stw	r2,76(r16)
	ship->sensor_end.x = start_x;
  805ce4:	e43ffb17 	ldw	r16,-20(fp)
  805ce8:	e13ffd17 	ldw	r4,-12(fp)
  805cec:	080ac940 	call	80ac94 <__floatsisf>
  805cf0:	80801415 	stw	r2,80(r16)
	ship->sensor_end.y = start_y;
  805cf4:	e43ffb17 	ldw	r16,-20(fp)
  805cf8:	e13ffe17 	ldw	r4,-8(fp)
  805cfc:	080ac940 	call	80ac94 <__floatsisf>
  805d00:	80801515 	stw	r2,84(r16)

	/* make a copy */
	copy_matrix(ship->matrix_start, ship->row, ship->column, ship->temp_matrix);
  805d04:	e0bffb17 	ldw	r2,-20(fp)
  805d08:	e0fffb17 	ldw	r3,-20(fp)
  805d0c:	e1bffb17 	ldw	r6,-20(fp)
  805d10:	e1fffb17 	ldw	r7,-20(fp)
  805d14:	11000317 	ldw	r4,12(r2)
  805d18:	19400117 	ldw	r5,4(r3)
  805d1c:	31800217 	ldw	r6,8(r6)
  805d20:	39c00517 	ldw	r7,20(r7)
  805d24:	08022d40 	call	8022d4 <copy_matrix>
	/* the location, now and then */
	/* rotate the ship to the start angle */
	rotate_a_matrix(ship->temp_matrix, ship->row, ship->column, start_angle);
  805d28:	e0bffb17 	ldw	r2,-20(fp)
  805d2c:	e0fffb17 	ldw	r3,-20(fp)
  805d30:	e1bffb17 	ldw	r6,-20(fp)
  805d34:	11000517 	ldw	r4,20(r2)
  805d38:	19400117 	ldw	r5,4(r3)
  805d3c:	31800217 	ldw	r6,8(r6)
  805d40:	e1fffc17 	ldw	r7,-16(fp)
  805d44:	08020380 	call	802038 <rotate_a_matrix>

	/* copy this into the moved version */
	copy_matrix(ship->temp_matrix, ship->row, ship->column, ship->matrix_location);
  805d48:	e0bffb17 	ldw	r2,-20(fp)
  805d4c:	e0fffb17 	ldw	r3,-20(fp)
  805d50:	e1bffb17 	ldw	r6,-20(fp)
  805d54:	e1fffb17 	ldw	r7,-20(fp)
  805d58:	11000517 	ldw	r4,20(r2)
  805d5c:	19400117 	ldw	r5,4(r3)
  805d60:	31800217 	ldw	r6,8(r6)
  805d64:	39c00417 	ldw	r7,16(r7)
  805d68:	08022d40 	call	8022d4 <copy_matrix>
	/* do translation on the location */
	translate_a_matrix(ship->matrix_location, ship->row, ship->column, start_x, start_y);
  805d6c:	e0fffb17 	ldw	r3,-20(fp)
  805d70:	e17ffb17 	ldw	r5,-20(fp)
  805d74:	e1bffb17 	ldw	r6,-20(fp)
  805d78:	e0bffe17 	ldw	r2,-8(fp)
  805d7c:	d8800015 	stw	r2,0(sp)
  805d80:	19000417 	ldw	r4,16(r3)
  805d84:	29400117 	ldw	r5,4(r5)
  805d88:	31800217 	ldw	r6,8(r6)
  805d8c:	e1fffd17 	ldw	r7,-12(fp)
  805d90:	0801f800 	call	801f80 <translate_a_matrix>

	/* initialize the power crystal amplification */
	initialize_power_crystals(ship);
  805d94:	e13ffb17 	ldw	r4,-20(fp)
  805d98:	0805ef80 	call	805ef8 <initialize_power_crystals>

	/* redo the shot */
	ship->shot_fired_x_seconds_ago = 0;
  805d9c:	e0bffb17 	ldw	r2,-20(fp)
  805da0:	10001a8d 	sth	zero,106(r2)
}
  805da4:	dfc00717 	ldw	ra,28(sp)
  805da8:	df000617 	ldw	fp,24(sp)
  805dac:	dc000517 	ldw	r16,20(sp)
  805db0:	dec00804 	addi	sp,sp,32
  805db4:	f800283a 	ret

00805db8 <degrade_crystals_based_on_shot>:

#define A 0
#define B 1
#define C 2
#define D 3
#define E 4
#define F 5
#define G 6
#define H 7

/*---------------------------------------------------------------------------------------------
 * (function: degrade_crystals_based_on_shot)
 *	can make some of the links negative
 *-------------------------------------------------------------------------------------------*/
void degrade_crystals_based_on_shot(ship_t *ship, int amount)
{
  805db8:	defff404 	addi	sp,sp,-48
  805dbc:	dfc00b15 	stw	ra,44(sp)
  805dc0:	df000a15 	stw	fp,40(sp)
  805dc4:	df000a04 	addi	fp,sp,40
  805dc8:	e13ff615 	stw	r4,-40(fp)
  805dcc:	e17ff715 	stw	r5,-36(fp)
	int i;
	int idx1;
	int idx2;
	int val;

	for (i = 0; i < amount; i++)
  805dd0:	e03ff815 	stw	zero,-32(fp)
  805dd4:	e0fff817 	ldw	r3,-32(fp)
  805dd8:	e0bff717 	ldw	r2,-36(fp)
  805ddc:	1880420e 	bge	r3,r2,805ee8 <degrade_crystals_based_on_shot+0x130>
	{
		idx1 = rand() % 8;
  805de0:	080d82c0 	call	80d82c <rand>
  805de4:	e0bffc15 	stw	r2,-16(fp)
  805de8:	e0bffc17 	ldw	r2,-16(fp)
  805dec:	e0bffd15 	stw	r2,-12(fp)
  805df0:	e0fffd17 	ldw	r3,-12(fp)
  805df4:	1804403a 	cmpge	r2,r3,zero
  805df8:	1000031e 	bne	r2,zero,805e08 <degrade_crystals_based_on_shot+0x50>
  805dfc:	e0bffd17 	ldw	r2,-12(fp)
  805e00:	108001c4 	addi	r2,r2,7
  805e04:	e0bffd15 	stw	r2,-12(fp)
  805e08:	e0fffd17 	ldw	r3,-12(fp)
  805e0c:	1805d0fa 	srai	r2,r3,3
  805e10:	10800224 	muli	r2,r2,8
  805e14:	e0fffc17 	ldw	r3,-16(fp)
  805e18:	1885c83a 	sub	r2,r3,r2
  805e1c:	e0bff915 	stw	r2,-28(fp)
		idx2 = rand() % 8;
  805e20:	080d82c0 	call	80d82c <rand>
  805e24:	e0bffe15 	stw	r2,-8(fp)
  805e28:	e0bffe17 	ldw	r2,-8(fp)
  805e2c:	e0bfff15 	stw	r2,-4(fp)
  805e30:	e0ffff17 	ldw	r3,-4(fp)
  805e34:	1804403a 	cmpge	r2,r3,zero
  805e38:	1000031e 	bne	r2,zero,805e48 <degrade_crystals_based_on_shot+0x90>
  805e3c:	e0bfff17 	ldw	r2,-4(fp)
  805e40:	108001c4 	addi	r2,r2,7
  805e44:	e0bfff15 	stw	r2,-4(fp)
  805e48:	e0ffff17 	ldw	r3,-4(fp)
  805e4c:	1805d0fa 	srai	r2,r3,3
  805e50:	10800224 	muli	r2,r2,8
  805e54:	e0fffe17 	ldw	r3,-8(fp)
  805e58:	1885c83a 	sub	r2,r3,r2
  805e5c:	e0bffa15 	stw	r2,-24(fp)
		if (idx1 == idx2)
  805e60:	e0fff917 	ldw	r3,-28(fp)
  805e64:	e0bffa17 	ldw	r2,-24(fp)
  805e68:	1880031e 	bne	r3,r2,805e78 <degrade_crystals_based_on_shot+0xc0>
		{
			idx2 = idx2 + 1 % 8;
  805e6c:	e0bffa17 	ldw	r2,-24(fp)
  805e70:	10800044 	addi	r2,r2,1
  805e74:	e0bffa15 	stw	r2,-24(fp)
		}

		val = lookup_power_link(ship, idx1, idx2) - 1;
  805e78:	e0bff917 	ldw	r2,-28(fp)
  805e7c:	117fffcc 	andi	r5,r2,65535
  805e80:	2960001c 	xori	r5,r5,32768
  805e84:	29600004 	addi	r5,r5,-32768
  805e88:	e0bffa17 	ldw	r2,-24(fp)
  805e8c:	11bfffcc 	andi	r6,r2,65535
  805e90:	31a0001c 	xori	r6,r6,32768
  805e94:	31a00004 	addi	r6,r6,-32768
  805e98:	e13ff617 	ldw	r4,-40(fp)
  805e9c:	0806e9c0 	call	806e9c <lookup_power_link>
  805ea0:	10803fcc 	andi	r2,r2,255
  805ea4:	10bfffc4 	addi	r2,r2,-1
  805ea8:	e0bffb15 	stw	r2,-20(fp)
		set_power_link(ship, idx1, idx2, val);
  805eac:	e0bff917 	ldw	r2,-28(fp)
  805eb0:	117fffcc 	andi	r5,r2,65535
  805eb4:	2960001c 	xori	r5,r5,32768
  805eb8:	29600004 	addi	r5,r5,-32768
  805ebc:	e0bffa17 	ldw	r2,-24(fp)
  805ec0:	11bfffcc 	andi	r6,r2,65535
  805ec4:	31a0001c 	xori	r6,r6,32768
  805ec8:	31a00004 	addi	r6,r6,-32768
  805ecc:	e13ff617 	ldw	r4,-40(fp)
  805ed0:	e1fffb17 	ldw	r7,-20(fp)
  805ed4:	080745c0 	call	80745c <set_power_link>
  805ed8:	e0bff817 	ldw	r2,-32(fp)
  805edc:	10800044 	addi	r2,r2,1
  805ee0:	e0bff815 	stw	r2,-32(fp)
  805ee4:	003fbb06 	br	805dd4 <degrade_crystals_based_on_shot+0x1c>
	}
}
  805ee8:	dfc00b17 	ldw	ra,44(sp)
  805eec:	df000a17 	ldw	fp,40(sp)
  805ef0:	dec00c04 	addi	sp,sp,48
  805ef4:	f800283a 	ret

00805ef8 <initialize_power_crystals>:

/*---------------------------------------------------------------------------------------------
 * (function: initialize_power_crystals)
 *-------------------------------------------------------------------------------------------*/
void initialize_power_crystals(ship_t *ship)
{
  805ef8:	deffa904 	addi	sp,sp,-348
  805efc:	dfc05615 	stw	ra,344(sp)
  805f00:	df005515 	stw	fp,340(sp)
  805f04:	df005504 	addi	fp,sp,340
  805f08:	e13fab15 	stw	r4,-340(fp)
	if (game_mode == BASIC)
  805f0c:	d0a02503 	ldbu	r2,-32620(gp)
  805f10:	1004c03a 	cmpne	r2,r2,zero
  805f14:	1002311e 	bne	r2,zero,8067dc <initialize_power_crystals+0x8e4>
	{
		ship->A_B_val = rand() % 8 + 3;
  805f18:	e0bfab17 	ldw	r2,-340(fp)
  805f1c:	e0bfac15 	stw	r2,-336(fp)
  805f20:	080d82c0 	call	80d82c <rand>
  805f24:	e0bfad15 	stw	r2,-332(fp)
  805f28:	e0ffad17 	ldw	r3,-332(fp)
  805f2c:	e0ffae15 	stw	r3,-328(fp)
  805f30:	e0ffae17 	ldw	r3,-328(fp)
  805f34:	1804403a 	cmpge	r2,r3,zero
  805f38:	1000031e 	bne	r2,zero,805f48 <initialize_power_crystals+0x50>
  805f3c:	e0bfae17 	ldw	r2,-328(fp)
  805f40:	108001c4 	addi	r2,r2,7
  805f44:	e0bfae15 	stw	r2,-328(fp)
  805f48:	e0ffae17 	ldw	r3,-328(fp)
  805f4c:	1805d0fa 	srai	r2,r3,3
  805f50:	10800224 	muli	r2,r2,8
  805f54:	e0ffad17 	ldw	r3,-332(fp)
  805f58:	1885c83a 	sub	r2,r3,r2
  805f5c:	108000c4 	addi	r2,r2,3
  805f60:	e0ffac17 	ldw	r3,-336(fp)
  805f64:	18802005 	stb	r2,128(r3)
		ship->A_C_val = rand() % 8 + 3;
  805f68:	e0bfab17 	ldw	r2,-340(fp)
  805f6c:	e0bfaf15 	stw	r2,-324(fp)
  805f70:	080d82c0 	call	80d82c <rand>
  805f74:	e0bfb015 	stw	r2,-320(fp)
  805f78:	e0ffb017 	ldw	r3,-320(fp)
  805f7c:	e0ffb115 	stw	r3,-316(fp)
  805f80:	e0ffb117 	ldw	r3,-316(fp)
  805f84:	1804403a 	cmpge	r2,r3,zero
  805f88:	1000031e 	bne	r2,zero,805f98 <initialize_power_crystals+0xa0>
  805f8c:	e0bfb117 	ldw	r2,-316(fp)
  805f90:	108001c4 	addi	r2,r2,7
  805f94:	e0bfb115 	stw	r2,-316(fp)
  805f98:	e0ffb117 	ldw	r3,-316(fp)
  805f9c:	1805d0fa 	srai	r2,r3,3
  805fa0:	10800224 	muli	r2,r2,8
  805fa4:	e0ffb017 	ldw	r3,-320(fp)
  805fa8:	1885c83a 	sub	r2,r3,r2
  805fac:	108000c4 	addi	r2,r2,3
  805fb0:	e0ffaf17 	ldw	r3,-324(fp)
  805fb4:	18802045 	stb	r2,129(r3)
		ship->A_D_val = rand() % 8 + 3;
  805fb8:	e0bfab17 	ldw	r2,-340(fp)
  805fbc:	e0bfb215 	stw	r2,-312(fp)
  805fc0:	080d82c0 	call	80d82c <rand>
  805fc4:	e0bfb315 	stw	r2,-308(fp)
  805fc8:	e0ffb317 	ldw	r3,-308(fp)
  805fcc:	e0ffb415 	stw	r3,-304(fp)
  805fd0:	e0ffb417 	ldw	r3,-304(fp)
  805fd4:	1804403a 	cmpge	r2,r3,zero
  805fd8:	1000031e 	bne	r2,zero,805fe8 <initialize_power_crystals+0xf0>
  805fdc:	e0bfb417 	ldw	r2,-304(fp)
  805fe0:	108001c4 	addi	r2,r2,7
  805fe4:	e0bfb415 	stw	r2,-304(fp)
  805fe8:	e0ffb417 	ldw	r3,-304(fp)
  805fec:	1805d0fa 	srai	r2,r3,3
  805ff0:	10800224 	muli	r2,r2,8
  805ff4:	e0ffb317 	ldw	r3,-308(fp)
  805ff8:	1885c83a 	sub	r2,r3,r2
  805ffc:	108000c4 	addi	r2,r2,3
  806000:	e0ffb217 	ldw	r3,-312(fp)
  806004:	18802085 	stb	r2,130(r3)
		ship->A_E_val = rand() % 8 + 3;
  806008:	e0bfab17 	ldw	r2,-340(fp)
  80600c:	e0bfb515 	stw	r2,-300(fp)
  806010:	080d82c0 	call	80d82c <rand>
  806014:	e0bfb615 	stw	r2,-296(fp)
  806018:	e0ffb617 	ldw	r3,-296(fp)
  80601c:	e0ffb715 	stw	r3,-292(fp)
  806020:	e0ffb717 	ldw	r3,-292(fp)
  806024:	1804403a 	cmpge	r2,r3,zero
  806028:	1000031e 	bne	r2,zero,806038 <initialize_power_crystals+0x140>
  80602c:	e0bfb717 	ldw	r2,-292(fp)
  806030:	108001c4 	addi	r2,r2,7
  806034:	e0bfb715 	stw	r2,-292(fp)
  806038:	e0ffb717 	ldw	r3,-292(fp)
  80603c:	1805d0fa 	srai	r2,r3,3
  806040:	10800224 	muli	r2,r2,8
  806044:	e0ffb617 	ldw	r3,-296(fp)
  806048:	1885c83a 	sub	r2,r3,r2
  80604c:	108000c4 	addi	r2,r2,3
  806050:	e0ffb517 	ldw	r3,-300(fp)
  806054:	188020c5 	stb	r2,131(r3)
		ship->A_F_val = rand() % 8 + 3;
  806058:	e0bfab17 	ldw	r2,-340(fp)
  80605c:	e0bfb815 	stw	r2,-288(fp)
  806060:	080d82c0 	call	80d82c <rand>
  806064:	e0bfb915 	stw	r2,-284(fp)
  806068:	e0ffb917 	ldw	r3,-284(fp)
  80606c:	e0ffba15 	stw	r3,-280(fp)
  806070:	e0ffba17 	ldw	r3,-280(fp)
  806074:	1804403a 	cmpge	r2,r3,zero
  806078:	1000031e 	bne	r2,zero,806088 <initialize_power_crystals+0x190>
  80607c:	e0bfba17 	ldw	r2,-280(fp)
  806080:	108001c4 	addi	r2,r2,7
  806084:	e0bfba15 	stw	r2,-280(fp)
  806088:	e0ffba17 	ldw	r3,-280(fp)
  80608c:	1805d0fa 	srai	r2,r3,3
  806090:	10800224 	muli	r2,r2,8
  806094:	e0ffb917 	ldw	r3,-284(fp)
  806098:	1885c83a 	sub	r2,r3,r2
  80609c:	108000c4 	addi	r2,r2,3
  8060a0:	e0ffb817 	ldw	r3,-288(fp)
  8060a4:	18802105 	stb	r2,132(r3)
		ship->A_G_val = rand() % 8 + 3;
  8060a8:	e0bfab17 	ldw	r2,-340(fp)
  8060ac:	e0bfbb15 	stw	r2,-276(fp)
  8060b0:	080d82c0 	call	80d82c <rand>
  8060b4:	e0bfbc15 	stw	r2,-272(fp)
  8060b8:	e0ffbc17 	ldw	r3,-272(fp)
  8060bc:	e0ffbd15 	stw	r3,-268(fp)
  8060c0:	e0ffbd17 	ldw	r3,-268(fp)
  8060c4:	1804403a 	cmpge	r2,r3,zero
  8060c8:	1000031e 	bne	r2,zero,8060d8 <initialize_power_crystals+0x1e0>
  8060cc:	e0bfbd17 	ldw	r2,-268(fp)
  8060d0:	108001c4 	addi	r2,r2,7
  8060d4:	e0bfbd15 	stw	r2,-268(fp)
  8060d8:	e0ffbd17 	ldw	r3,-268(fp)
  8060dc:	1805d0fa 	srai	r2,r3,3
  8060e0:	10800224 	muli	r2,r2,8
  8060e4:	e0ffbc17 	ldw	r3,-272(fp)
  8060e8:	1885c83a 	sub	r2,r3,r2
  8060ec:	108000c4 	addi	r2,r2,3
  8060f0:	e0ffbb17 	ldw	r3,-276(fp)
  8060f4:	18802145 	stb	r2,133(r3)
		ship->A_H_val = rand() % 8 + 3;
  8060f8:	e0bfab17 	ldw	r2,-340(fp)
  8060fc:	e0bfbe15 	stw	r2,-264(fp)
  806100:	080d82c0 	call	80d82c <rand>
  806104:	e0bfbf15 	stw	r2,-260(fp)
  806108:	e0ffbf17 	ldw	r3,-260(fp)
  80610c:	e0ffc015 	stw	r3,-256(fp)
  806110:	e0ffc017 	ldw	r3,-256(fp)
  806114:	1804403a 	cmpge	r2,r3,zero
  806118:	1000031e 	bne	r2,zero,806128 <initialize_power_crystals+0x230>
  80611c:	e0bfc017 	ldw	r2,-256(fp)
  806120:	108001c4 	addi	r2,r2,7
  806124:	e0bfc015 	stw	r2,-256(fp)
  806128:	e0ffc017 	ldw	r3,-256(fp)
  80612c:	1805d0fa 	srai	r2,r3,3
  806130:	10800224 	muli	r2,r2,8
  806134:	e0ffbf17 	ldw	r3,-260(fp)
  806138:	1885c83a 	sub	r2,r3,r2
  80613c:	108000c4 	addi	r2,r2,3
  806140:	e0ffbe17 	ldw	r3,-264(fp)
  806144:	18802185 	stb	r2,134(r3)
		ship->B_C_val = rand() % 8 + 3;
  806148:	e0bfab17 	ldw	r2,-340(fp)
  80614c:	e0bfc115 	stw	r2,-252(fp)
  806150:	080d82c0 	call	80d82c <rand>
  806154:	e0bfc215 	stw	r2,-248(fp)
  806158:	e0ffc217 	ldw	r3,-248(fp)
  80615c:	e0ffc315 	stw	r3,-244(fp)
  806160:	e0ffc317 	ldw	r3,-244(fp)
  806164:	1804403a 	cmpge	r2,r3,zero
  806168:	1000031e 	bne	r2,zero,806178 <initialize_power_crystals+0x280>
  80616c:	e0bfc317 	ldw	r2,-244(fp)
  806170:	108001c4 	addi	r2,r2,7
  806174:	e0bfc315 	stw	r2,-244(fp)
  806178:	e0ffc317 	ldw	r3,-244(fp)
  80617c:	1805d0fa 	srai	r2,r3,3
  806180:	10800224 	muli	r2,r2,8
  806184:	e0ffc217 	ldw	r3,-248(fp)
  806188:	1885c83a 	sub	r2,r3,r2
  80618c:	108000c4 	addi	r2,r2,3
  806190:	e0ffc117 	ldw	r3,-252(fp)
  806194:	188021c5 	stb	r2,135(r3)
		ship->B_D_val = rand() % 8 + 3;
  806198:	e0bfab17 	ldw	r2,-340(fp)
  80619c:	e0bfc415 	stw	r2,-240(fp)
  8061a0:	080d82c0 	call	80d82c <rand>
  8061a4:	e0bfc515 	stw	r2,-236(fp)
  8061a8:	e0ffc517 	ldw	r3,-236(fp)
  8061ac:	e0ffc615 	stw	r3,-232(fp)
  8061b0:	e0ffc617 	ldw	r3,-232(fp)
  8061b4:	1804403a 	cmpge	r2,r3,zero
  8061b8:	1000031e 	bne	r2,zero,8061c8 <initialize_power_crystals+0x2d0>
  8061bc:	e0bfc617 	ldw	r2,-232(fp)
  8061c0:	108001c4 	addi	r2,r2,7
  8061c4:	e0bfc615 	stw	r2,-232(fp)
  8061c8:	e0ffc617 	ldw	r3,-232(fp)
  8061cc:	1805d0fa 	srai	r2,r3,3
  8061d0:	10800224 	muli	r2,r2,8
  8061d4:	e0ffc517 	ldw	r3,-236(fp)
  8061d8:	1885c83a 	sub	r2,r3,r2
  8061dc:	108000c4 	addi	r2,r2,3
  8061e0:	e0ffc417 	ldw	r3,-240(fp)
  8061e4:	18802205 	stb	r2,136(r3)
		ship->B_E_val = rand() % 8 + 3;
  8061e8:	e0bfab17 	ldw	r2,-340(fp)
  8061ec:	e0bfc715 	stw	r2,-228(fp)
  8061f0:	080d82c0 	call	80d82c <rand>
  8061f4:	e0bfc815 	stw	r2,-224(fp)
  8061f8:	e0ffc817 	ldw	r3,-224(fp)
  8061fc:	e0ffc915 	stw	r3,-220(fp)
  806200:	e0ffc917 	ldw	r3,-220(fp)
  806204:	1804403a 	cmpge	r2,r3,zero
  806208:	1000031e 	bne	r2,zero,806218 <initialize_power_crystals+0x320>
  80620c:	e0bfc917 	ldw	r2,-220(fp)
  806210:	108001c4 	addi	r2,r2,7
  806214:	e0bfc915 	stw	r2,-220(fp)
  806218:	e0ffc917 	ldw	r3,-220(fp)
  80621c:	1805d0fa 	srai	r2,r3,3
  806220:	10800224 	muli	r2,r2,8
  806224:	e0ffc817 	ldw	r3,-224(fp)
  806228:	1885c83a 	sub	r2,r3,r2
  80622c:	108000c4 	addi	r2,r2,3
  806230:	e0ffc717 	ldw	r3,-228(fp)
  806234:	18802245 	stb	r2,137(r3)
		ship->B_F_val = rand() % 8 + 3;
  806238:	e0bfab17 	ldw	r2,-340(fp)
  80623c:	e0bfca15 	stw	r2,-216(fp)
  806240:	080d82c0 	call	80d82c <rand>
  806244:	e0bfcb15 	stw	r2,-212(fp)
  806248:	e0ffcb17 	ldw	r3,-212(fp)
  80624c:	e0ffcc15 	stw	r3,-208(fp)
  806250:	e0ffcc17 	ldw	r3,-208(fp)
  806254:	1804403a 	cmpge	r2,r3,zero
  806258:	1000031e 	bne	r2,zero,806268 <initialize_power_crystals+0x370>
  80625c:	e0bfcc17 	ldw	r2,-208(fp)
  806260:	108001c4 	addi	r2,r2,7
  806264:	e0bfcc15 	stw	r2,-208(fp)
  806268:	e0ffcc17 	ldw	r3,-208(fp)
  80626c:	1805d0fa 	srai	r2,r3,3
  806270:	10800224 	muli	r2,r2,8
  806274:	e0ffcb17 	ldw	r3,-212(fp)
  806278:	1885c83a 	sub	r2,r3,r2
  80627c:	108000c4 	addi	r2,r2,3
  806280:	e0ffca17 	ldw	r3,-216(fp)
  806284:	18802285 	stb	r2,138(r3)
		ship->B_G_val = rand() % 8 + 3;
  806288:	e0bfab17 	ldw	r2,-340(fp)
  80628c:	e0bfcd15 	stw	r2,-204(fp)
  806290:	080d82c0 	call	80d82c <rand>
  806294:	e0bfce15 	stw	r2,-200(fp)
  806298:	e0ffce17 	ldw	r3,-200(fp)
  80629c:	e0ffcf15 	stw	r3,-196(fp)
  8062a0:	e0ffcf17 	ldw	r3,-196(fp)
  8062a4:	1804403a 	cmpge	r2,r3,zero
  8062a8:	1000031e 	bne	r2,zero,8062b8 <initialize_power_crystals+0x3c0>
  8062ac:	e0bfcf17 	ldw	r2,-196(fp)
  8062b0:	108001c4 	addi	r2,r2,7
  8062b4:	e0bfcf15 	stw	r2,-196(fp)
  8062b8:	e0ffcf17 	ldw	r3,-196(fp)
  8062bc:	1805d0fa 	srai	r2,r3,3
  8062c0:	10800224 	muli	r2,r2,8
  8062c4:	e0ffce17 	ldw	r3,-200(fp)
  8062c8:	1885c83a 	sub	r2,r3,r2
  8062cc:	108000c4 	addi	r2,r2,3
  8062d0:	e0ffcd17 	ldw	r3,-204(fp)
  8062d4:	188022c5 	stb	r2,139(r3)
		ship->B_H_val = rand() % 8 + 3;
  8062d8:	e0bfab17 	ldw	r2,-340(fp)
  8062dc:	e0bfd015 	stw	r2,-192(fp)
  8062e0:	080d82c0 	call	80d82c <rand>
  8062e4:	e0bfd115 	stw	r2,-188(fp)
  8062e8:	e0ffd117 	ldw	r3,-188(fp)
  8062ec:	e0ffd215 	stw	r3,-184(fp)
  8062f0:	e0ffd217 	ldw	r3,-184(fp)
  8062f4:	1804403a 	cmpge	r2,r3,zero
  8062f8:	1000031e 	bne	r2,zero,806308 <initialize_power_crystals+0x410>
  8062fc:	e0bfd217 	ldw	r2,-184(fp)
  806300:	108001c4 	addi	r2,r2,7
  806304:	e0bfd215 	stw	r2,-184(fp)
  806308:	e0ffd217 	ldw	r3,-184(fp)
  80630c:	1805d0fa 	srai	r2,r3,3
  806310:	10800224 	muli	r2,r2,8
  806314:	e0ffd117 	ldw	r3,-188(fp)
  806318:	1885c83a 	sub	r2,r3,r2
  80631c:	108000c4 	addi	r2,r2,3
  806320:	e0ffd017 	ldw	r3,-192(fp)
  806324:	18802305 	stb	r2,140(r3)
		ship->C_D_val = rand() % 8 + 3;
  806328:	e0bfab17 	ldw	r2,-340(fp)
  80632c:	e0bfd315 	stw	r2,-180(fp)
  806330:	080d82c0 	call	80d82c <rand>
  806334:	e0bfd415 	stw	r2,-176(fp)
  806338:	e0ffd417 	ldw	r3,-176(fp)
  80633c:	e0ffd515 	stw	r3,-172(fp)
  806340:	e0ffd517 	ldw	r3,-172(fp)
  806344:	1804403a 	cmpge	r2,r3,zero
  806348:	1000031e 	bne	r2,zero,806358 <initialize_power_crystals+0x460>
  80634c:	e0bfd517 	ldw	r2,-172(fp)
  806350:	108001c4 	addi	r2,r2,7
  806354:	e0bfd515 	stw	r2,-172(fp)
  806358:	e0ffd517 	ldw	r3,-172(fp)
  80635c:	1805d0fa 	srai	r2,r3,3
  806360:	10800224 	muli	r2,r2,8
  806364:	e0ffd417 	ldw	r3,-176(fp)
  806368:	1885c83a 	sub	r2,r3,r2
  80636c:	108000c4 	addi	r2,r2,3
  806370:	e0ffd317 	ldw	r3,-180(fp)
  806374:	18802345 	stb	r2,141(r3)
		ship->C_E_val = rand() % 8 + 3;
  806378:	e0bfab17 	ldw	r2,-340(fp)
  80637c:	e0bfd615 	stw	r2,-168(fp)
  806380:	080d82c0 	call	80d82c <rand>
  806384:	e0bfd715 	stw	r2,-164(fp)
  806388:	e0ffd717 	ldw	r3,-164(fp)
  80638c:	e0ffd815 	stw	r3,-160(fp)
  806390:	e0ffd817 	ldw	r3,-160(fp)
  806394:	1804403a 	cmpge	r2,r3,zero
  806398:	1000031e 	bne	r2,zero,8063a8 <initialize_power_crystals+0x4b0>
  80639c:	e0bfd817 	ldw	r2,-160(fp)
  8063a0:	108001c4 	addi	r2,r2,7
  8063a4:	e0bfd815 	stw	r2,-160(fp)
  8063a8:	e0ffd817 	ldw	r3,-160(fp)
  8063ac:	1805d0fa 	srai	r2,r3,3
  8063b0:	10800224 	muli	r2,r2,8
  8063b4:	e0ffd717 	ldw	r3,-164(fp)
  8063b8:	1885c83a 	sub	r2,r3,r2
  8063bc:	108000c4 	addi	r2,r2,3
  8063c0:	e0ffd617 	ldw	r3,-168(fp)
  8063c4:	18802385 	stb	r2,142(r3)
		ship->C_F_val = rand() % 8 + 3;
  8063c8:	e0bfab17 	ldw	r2,-340(fp)
  8063cc:	e0bfd915 	stw	r2,-156(fp)
  8063d0:	080d82c0 	call	80d82c <rand>
  8063d4:	e0bfda15 	stw	r2,-152(fp)
  8063d8:	e0ffda17 	ldw	r3,-152(fp)
  8063dc:	e0ffdb15 	stw	r3,-148(fp)
  8063e0:	e0ffdb17 	ldw	r3,-148(fp)
  8063e4:	1804403a 	cmpge	r2,r3,zero
  8063e8:	1000031e 	bne	r2,zero,8063f8 <initialize_power_crystals+0x500>
  8063ec:	e0bfdb17 	ldw	r2,-148(fp)
  8063f0:	108001c4 	addi	r2,r2,7
  8063f4:	e0bfdb15 	stw	r2,-148(fp)
  8063f8:	e0ffdb17 	ldw	r3,-148(fp)
  8063fc:	1805d0fa 	srai	r2,r3,3
  806400:	10800224 	muli	r2,r2,8
  806404:	e0ffda17 	ldw	r3,-152(fp)
  806408:	1885c83a 	sub	r2,r3,r2
  80640c:	108000c4 	addi	r2,r2,3
  806410:	e0ffd917 	ldw	r3,-156(fp)
  806414:	188023c5 	stb	r2,143(r3)
		ship->C_G_val = rand() % 8 + 3;
  806418:	e0bfab17 	ldw	r2,-340(fp)
  80641c:	e0bfdc15 	stw	r2,-144(fp)
  806420:	080d82c0 	call	80d82c <rand>
  806424:	e0bfdd15 	stw	r2,-140(fp)
  806428:	e0ffdd17 	ldw	r3,-140(fp)
  80642c:	e0ffde15 	stw	r3,-136(fp)
  806430:	e0ffde17 	ldw	r3,-136(fp)
  806434:	1804403a 	cmpge	r2,r3,zero
  806438:	1000031e 	bne	r2,zero,806448 <initialize_power_crystals+0x550>
  80643c:	e0bfde17 	ldw	r2,-136(fp)
  806440:	108001c4 	addi	r2,r2,7
  806444:	e0bfde15 	stw	r2,-136(fp)
  806448:	e0ffde17 	ldw	r3,-136(fp)
  80644c:	1805d0fa 	srai	r2,r3,3
  806450:	10800224 	muli	r2,r2,8
  806454:	e0ffdd17 	ldw	r3,-140(fp)
  806458:	1885c83a 	sub	r2,r3,r2
  80645c:	108000c4 	addi	r2,r2,3
  806460:	e0ffdc17 	ldw	r3,-144(fp)
  806464:	18802405 	stb	r2,144(r3)
		ship->C_H_val = rand() % 8 + 3;
  806468:	e0bfab17 	ldw	r2,-340(fp)
  80646c:	e0bfdf15 	stw	r2,-132(fp)
  806470:	080d82c0 	call	80d82c <rand>
  806474:	e0bfe015 	stw	r2,-128(fp)
  806478:	e0ffe017 	ldw	r3,-128(fp)
  80647c:	e0ffe115 	stw	r3,-124(fp)
  806480:	e0ffe117 	ldw	r3,-124(fp)
  806484:	1804403a 	cmpge	r2,r3,zero
  806488:	1000031e 	bne	r2,zero,806498 <initialize_power_crystals+0x5a0>
  80648c:	e0bfe117 	ldw	r2,-124(fp)
  806490:	108001c4 	addi	r2,r2,7
  806494:	e0bfe115 	stw	r2,-124(fp)
  806498:	e0ffe117 	ldw	r3,-124(fp)
  80649c:	1805d0fa 	srai	r2,r3,3
  8064a0:	10800224 	muli	r2,r2,8
  8064a4:	e0ffe017 	ldw	r3,-128(fp)
  8064a8:	1885c83a 	sub	r2,r3,r2
  8064ac:	108000c4 	addi	r2,r2,3
  8064b0:	e0ffdf17 	ldw	r3,-132(fp)
  8064b4:	18802445 	stb	r2,145(r3)
		ship->D_E_val = rand() % 8 + 3;
  8064b8:	e0bfab17 	ldw	r2,-340(fp)
  8064bc:	e0bfe215 	stw	r2,-120(fp)
  8064c0:	080d82c0 	call	80d82c <rand>
  8064c4:	e0bfe315 	stw	r2,-116(fp)
  8064c8:	e0ffe317 	ldw	r3,-116(fp)
  8064cc:	e0ffe415 	stw	r3,-112(fp)
  8064d0:	e0ffe417 	ldw	r3,-112(fp)
  8064d4:	1804403a 	cmpge	r2,r3,zero
  8064d8:	1000031e 	bne	r2,zero,8064e8 <initialize_power_crystals+0x5f0>
  8064dc:	e0bfe417 	ldw	r2,-112(fp)
  8064e0:	108001c4 	addi	r2,r2,7
  8064e4:	e0bfe415 	stw	r2,-112(fp)
  8064e8:	e0ffe417 	ldw	r3,-112(fp)
  8064ec:	1805d0fa 	srai	r2,r3,3
  8064f0:	10800224 	muli	r2,r2,8
  8064f4:	e0ffe317 	ldw	r3,-116(fp)
  8064f8:	1885c83a 	sub	r2,r3,r2
  8064fc:	108000c4 	addi	r2,r2,3
  806500:	e0ffe217 	ldw	r3,-120(fp)
  806504:	18802485 	stb	r2,146(r3)
		ship->D_F_val = rand() % 8 + 3;
  806508:	e0bfab17 	ldw	r2,-340(fp)
  80650c:	e0bfe515 	stw	r2,-108(fp)
  806510:	080d82c0 	call	80d82c <rand>
  806514:	e0bfe615 	stw	r2,-104(fp)
  806518:	e0ffe617 	ldw	r3,-104(fp)
  80651c:	e0ffe715 	stw	r3,-100(fp)
  806520:	e0ffe717 	ldw	r3,-100(fp)
  806524:	1804403a 	cmpge	r2,r3,zero
  806528:	1000031e 	bne	r2,zero,806538 <initialize_power_crystals+0x640>
  80652c:	e0bfe717 	ldw	r2,-100(fp)
  806530:	108001c4 	addi	r2,r2,7
  806534:	e0bfe715 	stw	r2,-100(fp)
  806538:	e0ffe717 	ldw	r3,-100(fp)
  80653c:	1805d0fa 	srai	r2,r3,3
  806540:	10800224 	muli	r2,r2,8
  806544:	e0ffe617 	ldw	r3,-104(fp)
  806548:	1885c83a 	sub	r2,r3,r2
  80654c:	108000c4 	addi	r2,r2,3
  806550:	e0ffe517 	ldw	r3,-108(fp)
  806554:	188024c5 	stb	r2,147(r3)
		ship->D_G_val = rand() % 8 + 3;
  806558:	e0bfab17 	ldw	r2,-340(fp)
  80655c:	e0bfe815 	stw	r2,-96(fp)
  806560:	080d82c0 	call	80d82c <rand>
  806564:	e0bfe915 	stw	r2,-92(fp)
  806568:	e0ffe917 	ldw	r3,-92(fp)
  80656c:	e0ffea15 	stw	r3,-88(fp)
  806570:	e0ffea17 	ldw	r3,-88(fp)
  806574:	1804403a 	cmpge	r2,r3,zero
  806578:	1000031e 	bne	r2,zero,806588 <initialize_power_crystals+0x690>
  80657c:	e0bfea17 	ldw	r2,-88(fp)
  806580:	108001c4 	addi	r2,r2,7
  806584:	e0bfea15 	stw	r2,-88(fp)
  806588:	e0ffea17 	ldw	r3,-88(fp)
  80658c:	1805d0fa 	srai	r2,r3,3
  806590:	10800224 	muli	r2,r2,8
  806594:	e0ffe917 	ldw	r3,-92(fp)
  806598:	1885c83a 	sub	r2,r3,r2
  80659c:	108000c4 	addi	r2,r2,3
  8065a0:	e0ffe817 	ldw	r3,-96(fp)
  8065a4:	18802505 	stb	r2,148(r3)
		ship->D_H_val = rand() % 8 + 3;
  8065a8:	e0bfab17 	ldw	r2,-340(fp)
  8065ac:	e0bfeb15 	stw	r2,-84(fp)
  8065b0:	080d82c0 	call	80d82c <rand>
  8065b4:	e0bfec15 	stw	r2,-80(fp)
  8065b8:	e0ffec17 	ldw	r3,-80(fp)
  8065bc:	e0ffed15 	stw	r3,-76(fp)
  8065c0:	e0ffed17 	ldw	r3,-76(fp)
  8065c4:	1804403a 	cmpge	r2,r3,zero
  8065c8:	1000031e 	bne	r2,zero,8065d8 <initialize_power_crystals+0x6e0>
  8065cc:	e0bfed17 	ldw	r2,-76(fp)
  8065d0:	108001c4 	addi	r2,r2,7
  8065d4:	e0bfed15 	stw	r2,-76(fp)
  8065d8:	e0ffed17 	ldw	r3,-76(fp)
  8065dc:	1805d0fa 	srai	r2,r3,3
  8065e0:	10800224 	muli	r2,r2,8
  8065e4:	e0ffec17 	ldw	r3,-80(fp)
  8065e8:	1885c83a 	sub	r2,r3,r2
  8065ec:	108000c4 	addi	r2,r2,3
  8065f0:	e0ffeb17 	ldw	r3,-84(fp)
  8065f4:	18802545 	stb	r2,149(r3)
		ship->E_F_val = rand() % 8 + 3;
  8065f8:	e0bfab17 	ldw	r2,-340(fp)
  8065fc:	e0bfee15 	stw	r2,-72(fp)
  806600:	080d82c0 	call	80d82c <rand>
  806604:	e0bfef15 	stw	r2,-68(fp)
  806608:	e0ffef17 	ldw	r3,-68(fp)
  80660c:	e0fff015 	stw	r3,-64(fp)
  806610:	e0fff017 	ldw	r3,-64(fp)
  806614:	1804403a 	cmpge	r2,r3,zero
  806618:	1000031e 	bne	r2,zero,806628 <initialize_power_crystals+0x730>
  80661c:	e0bff017 	ldw	r2,-64(fp)
  806620:	108001c4 	addi	r2,r2,7
  806624:	e0bff015 	stw	r2,-64(fp)
  806628:	e0fff017 	ldw	r3,-64(fp)
  80662c:	1805d0fa 	srai	r2,r3,3
  806630:	10800224 	muli	r2,r2,8
  806634:	e0ffef17 	ldw	r3,-68(fp)
  806638:	1885c83a 	sub	r2,r3,r2
  80663c:	108000c4 	addi	r2,r2,3
  806640:	e0ffee17 	ldw	r3,-72(fp)
  806644:	18802585 	stb	r2,150(r3)
		ship->E_G_val = rand() % 8 + 3;
  806648:	e0bfab17 	ldw	r2,-340(fp)
  80664c:	e0bff115 	stw	r2,-60(fp)
  806650:	080d82c0 	call	80d82c <rand>
  806654:	e0bff215 	stw	r2,-56(fp)
  806658:	e0fff217 	ldw	r3,-56(fp)
  80665c:	e0fff315 	stw	r3,-52(fp)
  806660:	e0fff317 	ldw	r3,-52(fp)
  806664:	1804403a 	cmpge	r2,r3,zero
  806668:	1000031e 	bne	r2,zero,806678 <initialize_power_crystals+0x780>
  80666c:	e0bff317 	ldw	r2,-52(fp)
  806670:	108001c4 	addi	r2,r2,7
  806674:	e0bff315 	stw	r2,-52(fp)
  806678:	e0fff317 	ldw	r3,-52(fp)
  80667c:	1805d0fa 	srai	r2,r3,3
  806680:	10800224 	muli	r2,r2,8
  806684:	e0fff217 	ldw	r3,-56(fp)
  806688:	1885c83a 	sub	r2,r3,r2
  80668c:	108000c4 	addi	r2,r2,3
  806690:	e0fff117 	ldw	r3,-60(fp)
  806694:	188025c5 	stb	r2,151(r3)
		ship->E_H_val = rand() % 8 + 3;
  806698:	e0bfab17 	ldw	r2,-340(fp)
  80669c:	e0bff415 	stw	r2,-48(fp)
  8066a0:	080d82c0 	call	80d82c <rand>
  8066a4:	e0bff515 	stw	r2,-44(fp)
  8066a8:	e0fff517 	ldw	r3,-44(fp)
  8066ac:	e0fff615 	stw	r3,-40(fp)
  8066b0:	e0fff617 	ldw	r3,-40(fp)
  8066b4:	1804403a 	cmpge	r2,r3,zero
  8066b8:	1000031e 	bne	r2,zero,8066c8 <initialize_power_crystals+0x7d0>
  8066bc:	e0bff617 	ldw	r2,-40(fp)
  8066c0:	108001c4 	addi	r2,r2,7
  8066c4:	e0bff615 	stw	r2,-40(fp)
  8066c8:	e0fff617 	ldw	r3,-40(fp)
  8066cc:	1805d0fa 	srai	r2,r3,3
  8066d0:	10800224 	muli	r2,r2,8
  8066d4:	e0fff517 	ldw	r3,-44(fp)
  8066d8:	1885c83a 	sub	r2,r3,r2
  8066dc:	108000c4 	addi	r2,r2,3
  8066e0:	e0fff417 	ldw	r3,-48(fp)
  8066e4:	18802605 	stb	r2,152(r3)
		ship->F_G_val = rand() % 8 + 3;
  8066e8:	e0bfab17 	ldw	r2,-340(fp)
  8066ec:	e0bff715 	stw	r2,-36(fp)
  8066f0:	080d82c0 	call	80d82c <rand>
  8066f4:	e0bff815 	stw	r2,-32(fp)
  8066f8:	e0fff817 	ldw	r3,-32(fp)
  8066fc:	e0fff915 	stw	r3,-28(fp)
  806700:	e0fff917 	ldw	r3,-28(fp)
  806704:	1804403a 	cmpge	r2,r3,zero
  806708:	1000031e 	bne	r2,zero,806718 <initialize_power_crystals+0x820>
  80670c:	e0bff917 	ldw	r2,-28(fp)
  806710:	108001c4 	addi	r2,r2,7
  806714:	e0bff915 	stw	r2,-28(fp)
  806718:	e0fff917 	ldw	r3,-28(fp)
  80671c:	1805d0fa 	srai	r2,r3,3
  806720:	10800224 	muli	r2,r2,8
  806724:	e0fff817 	ldw	r3,-32(fp)
  806728:	1885c83a 	sub	r2,r3,r2
  80672c:	108000c4 	addi	r2,r2,3
  806730:	e0fff717 	ldw	r3,-36(fp)
  806734:	18802645 	stb	r2,153(r3)
		ship->F_H_val = rand() % 8 + 3;
  806738:	e0bfab17 	ldw	r2,-340(fp)
  80673c:	e0bffa15 	stw	r2,-24(fp)
  806740:	080d82c0 	call	80d82c <rand>
  806744:	e0bffb15 	stw	r2,-20(fp)
  806748:	e0fffb17 	ldw	r3,-20(fp)
  80674c:	e0fffc15 	stw	r3,-16(fp)
  806750:	e0fffc17 	ldw	r3,-16(fp)
  806754:	1804403a 	cmpge	r2,r3,zero
  806758:	1000031e 	bne	r2,zero,806768 <initialize_power_crystals+0x870>
  80675c:	e0bffc17 	ldw	r2,-16(fp)
  806760:	108001c4 	addi	r2,r2,7
  806764:	e0bffc15 	stw	r2,-16(fp)
  806768:	e0fffc17 	ldw	r3,-16(fp)
  80676c:	1805d0fa 	srai	r2,r3,3
  806770:	10800224 	muli	r2,r2,8
  806774:	e0fffb17 	ldw	r3,-20(fp)
  806778:	1885c83a 	sub	r2,r3,r2
  80677c:	108000c4 	addi	r2,r2,3
  806780:	e0fffa17 	ldw	r3,-24(fp)
  806784:	18802685 	stb	r2,154(r3)
		ship->G_H_val = rand() % 8 + 3;
  806788:	e0bfab17 	ldw	r2,-340(fp)
  80678c:	e0bffd15 	stw	r2,-12(fp)
  806790:	080d82c0 	call	80d82c <rand>
  806794:	e0bffe15 	stw	r2,-8(fp)
  806798:	e0fffe17 	ldw	r3,-8(fp)
  80679c:	e0ffff15 	stw	r3,-4(fp)
  8067a0:	e0ffff17 	ldw	r3,-4(fp)
  8067a4:	1804403a 	cmpge	r2,r3,zero
  8067a8:	1000031e 	bne	r2,zero,8067b8 <initialize_power_crystals+0x8c0>
  8067ac:	e0bfff17 	ldw	r2,-4(fp)
  8067b0:	108001c4 	addi	r2,r2,7
  8067b4:	e0bfff15 	stw	r2,-4(fp)
  8067b8:	e0ffff17 	ldw	r3,-4(fp)
  8067bc:	1805d0fa 	srai	r2,r3,3
  8067c0:	10800224 	muli	r2,r2,8
  8067c4:	e0fffe17 	ldw	r3,-8(fp)
  8067c8:	1885c83a 	sub	r2,r3,r2
  8067cc:	108000c4 	addi	r2,r2,3
  8067d0:	e0fffd17 	ldw	r3,-12(fp)
  8067d4:	188026c5 	stb	r2,155(r3)
  8067d8:	00005406 	br	80692c <initialize_power_crystals+0xa34>
	}
	else
	{
		ship->A_B_val = 8;
  8067dc:	e0ffab17 	ldw	r3,-340(fp)
  8067e0:	00800204 	movi	r2,8
  8067e4:	18802005 	stb	r2,128(r3)
		ship->A_C_val = 8;
  8067e8:	e0ffab17 	ldw	r3,-340(fp)
  8067ec:	00800204 	movi	r2,8
  8067f0:	18802045 	stb	r2,129(r3)
		ship->A_D_val = 8;
  8067f4:	e0ffab17 	ldw	r3,-340(fp)
  8067f8:	00800204 	movi	r2,8
  8067fc:	18802085 	stb	r2,130(r3)
		ship->A_E_val = 8;
  806800:	e0ffab17 	ldw	r3,-340(fp)
  806804:	00800204 	movi	r2,8
  806808:	188020c5 	stb	r2,131(r3)
		ship->A_F_val = 8;
  80680c:	e0ffab17 	ldw	r3,-340(fp)
  806810:	00800204 	movi	r2,8
  806814:	18802105 	stb	r2,132(r3)
		ship->A_G_val = 8;
  806818:	e0ffab17 	ldw	r3,-340(fp)
  80681c:	00800204 	movi	r2,8
  806820:	18802145 	stb	r2,133(r3)
		ship->A_H_val = 8;
  806824:	e0ffab17 	ldw	r3,-340(fp)
  806828:	00800204 	movi	r2,8
  80682c:	18802185 	stb	r2,134(r3)
		ship->B_C_val = 8;
  806830:	e0ffab17 	ldw	r3,-340(fp)
  806834:	00800204 	movi	r2,8
  806838:	188021c5 	stb	r2,135(r3)
		ship->B_D_val = 8;
  80683c:	e0ffab17 	ldw	r3,-340(fp)
  806840:	00800204 	movi	r2,8
  806844:	18802205 	stb	r2,136(r3)
		ship->B_E_val = 8;
  806848:	e0ffab17 	ldw	r3,-340(fp)
  80684c:	00800204 	movi	r2,8
  806850:	18802245 	stb	r2,137(r3)
		ship->B_F_val = 8;
  806854:	e0ffab17 	ldw	r3,-340(fp)
  806858:	00800204 	movi	r2,8
  80685c:	18802285 	stb	r2,138(r3)
		ship->B_G_val = 8;
  806860:	e0ffab17 	ldw	r3,-340(fp)
  806864:	00800204 	movi	r2,8
  806868:	188022c5 	stb	r2,139(r3)
		ship->B_H_val = 8;
  80686c:	e0ffab17 	ldw	r3,-340(fp)
  806870:	00800204 	movi	r2,8
  806874:	18802305 	stb	r2,140(r3)
		ship->C_D_val = 8;
  806878:	e0ffab17 	ldw	r3,-340(fp)
  80687c:	00800204 	movi	r2,8
  806880:	18802345 	stb	r2,141(r3)
		ship->C_E_val = 8;
  806884:	e0ffab17 	ldw	r3,-340(fp)
  806888:	00800204 	movi	r2,8
  80688c:	18802385 	stb	r2,142(r3)
		ship->C_F_val = 8;
  806890:	e0ffab17 	ldw	r3,-340(fp)
  806894:	00800204 	movi	r2,8
  806898:	188023c5 	stb	r2,143(r3)
		ship->C_G_val = 8;
  80689c:	e0ffab17 	ldw	r3,-340(fp)
  8068a0:	00800204 	movi	r2,8
  8068a4:	18802405 	stb	r2,144(r3)
		ship->C_H_val = 8;
  8068a8:	e0ffab17 	ldw	r3,-340(fp)
  8068ac:	00800204 	movi	r2,8
  8068b0:	18802445 	stb	r2,145(r3)
		ship->D_E_val = 8;
  8068b4:	e0ffab17 	ldw	r3,-340(fp)
  8068b8:	00800204 	movi	r2,8
  8068bc:	18802485 	stb	r2,146(r3)
		ship->D_F_val = 8;
  8068c0:	e0ffab17 	ldw	r3,-340(fp)
  8068c4:	00800204 	movi	r2,8
  8068c8:	188024c5 	stb	r2,147(r3)
		ship->D_G_val = 8;
  8068cc:	e0ffab17 	ldw	r3,-340(fp)
  8068d0:	00800204 	movi	r2,8
  8068d4:	18802505 	stb	r2,148(r3)
		ship->D_H_val = 8;
  8068d8:	e0ffab17 	ldw	r3,-340(fp)
  8068dc:	00800204 	movi	r2,8
  8068e0:	18802545 	stb	r2,149(r3)
		ship->E_F_val = 8;
  8068e4:	e0ffab17 	ldw	r3,-340(fp)
  8068e8:	00800204 	movi	r2,8
  8068ec:	18802585 	stb	r2,150(r3)
		ship->E_G_val = 8;
  8068f0:	e0ffab17 	ldw	r3,-340(fp)
  8068f4:	00800204 	movi	r2,8
  8068f8:	188025c5 	stb	r2,151(r3)
		ship->E_H_val = 8;
  8068fc:	e0ffab17 	ldw	r3,-340(fp)
  806900:	00800204 	movi	r2,8
  806904:	18802605 	stb	r2,152(r3)
		ship->F_G_val = 8;
  806908:	e0ffab17 	ldw	r3,-340(fp)
  80690c:	00800204 	movi	r2,8
  806910:	18802645 	stb	r2,153(r3)
		ship->F_H_val = 8;
  806914:	e0ffab17 	ldw	r3,-340(fp)
  806918:	00800204 	movi	r2,8
  80691c:	18802685 	stb	r2,154(r3)
		ship->G_H_val = 8;
  806920:	e0ffab17 	ldw	r3,-340(fp)
  806924:	00800204 	movi	r2,8
  806928:	188026c5 	stb	r2,155(r3)

	}
}
  80692c:	dfc05617 	ldw	ra,344(sp)
  806930:	df005517 	ldw	fp,340(sp)
  806934:	dec05704 	addi	sp,sp,348
  806938:	f800283a 	ret

0080693c <power_calculation>:

/*---------------------------------------------------------------------------------------------
 * (function: power_calculation)
 *-------------------------------------------------------------------------------------------*/
int power_calculation(ship_t *ship)
{
  80693c:	defff904 	addi	sp,sp,-28
  806940:	dfc00615 	stw	ra,24(sp)
  806944:	df000515 	stw	fp,20(sp)
  806948:	df000504 	addi	fp,sp,20
  80694c:	e13ffb15 	stw	r4,-20(fp)
	int power_budget = BASIC_POWER_COST;
  806950:	00800284 	movi	r2,10
  806954:	e0bffc15 	stw	r2,-16(fp)
	int current_power;
	/* bitmask to check if the crystal is already hooked up */
	alt_u8 used = 0x00;
  806958:	e03ffe05 	stb	zero,-8(fp)
	
	if (game_mode == POWER_SIMPLE)
  80695c:	d0a02503 	ldbu	r2,-32620(gp)
  806960:	10800058 	cmpnei	r2,r2,1
  806964:	10006c1e 	bne	r2,zero,806b18 <power_calculation+0x1dc>
	{
		/* assumes A to B to C ... H to A */
		current_power = lookup_power_link(ship, A, 1);
  806968:	e13ffb17 	ldw	r4,-20(fp)
  80696c:	000b883a 	mov	r5,zero
  806970:	01800044 	movi	r6,1
  806974:	0806e9c0 	call	806e9c <lookup_power_link>
  806978:	10803fcc 	andi	r2,r2,255
  80697c:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0)
  806980:	e0bffd17 	ldw	r2,-12(fp)
  806984:	10800048 	cmpgei	r2,r2,1
  806988:	1000021e 	bne	r2,zero,806994 <power_calculation+0x58>
		{
			return 0;
  80698c:	e03fff15 	stw	zero,-4(fp)
  806990:	00013d06 	br	806e88 <power_calculation+0x54c>
		}
		power_budget += current_power;
  806994:	e0fffc17 	ldw	r3,-16(fp)
  806998:	e0bffd17 	ldw	r2,-12(fp)
  80699c:	1885883a 	add	r2,r3,r2
  8069a0:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, 1, 2);
  8069a4:	e13ffb17 	ldw	r4,-20(fp)
  8069a8:	01400044 	movi	r5,1
  8069ac:	01800084 	movi	r6,2
  8069b0:	0806e9c0 	call	806e9c <lookup_power_link>
  8069b4:	10803fcc 	andi	r2,r2,255
  8069b8:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0)
  8069bc:	e0bffd17 	ldw	r2,-12(fp)
  8069c0:	10800048 	cmpgei	r2,r2,1
  8069c4:	1000021e 	bne	r2,zero,8069d0 <power_calculation+0x94>
		{
			return 0;
  8069c8:	e03fff15 	stw	zero,-4(fp)
  8069cc:	00012e06 	br	806e88 <power_calculation+0x54c>
		}
		power_budget += current_power;
  8069d0:	e0fffc17 	ldw	r3,-16(fp)
  8069d4:	e0bffd17 	ldw	r2,-12(fp)
  8069d8:	1885883a 	add	r2,r3,r2
  8069dc:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, 3, 4);
  8069e0:	e13ffb17 	ldw	r4,-20(fp)
  8069e4:	014000c4 	movi	r5,3
  8069e8:	01800104 	movi	r6,4
  8069ec:	0806e9c0 	call	806e9c <lookup_power_link>
  8069f0:	10803fcc 	andi	r2,r2,255
  8069f4:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0)
  8069f8:	e0bffd17 	ldw	r2,-12(fp)
  8069fc:	10800048 	cmpgei	r2,r2,1
  806a00:	1000021e 	bne	r2,zero,806a0c <power_calculation+0xd0>
		{
			return 0;
  806a04:	e03fff15 	stw	zero,-4(fp)
  806a08:	00011f06 	br	806e88 <power_calculation+0x54c>
		}
		power_budget += current_power;
  806a0c:	e0fffc17 	ldw	r3,-16(fp)
  806a10:	e0bffd17 	ldw	r2,-12(fp)
  806a14:	1885883a 	add	r2,r3,r2
  806a18:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, 4, 5);
  806a1c:	e13ffb17 	ldw	r4,-20(fp)
  806a20:	01400104 	movi	r5,4
  806a24:	01800144 	movi	r6,5
  806a28:	0806e9c0 	call	806e9c <lookup_power_link>
  806a2c:	10803fcc 	andi	r2,r2,255
  806a30:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0)
  806a34:	e0bffd17 	ldw	r2,-12(fp)
  806a38:	10800048 	cmpgei	r2,r2,1
  806a3c:	1000021e 	bne	r2,zero,806a48 <power_calculation+0x10c>
		{
			return 0;
  806a40:	e03fff15 	stw	zero,-4(fp)
  806a44:	00011006 	br	806e88 <power_calculation+0x54c>
		}
		power_budget += current_power;
  806a48:	e0fffc17 	ldw	r3,-16(fp)
  806a4c:	e0bffd17 	ldw	r2,-12(fp)
  806a50:	1885883a 	add	r2,r3,r2
  806a54:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, 5, 6);
  806a58:	e13ffb17 	ldw	r4,-20(fp)
  806a5c:	01400144 	movi	r5,5
  806a60:	01800184 	movi	r6,6
  806a64:	0806e9c0 	call	806e9c <lookup_power_link>
  806a68:	10803fcc 	andi	r2,r2,255
  806a6c:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0)
  806a70:	e0bffd17 	ldw	r2,-12(fp)
  806a74:	10800048 	cmpgei	r2,r2,1
  806a78:	1000021e 	bne	r2,zero,806a84 <power_calculation+0x148>
		{
			return 0;
  806a7c:	e03fff15 	stw	zero,-4(fp)
  806a80:	00010106 	br	806e88 <power_calculation+0x54c>
		}
		power_budget += current_power;
  806a84:	e0fffc17 	ldw	r3,-16(fp)
  806a88:	e0bffd17 	ldw	r2,-12(fp)
  806a8c:	1885883a 	add	r2,r3,r2
  806a90:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, 6, 7);
  806a94:	e13ffb17 	ldw	r4,-20(fp)
  806a98:	01400184 	movi	r5,6
  806a9c:	018001c4 	movi	r6,7
  806aa0:	0806e9c0 	call	806e9c <lookup_power_link>
  806aa4:	10803fcc 	andi	r2,r2,255
  806aa8:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0)
  806aac:	e0bffd17 	ldw	r2,-12(fp)
  806ab0:	10800048 	cmpgei	r2,r2,1
  806ab4:	1000021e 	bne	r2,zero,806ac0 <power_calculation+0x184>
		{
			return 0;
  806ab8:	e03fff15 	stw	zero,-4(fp)
  806abc:	0000f206 	br	806e88 <power_calculation+0x54c>
		}
		power_budget += current_power;
  806ac0:	e0fffc17 	ldw	r3,-16(fp)
  806ac4:	e0bffd17 	ldw	r2,-12(fp)
  806ac8:	1885883a 	add	r2,r3,r2
  806acc:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, 7, 0);
  806ad0:	e13ffb17 	ldw	r4,-20(fp)
  806ad4:	014001c4 	movi	r5,7
  806ad8:	000d883a 	mov	r6,zero
  806adc:	0806e9c0 	call	806e9c <lookup_power_link>
  806ae0:	10803fcc 	andi	r2,r2,255
  806ae4:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0)
  806ae8:	e0bffd17 	ldw	r2,-12(fp)
  806aec:	10800048 	cmpgei	r2,r2,1
  806af0:	1000021e 	bne	r2,zero,806afc <power_calculation+0x1c0>
		{
			return 0;
  806af4:	e03fff15 	stw	zero,-4(fp)
  806af8:	0000e306 	br	806e88 <power_calculation+0x54c>
		}
		power_budget += current_power;
  806afc:	e0fffc17 	ldw	r3,-16(fp)
  806b00:	e0bffd17 	ldw	r2,-12(fp)
  806b04:	1885883a 	add	r2,r3,r2
  806b08:	e0bffc15 	stw	r2,-16(fp)
	
		return power_budget;
  806b0c:	e0bffc17 	ldw	r2,-16(fp)
  806b10:	e0bfff15 	stw	r2,-4(fp)
  806b14:	0000dc06 	br	806e88 <power_calculation+0x54c>
	}
	else
	{
		/* hookup of crystals sent by user */
		current_power = lookup_power_link(ship, A, ship->c2_hookedup_to);
  806b18:	e0bffb17 	ldw	r2,-20(fp)
  806b1c:	11801643 	ldbu	r6,89(r2)
  806b20:	e13ffb17 	ldw	r4,-20(fp)
  806b24:	000b883a 	mov	r5,zero
  806b28:	0806e9c0 	call	806e9c <lookup_power_link>
  806b2c:	10803fcc 	andi	r2,r2,255
  806b30:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0 || (used & (1 << ship->c2_hookedup_to)) >= 1)
  806b34:	e0bffd17 	ldw	r2,-12(fp)
  806b38:	10800050 	cmplti	r2,r2,1
  806b3c:	1000091e 	bne	r2,zero,806b64 <power_calculation+0x228>
  806b40:	e13ffe03 	ldbu	r4,-8(fp)
  806b44:	e0bffb17 	ldw	r2,-20(fp)
  806b48:	10c01643 	ldbu	r3,89(r2)
  806b4c:	00800044 	movi	r2,1
  806b50:	10c4983a 	sll	r2,r2,r3
  806b54:	2084703a 	and	r2,r4,r2
  806b58:	10800048 	cmpgei	r2,r2,1
  806b5c:	1000011e 	bne	r2,zero,806b64 <power_calculation+0x228>
  806b60:	00000206 	br	806b6c <power_calculation+0x230>
		{
			return 0;
  806b64:	e03fff15 	stw	zero,-4(fp)
  806b68:	0000c706 	br	806e88 <power_calculation+0x54c>
		}
		used = used | (1 << ship->c2_hookedup_to);
  806b6c:	e0bffb17 	ldw	r2,-20(fp)
  806b70:	10c01643 	ldbu	r3,89(r2)
  806b74:	00800044 	movi	r2,1
  806b78:	10c4983a 	sll	r2,r2,r3
  806b7c:	e0fffe03 	ldbu	r3,-8(fp)
  806b80:	1884b03a 	or	r2,r3,r2
  806b84:	e0bffe05 	stb	r2,-8(fp)
		power_budget += current_power;
  806b88:	e0fffc17 	ldw	r3,-16(fp)
  806b8c:	e0bffd17 	ldw	r2,-12(fp)
  806b90:	1885883a 	add	r2,r3,r2
  806b94:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, ship->c2_hookedup_to, ship->c3_hookedup_to);
  806b98:	e0bffb17 	ldw	r2,-20(fp)
  806b9c:	11401643 	ldbu	r5,89(r2)
  806ba0:	e0bffb17 	ldw	r2,-20(fp)
  806ba4:	11801683 	ldbu	r6,90(r2)
  806ba8:	e13ffb17 	ldw	r4,-20(fp)
  806bac:	0806e9c0 	call	806e9c <lookup_power_link>
  806bb0:	10803fcc 	andi	r2,r2,255
  806bb4:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0 || (used & (1 << ship->c3_hookedup_to)) >= 1)
  806bb8:	e0bffd17 	ldw	r2,-12(fp)
  806bbc:	10800050 	cmplti	r2,r2,1
  806bc0:	1000091e 	bne	r2,zero,806be8 <power_calculation+0x2ac>
  806bc4:	e13ffe03 	ldbu	r4,-8(fp)
  806bc8:	e0bffb17 	ldw	r2,-20(fp)
  806bcc:	10c01683 	ldbu	r3,90(r2)
  806bd0:	00800044 	movi	r2,1
  806bd4:	10c4983a 	sll	r2,r2,r3
  806bd8:	2084703a 	and	r2,r4,r2
  806bdc:	10800048 	cmpgei	r2,r2,1
  806be0:	1000011e 	bne	r2,zero,806be8 <power_calculation+0x2ac>
  806be4:	00000206 	br	806bf0 <power_calculation+0x2b4>
		{
			return 0;
  806be8:	e03fff15 	stw	zero,-4(fp)
  806bec:	0000a606 	br	806e88 <power_calculation+0x54c>
		}
		used = used | (1 << ship->c3_hookedup_to);
  806bf0:	e0bffb17 	ldw	r2,-20(fp)
  806bf4:	10c01683 	ldbu	r3,90(r2)
  806bf8:	00800044 	movi	r2,1
  806bfc:	10c4983a 	sll	r2,r2,r3
  806c00:	e0fffe03 	ldbu	r3,-8(fp)
  806c04:	1884b03a 	or	r2,r3,r2
  806c08:	e0bffe05 	stb	r2,-8(fp)
		power_budget += current_power;
  806c0c:	e0fffc17 	ldw	r3,-16(fp)
  806c10:	e0bffd17 	ldw	r2,-12(fp)
  806c14:	1885883a 	add	r2,r3,r2
  806c18:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, ship->c3_hookedup_to, ship->c4_hookedup_to);
  806c1c:	e0bffb17 	ldw	r2,-20(fp)
  806c20:	11401683 	ldbu	r5,90(r2)
  806c24:	e0bffb17 	ldw	r2,-20(fp)
  806c28:	118016c3 	ldbu	r6,91(r2)
  806c2c:	e13ffb17 	ldw	r4,-20(fp)
  806c30:	0806e9c0 	call	806e9c <lookup_power_link>
  806c34:	10803fcc 	andi	r2,r2,255
  806c38:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0 || (used & (1 << ship->c4_hookedup_to)) >= 1)
  806c3c:	e0bffd17 	ldw	r2,-12(fp)
  806c40:	10800050 	cmplti	r2,r2,1
  806c44:	1000091e 	bne	r2,zero,806c6c <power_calculation+0x330>
  806c48:	e13ffe03 	ldbu	r4,-8(fp)
  806c4c:	e0bffb17 	ldw	r2,-20(fp)
  806c50:	10c016c3 	ldbu	r3,91(r2)
  806c54:	00800044 	movi	r2,1
  806c58:	10c4983a 	sll	r2,r2,r3
  806c5c:	2084703a 	and	r2,r4,r2
  806c60:	10800048 	cmpgei	r2,r2,1
  806c64:	1000011e 	bne	r2,zero,806c6c <power_calculation+0x330>
  806c68:	00000206 	br	806c74 <power_calculation+0x338>
		{
			return 0;
  806c6c:	e03fff15 	stw	zero,-4(fp)
  806c70:	00008506 	br	806e88 <power_calculation+0x54c>
		}
		used = used | (1 << ship->c4_hookedup_to);
  806c74:	e0bffb17 	ldw	r2,-20(fp)
  806c78:	10c016c3 	ldbu	r3,91(r2)
  806c7c:	00800044 	movi	r2,1
  806c80:	10c4983a 	sll	r2,r2,r3
  806c84:	e0fffe03 	ldbu	r3,-8(fp)
  806c88:	1884b03a 	or	r2,r3,r2
  806c8c:	e0bffe05 	stb	r2,-8(fp)
		power_budget += current_power;
  806c90:	e0fffc17 	ldw	r3,-16(fp)
  806c94:	e0bffd17 	ldw	r2,-12(fp)
  806c98:	1885883a 	add	r2,r3,r2
  806c9c:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, ship->c4_hookedup_to, ship->c5_hookedup_to);
  806ca0:	e0bffb17 	ldw	r2,-20(fp)
  806ca4:	114016c3 	ldbu	r5,91(r2)
  806ca8:	e0bffb17 	ldw	r2,-20(fp)
  806cac:	11801703 	ldbu	r6,92(r2)
  806cb0:	e13ffb17 	ldw	r4,-20(fp)
  806cb4:	0806e9c0 	call	806e9c <lookup_power_link>
  806cb8:	10803fcc 	andi	r2,r2,255
  806cbc:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0 || (used & (1 << ship->c5_hookedup_to)) >= 1)
  806cc0:	e0bffd17 	ldw	r2,-12(fp)
  806cc4:	10800050 	cmplti	r2,r2,1
  806cc8:	1000091e 	bne	r2,zero,806cf0 <power_calculation+0x3b4>
  806ccc:	e13ffe03 	ldbu	r4,-8(fp)
  806cd0:	e0bffb17 	ldw	r2,-20(fp)
  806cd4:	10c01703 	ldbu	r3,92(r2)
  806cd8:	00800044 	movi	r2,1
  806cdc:	10c4983a 	sll	r2,r2,r3
  806ce0:	2084703a 	and	r2,r4,r2
  806ce4:	10800048 	cmpgei	r2,r2,1
  806ce8:	1000011e 	bne	r2,zero,806cf0 <power_calculation+0x3b4>
  806cec:	00000206 	br	806cf8 <power_calculation+0x3bc>
		{
			return 0;
  806cf0:	e03fff15 	stw	zero,-4(fp)
  806cf4:	00006406 	br	806e88 <power_calculation+0x54c>
		}
		used = used | (1 << ship->c5_hookedup_to);
  806cf8:	e0bffb17 	ldw	r2,-20(fp)
  806cfc:	10c01703 	ldbu	r3,92(r2)
  806d00:	00800044 	movi	r2,1
  806d04:	10c4983a 	sll	r2,r2,r3
  806d08:	e0fffe03 	ldbu	r3,-8(fp)
  806d0c:	1884b03a 	or	r2,r3,r2
  806d10:	e0bffe05 	stb	r2,-8(fp)
		power_budget += current_power;
  806d14:	e0fffc17 	ldw	r3,-16(fp)
  806d18:	e0bffd17 	ldw	r2,-12(fp)
  806d1c:	1885883a 	add	r2,r3,r2
  806d20:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, ship->c5_hookedup_to, ship->c6_hookedup_to);
  806d24:	e0bffb17 	ldw	r2,-20(fp)
  806d28:	11401703 	ldbu	r5,92(r2)
  806d2c:	e0bffb17 	ldw	r2,-20(fp)
  806d30:	11801743 	ldbu	r6,93(r2)
  806d34:	e13ffb17 	ldw	r4,-20(fp)
  806d38:	0806e9c0 	call	806e9c <lookup_power_link>
  806d3c:	10803fcc 	andi	r2,r2,255
  806d40:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0 || (used & (1 << ship->c6_hookedup_to)) >= 1)
  806d44:	e0bffd17 	ldw	r2,-12(fp)
  806d48:	10800050 	cmplti	r2,r2,1
  806d4c:	1000091e 	bne	r2,zero,806d74 <power_calculation+0x438>
  806d50:	e13ffe03 	ldbu	r4,-8(fp)
  806d54:	e0bffb17 	ldw	r2,-20(fp)
  806d58:	10c01743 	ldbu	r3,93(r2)
  806d5c:	00800044 	movi	r2,1
  806d60:	10c4983a 	sll	r2,r2,r3
  806d64:	2084703a 	and	r2,r4,r2
  806d68:	10800048 	cmpgei	r2,r2,1
  806d6c:	1000011e 	bne	r2,zero,806d74 <power_calculation+0x438>
  806d70:	00000206 	br	806d7c <power_calculation+0x440>
		{
			return 0;
  806d74:	e03fff15 	stw	zero,-4(fp)
  806d78:	00004306 	br	806e88 <power_calculation+0x54c>
		}
		used = used | (1 << ship->c6_hookedup_to);
  806d7c:	e0bffb17 	ldw	r2,-20(fp)
  806d80:	10c01743 	ldbu	r3,93(r2)
  806d84:	00800044 	movi	r2,1
  806d88:	10c4983a 	sll	r2,r2,r3
  806d8c:	e0fffe03 	ldbu	r3,-8(fp)
  806d90:	1884b03a 	or	r2,r3,r2
  806d94:	e0bffe05 	stb	r2,-8(fp)
		power_budget += current_power;
  806d98:	e0fffc17 	ldw	r3,-16(fp)
  806d9c:	e0bffd17 	ldw	r2,-12(fp)
  806da0:	1885883a 	add	r2,r3,r2
  806da4:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, ship->c6_hookedup_to, ship->c7_hookedup_to);
  806da8:	e0bffb17 	ldw	r2,-20(fp)
  806dac:	11401743 	ldbu	r5,93(r2)
  806db0:	e0bffb17 	ldw	r2,-20(fp)
  806db4:	11801783 	ldbu	r6,94(r2)
  806db8:	e13ffb17 	ldw	r4,-20(fp)
  806dbc:	0806e9c0 	call	806e9c <lookup_power_link>
  806dc0:	10803fcc 	andi	r2,r2,255
  806dc4:	e0bffd15 	stw	r2,-12(fp)
		if (current_power <= 0 || (used & (1 << ship->c7_hookedup_to)) >= 1)
  806dc8:	e0bffd17 	ldw	r2,-12(fp)
  806dcc:	10800050 	cmplti	r2,r2,1
  806dd0:	1000091e 	bne	r2,zero,806df8 <power_calculation+0x4bc>
  806dd4:	e13ffe03 	ldbu	r4,-8(fp)
  806dd8:	e0bffb17 	ldw	r2,-20(fp)
  806ddc:	10c01783 	ldbu	r3,94(r2)
  806de0:	00800044 	movi	r2,1
  806de4:	10c4983a 	sll	r2,r2,r3
  806de8:	2084703a 	and	r2,r4,r2
  806dec:	10800048 	cmpgei	r2,r2,1
  806df0:	1000011e 	bne	r2,zero,806df8 <power_calculation+0x4bc>
  806df4:	00000206 	br	806e00 <power_calculation+0x4c4>
		{
			return 0;
  806df8:	e03fff15 	stw	zero,-4(fp)
  806dfc:	00002206 	br	806e88 <power_calculation+0x54c>
		}
		used = used | (1 << ship->c7_hookedup_to);
  806e00:	e0bffb17 	ldw	r2,-20(fp)
  806e04:	10c01783 	ldbu	r3,94(r2)
  806e08:	00800044 	movi	r2,1
  806e0c:	10c4983a 	sll	r2,r2,r3
  806e10:	e0fffe03 	ldbu	r3,-8(fp)
  806e14:	1884b03a 	or	r2,r3,r2
  806e18:	e0bffe05 	stb	r2,-8(fp)
		power_budget += current_power;
  806e1c:	e0fffc17 	ldw	r3,-16(fp)
  806e20:	e0bffd17 	ldw	r2,-12(fp)
  806e24:	1885883a 	add	r2,r3,r2
  806e28:	e0bffc15 	stw	r2,-16(fp)
	
		current_power = lookup_power_link(ship, ship->c7_hookedup_to, ship->c8_hookedup_to);
  806e2c:	e0bffb17 	ldw	r2,-20(fp)
  806e30:	11401783 	ldbu	r5,94(r2)
  806e34:	e0bffb17 	ldw	r2,-20(fp)
  806e38:	118017c3 	ldbu	r6,95(r2)
  806e3c:	e13ffb17 	ldw	r4,-20(fp)
  806e40:	0806e9c0 	call	806e9c <lookup_power_link>
  806e44:	10803fcc 	andi	r2,r2,255
  806e48:	e0bffd15 	stw	r2,-12(fp)
		/* the last spot needs to go to A */
		if (current_power <= 0 && ship->c8_hookedup_to == 0)
  806e4c:	e0bffd17 	ldw	r2,-12(fp)
  806e50:	10800048 	cmpgei	r2,r2,1
  806e54:	1000061e 	bne	r2,zero,806e70 <power_calculation+0x534>
  806e58:	e0bffb17 	ldw	r2,-20(fp)
  806e5c:	108017c3 	ldbu	r2,95(r2)
  806e60:	1004c03a 	cmpne	r2,r2,zero
  806e64:	1000021e 	bne	r2,zero,806e70 <power_calculation+0x534>
		{
			return 0;
  806e68:	e03fff15 	stw	zero,-4(fp)
  806e6c:	00000606 	br	806e88 <power_calculation+0x54c>
		}
		power_budget += current_power;
  806e70:	e0fffc17 	ldw	r3,-16(fp)
  806e74:	e0bffd17 	ldw	r2,-12(fp)
  806e78:	1885883a 	add	r2,r3,r2
  806e7c:	e0bffc15 	stw	r2,-16(fp)
	
		return power_budget;
  806e80:	e0bffc17 	ldw	r2,-16(fp)
  806e84:	e0bfff15 	stw	r2,-4(fp)
	}
}
  806e88:	e0bfff17 	ldw	r2,-4(fp)
  806e8c:	dfc00617 	ldw	ra,24(sp)
  806e90:	df000517 	ldw	fp,20(sp)
  806e94:	dec00704 	addi	sp,sp,28
  806e98:	f800283a 	ret

00806e9c <lookup_power_link>:

/*---------------------------------------------------------------------------------------------
 * (function: lookup_power_link)
 *-------------------------------------------------------------------------------------------*/
alt_u8 lookup_power_link(ship_t *ship, short idx1, short idx2)
{
  806e9c:	defff304 	addi	sp,sp,-52
  806ea0:	df000c15 	stw	fp,48(sp)
  806ea4:	df000c04 	addi	fp,sp,48
  806ea8:	e13ff415 	stw	r4,-48(fp)
  806eac:	e17ff50d 	sth	r5,-44(fp)
  806eb0:	e1bff58d 	sth	r6,-42(fp)
	switch (idx1) 
  806eb4:	e0bff50f 	ldh	r2,-44(fp)
  806eb8:	e0bfff15 	stw	r2,-4(fp)
  806ebc:	e0ffff17 	ldw	r3,-4(fp)
  806ec0:	18800228 	cmpgeui	r2,r3,8
  806ec4:	10015f1e 	bne	r2,zero,807444 <lookup_power_link+0x5a8>
  806ec8:	e0bfff17 	ldw	r2,-4(fp)
  806ecc:	10c00124 	muli	r3,r2,4
  806ed0:	008020b4 	movhi	r2,130
  806ed4:	10a5fc04 	addi	r2,r2,-26640
  806ed8:	1885883a 	add	r2,r3,r2
  806edc:	10800017 	ldw	r2,0(r2)
  806ee0:	1000683a 	jmp	r2
	{
		case A:
			switch (idx2)
  806ee4:	e0fff58f 	ldh	r3,-42(fp)
  806ee8:	e0fff715 	stw	r3,-36(fp)
  806eec:	e0fff717 	ldw	r3,-36(fp)
  806ef0:	18800228 	cmpgeui	r2,r3,8
  806ef4:	1000231e 	bne	r2,zero,806f84 <lookup_power_link+0xe8>
  806ef8:	e0bff717 	ldw	r2,-36(fp)
  806efc:	10c00124 	muli	r3,r2,4
  806f00:	008020b4 	movhi	r2,130
  806f04:	10a60404 	addi	r2,r2,-26608
  806f08:	1885883a 	add	r2,r3,r2
  806f0c:	10800017 	ldw	r2,0(r2)
  806f10:	1000683a 	jmp	r2
			{
				case B:
					return ship->A_B_val;
  806f14:	e0bff417 	ldw	r2,-48(fp)
  806f18:	10802003 	ldbu	r2,128(r2)
  806f1c:	e0bff615 	stw	r2,-40(fp)
  806f20:	00014a06 	br	80744c <lookup_power_link+0x5b0>
				case C:
					return ship->A_C_val;
  806f24:	e0bff417 	ldw	r2,-48(fp)
  806f28:	10802043 	ldbu	r2,129(r2)
  806f2c:	e0bff615 	stw	r2,-40(fp)
  806f30:	00014606 	br	80744c <lookup_power_link+0x5b0>
				case D:
					return ship->A_D_val;
  806f34:	e0bff417 	ldw	r2,-48(fp)
  806f38:	10802083 	ldbu	r2,130(r2)
  806f3c:	e0bff615 	stw	r2,-40(fp)
  806f40:	00014206 	br	80744c <lookup_power_link+0x5b0>
				case E:
					return ship->A_E_val;
  806f44:	e0bff417 	ldw	r2,-48(fp)
  806f48:	108020c3 	ldbu	r2,131(r2)
  806f4c:	e0bff615 	stw	r2,-40(fp)
  806f50:	00013e06 	br	80744c <lookup_power_link+0x5b0>
				case F:
					return ship->A_F_val;
  806f54:	e0bff417 	ldw	r2,-48(fp)
  806f58:	10802103 	ldbu	r2,132(r2)
  806f5c:	e0bff615 	stw	r2,-40(fp)
  806f60:	00013a06 	br	80744c <lookup_power_link+0x5b0>
				case G:
					return ship->A_G_val;
  806f64:	e0bff417 	ldw	r2,-48(fp)
  806f68:	10802143 	ldbu	r2,133(r2)
  806f6c:	e0bff615 	stw	r2,-40(fp)
  806f70:	00013606 	br	80744c <lookup_power_link+0x5b0>
				case H:
					return ship->A_H_val;
  806f74:	e0bff417 	ldw	r2,-48(fp)
  806f78:	10802183 	ldbu	r2,134(r2)
  806f7c:	e0bff615 	stw	r2,-40(fp)
  806f80:	00013206 	br	80744c <lookup_power_link+0x5b0>
				default:
					return -1;
  806f84:	00c03fc4 	movi	r3,255
  806f88:	e0fff615 	stw	r3,-40(fp)
  806f8c:	00012f06 	br	80744c <lookup_power_link+0x5b0>
			}
		case B:
			switch (idx2)
  806f90:	e0bff58f 	ldh	r2,-42(fp)
  806f94:	e0bff815 	stw	r2,-32(fp)
  806f98:	e0fff817 	ldw	r3,-32(fp)
  806f9c:	18800228 	cmpgeui	r2,r3,8
  806fa0:	1000231e 	bne	r2,zero,807030 <lookup_power_link+0x194>
  806fa4:	e0bff817 	ldw	r2,-32(fp)
  806fa8:	10c00124 	muli	r3,r2,4
  806fac:	008020b4 	movhi	r2,130
  806fb0:	10a60c04 	addi	r2,r2,-26576
  806fb4:	1885883a 	add	r2,r3,r2
  806fb8:	10800017 	ldw	r2,0(r2)
  806fbc:	1000683a 	jmp	r2
			{
				case A:
					return ship->A_B_val;
  806fc0:	e0bff417 	ldw	r2,-48(fp)
  806fc4:	10802003 	ldbu	r2,128(r2)
  806fc8:	e0bff615 	stw	r2,-40(fp)
  806fcc:	00011f06 	br	80744c <lookup_power_link+0x5b0>
				case C:
					return ship->B_C_val;
  806fd0:	e0bff417 	ldw	r2,-48(fp)
  806fd4:	108021c3 	ldbu	r2,135(r2)
  806fd8:	e0bff615 	stw	r2,-40(fp)
  806fdc:	00011b06 	br	80744c <lookup_power_link+0x5b0>
				case D:
					return ship->B_D_val;
  806fe0:	e0bff417 	ldw	r2,-48(fp)
  806fe4:	10802203 	ldbu	r2,136(r2)
  806fe8:	e0bff615 	stw	r2,-40(fp)
  806fec:	00011706 	br	80744c <lookup_power_link+0x5b0>
				case E:
					return ship->B_E_val;
  806ff0:	e0bff417 	ldw	r2,-48(fp)
  806ff4:	10802243 	ldbu	r2,137(r2)
  806ff8:	e0bff615 	stw	r2,-40(fp)
  806ffc:	00011306 	br	80744c <lookup_power_link+0x5b0>
				case F:
					return ship->B_F_val;
  807000:	e0bff417 	ldw	r2,-48(fp)
  807004:	10802283 	ldbu	r2,138(r2)
  807008:	e0bff615 	stw	r2,-40(fp)
  80700c:	00010f06 	br	80744c <lookup_power_link+0x5b0>
				case G:
					return ship->B_G_val;
  807010:	e0bff417 	ldw	r2,-48(fp)
  807014:	108022c3 	ldbu	r2,139(r2)
  807018:	e0bff615 	stw	r2,-40(fp)
  80701c:	00010b06 	br	80744c <lookup_power_link+0x5b0>
				case H:
					return ship->B_H_val;
  807020:	e0bff417 	ldw	r2,-48(fp)
  807024:	10802303 	ldbu	r2,140(r2)
  807028:	e0bff615 	stw	r2,-40(fp)
  80702c:	00010706 	br	80744c <lookup_power_link+0x5b0>
				default:
					return -1;
  807030:	00c03fc4 	movi	r3,255
  807034:	e0fff615 	stw	r3,-40(fp)
  807038:	00010406 	br	80744c <lookup_power_link+0x5b0>
			}
		case C:
			switch (idx2)
  80703c:	e0bff58f 	ldh	r2,-42(fp)
  807040:	e0bff915 	stw	r2,-28(fp)
  807044:	e0fff917 	ldw	r3,-28(fp)
  807048:	18800228 	cmpgeui	r2,r3,8
  80704c:	1000231e 	bne	r2,zero,8070dc <lookup_power_link+0x240>
  807050:	e0bff917 	ldw	r2,-28(fp)
  807054:	10c00124 	muli	r3,r2,4
  807058:	008020b4 	movhi	r2,130
  80705c:	10a61404 	addi	r2,r2,-26544
  807060:	1885883a 	add	r2,r3,r2
  807064:	10800017 	ldw	r2,0(r2)
  807068:	1000683a 	jmp	r2
			{
				case A:
					return ship->A_C_val;
  80706c:	e0bff417 	ldw	r2,-48(fp)
  807070:	10802043 	ldbu	r2,129(r2)
  807074:	e0bff615 	stw	r2,-40(fp)
  807078:	0000f406 	br	80744c <lookup_power_link+0x5b0>
				case B:
					return ship->B_C_val;
  80707c:	e0bff417 	ldw	r2,-48(fp)
  807080:	108021c3 	ldbu	r2,135(r2)
  807084:	e0bff615 	stw	r2,-40(fp)
  807088:	0000f006 	br	80744c <lookup_power_link+0x5b0>
				case D:
					return ship->C_D_val;
  80708c:	e0bff417 	ldw	r2,-48(fp)
  807090:	10802343 	ldbu	r2,141(r2)
  807094:	e0bff615 	stw	r2,-40(fp)
  807098:	0000ec06 	br	80744c <lookup_power_link+0x5b0>
				case E:
					return ship->C_E_val;
  80709c:	e0bff417 	ldw	r2,-48(fp)
  8070a0:	10802383 	ldbu	r2,142(r2)
  8070a4:	e0bff615 	stw	r2,-40(fp)
  8070a8:	0000e806 	br	80744c <lookup_power_link+0x5b0>
				case F:
					return ship->C_F_val;
  8070ac:	e0bff417 	ldw	r2,-48(fp)
  8070b0:	108023c3 	ldbu	r2,143(r2)
  8070b4:	e0bff615 	stw	r2,-40(fp)
  8070b8:	0000e406 	br	80744c <lookup_power_link+0x5b0>
				case G:
					return ship->C_G_val;
  8070bc:	e0bff417 	ldw	r2,-48(fp)
  8070c0:	10802403 	ldbu	r2,144(r2)
  8070c4:	e0bff615 	stw	r2,-40(fp)
  8070c8:	0000e006 	br	80744c <lookup_power_link+0x5b0>
				case H:
					return ship->C_H_val;
  8070cc:	e0bff417 	ldw	r2,-48(fp)
  8070d0:	10802443 	ldbu	r2,145(r2)
  8070d4:	e0bff615 	stw	r2,-40(fp)
  8070d8:	0000dc06 	br	80744c <lookup_power_link+0x5b0>
				default:
					return -1;
  8070dc:	00c03fc4 	movi	r3,255
  8070e0:	e0fff615 	stw	r3,-40(fp)
  8070e4:	0000d906 	br	80744c <lookup_power_link+0x5b0>
			}
		case D:
			switch (idx2)
  8070e8:	e0bff58f 	ldh	r2,-42(fp)
  8070ec:	e0bffa15 	stw	r2,-24(fp)
  8070f0:	e0fffa17 	ldw	r3,-24(fp)
  8070f4:	18800228 	cmpgeui	r2,r3,8
  8070f8:	1000231e 	bne	r2,zero,807188 <lookup_power_link+0x2ec>
  8070fc:	e0bffa17 	ldw	r2,-24(fp)
  807100:	10c00124 	muli	r3,r2,4
  807104:	008020b4 	movhi	r2,130
  807108:	10a61c04 	addi	r2,r2,-26512
  80710c:	1885883a 	add	r2,r3,r2
  807110:	10800017 	ldw	r2,0(r2)
  807114:	1000683a 	jmp	r2
			{
				case A:
					return ship->A_D_val;
  807118:	e0bff417 	ldw	r2,-48(fp)
  80711c:	10802083 	ldbu	r2,130(r2)
  807120:	e0bff615 	stw	r2,-40(fp)
  807124:	0000c906 	br	80744c <lookup_power_link+0x5b0>
				case B:
					return ship->B_D_val;
  807128:	e0bff417 	ldw	r2,-48(fp)
  80712c:	10802203 	ldbu	r2,136(r2)
  807130:	e0bff615 	stw	r2,-40(fp)
  807134:	0000c506 	br	80744c <lookup_power_link+0x5b0>
				case C:
					return ship->C_D_val;
  807138:	e0bff417 	ldw	r2,-48(fp)
  80713c:	10802343 	ldbu	r2,141(r2)
  807140:	e0bff615 	stw	r2,-40(fp)
  807144:	0000c106 	br	80744c <lookup_power_link+0x5b0>
				case E:
					return ship->D_E_val;
  807148:	e0bff417 	ldw	r2,-48(fp)
  80714c:	10802483 	ldbu	r2,146(r2)
  807150:	e0bff615 	stw	r2,-40(fp)
  807154:	0000bd06 	br	80744c <lookup_power_link+0x5b0>
				case F:
					return ship->D_F_val;
  807158:	e0bff417 	ldw	r2,-48(fp)
  80715c:	108024c3 	ldbu	r2,147(r2)
  807160:	e0bff615 	stw	r2,-40(fp)
  807164:	0000b906 	br	80744c <lookup_power_link+0x5b0>
				case G:
					return ship->D_G_val;
  807168:	e0bff417 	ldw	r2,-48(fp)
  80716c:	10802503 	ldbu	r2,148(r2)
  807170:	e0bff615 	stw	r2,-40(fp)
  807174:	0000b506 	br	80744c <lookup_power_link+0x5b0>
				case H:
					return ship->D_H_val;
  807178:	e0bff417 	ldw	r2,-48(fp)
  80717c:	10802543 	ldbu	r2,149(r2)
  807180:	e0bff615 	stw	r2,-40(fp)
  807184:	0000b106 	br	80744c <lookup_power_link+0x5b0>
				default:
					return -1;
  807188:	00c03fc4 	movi	r3,255
  80718c:	e0fff615 	stw	r3,-40(fp)
  807190:	0000ae06 	br	80744c <lookup_power_link+0x5b0>
			}
		case E:
			switch (idx2)
  807194:	e0bff58f 	ldh	r2,-42(fp)
  807198:	e0bffb15 	stw	r2,-20(fp)
  80719c:	e0fffb17 	ldw	r3,-20(fp)
  8071a0:	18800228 	cmpgeui	r2,r3,8
  8071a4:	1000231e 	bne	r2,zero,807234 <lookup_power_link+0x398>
  8071a8:	e0bffb17 	ldw	r2,-20(fp)
  8071ac:	10c00124 	muli	r3,r2,4
  8071b0:	008020b4 	movhi	r2,130
  8071b4:	10a62404 	addi	r2,r2,-26480
  8071b8:	1885883a 	add	r2,r3,r2
  8071bc:	10800017 	ldw	r2,0(r2)
  8071c0:	1000683a 	jmp	r2
			{
				case A:
					return ship->A_E_val;
  8071c4:	e0bff417 	ldw	r2,-48(fp)
  8071c8:	108020c3 	ldbu	r2,131(r2)
  8071cc:	e0bff615 	stw	r2,-40(fp)
  8071d0:	00009e06 	br	80744c <lookup_power_link+0x5b0>
				case B:
					return ship->B_E_val;
  8071d4:	e0bff417 	ldw	r2,-48(fp)
  8071d8:	10802243 	ldbu	r2,137(r2)
  8071dc:	e0bff615 	stw	r2,-40(fp)
  8071e0:	00009a06 	br	80744c <lookup_power_link+0x5b0>
				case C:
					return ship->C_E_val;
  8071e4:	e0bff417 	ldw	r2,-48(fp)
  8071e8:	10802383 	ldbu	r2,142(r2)
  8071ec:	e0bff615 	stw	r2,-40(fp)
  8071f0:	00009606 	br	80744c <lookup_power_link+0x5b0>
				case D:
					return ship->D_E_val;
  8071f4:	e0bff417 	ldw	r2,-48(fp)
  8071f8:	10802483 	ldbu	r2,146(r2)
  8071fc:	e0bff615 	stw	r2,-40(fp)
  807200:	00009206 	br	80744c <lookup_power_link+0x5b0>
				case F:
					return ship->E_F_val;
  807204:	e0bff417 	ldw	r2,-48(fp)
  807208:	10802583 	ldbu	r2,150(r2)
  80720c:	e0bff615 	stw	r2,-40(fp)
  807210:	00008e06 	br	80744c <lookup_power_link+0x5b0>
				case G:
					return ship->E_G_val;
  807214:	e0bff417 	ldw	r2,-48(fp)
  807218:	108025c3 	ldbu	r2,151(r2)
  80721c:	e0bff615 	stw	r2,-40(fp)
  807220:	00008a06 	br	80744c <lookup_power_link+0x5b0>
				case H:
					return ship->E_H_val;
  807224:	e0bff417 	ldw	r2,-48(fp)
  807228:	10802603 	ldbu	r2,152(r2)
  80722c:	e0bff615 	stw	r2,-40(fp)
  807230:	00008606 	br	80744c <lookup_power_link+0x5b0>
				default:
					return -1;
  807234:	00c03fc4 	movi	r3,255
  807238:	e0fff615 	stw	r3,-40(fp)
  80723c:	00008306 	br	80744c <lookup_power_link+0x5b0>
			}
		case F:
			switch (idx2)
  807240:	e0bff58f 	ldh	r2,-42(fp)
  807244:	e0bffc15 	stw	r2,-16(fp)
  807248:	e0fffc17 	ldw	r3,-16(fp)
  80724c:	18800228 	cmpgeui	r2,r3,8
  807250:	1000231e 	bne	r2,zero,8072e0 <lookup_power_link+0x444>
  807254:	e0bffc17 	ldw	r2,-16(fp)
  807258:	10c00124 	muli	r3,r2,4
  80725c:	008020b4 	movhi	r2,130
  807260:	10a62c04 	addi	r2,r2,-26448
  807264:	1885883a 	add	r2,r3,r2
  807268:	10800017 	ldw	r2,0(r2)
  80726c:	1000683a 	jmp	r2
			{
				case A:
					return ship->A_F_val;
  807270:	e0bff417 	ldw	r2,-48(fp)
  807274:	10802103 	ldbu	r2,132(r2)
  807278:	e0bff615 	stw	r2,-40(fp)
  80727c:	00007306 	br	80744c <lookup_power_link+0x5b0>
				case B:
					return ship->B_F_val;
  807280:	e0bff417 	ldw	r2,-48(fp)
  807284:	10802283 	ldbu	r2,138(r2)
  807288:	e0bff615 	stw	r2,-40(fp)
  80728c:	00006f06 	br	80744c <lookup_power_link+0x5b0>
				case C:
					return ship->C_F_val;
  807290:	e0bff417 	ldw	r2,-48(fp)
  807294:	108023c3 	ldbu	r2,143(r2)
  807298:	e0bff615 	stw	r2,-40(fp)
  80729c:	00006b06 	br	80744c <lookup_power_link+0x5b0>
				case D:
					return ship->D_F_val;
  8072a0:	e0bff417 	ldw	r2,-48(fp)
  8072a4:	108024c3 	ldbu	r2,147(r2)
  8072a8:	e0bff615 	stw	r2,-40(fp)
  8072ac:	00006706 	br	80744c <lookup_power_link+0x5b0>
				case E:
					return ship->E_F_val;
  8072b0:	e0bff417 	ldw	r2,-48(fp)
  8072b4:	10802583 	ldbu	r2,150(r2)
  8072b8:	e0bff615 	stw	r2,-40(fp)
  8072bc:	00006306 	br	80744c <lookup_power_link+0x5b0>
				case G:
					return ship->F_G_val;
  8072c0:	e0bff417 	ldw	r2,-48(fp)
  8072c4:	10802643 	ldbu	r2,153(r2)
  8072c8:	e0bff615 	stw	r2,-40(fp)
  8072cc:	00005f06 	br	80744c <lookup_power_link+0x5b0>
				case H:
					return ship->F_H_val;
  8072d0:	e0bff417 	ldw	r2,-48(fp)
  8072d4:	10802683 	ldbu	r2,154(r2)
  8072d8:	e0bff615 	stw	r2,-40(fp)
  8072dc:	00005b06 	br	80744c <lookup_power_link+0x5b0>
				default:
					return -1;
  8072e0:	00c03fc4 	movi	r3,255
  8072e4:	e0fff615 	stw	r3,-40(fp)
  8072e8:	00005806 	br	80744c <lookup_power_link+0x5b0>
			}
		case G:
			switch (idx2)
  8072ec:	e0bff58f 	ldh	r2,-42(fp)
  8072f0:	e0bffd15 	stw	r2,-12(fp)
  8072f4:	e0fffd17 	ldw	r3,-12(fp)
  8072f8:	18800228 	cmpgeui	r2,r3,8
  8072fc:	1000231e 	bne	r2,zero,80738c <lookup_power_link+0x4f0>
  807300:	e0bffd17 	ldw	r2,-12(fp)
  807304:	10c00124 	muli	r3,r2,4
  807308:	008020b4 	movhi	r2,130
  80730c:	10a63404 	addi	r2,r2,-26416
  807310:	1885883a 	add	r2,r3,r2
  807314:	10800017 	ldw	r2,0(r2)
  807318:	1000683a 	jmp	r2
			{
				case A:
					return ship->A_G_val;
  80731c:	e0bff417 	ldw	r2,-48(fp)
  807320:	10802143 	ldbu	r2,133(r2)
  807324:	e0bff615 	stw	r2,-40(fp)
  807328:	00004806 	br	80744c <lookup_power_link+0x5b0>
				case B:
					return ship->B_G_val;
  80732c:	e0bff417 	ldw	r2,-48(fp)
  807330:	108022c3 	ldbu	r2,139(r2)
  807334:	e0bff615 	stw	r2,-40(fp)
  807338:	00004406 	br	80744c <lookup_power_link+0x5b0>
				case C:
					return ship->C_G_val;
  80733c:	e0bff417 	ldw	r2,-48(fp)
  807340:	10802403 	ldbu	r2,144(r2)
  807344:	e0bff615 	stw	r2,-40(fp)
  807348:	00004006 	br	80744c <lookup_power_link+0x5b0>
				case D:
					return ship->D_G_val;
  80734c:	e0bff417 	ldw	r2,-48(fp)
  807350:	10802503 	ldbu	r2,148(r2)
  807354:	e0bff615 	stw	r2,-40(fp)
  807358:	00003c06 	br	80744c <lookup_power_link+0x5b0>
				case E:
					return ship->E_G_val;
  80735c:	e0bff417 	ldw	r2,-48(fp)
  807360:	108025c3 	ldbu	r2,151(r2)
  807364:	e0bff615 	stw	r2,-40(fp)
  807368:	00003806 	br	80744c <lookup_power_link+0x5b0>
				case F:
					return ship->F_G_val;
  80736c:	e0bff417 	ldw	r2,-48(fp)
  807370:	10802643 	ldbu	r2,153(r2)
  807374:	e0bff615 	stw	r2,-40(fp)
  807378:	00003406 	br	80744c <lookup_power_link+0x5b0>
				case H:
					return ship->G_H_val;
  80737c:	e0bff417 	ldw	r2,-48(fp)
  807380:	108026c3 	ldbu	r2,155(r2)
  807384:	e0bff615 	stw	r2,-40(fp)
  807388:	00003006 	br	80744c <lookup_power_link+0x5b0>
				default:
					return -1;
  80738c:	00c03fc4 	movi	r3,255
  807390:	e0fff615 	stw	r3,-40(fp)
  807394:	00002d06 	br	80744c <lookup_power_link+0x5b0>
			}
		case H:
			switch (idx2)
  807398:	e0bff58f 	ldh	r2,-42(fp)
  80739c:	e0bffe15 	stw	r2,-8(fp)
  8073a0:	e0fffe17 	ldw	r3,-8(fp)
  8073a4:	188001e8 	cmpgeui	r2,r3,7
  8073a8:	1000231e 	bne	r2,zero,807438 <lookup_power_link+0x59c>
  8073ac:	e0bffe17 	ldw	r2,-8(fp)
  8073b0:	10c00124 	muli	r3,r2,4
  8073b4:	008020b4 	movhi	r2,130
  8073b8:	10a63c04 	addi	r2,r2,-26384
  8073bc:	1885883a 	add	r2,r3,r2
  8073c0:	10800017 	ldw	r2,0(r2)
  8073c4:	1000683a 	jmp	r2
			{
				case A:
					return ship->A_H_val;
  8073c8:	e0bff417 	ldw	r2,-48(fp)
  8073cc:	10802183 	ldbu	r2,134(r2)
  8073d0:	e0bff615 	stw	r2,-40(fp)
  8073d4:	00001d06 	br	80744c <lookup_power_link+0x5b0>
				case B:
					return ship->B_H_val;
  8073d8:	e0bff417 	ldw	r2,-48(fp)
  8073dc:	10802303 	ldbu	r2,140(r2)
  8073e0:	e0bff615 	stw	r2,-40(fp)
  8073e4:	00001906 	br	80744c <lookup_power_link+0x5b0>
				case C:
					return ship->C_H_val;
  8073e8:	e0bff417 	ldw	r2,-48(fp)
  8073ec:	10802443 	ldbu	r2,145(r2)
  8073f0:	e0bff615 	stw	r2,-40(fp)
  8073f4:	00001506 	br	80744c <lookup_power_link+0x5b0>
				case D:
					return ship->D_H_val;
  8073f8:	e0bff417 	ldw	r2,-48(fp)
  8073fc:	10802543 	ldbu	r2,149(r2)
  807400:	e0bff615 	stw	r2,-40(fp)
  807404:	00001106 	br	80744c <lookup_power_link+0x5b0>
				case E:
					return ship->E_H_val;
  807408:	e0bff417 	ldw	r2,-48(fp)
  80740c:	10802603 	ldbu	r2,152(r2)
  807410:	e0bff615 	stw	r2,-40(fp)
  807414:	00000d06 	br	80744c <lookup_power_link+0x5b0>
				case F:
					return ship->F_H_val;
  807418:	e0bff417 	ldw	r2,-48(fp)
  80741c:	10802683 	ldbu	r2,154(r2)
  807420:	e0bff615 	stw	r2,-40(fp)
  807424:	00000906 	br	80744c <lookup_power_link+0x5b0>
				case G:
					return ship->G_H_val;
  807428:	e0bff417 	ldw	r2,-48(fp)
  80742c:	108026c3 	ldbu	r2,155(r2)
  807430:	e0bff615 	stw	r2,-40(fp)
  807434:	00000506 	br	80744c <lookup_power_link+0x5b0>
				default:
					return -1;
  807438:	00c03fc4 	movi	r3,255
  80743c:	e0fff615 	stw	r3,-40(fp)
  807440:	00000206 	br	80744c <lookup_power_link+0x5b0>
			}
		default:
			return -1;
  807444:	00803fc4 	movi	r2,255
  807448:	e0bff615 	stw	r2,-40(fp)
	}
}
  80744c:	e0bff617 	ldw	r2,-40(fp)
  807450:	df000c17 	ldw	fp,48(sp)
  807454:	dec00d04 	addi	sp,sp,52
  807458:	f800283a 	ret

0080745c <set_power_link>:

/*---------------------------------------------------------------------------------------------
 * (function: set_power_link)
 *-------------------------------------------------------------------------------------------*/
void set_power_link(ship_t *ship, short idx1, short idx2, int val)
{
  80745c:	defff304 	addi	sp,sp,-52
  807460:	df000c15 	stw	fp,48(sp)
  807464:	df000c04 	addi	fp,sp,48
  807468:	e13ff415 	stw	r4,-48(fp)
  80746c:	e1fff615 	stw	r7,-40(fp)
  807470:	e17ff50d 	sth	r5,-44(fp)
  807474:	e1bff58d 	sth	r6,-42(fp)
	if (val < 0)
  807478:	e0bff617 	ldw	r2,-40(fp)
  80747c:	1004403a 	cmpge	r2,r2,zero
  807480:	1000011e 	bne	r2,zero,807488 <set_power_link+0x2c>
	{
		val = 0;
  807484:	e03ff615 	stw	zero,-40(fp)
	}

	switch (idx1) 
  807488:	e0bff50f 	ldh	r2,-44(fp)
  80748c:	e0bfff15 	stw	r2,-4(fp)
  807490:	e0ffff17 	ldw	r3,-4(fp)
  807494:	18800228 	cmpgeui	r2,r3,8
  807498:	1001461e 	bne	r2,zero,8079b4 <set_power_link+0x558>
  80749c:	e0bfff17 	ldw	r2,-4(fp)
  8074a0:	10c00124 	muli	r3,r2,4
  8074a4:	008020b4 	movhi	r2,130
  8074a8:	10a64304 	addi	r2,r2,-26356
  8074ac:	1885883a 	add	r2,r3,r2
  8074b0:	10800017 	ldw	r2,0(r2)
  8074b4:	1000683a 	jmp	r2
	{
		case A:
			switch (idx2)
  8074b8:	e0fff58f 	ldh	r3,-42(fp)
  8074bc:	e0fff715 	stw	r3,-36(fp)
  8074c0:	e0fff717 	ldw	r3,-36(fp)
  8074c4:	18800228 	cmpgeui	r2,r3,8
  8074c8:	10013a1e 	bne	r2,zero,8079b4 <set_power_link+0x558>
  8074cc:	e0bff717 	ldw	r2,-36(fp)
  8074d0:	10c00124 	muli	r3,r2,4
  8074d4:	008020b4 	movhi	r2,130
  8074d8:	10a64b04 	addi	r2,r2,-26324
  8074dc:	1885883a 	add	r2,r3,r2
  8074e0:	10800017 	ldw	r2,0(r2)
  8074e4:	1000683a 	jmp	r2
			{
				case B:
					ship->A_B_val = val;
  8074e8:	e0fff417 	ldw	r3,-48(fp)
  8074ec:	e0bff617 	ldw	r2,-40(fp)
  8074f0:	18802005 	stb	r2,128(r3)
					return;
  8074f4:	00012f06 	br	8079b4 <set_power_link+0x558>
				case C:
					ship->A_C_val = val;
  8074f8:	e0fff417 	ldw	r3,-48(fp)
  8074fc:	e0bff617 	ldw	r2,-40(fp)
  807500:	18802045 	stb	r2,129(r3)
					return;
  807504:	00012b06 	br	8079b4 <set_power_link+0x558>
				case D:
					ship->A_D_val = val;
  807508:	e0fff417 	ldw	r3,-48(fp)
  80750c:	e0bff617 	ldw	r2,-40(fp)
  807510:	18802085 	stb	r2,130(r3)
					return;
  807514:	00012706 	br	8079b4 <set_power_link+0x558>
				case E:
					ship->A_E_val = val;
  807518:	e0fff417 	ldw	r3,-48(fp)
  80751c:	e0bff617 	ldw	r2,-40(fp)
  807520:	188020c5 	stb	r2,131(r3)
					return;
  807524:	00012306 	br	8079b4 <set_power_link+0x558>
				case F:
					ship->A_F_val = val;
  807528:	e0fff417 	ldw	r3,-48(fp)
  80752c:	e0bff617 	ldw	r2,-40(fp)
  807530:	18802105 	stb	r2,132(r3)
					return;
  807534:	00011f06 	br	8079b4 <set_power_link+0x558>
				case G:
					ship->A_G_val = val;
  807538:	e0fff417 	ldw	r3,-48(fp)
  80753c:	e0bff617 	ldw	r2,-40(fp)
  807540:	18802145 	stb	r2,133(r3)
					return;
  807544:	00011b06 	br	8079b4 <set_power_link+0x558>
				case H:
					ship->A_H_val = val;
  807548:	e0fff417 	ldw	r3,-48(fp)
  80754c:	e0bff617 	ldw	r2,-40(fp)
  807550:	18802185 	stb	r2,134(r3)
					return;
  807554:	00011706 	br	8079b4 <set_power_link+0x558>
				default:
			 		return;
			}
		case B:
			switch (idx2)
  807558:	e0fff58f 	ldh	r3,-42(fp)
  80755c:	e0fff815 	stw	r3,-32(fp)
  807560:	e0fff817 	ldw	r3,-32(fp)
  807564:	18800228 	cmpgeui	r2,r3,8
  807568:	1001121e 	bne	r2,zero,8079b4 <set_power_link+0x558>
  80756c:	e0bff817 	ldw	r2,-32(fp)
  807570:	10c00124 	muli	r3,r2,4
  807574:	008020b4 	movhi	r2,130
  807578:	10a65304 	addi	r2,r2,-26292
  80757c:	1885883a 	add	r2,r3,r2
  807580:	10800017 	ldw	r2,0(r2)
  807584:	1000683a 	jmp	r2
			{
				case A:
					ship->A_B_val = val;
  807588:	e0fff417 	ldw	r3,-48(fp)
  80758c:	e0bff617 	ldw	r2,-40(fp)
  807590:	18802005 	stb	r2,128(r3)
					return;
  807594:	00010706 	br	8079b4 <set_power_link+0x558>
				case C:
					ship->B_C_val = val;
  807598:	e0fff417 	ldw	r3,-48(fp)
  80759c:	e0bff617 	ldw	r2,-40(fp)
  8075a0:	188021c5 	stb	r2,135(r3)
					return;
  8075a4:	00010306 	br	8079b4 <set_power_link+0x558>
				case D:
					ship->B_D_val = val;
  8075a8:	e0fff417 	ldw	r3,-48(fp)
  8075ac:	e0bff617 	ldw	r2,-40(fp)
  8075b0:	18802205 	stb	r2,136(r3)
					return;
  8075b4:	0000ff06 	br	8079b4 <set_power_link+0x558>
				case E:
					ship->B_E_val = val;
  8075b8:	e0fff417 	ldw	r3,-48(fp)
  8075bc:	e0bff617 	ldw	r2,-40(fp)
  8075c0:	18802245 	stb	r2,137(r3)
					return;
  8075c4:	0000fb06 	br	8079b4 <set_power_link+0x558>
				case F:
					ship->B_F_val = val;
  8075c8:	e0fff417 	ldw	r3,-48(fp)
  8075cc:	e0bff617 	ldw	r2,-40(fp)
  8075d0:	18802285 	stb	r2,138(r3)
					return;
  8075d4:	0000f706 	br	8079b4 <set_power_link+0x558>
				case G:
					ship->B_G_val = val;
  8075d8:	e0fff417 	ldw	r3,-48(fp)
  8075dc:	e0bff617 	ldw	r2,-40(fp)
  8075e0:	188022c5 	stb	r2,139(r3)
					return;
  8075e4:	0000f306 	br	8079b4 <set_power_link+0x558>
				case H:
					ship->B_H_val = val;
  8075e8:	e0fff417 	ldw	r3,-48(fp)
  8075ec:	e0bff617 	ldw	r2,-40(fp)
  8075f0:	18802305 	stb	r2,140(r3)
					return;
  8075f4:	0000ef06 	br	8079b4 <set_power_link+0x558>
				default:
			 		return;
			}
		case C:
			switch (idx2)
  8075f8:	e0fff58f 	ldh	r3,-42(fp)
  8075fc:	e0fff915 	stw	r3,-28(fp)
  807600:	e0fff917 	ldw	r3,-28(fp)
  807604:	18800228 	cmpgeui	r2,r3,8
  807608:	1000ea1e 	bne	r2,zero,8079b4 <set_power_link+0x558>
  80760c:	e0bff917 	ldw	r2,-28(fp)
  807610:	10c00124 	muli	r3,r2,4
  807614:	008020b4 	movhi	r2,130
  807618:	10a65b04 	addi	r2,r2,-26260
  80761c:	1885883a 	add	r2,r3,r2
  807620:	10800017 	ldw	r2,0(r2)
  807624:	1000683a 	jmp	r2
			{
				case A:
					ship->A_C_val = val;
  807628:	e0fff417 	ldw	r3,-48(fp)
  80762c:	e0bff617 	ldw	r2,-40(fp)
  807630:	18802045 	stb	r2,129(r3)
					return;
  807634:	0000df06 	br	8079b4 <set_power_link+0x558>
				case B:
					ship->B_C_val = val;
  807638:	e0fff417 	ldw	r3,-48(fp)
  80763c:	e0bff617 	ldw	r2,-40(fp)
  807640:	188021c5 	stb	r2,135(r3)
					return;
  807644:	0000db06 	br	8079b4 <set_power_link+0x558>
				case D:
					ship->C_D_val = val;
  807648:	e0fff417 	ldw	r3,-48(fp)
  80764c:	e0bff617 	ldw	r2,-40(fp)
  807650:	18802345 	stb	r2,141(r3)
					return;
  807654:	0000d706 	br	8079b4 <set_power_link+0x558>
				case E:
					ship->C_E_val = val;
  807658:	e0fff417 	ldw	r3,-48(fp)
  80765c:	e0bff617 	ldw	r2,-40(fp)
  807660:	18802385 	stb	r2,142(r3)
					return;
  807664:	0000d306 	br	8079b4 <set_power_link+0x558>
				case F:
					ship->C_F_val = val;
  807668:	e0fff417 	ldw	r3,-48(fp)
  80766c:	e0bff617 	ldw	r2,-40(fp)
  807670:	188023c5 	stb	r2,143(r3)
					return;
  807674:	0000cf06 	br	8079b4 <set_power_link+0x558>
				case G:
					ship->C_G_val = val;
  807678:	e0fff417 	ldw	r3,-48(fp)
  80767c:	e0bff617 	ldw	r2,-40(fp)
  807680:	18802405 	stb	r2,144(r3)
					return;
  807684:	0000cb06 	br	8079b4 <set_power_link+0x558>
				case H:
					ship->C_H_val = val;
  807688:	e0fff417 	ldw	r3,-48(fp)
  80768c:	e0bff617 	ldw	r2,-40(fp)
  807690:	18802445 	stb	r2,145(r3)
					return;
  807694:	0000c706 	br	8079b4 <set_power_link+0x558>
				default:
			 		return;
			}
		case D:
			switch (idx2)
  807698:	e0fff58f 	ldh	r3,-42(fp)
  80769c:	e0fffa15 	stw	r3,-24(fp)
  8076a0:	e0fffa17 	ldw	r3,-24(fp)
  8076a4:	18800228 	cmpgeui	r2,r3,8
  8076a8:	1000c21e 	bne	r2,zero,8079b4 <set_power_link+0x558>
  8076ac:	e0bffa17 	ldw	r2,-24(fp)
  8076b0:	10c00124 	muli	r3,r2,4
  8076b4:	008020b4 	movhi	r2,130
  8076b8:	10a66304 	addi	r2,r2,-26228
  8076bc:	1885883a 	add	r2,r3,r2
  8076c0:	10800017 	ldw	r2,0(r2)
  8076c4:	1000683a 	jmp	r2
			{
				case A:
					ship->A_D_val = val;
  8076c8:	e0fff417 	ldw	r3,-48(fp)
  8076cc:	e0bff617 	ldw	r2,-40(fp)
  8076d0:	18802085 	stb	r2,130(r3)
					return;
  8076d4:	0000b706 	br	8079b4 <set_power_link+0x558>
				case B:
					ship->B_D_val = val;
  8076d8:	e0fff417 	ldw	r3,-48(fp)
  8076dc:	e0bff617 	ldw	r2,-40(fp)
  8076e0:	18802205 	stb	r2,136(r3)
					return;
  8076e4:	0000b306 	br	8079b4 <set_power_link+0x558>
				case C:
					ship->C_D_val = val;
  8076e8:	e0fff417 	ldw	r3,-48(fp)
  8076ec:	e0bff617 	ldw	r2,-40(fp)
  8076f0:	18802345 	stb	r2,141(r3)
					return;
  8076f4:	0000af06 	br	8079b4 <set_power_link+0x558>
				case E:
					ship->D_E_val = val;
  8076f8:	e0fff417 	ldw	r3,-48(fp)
  8076fc:	e0bff617 	ldw	r2,-40(fp)
  807700:	18802485 	stb	r2,146(r3)
					return;
  807704:	0000ab06 	br	8079b4 <set_power_link+0x558>
				case F:
					ship->D_F_val = val;
  807708:	e0fff417 	ldw	r3,-48(fp)
  80770c:	e0bff617 	ldw	r2,-40(fp)
  807710:	188024c5 	stb	r2,147(r3)
					return;
  807714:	0000a706 	br	8079b4 <set_power_link+0x558>
				case G:
					ship->D_G_val = val;
  807718:	e0fff417 	ldw	r3,-48(fp)
  80771c:	e0bff617 	ldw	r2,-40(fp)
  807720:	18802505 	stb	r2,148(r3)
					return;
  807724:	0000a306 	br	8079b4 <set_power_link+0x558>
				case H:
					ship->D_H_val = val;
  807728:	e0fff417 	ldw	r3,-48(fp)
  80772c:	e0bff617 	ldw	r2,-40(fp)
  807730:	18802545 	stb	r2,149(r3)
					return;
  807734:	00009f06 	br	8079b4 <set_power_link+0x558>
				default:
			 		return;
			}
		case E:
			switch (idx2)
  807738:	e0fff58f 	ldh	r3,-42(fp)
  80773c:	e0fffb15 	stw	r3,-20(fp)
  807740:	e0fffb17 	ldw	r3,-20(fp)
  807744:	18800228 	cmpgeui	r2,r3,8
  807748:	10009a1e 	bne	r2,zero,8079b4 <set_power_link+0x558>
  80774c:	e0bffb17 	ldw	r2,-20(fp)
  807750:	10c00124 	muli	r3,r2,4
  807754:	008020b4 	movhi	r2,130
  807758:	10a66b04 	addi	r2,r2,-26196
  80775c:	1885883a 	add	r2,r3,r2
  807760:	10800017 	ldw	r2,0(r2)
  807764:	1000683a 	jmp	r2
			{
				case A:
					ship->A_E_val = val;
  807768:	e0fff417 	ldw	r3,-48(fp)
  80776c:	e0bff617 	ldw	r2,-40(fp)
  807770:	188020c5 	stb	r2,131(r3)
					return;
  807774:	00008f06 	br	8079b4 <set_power_link+0x558>
				case B:
					ship->B_E_val = val;
  807778:	e0fff417 	ldw	r3,-48(fp)
  80777c:	e0bff617 	ldw	r2,-40(fp)
  807780:	18802245 	stb	r2,137(r3)
					return;
  807784:	00008b06 	br	8079b4 <set_power_link+0x558>
				case C:
					ship->C_E_val = val;
  807788:	e0fff417 	ldw	r3,-48(fp)
  80778c:	e0bff617 	ldw	r2,-40(fp)
  807790:	18802385 	stb	r2,142(r3)
					return;
  807794:	00008706 	br	8079b4 <set_power_link+0x558>
				case D:
					ship->D_E_val = val;
  807798:	e0fff417 	ldw	r3,-48(fp)
  80779c:	e0bff617 	ldw	r2,-40(fp)
  8077a0:	18802485 	stb	r2,146(r3)
					return;
  8077a4:	00008306 	br	8079b4 <set_power_link+0x558>
				case F:
					ship->E_F_val = val;
  8077a8:	e0fff417 	ldw	r3,-48(fp)
  8077ac:	e0bff617 	ldw	r2,-40(fp)
  8077b0:	18802585 	stb	r2,150(r3)
					return;
  8077b4:	00007f06 	br	8079b4 <set_power_link+0x558>
				case G:
					ship->E_G_val = val;
  8077b8:	e0fff417 	ldw	r3,-48(fp)
  8077bc:	e0bff617 	ldw	r2,-40(fp)
  8077c0:	188025c5 	stb	r2,151(r3)
					return;
  8077c4:	00007b06 	br	8079b4 <set_power_link+0x558>
				case H:
					ship->E_H_val = val;
  8077c8:	e0fff417 	ldw	r3,-48(fp)
  8077cc:	e0bff617 	ldw	r2,-40(fp)
  8077d0:	18802605 	stb	r2,152(r3)
					return;
  8077d4:	00007706 	br	8079b4 <set_power_link+0x558>
				default:
					return;
			}
		case F:
			switch (idx2)
  8077d8:	e0fff58f 	ldh	r3,-42(fp)
  8077dc:	e0fffc15 	stw	r3,-16(fp)
  8077e0:	e0fffc17 	ldw	r3,-16(fp)
  8077e4:	18800228 	cmpgeui	r2,r3,8
  8077e8:	1000721e 	bne	r2,zero,8079b4 <set_power_link+0x558>
  8077ec:	e0bffc17 	ldw	r2,-16(fp)
  8077f0:	10c00124 	muli	r3,r2,4
  8077f4:	008020b4 	movhi	r2,130
  8077f8:	10a67304 	addi	r2,r2,-26164
  8077fc:	1885883a 	add	r2,r3,r2
  807800:	10800017 	ldw	r2,0(r2)
  807804:	1000683a 	jmp	r2
			{
				case A:
					ship->A_F_val = val;
  807808:	e0fff417 	ldw	r3,-48(fp)
  80780c:	e0bff617 	ldw	r2,-40(fp)
  807810:	18802105 	stb	r2,132(r3)
					return;
  807814:	00006706 	br	8079b4 <set_power_link+0x558>
				case B:
					ship->B_F_val = val;
  807818:	e0fff417 	ldw	r3,-48(fp)
  80781c:	e0bff617 	ldw	r2,-40(fp)
  807820:	18802285 	stb	r2,138(r3)
					return;
  807824:	00006306 	br	8079b4 <set_power_link+0x558>
				case C:
					ship->C_F_val = val;
  807828:	e0fff417 	ldw	r3,-48(fp)
  80782c:	e0bff617 	ldw	r2,-40(fp)
  807830:	188023c5 	stb	r2,143(r3)
					return;
  807834:	00005f06 	br	8079b4 <set_power_link+0x558>
				case D:
					ship->D_F_val = val;
  807838:	e0fff417 	ldw	r3,-48(fp)
  80783c:	e0bff617 	ldw	r2,-40(fp)
  807840:	188024c5 	stb	r2,147(r3)
					return;
  807844:	00005b06 	br	8079b4 <set_power_link+0x558>
				case E:
					ship->E_F_val = val;
  807848:	e0fff417 	ldw	r3,-48(fp)
  80784c:	e0bff617 	ldw	r2,-40(fp)
  807850:	18802585 	stb	r2,150(r3)
					return;
  807854:	00005706 	br	8079b4 <set_power_link+0x558>
				case G:
					ship->F_G_val = val;
  807858:	e0fff417 	ldw	r3,-48(fp)
  80785c:	e0bff617 	ldw	r2,-40(fp)
  807860:	18802645 	stb	r2,153(r3)
					return;
  807864:	00005306 	br	8079b4 <set_power_link+0x558>
				case H:
					ship->F_H_val = val;
  807868:	e0fff417 	ldw	r3,-48(fp)
  80786c:	e0bff617 	ldw	r2,-40(fp)
  807870:	18802685 	stb	r2,154(r3)
					return;
  807874:	00004f06 	br	8079b4 <set_power_link+0x558>
				default:
			 		return;
			}
		case G:
			switch (idx2)
  807878:	e0fff58f 	ldh	r3,-42(fp)
  80787c:	e0fffd15 	stw	r3,-12(fp)
  807880:	e0fffd17 	ldw	r3,-12(fp)
  807884:	18800228 	cmpgeui	r2,r3,8
  807888:	10004a1e 	bne	r2,zero,8079b4 <set_power_link+0x558>
  80788c:	e0bffd17 	ldw	r2,-12(fp)
  807890:	10c00124 	muli	r3,r2,4
  807894:	008020b4 	movhi	r2,130
  807898:	10a67b04 	addi	r2,r2,-26132
  80789c:	1885883a 	add	r2,r3,r2
  8078a0:	10800017 	ldw	r2,0(r2)
  8078a4:	1000683a 	jmp	r2
			{
				case A:
					ship->A_G_val = val;
  8078a8:	e0fff417 	ldw	r3,-48(fp)
  8078ac:	e0bff617 	ldw	r2,-40(fp)
  8078b0:	18802145 	stb	r2,133(r3)
					return;
  8078b4:	00003f06 	br	8079b4 <set_power_link+0x558>
				case B:
					ship->B_G_val = val;
  8078b8:	e0fff417 	ldw	r3,-48(fp)
  8078bc:	e0bff617 	ldw	r2,-40(fp)
  8078c0:	188022c5 	stb	r2,139(r3)
					return;
  8078c4:	00003b06 	br	8079b4 <set_power_link+0x558>
				case C:
					ship->C_G_val = val;
  8078c8:	e0fff417 	ldw	r3,-48(fp)
  8078cc:	e0bff617 	ldw	r2,-40(fp)
  8078d0:	18802405 	stb	r2,144(r3)
					return;
  8078d4:	00003706 	br	8079b4 <set_power_link+0x558>
				case D:
					ship->D_G_val = val;
  8078d8:	e0fff417 	ldw	r3,-48(fp)
  8078dc:	e0bff617 	ldw	r2,-40(fp)
  8078e0:	18802505 	stb	r2,148(r3)
					return;
  8078e4:	00003306 	br	8079b4 <set_power_link+0x558>
				case E:
					ship->E_G_val = val;
  8078e8:	e0fff417 	ldw	r3,-48(fp)
  8078ec:	e0bff617 	ldw	r2,-40(fp)
  8078f0:	188025c5 	stb	r2,151(r3)
					return;
  8078f4:	00002f06 	br	8079b4 <set_power_link+0x558>
				case F:
					ship->F_G_val = val;
  8078f8:	e0fff417 	ldw	r3,-48(fp)
  8078fc:	e0bff617 	ldw	r2,-40(fp)
  807900:	18802645 	stb	r2,153(r3)
					return;
  807904:	00002b06 	br	8079b4 <set_power_link+0x558>
				case H:
					ship->G_H_val = val;
  807908:	e0fff417 	ldw	r3,-48(fp)
  80790c:	e0bff617 	ldw	r2,-40(fp)
  807910:	188026c5 	stb	r2,155(r3)
					return;
  807914:	00002706 	br	8079b4 <set_power_link+0x558>
				default:
			 		return;
			}
		case H:
			switch (idx2)
  807918:	e0fff58f 	ldh	r3,-42(fp)
  80791c:	e0fffe15 	stw	r3,-8(fp)
  807920:	e0fffe17 	ldw	r3,-8(fp)
  807924:	188001e8 	cmpgeui	r2,r3,7
  807928:	1000221e 	bne	r2,zero,8079b4 <set_power_link+0x558>
  80792c:	e0bffe17 	ldw	r2,-8(fp)
  807930:	10c00124 	muli	r3,r2,4
  807934:	008020b4 	movhi	r2,130
  807938:	10a68304 	addi	r2,r2,-26100
  80793c:	1885883a 	add	r2,r3,r2
  807940:	10800017 	ldw	r2,0(r2)
  807944:	1000683a 	jmp	r2
			{
				case A:
					ship->A_H_val = val;
  807948:	e0fff417 	ldw	r3,-48(fp)
  80794c:	e0bff617 	ldw	r2,-40(fp)
  807950:	18802185 	stb	r2,134(r3)
					return;
  807954:	00001706 	br	8079b4 <set_power_link+0x558>
				case B:
					ship->B_H_val = val;
  807958:	e0fff417 	ldw	r3,-48(fp)
  80795c:	e0bff617 	ldw	r2,-40(fp)
  807960:	18802305 	stb	r2,140(r3)
					return;
  807964:	00001306 	br	8079b4 <set_power_link+0x558>
				case C:
					ship->C_H_val = val;
  807968:	e0fff417 	ldw	r3,-48(fp)
  80796c:	e0bff617 	ldw	r2,-40(fp)
  807970:	18802445 	stb	r2,145(r3)
					return;
  807974:	00000f06 	br	8079b4 <set_power_link+0x558>
				case D:
					ship->D_H_val = val;
  807978:	e0fff417 	ldw	r3,-48(fp)
  80797c:	e0bff617 	ldw	r2,-40(fp)
  807980:	18802545 	stb	r2,149(r3)
					return;
  807984:	00000b06 	br	8079b4 <set_power_link+0x558>
				case E:
					ship->E_H_val = val;
  807988:	e0fff417 	ldw	r3,-48(fp)
  80798c:	e0bff617 	ldw	r2,-40(fp)
  807990:	18802605 	stb	r2,152(r3)
					return;
  807994:	00000706 	br	8079b4 <set_power_link+0x558>
				case F:
					ship->F_H_val = val;
  807998:	e0fff417 	ldw	r3,-48(fp)
  80799c:	e0bff617 	ldw	r2,-40(fp)
  8079a0:	18802685 	stb	r2,154(r3)
					return;
  8079a4:	00000306 	br	8079b4 <set_power_link+0x558>
				case G:
					ship->G_H_val = val;
  8079a8:	e0fff417 	ldw	r3,-48(fp)
  8079ac:	e0bff617 	ldw	r2,-40(fp)
  8079b0:	188026c5 	stb	r2,155(r3)
					return;
				default:
					return;
			}
		default:
			return ;
	}
}
  8079b4:	df000c17 	ldw	fp,48(sp)
  8079b8:	dec00d04 	addi	sp,sp,52
  8079bc:	f800283a 	ret

008079c0 <number_to_character_string>:
/*---------------------------------------------------------------------------------------------
 * (function: number_to_character_string)
 *-------------------------------------------------------------------------------------------*/
void number_to_character_string(string_t *ret_string, int number)
{
  8079c0:	defffb04 	addi	sp,sp,-20
  8079c4:	dfc00415 	stw	ra,16(sp)
  8079c8:	df000315 	stw	fp,12(sp)
  8079cc:	dc000215 	stw	r16,8(sp)
  8079d0:	df000304 	addi	fp,sp,12
  8079d4:	e13ffd15 	stw	r4,-12(fp)
  8079d8:	e17ffe15 	stw	r5,-8(fp)
	sprintf(ret_string->string, "%d", number);
  8079dc:	e0bffd17 	ldw	r2,-12(fp)
  8079e0:	11000017 	ldw	r4,0(r2)
  8079e4:	014020b4 	movhi	r5,130
  8079e8:	29668a04 	addi	r5,r5,-26072
  8079ec:	e1bffe17 	ldw	r6,-8(fp)
  8079f0:	080daec0 	call	80daec <sprintf>
	ret_string->size = strlen(ret_string->string);
  8079f4:	e43ffd17 	ldw	r16,-12(fp)
  8079f8:	e0bffd17 	ldw	r2,-12(fp)
  8079fc:	11000017 	ldw	r4,0(r2)
  807a00:	080dccc0 	call	80dccc <strlen>
  807a04:	80800115 	stw	r2,4(r16)
}
  807a08:	dfc00417 	ldw	ra,16(sp)
  807a0c:	df000317 	ldw	fp,12(sp)
  807a10:	dc000217 	ldw	r16,8(sp)
  807a14:	dec00504 	addi	sp,sp,20
  807a18:	f800283a 	ret

00807a1c <cos>:
  807a1c:	00a00034 	movhi	r2,32768
  807a20:	10bfffc4 	addi	r2,r2,-1
  807a24:	defffa04 	addi	sp,sp,-24
  807a28:	288c703a 	and	r6,r5,r2
  807a2c:	008ffa74 	movhi	r2,16361
  807a30:	10887ec4 	addi	r2,r2,8699
  807a34:	dfc00515 	stw	ra,20(sp)
  807a38:	2011883a 	mov	r8,r4
  807a3c:	0015883a 	mov	r10,zero
  807a40:	1180220e 	bge	r2,r6,807acc <cos+0xb0>
  807a44:	009ffc34 	movhi	r2,32752
  807a48:	10bfffc4 	addi	r2,r2,-1
  807a4c:	11800b0e 	bge	r2,r6,807a7c <cos+0x60>
  807a50:	400d883a 	mov	r6,r8
  807a54:	280f883a 	mov	r7,r5
  807a58:	4009883a 	mov	r4,r8
  807a5c:	080b1a40 	call	80b1a4 <__subdf3>
  807a60:	100d883a 	mov	r6,r2
  807a64:	180f883a 	mov	r7,r3
  807a68:	3807883a 	mov	r3,r7
  807a6c:	3005883a 	mov	r2,r6
  807a70:	dfc00517 	ldw	ra,20(sp)
  807a74:	dec00604 	addi	sp,sp,24
  807a78:	f800283a 	ret
  807a7c:	4009883a 	mov	r4,r8
  807a80:	d9800104 	addi	r6,sp,4
  807a84:	0807ee00 	call	807ee0 <__ieee754_rem_pio2>
  807a88:	110000cc 	andi	r4,r2,3
  807a8c:	00800044 	movi	r2,1
  807a90:	20802526 	beq	r4,r2,807b28 <cos+0x10c>
  807a94:	11001816 	blt	r2,r4,807af8 <cos+0xdc>
  807a98:	20003326 	beq	r4,zero,807b68 <cos+0x14c>
  807a9c:	d8800117 	ldw	r2,4(sp)
  807aa0:	da000317 	ldw	r8,12(sp)
  807aa4:	d8c00217 	ldw	r3,8(sp)
  807aa8:	da400417 	ldw	r9,16(sp)
  807aac:	01000044 	movi	r4,1
  807ab0:	d9000015 	stw	r4,0(sp)
  807ab4:	180b883a 	mov	r5,r3
  807ab8:	480f883a 	mov	r7,r9
  807abc:	1009883a 	mov	r4,r2
  807ac0:	400d883a 	mov	r6,r8
  807ac4:	0809c080 	call	809c08 <__kernel_sin>
  807ac8:	00000406 	br	807adc <cos+0xc0>
  807acc:	4009883a 	mov	r4,r8
  807ad0:	500d883a 	mov	r6,r10
  807ad4:	000f883a 	mov	r7,zero
  807ad8:	0808a380 	call	808a38 <__kernel_cos>
  807adc:	100d883a 	mov	r6,r2
  807ae0:	180f883a 	mov	r7,r3
  807ae4:	3807883a 	mov	r3,r7
  807ae8:	3005883a 	mov	r2,r6
  807aec:	dfc00517 	ldw	ra,20(sp)
  807af0:	dec00604 	addi	sp,sp,24
  807af4:	f800283a 	ret
  807af8:	00800084 	movi	r2,2
  807afc:	20bfe71e 	bne	r4,r2,807a9c <cos+0x80>
  807b00:	d8800117 	ldw	r2,4(sp)
  807b04:	da000317 	ldw	r8,12(sp)
  807b08:	d8c00217 	ldw	r3,8(sp)
  807b0c:	da400417 	ldw	r9,16(sp)
  807b10:	1009883a 	mov	r4,r2
  807b14:	180b883a 	mov	r5,r3
  807b18:	480f883a 	mov	r7,r9
  807b1c:	400d883a 	mov	r6,r8
  807b20:	0808a380 	call	808a38 <__kernel_cos>
  807b24:	00000a06 	br	807b50 <cos+0x134>
  807b28:	d8800117 	ldw	r2,4(sp)
  807b2c:	da000317 	ldw	r8,12(sp)
  807b30:	d8c00217 	ldw	r3,8(sp)
  807b34:	da400417 	ldw	r9,16(sp)
  807b38:	d9000015 	stw	r4,0(sp)
  807b3c:	180b883a 	mov	r5,r3
  807b40:	480f883a 	mov	r7,r9
  807b44:	1009883a 	mov	r4,r2
  807b48:	400d883a 	mov	r6,r8
  807b4c:	0809c080 	call	809c08 <__kernel_sin>
  807b50:	000d883a 	mov	r6,zero
  807b54:	01e00034 	movhi	r7,32768
  807b58:	39c00004 	addi	r7,r7,0
  807b5c:	3084f03a 	xor	r2,r6,r2
  807b60:	19c6f03a 	xor	r3,r3,r7
  807b64:	003fbe06 	br	807a60 <cos+0x44>
  807b68:	d8800117 	ldw	r2,4(sp)
  807b6c:	da000317 	ldw	r8,12(sp)
  807b70:	d8c00217 	ldw	r3,8(sp)
  807b74:	da400417 	ldw	r9,16(sp)
  807b78:	1009883a 	mov	r4,r2
  807b7c:	180b883a 	mov	r5,r3
  807b80:	480f883a 	mov	r7,r9
  807b84:	400d883a 	mov	r6,r8
  807b88:	003fd306 	br	807ad8 <cos+0xbc>

00807b8c <sin>:
  807b8c:	00a00034 	movhi	r2,32768
  807b90:	10bfffc4 	addi	r2,r2,-1
  807b94:	defffa04 	addi	sp,sp,-24
  807b98:	288c703a 	and	r6,r5,r2
  807b9c:	008ffa74 	movhi	r2,16361
  807ba0:	10887ec4 	addi	r2,r2,8699
  807ba4:	dfc00515 	stw	ra,20(sp)
  807ba8:	2011883a 	mov	r8,r4
  807bac:	0015883a 	mov	r10,zero
  807bb0:	1180250e 	bge	r2,r6,807c48 <sin+0xbc>
  807bb4:	009ffc34 	movhi	r2,32752
  807bb8:	10bfffc4 	addi	r2,r2,-1
  807bbc:	11800b0e 	bge	r2,r6,807bec <sin+0x60>
  807bc0:	400d883a 	mov	r6,r8
  807bc4:	280f883a 	mov	r7,r5
  807bc8:	4009883a 	mov	r4,r8
  807bcc:	080b1a40 	call	80b1a4 <__subdf3>
  807bd0:	100d883a 	mov	r6,r2
  807bd4:	180f883a 	mov	r7,r3
  807bd8:	3807883a 	mov	r3,r7
  807bdc:	3005883a 	mov	r2,r6
  807be0:	dfc00517 	ldw	ra,20(sp)
  807be4:	dec00604 	addi	sp,sp,24
  807be8:	f800283a 	ret
  807bec:	4009883a 	mov	r4,r8
  807bf0:	d9800104 	addi	r6,sp,4
  807bf4:	0807ee00 	call	807ee0 <__ieee754_rem_pio2>
  807bf8:	10c000cc 	andi	r3,r2,3
  807bfc:	01000044 	movi	r4,1
  807c00:	19002a26 	beq	r3,r4,807cac <sin+0x120>
  807c04:	20c01c16 	blt	r4,r3,807c78 <sin+0xec>
  807c08:	18003226 	beq	r3,zero,807cd4 <sin+0x148>
  807c0c:	d8800117 	ldw	r2,4(sp)
  807c10:	da000317 	ldw	r8,12(sp)
  807c14:	d8c00217 	ldw	r3,8(sp)
  807c18:	da400417 	ldw	r9,16(sp)
  807c1c:	1009883a 	mov	r4,r2
  807c20:	180b883a 	mov	r5,r3
  807c24:	480f883a 	mov	r7,r9
  807c28:	400d883a 	mov	r6,r8
  807c2c:	0808a380 	call	808a38 <__kernel_cos>
  807c30:	000d883a 	mov	r6,zero
  807c34:	01e00034 	movhi	r7,32768
  807c38:	39c00004 	addi	r7,r7,0
  807c3c:	3084f03a 	xor	r2,r6,r2
  807c40:	19c6f03a 	xor	r3,r3,r7
  807c44:	003fe206 	br	807bd0 <sin+0x44>
  807c48:	4009883a 	mov	r4,r8
  807c4c:	500d883a 	mov	r6,r10
  807c50:	000f883a 	mov	r7,zero
  807c54:	d8000015 	stw	zero,0(sp)
  807c58:	0809c080 	call	809c08 <__kernel_sin>
  807c5c:	100d883a 	mov	r6,r2
  807c60:	180f883a 	mov	r7,r3
  807c64:	3807883a 	mov	r3,r7
  807c68:	3005883a 	mov	r2,r6
  807c6c:	dfc00517 	ldw	ra,20(sp)
  807c70:	dec00604 	addi	sp,sp,24
  807c74:	f800283a 	ret
  807c78:	00800084 	movi	r2,2
  807c7c:	18bfe31e 	bne	r3,r2,807c0c <sin+0x80>
  807c80:	d8800117 	ldw	r2,4(sp)
  807c84:	da000317 	ldw	r8,12(sp)
  807c88:	d8c00217 	ldw	r3,8(sp)
  807c8c:	da400417 	ldw	r9,16(sp)
  807c90:	d9000015 	stw	r4,0(sp)
  807c94:	180b883a 	mov	r5,r3
  807c98:	480f883a 	mov	r7,r9
  807c9c:	1009883a 	mov	r4,r2
  807ca0:	400d883a 	mov	r6,r8
  807ca4:	0809c080 	call	809c08 <__kernel_sin>
  807ca8:	003fe106 	br	807c30 <sin+0xa4>
  807cac:	d8800117 	ldw	r2,4(sp)
  807cb0:	da000317 	ldw	r8,12(sp)
  807cb4:	d8c00217 	ldw	r3,8(sp)
  807cb8:	da400417 	ldw	r9,16(sp)
  807cbc:	1009883a 	mov	r4,r2
  807cc0:	180b883a 	mov	r5,r3
  807cc4:	480f883a 	mov	r7,r9
  807cc8:	400d883a 	mov	r6,r8
  807ccc:	0808a380 	call	808a38 <__kernel_cos>
  807cd0:	003fe206 	br	807c5c <sin+0xd0>
  807cd4:	d8800117 	ldw	r2,4(sp)
  807cd8:	da000317 	ldw	r8,12(sp)
  807cdc:	d8c00217 	ldw	r3,8(sp)
  807ce0:	da400417 	ldw	r9,16(sp)
  807ce4:	d9000015 	stw	r4,0(sp)
  807ce8:	180b883a 	mov	r5,r3
  807cec:	480f883a 	mov	r7,r9
  807cf0:	1009883a 	mov	r4,r2
  807cf4:	400d883a 	mov	r6,r8
  807cf8:	003fd706 	br	807c58 <sin+0xcc>

00807cfc <roundf>:
  807cfc:	209fe02c 	andhi	r2,r4,32640
  807d00:	1005d5fa 	srai	r2,r2,23
  807d04:	deffff04 	addi	sp,sp,-4
  807d08:	00c00584 	movi	r3,22
  807d0c:	11bfe044 	addi	r6,r2,-127
  807d10:	dfc00015 	stw	ra,0(sp)
  807d14:	200f883a 	mov	r7,r4
  807d18:	19801216 	blt	r3,r6,807d64 <roundf+0x68>
  807d1c:	00802034 	movhi	r2,128
  807d20:	10bfffc4 	addi	r2,r2,-1
  807d24:	1189d83a 	sra	r4,r2,r6
  807d28:	30001816 	blt	r6,zero,807d8c <roundf+0x90>
  807d2c:	00801034 	movhi	r2,64
  807d30:	10800004 	addi	r2,r2,0
  807d34:	1185d83a 	sra	r2,r2,r6
  807d38:	0106303a 	nor	r3,zero,r4
  807d3c:	3811883a 	mov	r8,r7
  807d40:	3908703a 	and	r4,r7,r4
  807d44:	388f883a 	add	r7,r7,r2
  807d48:	38ce703a 	and	r7,r7,r3
  807d4c:	20000126 	beq	r4,zero,807d54 <roundf+0x58>
  807d50:	3811883a 	mov	r8,r7
  807d54:	4005883a 	mov	r2,r8
  807d58:	dfc00017 	ldw	ra,0(sp)
  807d5c:	dec00104 	addi	sp,sp,4
  807d60:	f800283a 	ret
  807d64:	00802004 	movi	r2,128
  807d68:	200b883a 	mov	r5,r4
  807d6c:	2011883a 	mov	r8,r4
  807d70:	30bff81e 	bne	r6,r2,807d54 <roundf+0x58>
  807d74:	080a5dc0 	call	80a5dc <__addsf3>
  807d78:	1011883a 	mov	r8,r2
  807d7c:	4005883a 	mov	r2,r8
  807d80:	dfc00017 	ldw	ra,0(sp)
  807d84:	dec00104 	addi	sp,sp,4
  807d88:	f800283a 	ret
  807d8c:	00bfffc4 	movi	r2,-1
  807d90:	39e0002c 	andhi	r7,r7,32768
  807d94:	30bfee1e 	bne	r6,r2,807d50 <roundf+0x54>
  807d98:	39cfe034 	orhi	r7,r7,16256
  807d9c:	3811883a 	mov	r8,r7
  807da0:	003fec06 	br	807d54 <roundf+0x58>

00807da4 <sqrt>:
  807da4:	defff104 	addi	sp,sp,-60
  807da8:	dc000d15 	stw	r16,52(sp)
  807dac:	dc400c15 	stw	r17,48(sp)
  807db0:	dc800b15 	stw	r18,44(sp)
  807db4:	dcc00a15 	stw	r19,40(sp)
  807db8:	dd000915 	stw	r20,36(sp)
  807dbc:	dfc00e15 	stw	ra,56(sp)
  807dc0:	2025883a 	mov	r18,r4
  807dc4:	2827883a 	mov	r19,r5
  807dc8:	080871c0 	call	80871c <__ieee754_sqrt>
  807dcc:	d5200017 	ldw	r20,-32768(gp)
  807dd0:	1021883a 	mov	r16,r2
  807dd4:	00bfffc4 	movi	r2,-1
  807dd8:	1823883a 	mov	r17,r3
  807ddc:	a0800426 	beq	r20,r2,807df0 <sqrt+0x4c>
  807de0:	9009883a 	mov	r4,r18
  807de4:	980b883a 	mov	r5,r19
  807de8:	080a1500 	call	80a150 <isnan>
  807dec:	10000c26 	beq	r2,zero,807e20 <sqrt+0x7c>
  807df0:	8009883a 	mov	r4,r16
  807df4:	880b883a 	mov	r5,r17
  807df8:	2807883a 	mov	r3,r5
  807dfc:	2005883a 	mov	r2,r4
  807e00:	dfc00e17 	ldw	ra,56(sp)
  807e04:	dc000d17 	ldw	r16,52(sp)
  807e08:	dc400c17 	ldw	r17,48(sp)
  807e0c:	dc800b17 	ldw	r18,44(sp)
  807e10:	dcc00a17 	ldw	r19,40(sp)
  807e14:	dd000917 	ldw	r20,36(sp)
  807e18:	dec00f04 	addi	sp,sp,60
  807e1c:	f800283a 	ret
  807e20:	000d883a 	mov	r6,zero
  807e24:	000f883a 	mov	r7,zero
  807e28:	9009883a 	mov	r4,r18
  807e2c:	980b883a 	mov	r5,r19
  807e30:	080ba9c0 	call	80ba9c <__ltdf2>
  807e34:	103fee0e 	bge	r2,zero,807df0 <sqrt+0x4c>
  807e38:	01000044 	movi	r4,1
  807e3c:	014020b4 	movhi	r5,130
  807e40:	29668b04 	addi	r5,r5,-26068
  807e44:	d9000015 	stw	r4,0(sp)
  807e48:	d9400115 	stw	r5,4(sp)
  807e4c:	dc800215 	stw	r18,8(sp)
  807e50:	dcc00315 	stw	r19,12(sp)
  807e54:	d8000815 	stw	zero,32(sp)
  807e58:	dc800415 	stw	r18,16(sp)
  807e5c:	dcc00515 	stw	r19,20(sp)
  807e60:	a0001426 	beq	r20,zero,807eb4 <sqrt+0x110>
  807e64:	0009883a 	mov	r4,zero
  807e68:	000d883a 	mov	r6,zero
  807e6c:	000b883a 	mov	r5,zero
  807e70:	000f883a 	mov	r7,zero
  807e74:	080b61c0 	call	80b61c <__divdf3>
  807e78:	d8c00715 	stw	r3,28(sp)
  807e7c:	d8800615 	stw	r2,24(sp)
  807e80:	d0e00017 	ldw	r3,-32768(gp)
  807e84:	00800084 	movi	r2,2
  807e88:	18800d26 	beq	r3,r2,807ec0 <sqrt+0x11c>
  807e8c:	d809883a 	mov	r4,sp
  807e90:	080a1840 	call	80a184 <matherr>
  807e94:	10000a26 	beq	r2,zero,807ec0 <sqrt+0x11c>
  807e98:	d8800817 	ldw	r2,32(sp)
  807e9c:	10000c1e 	bne	r2,zero,807ed0 <sqrt+0x12c>
  807ea0:	d8800617 	ldw	r2,24(sp)
  807ea4:	d8c00717 	ldw	r3,28(sp)
  807ea8:	1009883a 	mov	r4,r2
  807eac:	180b883a 	mov	r5,r3
  807eb0:	003fd106 	br	807df8 <sqrt+0x54>
  807eb4:	d8000615 	stw	zero,24(sp)
  807eb8:	d8000715 	stw	zero,28(sp)
  807ebc:	003ff006 	br	807e80 <sqrt+0xdc>
  807ec0:	080c8640 	call	80c864 <__errno>
  807ec4:	00c00844 	movi	r3,33
  807ec8:	10c00015 	stw	r3,0(r2)
  807ecc:	003ff206 	br	807e98 <sqrt+0xf4>
  807ed0:	080c8640 	call	80c864 <__errno>
  807ed4:	d8c00817 	ldw	r3,32(sp)
  807ed8:	10c00015 	stw	r3,0(r2)
  807edc:	003ff006 	br	807ea0 <sqrt+0xfc>

00807ee0 <__ieee754_rem_pio2>:
  807ee0:	deffe304 	addi	sp,sp,-116
  807ee4:	00a00034 	movhi	r2,32768
  807ee8:	10bfffc4 	addi	r2,r2,-1
  807eec:	dd801415 	stw	r22,80(sp)
  807ef0:	28ac703a 	and	r22,r5,r2
  807ef4:	008ffa74 	movhi	r2,16361
  807ef8:	10887ec4 	addi	r2,r2,8699
  807efc:	df001b15 	stw	fp,108(sp)
  807f00:	ddc01315 	stw	r23,76(sp)
  807f04:	dfc01c15 	stw	ra,112(sp)
  807f08:	dc001a15 	stw	r16,104(sp)
  807f0c:	dc401915 	stw	r17,100(sp)
  807f10:	dc801815 	stw	r18,96(sp)
  807f14:	dcc01715 	stw	r19,92(sp)
  807f18:	dd001615 	stw	r20,88(sp)
  807f1c:	dd401515 	stw	r21,84(sp)
  807f20:	2839883a 	mov	fp,r5
  807f24:	302f883a 	mov	r23,r6
  807f28:	15801216 	blt	r2,r22,807f74 <__ieee754_rem_pio2+0x94>
  807f2c:	000d883a 	mov	r6,zero
  807f30:	b9000015 	stw	r4,0(r23)
  807f34:	b9400115 	stw	r5,4(r23)
  807f38:	b8000315 	stw	zero,12(r23)
  807f3c:	b8000215 	stw	zero,8(r23)
  807f40:	3005883a 	mov	r2,r6
  807f44:	dfc01c17 	ldw	ra,112(sp)
  807f48:	df001b17 	ldw	fp,108(sp)
  807f4c:	dc001a17 	ldw	r16,104(sp)
  807f50:	dc401917 	ldw	r17,100(sp)
  807f54:	dc801817 	ldw	r18,96(sp)
  807f58:	dcc01717 	ldw	r19,92(sp)
  807f5c:	dd001617 	ldw	r20,88(sp)
  807f60:	dd401517 	ldw	r21,84(sp)
  807f64:	dd801417 	ldw	r22,80(sp)
  807f68:	ddc01317 	ldw	r23,76(sp)
  807f6c:	dec01d04 	addi	sp,sp,116
  807f70:	f800283a 	ret
  807f74:	009000f4 	movhi	r2,16387
  807f78:	10b65ec4 	addi	r2,r2,-9861
  807f7c:	15802616 	blt	r2,r22,808018 <__ieee754_rem_pio2+0x138>
  807f80:	0141a10e 	bge	zero,r5,808608 <__ieee754_rem_pio2+0x728>
  807f84:	04151034 	movhi	r16,21568
  807f88:	84000004 	addi	r16,r16,0
  807f8c:	044ffe74 	movhi	r17,16377
  807f90:	8c487ec4 	addi	r17,r17,8699
  807f94:	800d883a 	mov	r6,r16
  807f98:	880f883a 	mov	r7,r17
  807f9c:	080b1a40 	call	80b1a4 <__subdf3>
  807fa0:	1025883a 	mov	r18,r2
  807fa4:	1827883a 	mov	r19,r3
  807fa8:	b4410626 	beq	r22,r17,8083c4 <__ieee754_rem_pio2+0x4e4>
  807fac:	040698b4 	movhi	r16,6754
  807fb0:	8418cc44 	addi	r16,r16,25393
  807fb4:	044f7474 	movhi	r17,15825
  807fb8:	8c6d1844 	addi	r17,r17,-19359
  807fbc:	1009883a 	mov	r4,r2
  807fc0:	180b883a 	mov	r5,r3
  807fc4:	800d883a 	mov	r6,r16
  807fc8:	880f883a 	mov	r7,r17
  807fcc:	080b1a40 	call	80b1a4 <__subdf3>
  807fd0:	100d883a 	mov	r6,r2
  807fd4:	180f883a 	mov	r7,r3
  807fd8:	9009883a 	mov	r4,r18
  807fdc:	980b883a 	mov	r5,r19
  807fe0:	b8800015 	stw	r2,0(r23)
  807fe4:	b8c00115 	stw	r3,4(r23)
  807fe8:	080b1a40 	call	80b1a4 <__subdf3>
  807fec:	1011883a 	mov	r8,r2
  807ff0:	800d883a 	mov	r6,r16
  807ff4:	1813883a 	mov	r9,r3
  807ff8:	880f883a 	mov	r7,r17
  807ffc:	480b883a 	mov	r5,r9
  808000:	4009883a 	mov	r4,r8
  808004:	080b1a40 	call	80b1a4 <__subdf3>
  808008:	01800044 	movi	r6,1
  80800c:	b8c00315 	stw	r3,12(r23)
  808010:	b8800215 	stw	r2,8(r23)
  808014:	003fca06 	br	807f40 <__ieee754_rem_pio2+0x60>
  808018:	00904e74 	movhi	r2,16697
  80801c:	10887ec4 	addi	r2,r2,8699
  808020:	15800c0e 	bge	r2,r22,808054 <__ieee754_rem_pio2+0x174>
  808024:	009ffc34 	movhi	r2,32752
  808028:	10bfffc4 	addi	r2,r2,-1
  80802c:	1581050e 	bge	r2,r22,808444 <__ieee754_rem_pio2+0x564>
  808030:	200d883a 	mov	r6,r4
  808034:	280f883a 	mov	r7,r5
  808038:	080b1a40 	call	80b1a4 <__subdf3>
  80803c:	000d883a 	mov	r6,zero
  808040:	b8c00115 	stw	r3,4(r23)
  808044:	b8800015 	stw	r2,0(r23)
  808048:	b8800215 	stw	r2,8(r23)
  80804c:	b8c00315 	stw	r3,12(r23)
  808050:	003fbb06 	br	807f40 <__ieee754_rem_pio2+0x60>
  808054:	0809f280 	call	809f28 <fabs>
  808058:	d8800a15 	stw	r2,40(sp)
  80805c:	d9000a17 	ldw	r4,40(sp)
  808060:	021b72b4 	movhi	r8,28106
  808064:	423220c4 	addi	r8,r8,-14205
  808068:	024ff934 	movhi	r9,16356
  80806c:	4a57cc04 	addi	r9,r9,24368
  808070:	480f883a 	mov	r7,r9
  808074:	400d883a 	mov	r6,r8
  808078:	180b883a 	mov	r5,r3
  80807c:	d8c00b15 	stw	r3,44(sp)
  808080:	080b21c0 	call	80b21c <__muldf3>
  808084:	0011883a 	mov	r8,zero
  808088:	024ff834 	movhi	r9,16352
  80808c:	4a400004 	addi	r9,r9,0
  808090:	480f883a 	mov	r7,r9
  808094:	400d883a 	mov	r6,r8
  808098:	180b883a 	mov	r5,r3
  80809c:	1009883a 	mov	r4,r2
  8080a0:	080b1380 	call	80b138 <__adddf3>
  8080a4:	180b883a 	mov	r5,r3
  8080a8:	1009883a 	mov	r4,r2
  8080ac:	080bbf80 	call	80bbf8 <__fixdfsi>
  8080b0:	1009883a 	mov	r4,r2
  8080b4:	d8801015 	stw	r2,64(sp)
  8080b8:	080bb280 	call	80bb28 <__floatsidf>
  8080bc:	1823883a 	mov	r17,r3
  8080c0:	1009883a 	mov	r4,r2
  8080c4:	d8800e15 	stw	r2,56(sp)
  8080c8:	00cffe74 	movhi	r3,16377
  8080cc:	18c87ec4 	addi	r3,r3,8699
  8080d0:	00951034 	movhi	r2,21568
  8080d4:	10800004 	addi	r2,r2,0
  8080d8:	180f883a 	mov	r7,r3
  8080dc:	880b883a 	mov	r5,r17
  8080e0:	100d883a 	mov	r6,r2
  8080e4:	dc400f15 	stw	r17,60(sp)
  8080e8:	080b21c0 	call	80b21c <__muldf3>
  8080ec:	d9400b17 	ldw	r5,44(sp)
  8080f0:	d9000a17 	ldw	r4,40(sp)
  8080f4:	180f883a 	mov	r7,r3
  8080f8:	100d883a 	mov	r6,r2
  8080fc:	080b1a40 	call	80b1a4 <__subdf3>
  808100:	d9000e17 	ldw	r4,56(sp)
  808104:	020698b4 	movhi	r8,6754
  808108:	4218cc44 	addi	r8,r8,25393
  80810c:	024f7474 	movhi	r9,15825
  808110:	4a6d1844 	addi	r9,r9,-19359
  808114:	480f883a 	mov	r7,r9
  808118:	400d883a 	mov	r6,r8
  80811c:	880b883a 	mov	r5,r17
  808120:	1025883a 	mov	r18,r2
  808124:	1827883a 	mov	r19,r3
  808128:	080b21c0 	call	80b21c <__muldf3>
  80812c:	1811883a 	mov	r8,r3
  808130:	d8c01017 	ldw	r3,64(sp)
  808134:	100f883a 	mov	r7,r2
  808138:	008007c4 	movi	r2,31
  80813c:	dc800c15 	stw	r18,48(sp)
  808140:	d9c00815 	stw	r7,32(sp)
  808144:	dcc00d15 	stw	r19,52(sp)
  808148:	da000915 	stw	r8,36(sp)
  80814c:	10c10f0e 	bge	r2,r3,80858c <__ieee754_rem_pio2+0x6ac>
  808150:	d9000c17 	ldw	r4,48(sp)
  808154:	d9400d17 	ldw	r5,52(sp)
  808158:	d9800817 	ldw	r6,32(sp)
  80815c:	d9c00917 	ldw	r7,36(sp)
  808160:	b02dd53a 	srai	r22,r22,20
  808164:	080b1a40 	call	80b1a4 <__subdf3>
  808168:	1009883a 	mov	r4,r2
  80816c:	1804d53a 	srli	r2,r3,20
  808170:	1811883a 	mov	r8,r3
  808174:	1081ffcc 	andi	r2,r2,2047
  808178:	b0a1c83a 	sub	r16,r22,r2
  80817c:	00800404 	movi	r2,16
  808180:	14010d0e 	bge	r2,r16,8085b8 <__ieee754_rem_pio2+0x6d8>
  808184:	d9000e17 	ldw	r4,56(sp)
  808188:	d9400f17 	ldw	r5,60(sp)
  80818c:	00869834 	movhi	r2,6752
  808190:	10800004 	addi	r2,r2,0
  808194:	00cf7474 	movhi	r3,15825
  808198:	18ed1844 	addi	r3,r3,-19359
  80819c:	180f883a 	mov	r7,r3
  8081a0:	100d883a 	mov	r6,r2
  8081a4:	080b21c0 	call	80b21c <__muldf3>
  8081a8:	1025883a 	mov	r18,r2
  8081ac:	d8800815 	stw	r2,32(sp)
  8081b0:	d8800d17 	ldw	r2,52(sp)
  8081b4:	d9000c17 	ldw	r4,48(sp)
  8081b8:	1827883a 	mov	r19,r3
  8081bc:	100b883a 	mov	r5,r2
  8081c0:	900d883a 	mov	r6,r18
  8081c4:	980f883a 	mov	r7,r19
  8081c8:	d9000a15 	stw	r4,40(sp)
  8081cc:	d8800b15 	stw	r2,44(sp)
  8081d0:	d8c00915 	stw	r3,36(sp)
  8081d4:	080b1a40 	call	80b1a4 <__subdf3>
  8081d8:	d9000e17 	ldw	r4,56(sp)
  8081dc:	d9400f17 	ldw	r5,60(sp)
  8081e0:	050b80f4 	movhi	r20,11779
  8081e4:	a51c1cc4 	addi	r20,r20,28787
  8081e8:	054ee8f4 	movhi	r21,15267
  8081ec:	ad466284 	addi	r21,r21,6538
  8081f0:	a00d883a 	mov	r6,r20
  8081f4:	a80f883a 	mov	r7,r21
  8081f8:	d8801115 	stw	r2,68(sp)
  8081fc:	d8c01215 	stw	r3,72(sp)
  808200:	d8800c15 	stw	r2,48(sp)
  808204:	080b21c0 	call	80b21c <__muldf3>
  808208:	d9001217 	ldw	r4,72(sp)
  80820c:	d9400b17 	ldw	r5,44(sp)
  808210:	d9800c17 	ldw	r6,48(sp)
  808214:	d9000d15 	stw	r4,52(sp)
  808218:	d9c01217 	ldw	r7,72(sp)
  80821c:	d9000a17 	ldw	r4,40(sp)
  808220:	1021883a 	mov	r16,r2
  808224:	1823883a 	mov	r17,r3
  808228:	080b1a40 	call	80b1a4 <__subdf3>
  80822c:	d9800817 	ldw	r6,32(sp)
  808230:	180b883a 	mov	r5,r3
  808234:	980f883a 	mov	r7,r19
  808238:	1009883a 	mov	r4,r2
  80823c:	080b1a40 	call	80b1a4 <__subdf3>
  808240:	180f883a 	mov	r7,r3
  808244:	8009883a 	mov	r4,r16
  808248:	880b883a 	mov	r5,r17
  80824c:	100d883a 	mov	r6,r2
  808250:	080b1a40 	call	80b1a4 <__subdf3>
  808254:	d8800815 	stw	r2,32(sp)
  808258:	d9000c17 	ldw	r4,48(sp)
  80825c:	d9401217 	ldw	r5,72(sp)
  808260:	d9800817 	ldw	r6,32(sp)
  808264:	180f883a 	mov	r7,r3
  808268:	d8c00915 	stw	r3,36(sp)
  80826c:	080b1a40 	call	80b1a4 <__subdf3>
  808270:	1009883a 	mov	r4,r2
  808274:	1804d53a 	srli	r2,r3,20
  808278:	1811883a 	mov	r8,r3
  80827c:	00c00c44 	movi	r3,49
  808280:	1081ffcc 	andi	r2,r2,2047
  808284:	b0a1c83a 	sub	r16,r22,r2
  808288:	1c00cb0e 	bge	r3,r16,8085b8 <__ieee754_rem_pio2+0x6d8>
  80828c:	d9000e17 	ldw	r4,56(sp)
  808290:	d9400f17 	ldw	r5,60(sp)
  808294:	a80f883a 	mov	r7,r21
  808298:	018b8034 	movhi	r6,11776
  80829c:	31800004 	addi	r6,r6,0
  8082a0:	080b21c0 	call	80b21c <__muldf3>
  8082a4:	1827883a 	mov	r19,r3
  8082a8:	1025883a 	mov	r18,r2
  8082ac:	d8c00c17 	ldw	r3,48(sp)
  8082b0:	d8801217 	ldw	r2,72(sp)
  8082b4:	980f883a 	mov	r7,r19
  8082b8:	900d883a 	mov	r6,r18
  8082bc:	1809883a 	mov	r4,r3
  8082c0:	100b883a 	mov	r5,r2
  8082c4:	d8c00a15 	stw	r3,40(sp)
  8082c8:	dc800815 	stw	r18,32(sp)
  8082cc:	dcc00915 	stw	r19,36(sp)
  8082d0:	d8800b15 	stw	r2,44(sp)
  8082d4:	080b1a40 	call	80b1a4 <__subdf3>
  8082d8:	d9400f17 	ldw	r5,60(sp)
  8082dc:	d9000e17 	ldw	r4,56(sp)
  8082e0:	02094834 	movhi	r8,9504
  8082e4:	42127044 	addi	r8,r8,18881
  8082e8:	024e5f34 	movhi	r9,14716
  8082ec:	4a60e684 	addi	r9,r9,-31846
  8082f0:	400d883a 	mov	r6,r8
  8082f4:	480f883a 	mov	r7,r9
  8082f8:	182b883a 	mov	r21,r3
  8082fc:	d8800c15 	stw	r2,48(sp)
  808300:	080b21c0 	call	80b21c <__muldf3>
  808304:	d9000a17 	ldw	r4,40(sp)
  808308:	d9401217 	ldw	r5,72(sp)
  80830c:	d9800c17 	ldw	r6,48(sp)
  808310:	a80f883a 	mov	r7,r21
  808314:	1021883a 	mov	r16,r2
  808318:	1823883a 	mov	r17,r3
  80831c:	dd400d15 	stw	r21,52(sp)
  808320:	080b1a40 	call	80b1a4 <__subdf3>
  808324:	d9800817 	ldw	r6,32(sp)
  808328:	180b883a 	mov	r5,r3
  80832c:	980f883a 	mov	r7,r19
  808330:	1009883a 	mov	r4,r2
  808334:	080b1a40 	call	80b1a4 <__subdf3>
  808338:	180f883a 	mov	r7,r3
  80833c:	880b883a 	mov	r5,r17
  808340:	8009883a 	mov	r4,r16
  808344:	100d883a 	mov	r6,r2
  808348:	080b1a40 	call	80b1a4 <__subdf3>
  80834c:	d9000c17 	ldw	r4,48(sp)
  808350:	1011883a 	mov	r8,r2
  808354:	d8800815 	stw	r2,32(sp)
  808358:	d8c00915 	stw	r3,36(sp)
  80835c:	a80b883a 	mov	r5,r21
  808360:	180f883a 	mov	r7,r3
  808364:	400d883a 	mov	r6,r8
  808368:	080b1a40 	call	80b1a4 <__subdf3>
  80836c:	1009883a 	mov	r4,r2
  808370:	b8c00115 	stw	r3,4(r23)
  808374:	b9000015 	stw	r4,0(r23)
  808378:	bc800017 	ldw	r18,0(r23)
  80837c:	bcc00117 	ldw	r19,4(r23)
  808380:	d9400d17 	ldw	r5,52(sp)
  808384:	d9000c17 	ldw	r4,48(sp)
  808388:	900d883a 	mov	r6,r18
  80838c:	980f883a 	mov	r7,r19
  808390:	080b1a40 	call	80b1a4 <__subdf3>
  808394:	d9c00917 	ldw	r7,36(sp)
  808398:	d9800817 	ldw	r6,32(sp)
  80839c:	1009883a 	mov	r4,r2
  8083a0:	180b883a 	mov	r5,r3
  8083a4:	080b1a40 	call	80b1a4 <__subdf3>
  8083a8:	1009883a 	mov	r4,r2
  8083ac:	180f883a 	mov	r7,r3
  8083b0:	e0008316 	blt	fp,zero,8085c0 <__ieee754_rem_pio2+0x6e0>
  8083b4:	d9801017 	ldw	r6,64(sp)
  8083b8:	b8c00315 	stw	r3,12(r23)
  8083bc:	b8800215 	stw	r2,8(r23)
  8083c0:	003edf06 	br	807f40 <__ieee754_rem_pio2+0x60>
  8083c4:	00869834 	movhi	r2,6752
  8083c8:	10800004 	addi	r2,r2,0
  8083cc:	00cf7474 	movhi	r3,15825
  8083d0:	18ed1844 	addi	r3,r3,-19359
  8083d4:	9009883a 	mov	r4,r18
  8083d8:	980b883a 	mov	r5,r19
  8083dc:	180f883a 	mov	r7,r3
  8083e0:	100d883a 	mov	r6,r2
  8083e4:	080b1a40 	call	80b1a4 <__subdf3>
  8083e8:	048b80f4 	movhi	r18,11779
  8083ec:	949c1cc4 	addi	r18,r18,28787
  8083f0:	04cee8f4 	movhi	r19,15267
  8083f4:	9cc66284 	addi	r19,r19,6538
  8083f8:	1009883a 	mov	r4,r2
  8083fc:	180b883a 	mov	r5,r3
  808400:	900d883a 	mov	r6,r18
  808404:	980f883a 	mov	r7,r19
  808408:	1021883a 	mov	r16,r2
  80840c:	1823883a 	mov	r17,r3
  808410:	080b1a40 	call	80b1a4 <__subdf3>
  808414:	100d883a 	mov	r6,r2
  808418:	180f883a 	mov	r7,r3
  80841c:	8009883a 	mov	r4,r16
  808420:	880b883a 	mov	r5,r17
  808424:	b8800015 	stw	r2,0(r23)
  808428:	b8c00115 	stw	r3,4(r23)
  80842c:	080b1a40 	call	80b1a4 <__subdf3>
  808430:	1011883a 	mov	r8,r2
  808434:	900d883a 	mov	r6,r18
  808438:	1813883a 	mov	r9,r3
  80843c:	980f883a 	mov	r7,r19
  808440:	003eee06 	br	807ffc <__ieee754_rem_pio2+0x11c>
  808444:	b00dd53a 	srai	r6,r22,20
  808448:	dc400204 	addi	r17,sp,8
  80844c:	2029883a 	mov	r20,r4
  808450:	34fefa84 	addi	r19,r6,-1046
  808454:	980c953a 	slli	r6,r19,20
  808458:	0021883a 	mov	r16,zero
  80845c:	8825883a 	mov	r18,r17
  808460:	b18dc83a 	sub	r6,r22,r6
  808464:	302b883a 	mov	r21,r6
  808468:	05800044 	movi	r22,1
  80846c:	a80b883a 	mov	r5,r21
  808470:	a009883a 	mov	r4,r20
  808474:	080bbf80 	call	80bbf8 <__fixdfsi>
  808478:	1009883a 	mov	r4,r2
  80847c:	080bb280 	call	80bb28 <__floatsidf>
  808480:	a80b883a 	mov	r5,r21
  808484:	a009883a 	mov	r4,r20
  808488:	100d883a 	mov	r6,r2
  80848c:	180f883a 	mov	r7,r3
  808490:	90800015 	stw	r2,0(r18)
  808494:	90c00115 	stw	r3,4(r18)
  808498:	080b1a40 	call	80b1a4 <__subdf3>
  80849c:	0011883a 	mov	r8,zero
  8084a0:	02505c34 	movhi	r9,16752
  8084a4:	4a400004 	addi	r9,r9,0
  8084a8:	180b883a 	mov	r5,r3
  8084ac:	480f883a 	mov	r7,r9
  8084b0:	1009883a 	mov	r4,r2
  8084b4:	400d883a 	mov	r6,r8
  8084b8:	080b21c0 	call	80b21c <__muldf3>
  8084bc:	84000044 	addi	r16,r16,1
  8084c0:	1029883a 	mov	r20,r2
  8084c4:	94800204 	addi	r18,r18,8
  8084c8:	182b883a 	mov	r21,r3
  8084cc:	b43fe70e 	bge	r22,r16,80846c <__ieee754_rem_pio2+0x58c>
  8084d0:	d8800615 	stw	r2,24(sp)
  8084d4:	d8c00715 	stw	r3,28(sp)
  8084d8:	8c000404 	addi	r16,r17,16
  8084dc:	048000c4 	movi	r18,3
  8084e0:	00000206 	br	8084ec <__ieee754_rem_pio2+0x60c>
  8084e4:	94bfffc4 	addi	r18,r18,-1
  8084e8:	843ffe04 	addi	r16,r16,-8
  8084ec:	80800017 	ldw	r2,0(r16)
  8084f0:	80c00117 	ldw	r3,4(r16)
  8084f4:	000d883a 	mov	r6,zero
  8084f8:	000f883a 	mov	r7,zero
  8084fc:	180b883a 	mov	r5,r3
  808500:	1009883a 	mov	r4,r2
  808504:	080b86c0 	call	80b86c <__eqdf2>
  808508:	103ff626 	beq	r2,zero,8084e4 <__ieee754_rem_pio2+0x604>
  80850c:	980d883a 	mov	r6,r19
  808510:	00800084 	movi	r2,2
  808514:	00c020b4 	movhi	r3,130
  808518:	18e68d04 	addi	r3,r3,-26060
  80851c:	900f883a 	mov	r7,r18
  808520:	d9000204 	addi	r4,sp,8
  808524:	b80b883a 	mov	r5,r23
  808528:	d8800015 	stw	r2,0(sp)
  80852c:	d8c00115 	stw	r3,4(sp)
  808530:	0808e180 	call	808e18 <__kernel_rem_pio2>
  808534:	d8801015 	stw	r2,64(sp)
  808538:	100d883a 	mov	r6,r2
  80853c:	e03e800e 	bge	fp,zero,807f40 <__ieee754_rem_pio2+0x60>
  808540:	ba800217 	ldw	r10,8(r23)
  808544:	bb000017 	ldw	r12,0(r23)
  808548:	0005883a 	mov	r2,zero
  80854c:	bb400117 	ldw	r13,4(r23)
  808550:	bac00317 	ldw	r11,12(r23)
  808554:	1290f03a 	xor	r8,r2,r10
  808558:	d8801017 	ldw	r2,64(sp)
  80855c:	0009883a 	mov	r4,zero
  808560:	01600034 	movhi	r5,32768
  808564:	29400004 	addi	r5,r5,0
  808568:	230cf03a 	xor	r6,r4,r12
  80856c:	5952f03a 	xor	r9,r11,r5
  808570:	694ef03a 	xor	r7,r13,r5
  808574:	b9800015 	stw	r6,0(r23)
  808578:	008dc83a 	sub	r6,zero,r2
  80857c:	ba400315 	stw	r9,12(r23)
  808580:	b9c00115 	stw	r7,4(r23)
  808584:	ba000215 	stw	r8,8(r23)
  808588:	003e6d06 	br	807f40 <__ieee754_rem_pio2+0x60>
  80858c:	180490ba 	slli	r2,r3,2
  808590:	00c020b4 	movhi	r3,130
  808594:	18e6ce04 	addi	r3,r3,-25800
  808598:	10c5883a 	add	r2,r2,r3
  80859c:	11000017 	ldw	r4,0(r2)
  8085a0:	25beeb26 	beq	r4,r22,808150 <__ieee754_rem_pio2+0x270>
  8085a4:	d9800817 	ldw	r6,32(sp)
  8085a8:	980b883a 	mov	r5,r19
  8085ac:	400f883a 	mov	r7,r8
  8085b0:	9009883a 	mov	r4,r18
  8085b4:	003f6c06 	br	808368 <__ieee754_rem_pio2+0x488>
  8085b8:	ba000115 	stw	r8,4(r23)
  8085bc:	003f6d06 	br	808374 <__ieee754_rem_pio2+0x494>
  8085c0:	00e00034 	movhi	r3,32768
  8085c4:	18c00004 	addi	r3,r3,0
  8085c8:	38d2f03a 	xor	r9,r7,r3
  8085cc:	98cef03a 	xor	r7,r19,r3
  8085d0:	380b883a 	mov	r5,r7
  8085d4:	d9c01017 	ldw	r7,64(sp)
  8085d8:	0005883a 	mov	r2,zero
  8085dc:	2015883a 	mov	r10,r4
  8085e0:	148cf03a 	xor	r6,r2,r18
  8085e4:	0009883a 	mov	r4,zero
  8085e8:	2290f03a 	xor	r8,r4,r10
  8085ec:	3009883a 	mov	r4,r6
  8085f0:	01cdc83a 	sub	r6,zero,r7
  8085f4:	ba400315 	stw	r9,12(r23)
  8085f8:	b9400115 	stw	r5,4(r23)
  8085fc:	b9000015 	stw	r4,0(r23)
  808600:	ba000215 	stw	r8,8(r23)
  808604:	003e4e06 	br	807f40 <__ieee754_rem_pio2+0x60>
  808608:	04151034 	movhi	r16,21568
  80860c:	84000004 	addi	r16,r16,0
  808610:	044ffe74 	movhi	r17,16377
  808614:	8c487ec4 	addi	r17,r17,8699
  808618:	800d883a 	mov	r6,r16
  80861c:	880f883a 	mov	r7,r17
  808620:	080b1380 	call	80b138 <__adddf3>
  808624:	1025883a 	mov	r18,r2
  808628:	1827883a 	mov	r19,r3
  80862c:	b4401b26 	beq	r22,r17,80869c <__ieee754_rem_pio2+0x7bc>
  808630:	040698b4 	movhi	r16,6754
  808634:	8418cc44 	addi	r16,r16,25393
  808638:	044f7474 	movhi	r17,15825
  80863c:	8c6d1844 	addi	r17,r17,-19359
  808640:	1009883a 	mov	r4,r2
  808644:	180b883a 	mov	r5,r3
  808648:	800d883a 	mov	r6,r16
  80864c:	880f883a 	mov	r7,r17
  808650:	080b1380 	call	80b138 <__adddf3>
  808654:	100d883a 	mov	r6,r2
  808658:	180f883a 	mov	r7,r3
  80865c:	9009883a 	mov	r4,r18
  808660:	980b883a 	mov	r5,r19
  808664:	b8800015 	stw	r2,0(r23)
  808668:	b8c00115 	stw	r3,4(r23)
  80866c:	080b1a40 	call	80b1a4 <__subdf3>
  808670:	1011883a 	mov	r8,r2
  808674:	800d883a 	mov	r6,r16
  808678:	1813883a 	mov	r9,r3
  80867c:	880f883a 	mov	r7,r17
  808680:	480b883a 	mov	r5,r9
  808684:	4009883a 	mov	r4,r8
  808688:	080b1380 	call	80b138 <__adddf3>
  80868c:	01bfffc4 	movi	r6,-1
  808690:	b8c00315 	stw	r3,12(r23)
  808694:	b8800215 	stw	r2,8(r23)
  808698:	003e2906 	br	807f40 <__ieee754_rem_pio2+0x60>
  80869c:	00869834 	movhi	r2,6752
  8086a0:	10800004 	addi	r2,r2,0
  8086a4:	00cf7474 	movhi	r3,15825
  8086a8:	18ed1844 	addi	r3,r3,-19359
  8086ac:	9009883a 	mov	r4,r18
  8086b0:	980b883a 	mov	r5,r19
  8086b4:	180f883a 	mov	r7,r3
  8086b8:	100d883a 	mov	r6,r2
  8086bc:	080b1380 	call	80b138 <__adddf3>
  8086c0:	048b80f4 	movhi	r18,11779
  8086c4:	949c1cc4 	addi	r18,r18,28787
  8086c8:	04cee8f4 	movhi	r19,15267
  8086cc:	9cc66284 	addi	r19,r19,6538
  8086d0:	1009883a 	mov	r4,r2
  8086d4:	180b883a 	mov	r5,r3
  8086d8:	900d883a 	mov	r6,r18
  8086dc:	980f883a 	mov	r7,r19
  8086e0:	1021883a 	mov	r16,r2
  8086e4:	1823883a 	mov	r17,r3
  8086e8:	080b1380 	call	80b138 <__adddf3>
  8086ec:	100d883a 	mov	r6,r2
  8086f0:	180f883a 	mov	r7,r3
  8086f4:	8009883a 	mov	r4,r16
  8086f8:	880b883a 	mov	r5,r17
  8086fc:	b8800015 	stw	r2,0(r23)
  808700:	b8c00115 	stw	r3,4(r23)
  808704:	080b1a40 	call	80b1a4 <__subdf3>
  808708:	1011883a 	mov	r8,r2
  80870c:	900d883a 	mov	r6,r18
  808710:	1813883a 	mov	r9,r3
  808714:	980f883a 	mov	r7,r19
  808718:	003fd906 	br	808680 <__ieee754_rem_pio2+0x7a0>

0080871c <__ieee754_sqrt>:
  80871c:	defff804 	addi	sp,sp,-32
  808720:	dc400515 	stw	r17,20(sp)
  808724:	009ffc34 	movhi	r2,32752
  808728:	10800004 	addi	r2,r2,0
  80872c:	2023883a 	mov	r17,r4
  808730:	291ffc2c 	andhi	r4,r5,32752
  808734:	dc000615 	stw	r16,24(sp)
  808738:	dfc00715 	stw	ra,28(sp)
  80873c:	dc800415 	stw	r18,16(sp)
  808740:	dcc00315 	stw	r19,12(sp)
  808744:	dd000215 	stw	r20,8(sp)
  808748:	dd400115 	stw	r21,4(sp)
  80874c:	dd800015 	stw	r22,0(sp)
  808750:	2821883a 	mov	r16,r5
  808754:	880f883a 	mov	r7,r17
  808758:	02600034 	movhi	r9,32768
  80875c:	4a400004 	addi	r9,r9,0
  808760:	20807a26 	beq	r4,r2,80894c <__ieee754_sqrt+0x230>
  808764:	0140990e 	bge	zero,r5,8089cc <__ieee754_sqrt+0x2b0>
  808768:	8025d53a 	srai	r18,r16,20
  80876c:	90006226 	beq	r18,zero,8088f8 <__ieee754_sqrt+0x1dc>
  808770:	94bf0044 	addi	r18,r18,-1023
  808774:	00800434 	movhi	r2,16
  808778:	10bfffc4 	addi	r2,r2,-1
  80877c:	8084703a 	and	r2,r16,r2
  808780:	90c0004c 	andi	r3,r18,1
  808784:	14000434 	orhi	r16,r2,16
  808788:	18000426 	beq	r3,zero,80879c <__ieee754_sqrt+0x80>
  80878c:	3804d7fa 	srli	r2,r7,31
  808790:	39cf883a 	add	r7,r7,r7
  808794:	1405883a 	add	r2,r2,r16
  808798:	80a1883a 	add	r16,r16,r2
  80879c:	3804d7fa 	srli	r2,r7,31
  8087a0:	9025d07a 	srai	r18,r18,1
  8087a4:	39cf883a 	add	r7,r7,r7
  8087a8:	1405883a 	add	r2,r2,r16
  8087ac:	80a1883a 	add	r16,r16,r2
  8087b0:	0011883a 	mov	r8,zero
  8087b4:	000d883a 	mov	r6,zero
  8087b8:	002b883a 	mov	r21,zero
  8087bc:	002d883a 	mov	r22,zero
  8087c0:	01000834 	movhi	r4,32
  8087c4:	21000004 	addi	r4,r4,0
  8087c8:	3107883a 	add	r3,r6,r4
  8087cc:	3804d7fa 	srli	r2,r7,31
  8087d0:	39cf883a 	add	r7,r7,r7
  8087d4:	80c00316 	blt	r16,r3,8087e4 <__ieee754_sqrt+0xc8>
  8087d8:	80e1c83a 	sub	r16,r16,r3
  8087dc:	b12d883a 	add	r22,r22,r4
  8087e0:	190d883a 	add	r6,r3,r4
  8087e4:	2008d07a 	srli	r4,r4,1
  8087e8:	1405883a 	add	r2,r2,r16
  8087ec:	80a1883a 	add	r16,r16,r2
  8087f0:	203ff51e 	bne	r4,zero,8087c8 <__ieee754_sqrt+0xac>
  8087f4:	01200034 	movhi	r4,32768
  8087f8:	21000004 	addi	r4,r4,0
  8087fc:	00000706 	br	80881c <__ieee754_sqrt+0x100>
  808800:	34006c26 	beq	r6,r16,8089b4 <__ieee754_sqrt+0x298>
  808804:	3804d7fa 	srli	r2,r7,31
  808808:	2008d07a 	srli	r4,r4,1
  80880c:	39cf883a 	add	r7,r7,r7
  808810:	1405883a 	add	r2,r2,r16
  808814:	80a1883a 	add	r16,r16,r2
  808818:	20001126 	beq	r4,zero,808860 <__ieee754_sqrt+0x144>
  80881c:	4105883a 	add	r2,r8,r4
  808820:	3007883a 	mov	r3,r6
  808824:	1160002c 	andhi	r5,r2,32768
  808828:	343ff50e 	bge	r6,r16,808800 <__ieee754_sqrt+0xe4>
  80882c:	80e1c83a 	sub	r16,r16,r3
  808830:	a92b883a 	add	r21,r21,r4
  808834:	1111883a 	add	r8,r2,r4
  808838:	2a405b26 	beq	r5,r9,8089a8 <__ieee754_sqrt+0x28c>
  80883c:	3880012e 	bgeu	r7,r2,808844 <__ieee754_sqrt+0x128>
  808840:	843fffc4 	addi	r16,r16,-1
  808844:	388fc83a 	sub	r7,r7,r2
  808848:	3804d7fa 	srli	r2,r7,31
  80884c:	2008d07a 	srli	r4,r4,1
  808850:	39cf883a 	add	r7,r7,r7
  808854:	1405883a 	add	r2,r2,r16
  808858:	80a1883a 	add	r16,r16,r2
  80885c:	203fef1e 	bne	r4,zero,80881c <__ieee754_sqrt+0x100>
  808860:	81c4b03a 	or	r2,r16,r7
  808864:	10001726 	beq	r2,zero,8088c4 <__ieee754_sqrt+0x1a8>
  808868:	024ffc34 	movhi	r9,16368
  80886c:	4a400004 	addi	r9,r9,0
  808870:	0011883a 	mov	r8,zero
  808874:	0021883a 	mov	r16,zero
  808878:	480f883a 	mov	r7,r9
  80887c:	4009883a 	mov	r4,r8
  808880:	480b883a 	mov	r5,r9
  808884:	800d883a 	mov	r6,r16
  808888:	4823883a 	mov	r17,r9
  80888c:	080ba100 	call	80ba10 <__gedf2>
  808890:	10000c16 	blt	r2,zero,8088c4 <__ieee754_sqrt+0x1a8>
  808894:	00bfffc4 	movi	r2,-1
  808898:	0011883a 	mov	r8,zero
  80889c:	a8805e26 	beq	r21,r2,808a18 <__ieee754_sqrt+0x2fc>
  8088a0:	000d883a 	mov	r6,zero
  8088a4:	880f883a 	mov	r7,r17
  8088a8:	4009883a 	mov	r4,r8
  8088ac:	880b883a 	mov	r5,r17
  8088b0:	080b9840 	call	80b984 <__gtdf2>
  8088b4:	00805d0e 	bge	zero,r2,808a2c <__ieee754_sqrt+0x310>
  8088b8:	00bfff84 	movi	r2,-2
  8088bc:	a8805926 	beq	r21,r2,808a24 <__ieee754_sqrt+0x308>
  8088c0:	ad400084 	addi	r21,r21,2
  8088c4:	b005d07a 	srai	r2,r22,1
  8088c8:	00cff834 	movhi	r3,16352
  8088cc:	18c00004 	addi	r3,r3,0
  8088d0:	b100004c 	andi	r4,r22,1
  8088d4:	10e1883a 	add	r16,r2,r3
  8088d8:	a80ed07a 	srli	r7,r21,1
  8088dc:	20000126 	beq	r4,zero,8088e4 <__ieee754_sqrt+0x1c8>
  8088e0:	39e00034 	orhi	r7,r7,32768
  8088e4:	9004953a 	slli	r2,r18,20
  8088e8:	3815883a 	mov	r10,r7
  8088ec:	80a9883a 	add	r20,r16,r2
  8088f0:	a017883a 	mov	r11,r20
  8088f4:	00002006 	br	808978 <__ieee754_sqrt+0x25c>
  8088f8:	8000051e 	bne	r16,zero,808910 <__ieee754_sqrt+0x1f4>
  8088fc:	3804d2fa 	srli	r2,r7,11
  808900:	94bffac4 	addi	r18,r18,-21
  808904:	380e957a 	slli	r7,r7,21
  808908:	80a0b03a 	or	r16,r16,r2
  80890c:	803ffb26 	beq	r16,zero,8088fc <__ieee754_sqrt+0x1e0>
  808910:	8080042c 	andhi	r2,r16,16
  808914:	0007883a 	mov	r3,zero
  808918:	1000041e 	bne	r2,zero,80892c <__ieee754_sqrt+0x210>
  80891c:	8421883a 	add	r16,r16,r16
  808920:	18c00044 	addi	r3,r3,1
  808924:	8080042c 	andhi	r2,r16,16
  808928:	103ffc26 	beq	r2,zero,80891c <__ieee754_sqrt+0x200>
  80892c:	00800804 	movi	r2,32
  808930:	10c5c83a 	sub	r2,r2,r3
  808934:	3884d83a 	srl	r2,r7,r2
  808938:	38ce983a 	sll	r7,r7,r3
  80893c:	90c7c83a 	sub	r3,r18,r3
  808940:	80a0b03a 	or	r16,r16,r2
  808944:	1c800044 	addi	r18,r3,1
  808948:	003f8906 	br	808770 <__ieee754_sqrt+0x54>
  80894c:	280f883a 	mov	r7,r5
  808950:	8809883a 	mov	r4,r17
  808954:	880d883a 	mov	r6,r17
  808958:	080b21c0 	call	80b21c <__muldf3>
  80895c:	180b883a 	mov	r5,r3
  808960:	880d883a 	mov	r6,r17
  808964:	800f883a 	mov	r7,r16
  808968:	1009883a 	mov	r4,r2
  80896c:	080b1380 	call	80b138 <__adddf3>
  808970:	1015883a 	mov	r10,r2
  808974:	1817883a 	mov	r11,r3
  808978:	5807883a 	mov	r3,r11
  80897c:	5005883a 	mov	r2,r10
  808980:	dfc00717 	ldw	ra,28(sp)
  808984:	dc000617 	ldw	r16,24(sp)
  808988:	dc400517 	ldw	r17,20(sp)
  80898c:	dc800417 	ldw	r18,16(sp)
  808990:	dcc00317 	ldw	r19,12(sp)
  808994:	dd000217 	ldw	r20,8(sp)
  808998:	dd400117 	ldw	r21,4(sp)
  80899c:	dd800017 	ldw	r22,0(sp)
  8089a0:	dec00804 	addi	sp,sp,32
  8089a4:	f800283a 	ret
  8089a8:	403fa416 	blt	r8,zero,80883c <__ieee754_sqrt+0x120>
  8089ac:	19800044 	addi	r6,r3,1
  8089b0:	003fa206 	br	80883c <__ieee754_sqrt+0x120>
  8089b4:	38bf9336 	bltu	r7,r2,808804 <__ieee754_sqrt+0xe8>
  8089b8:	80e1c83a 	sub	r16,r16,r3
  8089bc:	a92b883a 	add	r21,r21,r4
  8089c0:	1111883a 	add	r8,r2,r4
  8089c4:	2a7f9d1e 	bne	r5,r9,80883c <__ieee754_sqrt+0x120>
  8089c8:	003ff706 	br	8089a8 <__ieee754_sqrt+0x28c>
  8089cc:	00a00034 	movhi	r2,32768
  8089d0:	10bfffc4 	addi	r2,r2,-1
  8089d4:	2884703a 	and	r2,r5,r2
  8089d8:	1444b03a 	or	r2,r2,r17
  8089dc:	1000031e 	bne	r2,zero,8089ec <__ieee754_sqrt+0x2d0>
  8089e0:	8815883a 	mov	r10,r17
  8089e4:	2817883a 	mov	r11,r5
  8089e8:	003fe306 	br	808978 <__ieee754_sqrt+0x25c>
  8089ec:	283f5e0e 	bge	r5,zero,808768 <__ieee754_sqrt+0x4c>
  8089f0:	880d883a 	mov	r6,r17
  8089f4:	280f883a 	mov	r7,r5
  8089f8:	8809883a 	mov	r4,r17
  8089fc:	080b1a40 	call	80b1a4 <__subdf3>
  808a00:	180f883a 	mov	r7,r3
  808a04:	1009883a 	mov	r4,r2
  808a08:	180b883a 	mov	r5,r3
  808a0c:	100d883a 	mov	r6,r2
  808a10:	080b61c0 	call	80b61c <__divdf3>
  808a14:	003fd606 	br	808970 <__ieee754_sqrt+0x254>
  808a18:	b5800044 	addi	r22,r22,1
  808a1c:	002b883a 	mov	r21,zero
  808a20:	003fa806 	br	8088c4 <__ieee754_sqrt+0x1a8>
  808a24:	b5800044 	addi	r22,r22,1
  808a28:	003fa506 	br	8088c0 <__ieee754_sqrt+0x1a4>
  808a2c:	a880004c 	andi	r2,r21,1
  808a30:	a8ab883a 	add	r21,r21,r2
  808a34:	003fa306 	br	8088c4 <__ieee754_sqrt+0x1a8>

00808a38 <__kernel_cos>:
  808a38:	defff004 	addi	sp,sp,-64
  808a3c:	00a00034 	movhi	r2,32768
  808a40:	10bfffc4 	addi	r2,r2,-1
  808a44:	df000e15 	stw	fp,56(sp)
  808a48:	28b8703a 	and	fp,r5,r2
  808a4c:	0005883a 	mov	r2,zero
  808a50:	d8800415 	stw	r2,16(sp)
  808a54:	d8800515 	stw	r2,20(sp)
  808a58:	008f9034 	movhi	r2,15936
  808a5c:	10bfffc4 	addi	r2,r2,-1
  808a60:	dfc00f15 	stw	ra,60(sp)
  808a64:	dc000d15 	stw	r16,52(sp)
  808a68:	dc400c15 	stw	r17,48(sp)
  808a6c:	dc800b15 	stw	r18,44(sp)
  808a70:	dcc00a15 	stw	r19,40(sp)
  808a74:	dd000915 	stw	r20,36(sp)
  808a78:	dd400815 	stw	r21,32(sp)
  808a7c:	dd800715 	stw	r22,28(sp)
  808a80:	ddc00615 	stw	r23,24(sp)
  808a84:	d9000015 	stw	r4,0(sp)
  808a88:	d9800215 	stw	r6,8(sp)
  808a8c:	d9c00315 	stw	r7,12(sp)
  808a90:	d9400115 	stw	r5,4(sp)
  808a94:	17000216 	blt	r2,fp,808aa0 <__kernel_cos+0x68>
  808a98:	080bbf80 	call	80bbf8 <__fixdfsi>
  808a9c:	1000da26 	beq	r2,zero,808e08 <__kernel_cos+0x3d0>
  808aa0:	d9000017 	ldw	r4,0(sp)
  808aa4:	d9400117 	ldw	r5,4(sp)
  808aa8:	200d883a 	mov	r6,r4
  808aac:	280f883a 	mov	r7,r5
  808ab0:	080b21c0 	call	80b21c <__muldf3>
  808ab4:	1025883a 	mov	r18,r2
  808ab8:	1827883a 	mov	r19,r3
  808abc:	1029883a 	mov	r20,r2
  808ac0:	182b883a 	mov	r21,r3
  808ac4:	00afa234 	movhi	r2,48776
  808ac8:	108e3504 	addi	r2,r2,14548
  808acc:	00ef6a74 	movhi	r3,48553
  808ad0:	18feba44 	addi	r3,r3,-1303
  808ad4:	180f883a 	mov	r7,r3
  808ad8:	9009883a 	mov	r4,r18
  808adc:	980b883a 	mov	r5,r19
  808ae0:	100d883a 	mov	r6,r2
  808ae4:	080b21c0 	call	80b21c <__muldf3>
  808ae8:	022f6d74 	movhi	r8,48565
  808aec:	422c7104 	addi	r8,r8,-20028
  808af0:	024f88b4 	movhi	r9,15906
  808af4:	4a7ba784 	addi	r9,r9,-4450
  808af8:	480f883a 	mov	r7,r9
  808afc:	400d883a 	mov	r6,r8
  808b00:	180b883a 	mov	r5,r3
  808b04:	1009883a 	mov	r4,r2
  808b08:	080b1380 	call	80b138 <__adddf3>
  808b0c:	180b883a 	mov	r5,r3
  808b10:	1009883a 	mov	r4,r2
  808b14:	900d883a 	mov	r6,r18
  808b18:	980f883a 	mov	r7,r19
  808b1c:	080b21c0 	call	80b21c <__muldf3>
  808b20:	02202734 	movhi	r8,32924
  808b24:	4214ab44 	addi	r8,r8,21165
  808b28:	026fa4b4 	movhi	r9,48786
  808b2c:	4a5f93c4 	addi	r9,r9,32335
  808b30:	480f883a 	mov	r7,r9
  808b34:	400d883a 	mov	r6,r8
  808b38:	180b883a 	mov	r5,r3
  808b3c:	1009883a 	mov	r4,r2
  808b40:	080b1380 	call	80b138 <__adddf3>
  808b44:	180b883a 	mov	r5,r3
  808b48:	1009883a 	mov	r4,r2
  808b4c:	900d883a 	mov	r6,r18
  808b50:	980f883a 	mov	r7,r19
  808b54:	080b21c0 	call	80b21c <__muldf3>
  808b58:	020672f4 	movhi	r8,6603
  808b5c:	42056404 	addi	r8,r8,5520
  808b60:	024fbeb4 	movhi	r9,16122
  808b64:	4a406804 	addi	r9,r9,416
  808b68:	480f883a 	mov	r7,r9
  808b6c:	400d883a 	mov	r6,r8
  808b70:	180b883a 	mov	r5,r3
  808b74:	1009883a 	mov	r4,r2
  808b78:	080b1380 	call	80b138 <__adddf3>
  808b7c:	180b883a 	mov	r5,r3
  808b80:	1009883a 	mov	r4,r2
  808b84:	900d883a 	mov	r6,r18
  808b88:	980f883a 	mov	r7,r19
  808b8c:	080b21c0 	call	80b21c <__muldf3>
  808b90:	0205b074 	movhi	r8,5825
  808b94:	42145dc4 	addi	r8,r8,20855
  808b98:	026fd5f4 	movhi	r9,48983
  808b9c:	4a705b04 	addi	r9,r9,-16020
  808ba0:	480f883a 	mov	r7,r9
  808ba4:	400d883a 	mov	r6,r8
  808ba8:	180b883a 	mov	r5,r3
  808bac:	1009883a 	mov	r4,r2
  808bb0:	080b1380 	call	80b138 <__adddf3>
  808bb4:	180b883a 	mov	r5,r3
  808bb8:	1009883a 	mov	r4,r2
  808bbc:	900d883a 	mov	r6,r18
  808bc0:	980f883a 	mov	r7,r19
  808bc4:	080b21c0 	call	80b21c <__muldf3>
  808bc8:	02155574 	movhi	r8,21845
  808bcc:	42155304 	addi	r8,r8,21836
  808bd0:	024fe974 	movhi	r9,16293
  808bd4:	4a555544 	addi	r9,r9,21845
  808bd8:	480f883a 	mov	r7,r9
  808bdc:	400d883a 	mov	r6,r8
  808be0:	180b883a 	mov	r5,r3
  808be4:	1009883a 	mov	r4,r2
  808be8:	080b1380 	call	80b138 <__adddf3>
  808bec:	180b883a 	mov	r5,r3
  808bf0:	1009883a 	mov	r4,r2
  808bf4:	900d883a 	mov	r6,r18
  808bf8:	980f883a 	mov	r7,r19
  808bfc:	080b21c0 	call	80b21c <__muldf3>
  808c00:	1021883a 	mov	r16,r2
  808c04:	102d883a 	mov	r22,r2
  808c08:	008ff4f4 	movhi	r2,16339
  808c0c:	108ccc84 	addi	r2,r2,13106
  808c10:	1823883a 	mov	r17,r3
  808c14:	182f883a 	mov	r23,r3
  808c18:	17004a0e 	bge	r2,fp,808d44 <__kernel_cos+0x30c>
  808c1c:	008ffa74 	movhi	r2,16361
  808c20:	10800004 	addi	r2,r2,0
  808c24:	17006f0e 	bge	r2,fp,808de4 <__kernel_cos+0x3ac>
  808c28:	0021883a 	mov	r16,zero
  808c2c:	044ff4b4 	movhi	r17,16338
  808c30:	8c400004 	addi	r17,r17,0
  808c34:	0005883a 	mov	r2,zero
  808c38:	00cff834 	movhi	r3,16352
  808c3c:	18c00004 	addi	r3,r3,0
  808c40:	a009883a 	mov	r4,r20
  808c44:	a80b883a 	mov	r5,r21
  808c48:	180f883a 	mov	r7,r3
  808c4c:	100d883a 	mov	r6,r2
  808c50:	080b21c0 	call	80b21c <__muldf3>
  808c54:	180b883a 	mov	r5,r3
  808c58:	800d883a 	mov	r6,r16
  808c5c:	880f883a 	mov	r7,r17
  808c60:	1009883a 	mov	r4,r2
  808c64:	080b1a40 	call	80b1a4 <__subdf3>
  808c68:	0011883a 	mov	r8,zero
  808c6c:	024ffc34 	movhi	r9,16368
  808c70:	4a400004 	addi	r9,r9,0
  808c74:	480b883a 	mov	r5,r9
  808c78:	4009883a 	mov	r4,r8
  808c7c:	880f883a 	mov	r7,r17
  808c80:	800d883a 	mov	r6,r16
  808c84:	1025883a 	mov	r18,r2
  808c88:	1827883a 	mov	r19,r3
  808c8c:	080b1a40 	call	80b1a4 <__subdf3>
  808c90:	a80b883a 	mov	r5,r21
  808c94:	a009883a 	mov	r4,r20
  808c98:	b80f883a 	mov	r7,r23
  808c9c:	b00d883a 	mov	r6,r22
  808ca0:	1029883a 	mov	r20,r2
  808ca4:	182b883a 	mov	r21,r3
  808ca8:	080b21c0 	call	80b21c <__muldf3>
  808cac:	d9400117 	ldw	r5,4(sp)
  808cb0:	d9c00317 	ldw	r7,12(sp)
  808cb4:	d9000017 	ldw	r4,0(sp)
  808cb8:	d9800217 	ldw	r6,8(sp)
  808cbc:	1021883a 	mov	r16,r2
  808cc0:	1823883a 	mov	r17,r3
  808cc4:	080b21c0 	call	80b21c <__muldf3>
  808cc8:	180f883a 	mov	r7,r3
  808ccc:	880b883a 	mov	r5,r17
  808cd0:	8009883a 	mov	r4,r16
  808cd4:	100d883a 	mov	r6,r2
  808cd8:	080b1a40 	call	80b1a4 <__subdf3>
  808cdc:	180f883a 	mov	r7,r3
  808ce0:	9009883a 	mov	r4,r18
  808ce4:	980b883a 	mov	r5,r19
  808ce8:	100d883a 	mov	r6,r2
  808cec:	080b1a40 	call	80b1a4 <__subdf3>
  808cf0:	180f883a 	mov	r7,r3
  808cf4:	a009883a 	mov	r4,r20
  808cf8:	a80b883a 	mov	r5,r21
  808cfc:	100d883a 	mov	r6,r2
  808d00:	080b1a40 	call	80b1a4 <__subdf3>
  808d04:	100d883a 	mov	r6,r2
  808d08:	180f883a 	mov	r7,r3
  808d0c:	3807883a 	mov	r3,r7
  808d10:	3005883a 	mov	r2,r6
  808d14:	dfc00f17 	ldw	ra,60(sp)
  808d18:	df000e17 	ldw	fp,56(sp)
  808d1c:	dc000d17 	ldw	r16,52(sp)
  808d20:	dc400c17 	ldw	r17,48(sp)
  808d24:	dc800b17 	ldw	r18,44(sp)
  808d28:	dcc00a17 	ldw	r19,40(sp)
  808d2c:	dd000917 	ldw	r20,36(sp)
  808d30:	dd400817 	ldw	r21,32(sp)
  808d34:	dd800717 	ldw	r22,28(sp)
  808d38:	ddc00617 	ldw	r23,24(sp)
  808d3c:	dec01004 	addi	sp,sp,64
  808d40:	f800283a 	ret
  808d44:	0005883a 	mov	r2,zero
  808d48:	00cff834 	movhi	r3,16352
  808d4c:	18c00004 	addi	r3,r3,0
  808d50:	9009883a 	mov	r4,r18
  808d54:	980b883a 	mov	r5,r19
  808d58:	180f883a 	mov	r7,r3
  808d5c:	100d883a 	mov	r6,r2
  808d60:	080b21c0 	call	80b21c <__muldf3>
  808d64:	9009883a 	mov	r4,r18
  808d68:	980b883a 	mov	r5,r19
  808d6c:	800d883a 	mov	r6,r16
  808d70:	880f883a 	mov	r7,r17
  808d74:	1025883a 	mov	r18,r2
  808d78:	1827883a 	mov	r19,r3
  808d7c:	080b21c0 	call	80b21c <__muldf3>
  808d80:	d9400117 	ldw	r5,4(sp)
  808d84:	d9c00317 	ldw	r7,12(sp)
  808d88:	d9000017 	ldw	r4,0(sp)
  808d8c:	d9800217 	ldw	r6,8(sp)
  808d90:	1021883a 	mov	r16,r2
  808d94:	1823883a 	mov	r17,r3
  808d98:	080b21c0 	call	80b21c <__muldf3>
  808d9c:	180f883a 	mov	r7,r3
  808da0:	880b883a 	mov	r5,r17
  808da4:	8009883a 	mov	r4,r16
  808da8:	100d883a 	mov	r6,r2
  808dac:	080b1a40 	call	80b1a4 <__subdf3>
  808db0:	180f883a 	mov	r7,r3
  808db4:	980b883a 	mov	r5,r19
  808db8:	9009883a 	mov	r4,r18
  808dbc:	100d883a 	mov	r6,r2
  808dc0:	080b1a40 	call	80b1a4 <__subdf3>
  808dc4:	0011883a 	mov	r8,zero
  808dc8:	024ffc34 	movhi	r9,16368
  808dcc:	4a400004 	addi	r9,r9,0
  808dd0:	480b883a 	mov	r5,r9
  808dd4:	180f883a 	mov	r7,r3
  808dd8:	4009883a 	mov	r4,r8
  808ddc:	100d883a 	mov	r6,r2
  808de0:	003fc706 	br	808d00 <__kernel_cos+0x2c8>
  808de4:	00bff834 	movhi	r2,65504
  808de8:	10800004 	addi	r2,r2,0
  808dec:	e0b9883a 	add	fp,fp,r2
  808df0:	0021883a 	mov	r16,zero
  808df4:	0005883a 	mov	r2,zero
  808df8:	e023883a 	mov	r17,fp
  808dfc:	df000515 	stw	fp,20(sp)
  808e00:	d8800415 	stw	r2,16(sp)
  808e04:	003f8b06 	br	808c34 <__kernel_cos+0x1fc>
  808e08:	000d883a 	mov	r6,zero
  808e0c:	01cffc34 	movhi	r7,16368
  808e10:	39c00004 	addi	r7,r7,0
  808e14:	003fbd06 	br	808d0c <__kernel_cos+0x2d4>

00808e18 <__kernel_rem_pio2>:
  808e18:	deff5e04 	addi	sp,sp,-648
  808e1c:	d880a217 	ldw	r2,648(sp)
  808e20:	d9008c15 	stw	r4,560(sp)
  808e24:	d9408d15 	stw	r5,564(sp)
  808e28:	100690ba 	slli	r3,r2,2
  808e2c:	008020b4 	movhi	r2,130
  808e30:	10a6ff04 	addi	r2,r2,-25604
  808e34:	313fff44 	addi	r4,r6,-3
  808e38:	1887883a 	add	r3,r3,r2
  808e3c:	18c00017 	ldw	r3,0(r3)
  808e40:	01400604 	movi	r5,24
  808e44:	dc009f15 	stw	r16,636(sp)
  808e48:	dd409a15 	stw	r21,616(sp)
  808e4c:	dfc0a115 	stw	ra,644(sp)
  808e50:	df00a015 	stw	fp,640(sp)
  808e54:	dc409e15 	stw	r17,632(sp)
  808e58:	dc809d15 	stw	r18,628(sp)
  808e5c:	dcc09c15 	stw	r19,624(sp)
  808e60:	dd009b15 	stw	r20,620(sp)
  808e64:	dd809915 	stw	r22,612(sp)
  808e68:	ddc09815 	stw	r23,608(sp)
  808e6c:	3021883a 	mov	r16,r6
  808e70:	d8c09015 	stw	r3,576(sp)
  808e74:	3d7fffc4 	addi	r21,r7,-1
  808e78:	080bdb80 	call	80bdb8 <__divsi3>
  808e7c:	d8808f15 	stw	r2,572(sp)
  808e80:	10014e16 	blt	r2,zero,8093bc <__kernel_rem_pio2+0x5a4>
  808e84:	d8c08f17 	ldw	r3,572(sp)
  808e88:	d9009017 	ldw	r4,576(sp)
  808e8c:	0039883a 	mov	fp,zero
  808e90:	18bffa24 	muli	r2,r3,-24
  808e94:	a925883a 	add	r18,r21,r4
  808e98:	1d67c83a 	sub	r19,r3,r21
  808e9c:	1405883a 	add	r2,r2,r16
  808ea0:	10bffa04 	addi	r2,r2,-24
  808ea4:	d8809215 	stw	r2,584(sp)
  808ea8:	90001216 	blt	r18,zero,808ef4 <__kernel_rem_pio2+0xdc>
  808eac:	980490ba 	slli	r2,r19,2
  808eb0:	d940a317 	ldw	r5,652(sp)
  808eb4:	dc401404 	addi	r17,sp,80
  808eb8:	1161883a 	add	r16,r2,r5
  808ebc:	0009883a 	mov	r4,zero
  808ec0:	000b883a 	mov	r5,zero
  808ec4:	98000416 	blt	r19,zero,808ed8 <__kernel_rem_pio2+0xc0>
  808ec8:	81000017 	ldw	r4,0(r16)
  808ecc:	080bb280 	call	80bb28 <__floatsidf>
  808ed0:	1009883a 	mov	r4,r2
  808ed4:	180b883a 	mov	r5,r3
  808ed8:	e7000044 	addi	fp,fp,1
  808edc:	89400115 	stw	r5,4(r17)
  808ee0:	89000015 	stw	r4,0(r17)
  808ee4:	9cc00044 	addi	r19,r19,1
  808ee8:	8c400204 	addi	r17,r17,8
  808eec:	84000104 	addi	r16,r16,4
  808ef0:	973ff20e 	bge	r18,fp,808ebc <__kernel_rem_pio2+0xa4>
  808ef4:	d9809017 	ldw	r6,576(sp)
  808ef8:	0039883a 	mov	fp,zero
  808efc:	30002716 	blt	r6,zero,808f9c <__kernel_rem_pio2+0x184>
  808f00:	a80490fa 	slli	r2,r21,3
  808f04:	dd006404 	addi	r20,sp,400
  808f08:	16e3883a 	add	r17,r2,sp
  808f0c:	000f883a 	mov	r7,zero
  808f10:	0027883a 	mov	r19,zero
  808f14:	d9c09415 	stw	r7,592(sp)
  808f18:	dcc09515 	stw	r19,596(sp)
  808f1c:	a8001616 	blt	r21,zero,808f78 <__kernel_rem_pio2+0x160>
  808f20:	dc008c17 	ldw	r16,560(sp)
  808f24:	8c801404 	addi	r18,r17,80
  808f28:	92000017 	ldw	r8,0(r18)
  808f2c:	92400117 	ldw	r9,4(r18)
  808f30:	80800017 	ldw	r2,0(r16)
  808f34:	80c00117 	ldw	r3,4(r16)
  808f38:	480f883a 	mov	r7,r9
  808f3c:	400d883a 	mov	r6,r8
  808f40:	180b883a 	mov	r5,r3
  808f44:	1009883a 	mov	r4,r2
  808f48:	080b21c0 	call	80b21c <__muldf3>
  808f4c:	d9409517 	ldw	r5,596(sp)
  808f50:	d9009417 	ldw	r4,592(sp)
  808f54:	180f883a 	mov	r7,r3
  808f58:	100d883a 	mov	r6,r2
  808f5c:	080b1380 	call	80b138 <__adddf3>
  808f60:	9cc00044 	addi	r19,r19,1
  808f64:	94bffe04 	addi	r18,r18,-8
  808f68:	d8809415 	stw	r2,592(sp)
  808f6c:	d8c09515 	stw	r3,596(sp)
  808f70:	84000204 	addi	r16,r16,8
  808f74:	acffec0e 	bge	r21,r19,808f28 <__kernel_rem_pio2+0x110>
  808f78:	dc809517 	ldw	r18,596(sp)
  808f7c:	e7000044 	addi	fp,fp,1
  808f80:	8c400204 	addi	r17,r17,8
  808f84:	a4800115 	stw	r18,4(r20)
  808f88:	d8809417 	ldw	r2,592(sp)
  808f8c:	a0800015 	stw	r2,0(r20)
  808f90:	d8c09017 	ldw	r3,576(sp)
  808f94:	a5000204 	addi	r20,r20,8
  808f98:	1f3fdc0e 	bge	r3,fp,808f0c <__kernel_rem_pio2+0xf4>
  808f9c:	d9409217 	ldw	r5,584(sp)
  808fa0:	d9009017 	ldw	r4,576(sp)
  808fa4:	29400050 	cmplti	r5,r5,1
  808fa8:	d9008e15 	stw	r4,568(sp)
  808fac:	d9409715 	stw	r5,604(sp)
  808fb0:	d9808e17 	ldw	r6,568(sp)
  808fb4:	300690fa 	slli	r3,r6,3
  808fb8:	3027883a 	mov	r19,r6
  808fbc:	1ec7883a 	add	r3,r3,sp
  808fc0:	18806404 	addi	r2,r3,400
  808fc4:	15800017 	ldw	r22,0(r2)
  808fc8:	15c00117 	ldw	r23,4(r2)
  808fcc:	0180310e 	bge	zero,r6,809094 <__kernel_rem_pio2+0x27c>
  808fd0:	1c806204 	addi	r18,r3,392
  808fd4:	d829883a 	mov	r20,sp
  808fd8:	0005883a 	mov	r2,zero
  808fdc:	00cf9c34 	movhi	r3,15984
  808fe0:	18c00004 	addi	r3,r3,0
  808fe4:	180f883a 	mov	r7,r3
  808fe8:	100d883a 	mov	r6,r2
  808fec:	b009883a 	mov	r4,r22
  808ff0:	b80b883a 	mov	r5,r23
  808ff4:	080b21c0 	call	80b21c <__muldf3>
  808ff8:	180b883a 	mov	r5,r3
  808ffc:	1009883a 	mov	r4,r2
  809000:	080bbf80 	call	80bbf8 <__fixdfsi>
  809004:	1009883a 	mov	r4,r2
  809008:	080bb280 	call	80bb28 <__floatsidf>
  80900c:	1823883a 	mov	r17,r3
  809010:	1021883a 	mov	r16,r2
  809014:	d8809415 	stw	r2,592(sp)
  809018:	00d05c34 	movhi	r3,16752
  80901c:	18c00004 	addi	r3,r3,0
  809020:	0005883a 	mov	r2,zero
  809024:	180f883a 	mov	r7,r3
  809028:	8009883a 	mov	r4,r16
  80902c:	880b883a 	mov	r5,r17
  809030:	100d883a 	mov	r6,r2
  809034:	dc409515 	stw	r17,596(sp)
  809038:	080b21c0 	call	80b21c <__muldf3>
  80903c:	180f883a 	mov	r7,r3
  809040:	b80b883a 	mov	r5,r23
  809044:	b009883a 	mov	r4,r22
  809048:	100d883a 	mov	r6,r2
  80904c:	080b1a40 	call	80b1a4 <__subdf3>
  809050:	180b883a 	mov	r5,r3
  809054:	1009883a 	mov	r4,r2
  809058:	080bbf80 	call	80bbf8 <__fixdfsi>
  80905c:	a0800015 	stw	r2,0(r20)
  809060:	90800017 	ldw	r2,0(r18)
  809064:	90c00117 	ldw	r3,4(r18)
  809068:	d9809417 	ldw	r6,592(sp)
  80906c:	880f883a 	mov	r7,r17
  809070:	180b883a 	mov	r5,r3
  809074:	1009883a 	mov	r4,r2
  809078:	080b1380 	call	80b138 <__adddf3>
  80907c:	9cffffc4 	addi	r19,r19,-1
  809080:	a5000104 	addi	r20,r20,4
  809084:	102d883a 	mov	r22,r2
  809088:	182f883a 	mov	r23,r3
  80908c:	94bffe04 	addi	r18,r18,-8
  809090:	04ffd116 	blt	zero,r19,808fd8 <__kernel_rem_pio2+0x1c0>
  809094:	d9809217 	ldw	r6,584(sp)
  809098:	b80b883a 	mov	r5,r23
  80909c:	b009883a 	mov	r4,r22
  8090a0:	080a18c0 	call	80a18c <scalbn>
  8090a4:	0011883a 	mov	r8,zero
  8090a8:	024ff034 	movhi	r9,16320
  8090ac:	4a400004 	addi	r9,r9,0
  8090b0:	480f883a 	mov	r7,r9
  8090b4:	400d883a 	mov	r6,r8
  8090b8:	180b883a 	mov	r5,r3
  8090bc:	1009883a 	mov	r4,r2
  8090c0:	102d883a 	mov	r22,r2
  8090c4:	182f883a 	mov	r23,r3
  8090c8:	080b21c0 	call	80b21c <__muldf3>
  8090cc:	180b883a 	mov	r5,r3
  8090d0:	1009883a 	mov	r4,r2
  8090d4:	0809f400 	call	809f40 <floor>
  8090d8:	0011883a 	mov	r8,zero
  8090dc:	02500834 	movhi	r9,16416
  8090e0:	4a400004 	addi	r9,r9,0
  8090e4:	480f883a 	mov	r7,r9
  8090e8:	400d883a 	mov	r6,r8
  8090ec:	1009883a 	mov	r4,r2
  8090f0:	180b883a 	mov	r5,r3
  8090f4:	080b21c0 	call	80b21c <__muldf3>
  8090f8:	180f883a 	mov	r7,r3
  8090fc:	100d883a 	mov	r6,r2
  809100:	b80b883a 	mov	r5,r23
  809104:	b009883a 	mov	r4,r22
  809108:	080b1a40 	call	80b1a4 <__subdf3>
  80910c:	180b883a 	mov	r5,r3
  809110:	1009883a 	mov	r4,r2
  809114:	1823883a 	mov	r17,r3
  809118:	1021883a 	mov	r16,r2
  80911c:	080bbf80 	call	80bbf8 <__fixdfsi>
  809120:	1009883a 	mov	r4,r2
  809124:	d8809115 	stw	r2,580(sp)
  809128:	080bb280 	call	80bb28 <__floatsidf>
  80912c:	100d883a 	mov	r6,r2
  809130:	8009883a 	mov	r4,r16
  809134:	880b883a 	mov	r5,r17
  809138:	180f883a 	mov	r7,r3
  80913c:	080b1a40 	call	80b1a4 <__subdf3>
  809140:	dc809717 	ldw	r18,604(sp)
  809144:	180d883a 	mov	r6,r3
  809148:	102d883a 	mov	r22,r2
  80914c:	182f883a 	mov	r23,r3
  809150:	d8009315 	stw	zero,588(sp)
  809154:	90009d1e 	bne	r18,zero,8093cc <__kernel_rem_pio2+0x5b4>
  809158:	d8808e17 	ldw	r2,568(sp)
  80915c:	d9009217 	ldw	r4,584(sp)
  809160:	00c00604 	movi	r3,24
  809164:	100a90ba 	slli	r5,r2,2
  809168:	1907c83a 	sub	r3,r3,r4
  80916c:	d9809217 	ldw	r6,584(sp)
  809170:	2ecb883a 	add	r5,r5,sp
  809174:	297fff04 	addi	r5,r5,-4
  809178:	28800017 	ldw	r2,0(r5)
  80917c:	010005c4 	movi	r4,23
  809180:	d9c09117 	ldw	r7,580(sp)
  809184:	10f9d83a 	sra	fp,r2,r3
  809188:	2189c83a 	sub	r4,r4,r6
  80918c:	e0c6983a 	sll	r3,fp,r3
  809190:	3f0f883a 	add	r7,r7,fp
  809194:	d9c09115 	stw	r7,580(sp)
  809198:	10c5c83a 	sub	r2,r2,r3
  80919c:	1109d83a 	sra	r4,r2,r4
  8091a0:	28800015 	stw	r2,0(r5)
  8091a4:	d9009315 	stw	r4,588(sp)
  8091a8:	d8c09317 	ldw	r3,588(sp)
  8091ac:	00c0210e 	bge	zero,r3,809234 <__kernel_rem_pio2+0x41c>
  8091b0:	d9009117 	ldw	r4,580(sp)
  8091b4:	d9408e17 	ldw	r5,568(sp)
  8091b8:	0029883a 	mov	r20,zero
  8091bc:	21000044 	addi	r4,r4,1
  8091c0:	d9009115 	stw	r4,580(sp)
  8091c4:	0039883a 	mov	fp,zero
  8091c8:	0140100e 	bge	zero,r5,80920c <__kernel_rem_pio2+0x3f4>
  8091cc:	01404034 	movhi	r5,256
  8091d0:	29400004 	addi	r5,r5,0
  8091d4:	01004034 	movhi	r4,256
  8091d8:	213fffc4 	addi	r4,r4,-1
  8091dc:	d807883a 	mov	r3,sp
  8091e0:	a004c03a 	cmpne	r2,r20,zero
  8091e4:	1cc00017 	ldw	r19,0(r3)
  8091e8:	1000761e 	bne	r2,zero,8093c4 <__kernel_rem_pio2+0x5ac>
  8091ec:	2cc5c83a 	sub	r2,r5,r19
  8091f0:	98000226 	beq	r19,zero,8091fc <__kernel_rem_pio2+0x3e4>
  8091f4:	05000044 	movi	r20,1
  8091f8:	18800015 	stw	r2,0(r3)
  8091fc:	d9808e17 	ldw	r6,568(sp)
  809200:	e7000044 	addi	fp,fp,1
  809204:	18c00104 	addi	r3,r3,4
  809208:	e1bff516 	blt	fp,r6,8091e0 <__kernel_rem_pio2+0x3c8>
  80920c:	d9c09717 	ldw	r7,604(sp)
  809210:	3800051e 	bne	r7,zero,809228 <__kernel_rem_pio2+0x410>
  809214:	da009217 	ldw	r8,584(sp)
  809218:	00800044 	movi	r2,1
  80921c:	40812226 	beq	r8,r2,8096a8 <__kernel_rem_pio2+0x890>
  809220:	00800084 	movi	r2,2
  809224:	40812a26 	beq	r8,r2,8096d0 <__kernel_rem_pio2+0x8b8>
  809228:	d9009317 	ldw	r4,588(sp)
  80922c:	00800084 	movi	r2,2
  809230:	20807b26 	beq	r4,r2,809420 <__kernel_rem_pio2+0x608>
  809234:	000d883a 	mov	r6,zero
  809238:	000f883a 	mov	r7,zero
  80923c:	b009883a 	mov	r4,r22
  809240:	b80b883a 	mov	r5,r23
  809244:	080b86c0 	call	80b86c <__eqdf2>
  809248:	1000931e 	bne	r2,zero,809498 <__kernel_rem_pio2+0x680>
  80924c:	d9408e17 	ldw	r5,568(sp)
  809250:	d9809017 	ldw	r6,576(sp)
  809254:	0027883a 	mov	r19,zero
  809258:	2f3fffc4 	addi	fp,r5,-1
  80925c:	e1800916 	blt	fp,r6,809284 <__kernel_rem_pio2+0x46c>
  809260:	e00490ba 	slli	r2,fp,2
  809264:	16c7883a 	add	r3,r2,sp
  809268:	18800017 	ldw	r2,0(r3)
  80926c:	d9c09017 	ldw	r7,576(sp)
  809270:	e73fffc4 	addi	fp,fp,-1
  809274:	18ffff04 	addi	r3,r3,-4
  809278:	98a6b03a 	or	r19,r19,r2
  80927c:	e1fffa0e 	bge	fp,r7,809268 <__kernel_rem_pio2+0x450>
  809280:	9800851e 	bne	r19,zero,809498 <__kernel_rem_pio2+0x680>
  809284:	da009017 	ldw	r8,576(sp)
  809288:	04000044 	movi	r16,1
  80928c:	40bfffc4 	addi	r2,r8,-1
  809290:	100490ba 	slli	r2,r2,2
  809294:	16c5883a 	add	r2,r2,sp
  809298:	10c00017 	ldw	r3,0(r2)
  80929c:	1800071e 	bne	r3,zero,8092bc <__kernel_rem_pio2+0x4a4>
  8092a0:	400490ba 	slli	r2,r8,2
  8092a4:	16c5883a 	add	r2,r2,sp
  8092a8:	10ffff04 	addi	r3,r2,-4
  8092ac:	18ffff04 	addi	r3,r3,-4
  8092b0:	18800017 	ldw	r2,0(r3)
  8092b4:	84000044 	addi	r16,r16,1
  8092b8:	103ffc26 	beq	r2,zero,8092ac <__kernel_rem_pio2+0x494>
  8092bc:	dc808e17 	ldw	r18,568(sp)
  8092c0:	9421883a 	add	r16,r18,r16
  8092c4:	97000044 	addi	fp,r18,1
  8092c8:	dc009615 	stw	r16,600(sp)
  8092cc:	87003816 	blt	r16,fp,8093b0 <__kernel_rem_pio2+0x598>
  8092d0:	d9408f17 	ldw	r5,572(sp)
  8092d4:	a80690fa 	slli	r3,r21,3
  8092d8:	e00490fa 	slli	r2,fp,3
  8092dc:	2f09883a 	add	r4,r5,fp
  8092e0:	af0b883a 	add	r5,r21,fp
  8092e4:	200890ba 	slli	r4,r4,2
  8092e8:	280a90fa 	slli	r5,r5,3
  8092ec:	d980a317 	ldw	r6,652(sp)
  8092f0:	1ec7883a 	add	r3,r3,sp
  8092f4:	10c7883a 	add	r3,r2,r3
  8092f8:	16c5883a 	add	r2,r2,sp
  8092fc:	15806404 	addi	r22,r2,400
  809300:	21af883a 	add	r23,r4,r6
  809304:	1d001404 	addi	r20,r3,80
  809308:	2ee3883a 	add	r17,r5,sp
  80930c:	b9000017 	ldw	r4,0(r23)
  809310:	0027883a 	mov	r19,zero
  809314:	080bb280 	call	80bb28 <__floatsidf>
  809318:	dcc09415 	stw	r19,592(sp)
  80931c:	a0c00115 	stw	r3,4(r20)
  809320:	a0800015 	stw	r2,0(r20)
  809324:	dcc09515 	stw	r19,596(sp)
  809328:	a8001616 	blt	r21,zero,809384 <__kernel_rem_pio2+0x56c>
  80932c:	dc008c17 	ldw	r16,560(sp)
  809330:	8c801404 	addi	r18,r17,80
  809334:	92000017 	ldw	r8,0(r18)
  809338:	92400117 	ldw	r9,4(r18)
  80933c:	80800017 	ldw	r2,0(r16)
  809340:	80c00117 	ldw	r3,4(r16)
  809344:	480f883a 	mov	r7,r9
  809348:	400d883a 	mov	r6,r8
  80934c:	180b883a 	mov	r5,r3
  809350:	1009883a 	mov	r4,r2
  809354:	080b21c0 	call	80b21c <__muldf3>
  809358:	d9409517 	ldw	r5,596(sp)
  80935c:	d9009417 	ldw	r4,592(sp)
  809360:	180f883a 	mov	r7,r3
  809364:	100d883a 	mov	r6,r2
  809368:	080b1380 	call	80b138 <__adddf3>
  80936c:	9cc00044 	addi	r19,r19,1
  809370:	94bffe04 	addi	r18,r18,-8
  809374:	d8809415 	stw	r2,592(sp)
  809378:	d8c09515 	stw	r3,596(sp)
  80937c:	84000204 	addi	r16,r16,8
  809380:	acffec0e 	bge	r21,r19,809334 <__kernel_rem_pio2+0x51c>
  809384:	da009517 	ldw	r8,596(sp)
  809388:	e7000044 	addi	fp,fp,1
  80938c:	8c400204 	addi	r17,r17,8
  809390:	b2000115 	stw	r8,4(r22)
  809394:	dc809417 	ldw	r18,592(sp)
  809398:	a5000204 	addi	r20,r20,8
  80939c:	bdc00104 	addi	r23,r23,4
  8093a0:	b4800015 	stw	r18,0(r22)
  8093a4:	d8809617 	ldw	r2,600(sp)
  8093a8:	b5800204 	addi	r22,r22,8
  8093ac:	173fd70e 	bge	r2,fp,80930c <__kernel_rem_pio2+0x4f4>
  8093b0:	d8c09617 	ldw	r3,600(sp)
  8093b4:	d8c08e15 	stw	r3,568(sp)
  8093b8:	003efd06 	br	808fb0 <__kernel_rem_pio2+0x198>
  8093bc:	d8008f15 	stw	zero,572(sp)
  8093c0:	003eb006 	br	808e84 <__kernel_rem_pio2+0x6c>
  8093c4:	24c5c83a 	sub	r2,r4,r19
  8093c8:	003f8b06 	br	8091f8 <__kernel_rem_pio2+0x3e0>
  8093cc:	da009217 	ldw	r8,584(sp)
  8093d0:	4000071e 	bne	r8,zero,8093f0 <__kernel_rem_pio2+0x5d8>
  8093d4:	dc808e17 	ldw	r18,568(sp)
  8093d8:	900490ba 	slli	r2,r18,2
  8093dc:	16c5883a 	add	r2,r2,sp
  8093e0:	10ffff17 	ldw	r3,-4(r2)
  8093e4:	1807d5fa 	srai	r3,r3,23
  8093e8:	d8c09315 	stw	r3,588(sp)
  8093ec:	003f6e06 	br	8091a8 <__kernel_rem_pio2+0x390>
  8093f0:	0005883a 	mov	r2,zero
  8093f4:	00cff834 	movhi	r3,16352
  8093f8:	18c00004 	addi	r3,r3,0
  8093fc:	300b883a 	mov	r5,r6
  809400:	180f883a 	mov	r7,r3
  809404:	b009883a 	mov	r4,r22
  809408:	100d883a 	mov	r6,r2
  80940c:	080ba100 	call	80ba10 <__gedf2>
  809410:	103f8816 	blt	r2,zero,809234 <__kernel_rem_pio2+0x41c>
  809414:	00800084 	movi	r2,2
  809418:	d8809315 	stw	r2,588(sp)
  80941c:	003f6406 	br	8091b0 <__kernel_rem_pio2+0x398>
  809420:	0025883a 	mov	r18,zero
  809424:	04cffc34 	movhi	r19,16368
  809428:	9cc00004 	addi	r19,r19,0
  80942c:	b80f883a 	mov	r7,r23
  809430:	b00d883a 	mov	r6,r22
  809434:	9009883a 	mov	r4,r18
  809438:	980b883a 	mov	r5,r19
  80943c:	080b1a40 	call	80b1a4 <__subdf3>
  809440:	1021883a 	mov	r16,r2
  809444:	1823883a 	mov	r17,r3
  809448:	102d883a 	mov	r22,r2
  80944c:	182f883a 	mov	r23,r3
  809450:	a03f7826 	beq	r20,zero,809234 <__kernel_rem_pio2+0x41c>
  809454:	d9809217 	ldw	r6,584(sp)
  809458:	0009883a 	mov	r4,zero
  80945c:	980b883a 	mov	r5,r19
  809460:	080a18c0 	call	80a18c <scalbn>
  809464:	100d883a 	mov	r6,r2
  809468:	180f883a 	mov	r7,r3
  80946c:	8009883a 	mov	r4,r16
  809470:	880b883a 	mov	r5,r17
  809474:	080b1a40 	call	80b1a4 <__subdf3>
  809478:	102d883a 	mov	r22,r2
  80947c:	182f883a 	mov	r23,r3
  809480:	000d883a 	mov	r6,zero
  809484:	000f883a 	mov	r7,zero
  809488:	b009883a 	mov	r4,r22
  80948c:	b80b883a 	mov	r5,r23
  809490:	080b86c0 	call	80b86c <__eqdf2>
  809494:	103f6d26 	beq	r2,zero,80924c <__kernel_rem_pio2+0x434>
  809498:	000d883a 	mov	r6,zero
  80949c:	000f883a 	mov	r7,zero
  8094a0:	b009883a 	mov	r4,r22
  8094a4:	b80b883a 	mov	r5,r23
  8094a8:	080b86c0 	call	80b86c <__eqdf2>
  8094ac:	1001021e 	bne	r2,zero,8098b8 <__kernel_rem_pio2+0xaa0>
  8094b0:	d9008e17 	ldw	r4,568(sp)
  8094b4:	d9409217 	ldw	r5,584(sp)
  8094b8:	213fffc4 	addi	r4,r4,-1
  8094bc:	200690ba 	slli	r3,r4,2
  8094c0:	297ffa04 	addi	r5,r5,-24
  8094c4:	d9008e15 	stw	r4,568(sp)
  8094c8:	1ec7883a 	add	r3,r3,sp
  8094cc:	18800017 	ldw	r2,0(r3)
  8094d0:	d9409215 	stw	r5,584(sp)
  8094d4:	1000091e 	bne	r2,zero,8094fc <__kernel_rem_pio2+0x6e4>
  8094d8:	d9808e17 	ldw	r6,568(sp)
  8094dc:	d9c09217 	ldw	r7,584(sp)
  8094e0:	18ffff04 	addi	r3,r3,-4
  8094e4:	31bfffc4 	addi	r6,r6,-1
  8094e8:	39fffa04 	addi	r7,r7,-24
  8094ec:	18800017 	ldw	r2,0(r3)
  8094f0:	d9808e15 	stw	r6,568(sp)
  8094f4:	d9c09215 	stw	r7,584(sp)
  8094f8:	103ff726 	beq	r2,zero,8094d8 <__kernel_rem_pio2+0x6c0>
  8094fc:	d9809217 	ldw	r6,584(sp)
  809500:	0005883a 	mov	r2,zero
  809504:	00cffc34 	movhi	r3,16368
  809508:	18c00004 	addi	r3,r3,0
  80950c:	180b883a 	mov	r5,r3
  809510:	1009883a 	mov	r4,r2
  809514:	080a18c0 	call	80a18c <scalbn>
  809518:	df008e17 	ldw	fp,568(sp)
  80951c:	d8809415 	stw	r2,592(sp)
  809520:	d8c09515 	stw	r3,596(sp)
  809524:	e02a803a 	cmplt	r21,fp,zero
  809528:	a8004c1e 	bne	r21,zero,80965c <__kernel_rem_pio2+0x844>
  80952c:	e00490fa 	slli	r2,fp,3
  809530:	e00690ba 	slli	r3,fp,2
  809534:	16c5883a 	add	r2,r2,sp
  809538:	1ee3883a 	add	r17,r3,sp
  80953c:	14006404 	addi	r16,r2,400
  809540:	89000017 	ldw	r4,0(r17)
  809544:	e73fffc4 	addi	fp,fp,-1
  809548:	8c7fff04 	addi	r17,r17,-4
  80954c:	080bb280 	call	80bb28 <__floatsidf>
  809550:	d9809417 	ldw	r6,592(sp)
  809554:	d9c09517 	ldw	r7,596(sp)
  809558:	180b883a 	mov	r5,r3
  80955c:	1009883a 	mov	r4,r2
  809560:	080b21c0 	call	80b21c <__muldf3>
  809564:	d9409517 	ldw	r5,596(sp)
  809568:	d9009417 	ldw	r4,592(sp)
  80956c:	0015883a 	mov	r10,zero
  809570:	02cf9c34 	movhi	r11,15984
  809574:	5ac00004 	addi	r11,r11,0
  809578:	80c00115 	stw	r3,4(r16)
  80957c:	80800015 	stw	r2,0(r16)
  809580:	580f883a 	mov	r7,r11
  809584:	500d883a 	mov	r6,r10
  809588:	080b21c0 	call	80b21c <__muldf3>
  80958c:	d8809415 	stw	r2,592(sp)
  809590:	d8c09515 	stw	r3,596(sp)
  809594:	843ffe04 	addi	r16,r16,-8
  809598:	e03fe90e 	bge	fp,zero,809540 <__kernel_rem_pio2+0x728>
  80959c:	df008e17 	ldw	fp,568(sp)
  8095a0:	a8002e1e 	bne	r21,zero,80965c <__kernel_rem_pio2+0x844>
  8095a4:	e00490fa 	slli	r2,fp,3
  8095a8:	16e9883a 	add	r20,r2,sp
  8095ac:	d8808e17 	ldw	r2,568(sp)
  8095b0:	d8c09017 	ldw	r3,576(sp)
  8095b4:	0025883a 	mov	r18,zero
  8095b8:	dc809415 	stw	r18,592(sp)
  8095bc:	dc809515 	stw	r18,596(sp)
  8095c0:	0021883a 	mov	r16,zero
  8095c4:	1727c83a 	sub	r19,r2,fp
  8095c8:	18001a16 	blt	r3,zero,809634 <__kernel_rem_pio2+0x81c>
  8095cc:	98001916 	blt	r19,zero,809634 <__kernel_rem_pio2+0x81c>
  8095d0:	a4406404 	addi	r17,r20,400
  8095d4:	048020b4 	movhi	r18,130
  8095d8:	94a6ef04 	addi	r18,r18,-25668
  8095dc:	8a000017 	ldw	r8,0(r17)
  8095e0:	8a400117 	ldw	r9,4(r17)
  8095e4:	90800017 	ldw	r2,0(r18)
  8095e8:	90c00117 	ldw	r3,4(r18)
  8095ec:	480f883a 	mov	r7,r9
  8095f0:	400d883a 	mov	r6,r8
  8095f4:	180b883a 	mov	r5,r3
  8095f8:	1009883a 	mov	r4,r2
  8095fc:	080b21c0 	call	80b21c <__muldf3>
  809600:	d9409517 	ldw	r5,596(sp)
  809604:	d9009417 	ldw	r4,592(sp)
  809608:	180f883a 	mov	r7,r3
  80960c:	100d883a 	mov	r6,r2
  809610:	080b1380 	call	80b138 <__adddf3>
  809614:	d9c09017 	ldw	r7,576(sp)
  809618:	84000044 	addi	r16,r16,1
  80961c:	94800204 	addi	r18,r18,8
  809620:	d8809415 	stw	r2,592(sp)
  809624:	d8c09515 	stw	r3,596(sp)
  809628:	8c400204 	addi	r17,r17,8
  80962c:	3c000116 	blt	r7,r16,809634 <__kernel_rem_pio2+0x81c>
  809630:	9c3fea0e 	bge	r19,r16,8095dc <__kernel_rem_pio2+0x7c4>
  809634:	980490fa 	slli	r2,r19,3
  809638:	da009517 	ldw	r8,596(sp)
  80963c:	e73fffc4 	addi	fp,fp,-1
  809640:	16c5883a 	add	r2,r2,sp
  809644:	10803c04 	addi	r2,r2,240
  809648:	12000115 	stw	r8,4(r2)
  80964c:	dc809417 	ldw	r18,592(sp)
  809650:	a53ffe04 	addi	r20,r20,-8
  809654:	14800015 	stw	r18,0(r2)
  809658:	e03fd40e 	bge	fp,zero,8095ac <__kernel_rem_pio2+0x794>
  80965c:	d8c0a217 	ldw	r3,648(sp)
  809660:	00800084 	movi	r2,2
  809664:	10c02216 	blt	r2,r3,8096f0 <__kernel_rem_pio2+0x8d8>
  809668:	00c0d116 	blt	zero,r3,8099b0 <__kernel_rem_pio2+0xb98>
  80966c:	18011f26 	beq	r3,zero,809aec <__kernel_rem_pio2+0xcd4>
  809670:	dc809117 	ldw	r18,580(sp)
  809674:	908001cc 	andi	r2,r18,7
  809678:	dfc0a117 	ldw	ra,644(sp)
  80967c:	df00a017 	ldw	fp,640(sp)
  809680:	dc009f17 	ldw	r16,636(sp)
  809684:	dc409e17 	ldw	r17,632(sp)
  809688:	dc809d17 	ldw	r18,628(sp)
  80968c:	dcc09c17 	ldw	r19,624(sp)
  809690:	dd009b17 	ldw	r20,620(sp)
  809694:	dd409a17 	ldw	r21,616(sp)
  809698:	dd809917 	ldw	r22,612(sp)
  80969c:	ddc09817 	ldw	r23,608(sp)
  8096a0:	dec0a204 	addi	sp,sp,648
  8096a4:	f800283a 	ret
  8096a8:	dc808e17 	ldw	r18,568(sp)
  8096ac:	01002034 	movhi	r4,128
  8096b0:	213fffc4 	addi	r4,r4,-1
  8096b4:	900490ba 	slli	r2,r18,2
  8096b8:	16c5883a 	add	r2,r2,sp
  8096bc:	10bfff04 	addi	r2,r2,-4
  8096c0:	10c00017 	ldw	r3,0(r2)
  8096c4:	1906703a 	and	r3,r3,r4
  8096c8:	10c00015 	stw	r3,0(r2)
  8096cc:	003ed606 	br	809228 <__kernel_rem_pio2+0x410>
  8096d0:	d8c08e17 	ldw	r3,568(sp)
  8096d4:	01001034 	movhi	r4,64
  8096d8:	213fffc4 	addi	r4,r4,-1
  8096dc:	180490ba 	slli	r2,r3,2
  8096e0:	16c5883a 	add	r2,r2,sp
  8096e4:	10bfff04 	addi	r2,r2,-4
  8096e8:	10c00017 	ldw	r3,0(r2)
  8096ec:	003ff506 	br	8096c4 <__kernel_rem_pio2+0x8ac>
  8096f0:	d900a217 	ldw	r4,648(sp)
  8096f4:	008000c4 	movi	r2,3
  8096f8:	20bfdd1e 	bne	r4,r2,809670 <__kernel_rem_pio2+0x858>
  8096fc:	df008e17 	ldw	fp,568(sp)
  809700:	0700220e 	bge	zero,fp,80978c <__kernel_rem_pio2+0x974>
  809704:	e02c90fa 	slli	r22,fp,3
  809708:	e73fffc4 	addi	fp,fp,-1
  80970c:	b6ed883a 	add	r22,r22,sp
  809710:	b5c03c04 	addi	r23,r22,240
  809714:	b5803a04 	addi	r22,r22,232
  809718:	b4000017 	ldw	r16,0(r22)
  80971c:	b4400117 	ldw	r17,4(r22)
  809720:	bd400117 	ldw	r21,4(r23)
  809724:	bd000017 	ldw	r20,0(r23)
  809728:	8009883a 	mov	r4,r16
  80972c:	880b883a 	mov	r5,r17
  809730:	a00d883a 	mov	r6,r20
  809734:	a80f883a 	mov	r7,r21
  809738:	080b1380 	call	80b138 <__adddf3>
  80973c:	d8809415 	stw	r2,592(sp)
  809740:	d8c09515 	stw	r3,596(sp)
  809744:	8009883a 	mov	r4,r16
  809748:	bc000017 	ldw	r16,0(r23)
  80974c:	100d883a 	mov	r6,r2
  809750:	180f883a 	mov	r7,r3
  809754:	880b883a 	mov	r5,r17
  809758:	1827883a 	mov	r19,r3
  80975c:	080b1a40 	call	80b1a4 <__subdf3>
  809760:	180f883a 	mov	r7,r3
  809764:	8009883a 	mov	r4,r16
  809768:	a80b883a 	mov	r5,r21
  80976c:	100d883a 	mov	r6,r2
  809770:	080b1380 	call	80b138 <__adddf3>
  809774:	b8c00115 	stw	r3,4(r23)
  809778:	b8800015 	stw	r2,0(r23)
  80977c:	b4c00115 	stw	r19,4(r22)
  809780:	da009417 	ldw	r8,592(sp)
  809784:	b2000015 	stw	r8,0(r22)
  809788:	073fde16 	blt	zero,fp,809704 <__kernel_rem_pio2+0x8ec>
  80978c:	df008e17 	ldw	fp,568(sp)
  809790:	00002106 	br	809818 <__kernel_rem_pio2+0xa00>
  809794:	e02c90fa 	slli	r22,fp,3
  809798:	e73fffc4 	addi	fp,fp,-1
  80979c:	b6ed883a 	add	r22,r22,sp
  8097a0:	b5c03c04 	addi	r23,r22,240
  8097a4:	b5803a04 	addi	r22,r22,232
  8097a8:	b4000017 	ldw	r16,0(r22)
  8097ac:	b4400117 	ldw	r17,4(r22)
  8097b0:	bd400117 	ldw	r21,4(r23)
  8097b4:	bd000017 	ldw	r20,0(r23)
  8097b8:	8009883a 	mov	r4,r16
  8097bc:	880b883a 	mov	r5,r17
  8097c0:	a00d883a 	mov	r6,r20
  8097c4:	a80f883a 	mov	r7,r21
  8097c8:	080b1380 	call	80b138 <__adddf3>
  8097cc:	d8809415 	stw	r2,592(sp)
  8097d0:	d8c09515 	stw	r3,596(sp)
  8097d4:	8009883a 	mov	r4,r16
  8097d8:	1827883a 	mov	r19,r3
  8097dc:	bc000017 	ldw	r16,0(r23)
  8097e0:	880b883a 	mov	r5,r17
  8097e4:	100d883a 	mov	r6,r2
  8097e8:	980f883a 	mov	r7,r19
  8097ec:	080b1a40 	call	80b1a4 <__subdf3>
  8097f0:	180f883a 	mov	r7,r3
  8097f4:	8009883a 	mov	r4,r16
  8097f8:	a80b883a 	mov	r5,r21
  8097fc:	100d883a 	mov	r6,r2
  809800:	080b1380 	call	80b138 <__adddf3>
  809804:	b8c00115 	stw	r3,4(r23)
  809808:	b8800015 	stw	r2,0(r23)
  80980c:	b4c00115 	stw	r19,4(r22)
  809810:	d9009417 	ldw	r4,592(sp)
  809814:	b1000015 	stw	r4,0(r22)
  809818:	00800044 	movi	r2,1
  80981c:	173fdd16 	blt	r2,fp,809794 <__kernel_rem_pio2+0x97c>
  809820:	df008e17 	ldw	fp,568(sp)
  809824:	000b883a 	mov	r5,zero
  809828:	00c00044 	movi	r3,1
  80982c:	d9409415 	stw	r5,592(sp)
  809830:	d9409515 	stw	r5,596(sp)
  809834:	1f00100e 	bge	r3,fp,809878 <__kernel_rem_pio2+0xa60>
  809838:	e00490fa 	slli	r2,fp,3
  80983c:	1823883a 	mov	r17,r3
  809840:	16c5883a 	add	r2,r2,sp
  809844:	14003c04 	addi	r16,r2,240
  809848:	80800017 	ldw	r2,0(r16)
  80984c:	80c00117 	ldw	r3,4(r16)
  809850:	d9409517 	ldw	r5,596(sp)
  809854:	d9009417 	ldw	r4,592(sp)
  809858:	180f883a 	mov	r7,r3
  80985c:	100d883a 	mov	r6,r2
  809860:	080b1380 	call	80b138 <__adddf3>
  809864:	e73fffc4 	addi	fp,fp,-1
  809868:	843ffe04 	addi	r16,r16,-8
  80986c:	d8809415 	stw	r2,592(sp)
  809870:	d8c09515 	stw	r3,596(sp)
  809874:	8f3ff416 	blt	r17,fp,809848 <__kernel_rem_pio2+0xa30>
  809878:	d9c09317 	ldw	r7,588(sp)
  80987c:	3800c81e 	bne	r7,zero,809ba0 <__kernel_rem_pio2+0xd88>
  809880:	da008d17 	ldw	r8,564(sp)
  809884:	dc809517 	ldw	r18,596(sp)
  809888:	d8803c17 	ldw	r2,240(sp)
  80988c:	d9003e17 	ldw	r4,248(sp)
  809890:	44800515 	stw	r18,20(r8)
  809894:	d8c03d17 	ldw	r3,244(sp)
  809898:	d9403f17 	ldw	r5,252(sp)
  80989c:	d9809417 	ldw	r6,592(sp)
  8098a0:	40c00115 	stw	r3,4(r8)
  8098a4:	41400315 	stw	r5,12(r8)
  8098a8:	41800415 	stw	r6,16(r8)
  8098ac:	40800015 	stw	r2,0(r8)
  8098b0:	41000215 	stw	r4,8(r8)
  8098b4:	003f6e06 	br	809670 <__kernel_rem_pio2+0x858>
  8098b8:	da009217 	ldw	r8,584(sp)
  8098bc:	b80b883a 	mov	r5,r23
  8098c0:	b009883a 	mov	r4,r22
  8098c4:	020dc83a 	sub	r6,zero,r8
  8098c8:	080a18c0 	call	80a18c <scalbn>
  8098cc:	0029883a 	mov	r20,zero
  8098d0:	05505c34 	movhi	r21,16752
  8098d4:	ad400004 	addi	r21,r21,0
  8098d8:	180b883a 	mov	r5,r3
  8098dc:	1009883a 	mov	r4,r2
  8098e0:	a00d883a 	mov	r6,r20
  8098e4:	a80f883a 	mov	r7,r21
  8098e8:	102d883a 	mov	r22,r2
  8098ec:	182f883a 	mov	r23,r3
  8098f0:	080ba100 	call	80ba10 <__gedf2>
  8098f4:	1000a216 	blt	r2,zero,809b80 <__kernel_rem_pio2+0xd68>
  8098f8:	0005883a 	mov	r2,zero
  8098fc:	00cf9c34 	movhi	r3,15984
  809900:	18c00004 	addi	r3,r3,0
  809904:	180f883a 	mov	r7,r3
  809908:	100d883a 	mov	r6,r2
  80990c:	b009883a 	mov	r4,r22
  809910:	b80b883a 	mov	r5,r23
  809914:	080b21c0 	call	80b21c <__muldf3>
  809918:	180b883a 	mov	r5,r3
  80991c:	1009883a 	mov	r4,r2
  809920:	080bbf80 	call	80bbf8 <__fixdfsi>
  809924:	1009883a 	mov	r4,r2
  809928:	080bb280 	call	80bb28 <__floatsidf>
  80992c:	1823883a 	mov	r17,r3
  809930:	000d883a 	mov	r6,zero
  809934:	a80f883a 	mov	r7,r21
  809938:	1009883a 	mov	r4,r2
  80993c:	880b883a 	mov	r5,r17
  809940:	dc808e17 	ldw	r18,568(sp)
  809944:	d8809415 	stw	r2,592(sp)
  809948:	d8c09515 	stw	r3,596(sp)
  80994c:	080b21c0 	call	80b21c <__muldf3>
  809950:	180f883a 	mov	r7,r3
  809954:	100d883a 	mov	r6,r2
  809958:	b80b883a 	mov	r5,r23
  80995c:	b009883a 	mov	r4,r22
  809960:	080b1a40 	call	80b1a4 <__subdf3>
  809964:	180b883a 	mov	r5,r3
  809968:	902690ba 	slli	r19,r18,2
  80996c:	1009883a 	mov	r4,r2
  809970:	94800044 	addi	r18,r18,1
  809974:	dc808e15 	stw	r18,568(sp)
  809978:	080bbf80 	call	80bbf8 <__fixdfsi>
  80997c:	dc808e17 	ldw	r18,568(sp)
  809980:	d9809217 	ldw	r6,584(sp)
  809984:	d9009417 	ldw	r4,592(sp)
  809988:	902490ba 	slli	r18,r18,2
  80998c:	9ee7883a 	add	r19,r19,sp
  809990:	31800604 	addi	r6,r6,24
  809994:	880b883a 	mov	r5,r17
  809998:	98800015 	stw	r2,0(r19)
  80999c:	96e5883a 	add	r18,r18,sp
  8099a0:	d9809215 	stw	r6,584(sp)
  8099a4:	080bbf80 	call	80bbf8 <__fixdfsi>
  8099a8:	90800015 	stw	r2,0(r18)
  8099ac:	003ed306 	br	8094fc <__kernel_rem_pio2+0x6e4>
  8099b0:	0009883a 	mov	r4,zero
  8099b4:	d9009415 	stw	r4,592(sp)
  8099b8:	d9009515 	stw	r4,596(sp)
  8099bc:	df008e17 	ldw	fp,568(sp)
  8099c0:	a8000f1e 	bne	r21,zero,809a00 <__kernel_rem_pio2+0xbe8>
  8099c4:	e00490fa 	slli	r2,fp,3
  8099c8:	16c5883a 	add	r2,r2,sp
  8099cc:	14003c04 	addi	r16,r2,240
  8099d0:	80800017 	ldw	r2,0(r16)
  8099d4:	80c00117 	ldw	r3,4(r16)
  8099d8:	d9409517 	ldw	r5,596(sp)
  8099dc:	d9009417 	ldw	r4,592(sp)
  8099e0:	180f883a 	mov	r7,r3
  8099e4:	100d883a 	mov	r6,r2
  8099e8:	080b1380 	call	80b138 <__adddf3>
  8099ec:	e73fffc4 	addi	fp,fp,-1
  8099f0:	843ffe04 	addi	r16,r16,-8
  8099f4:	d8809415 	stw	r2,592(sp)
  8099f8:	d8c09515 	stw	r3,596(sp)
  8099fc:	e03ff40e 	bge	fp,zero,8099d0 <__kernel_rem_pio2+0xbb8>
  809a00:	d9c09317 	ldw	r7,588(sp)
  809a04:	dc809417 	ldw	r18,592(sp)
  809a08:	d8809517 	ldw	r2,596(sp)
  809a0c:	3823003a 	cmpeq	r17,r7,zero
  809a10:	9011883a 	mov	r8,r18
  809a14:	1013883a 	mov	r9,r2
  809a18:	8800071e 	bne	r17,zero,809a38 <__kernel_rem_pio2+0xc20>
  809a1c:	0005883a 	mov	r2,zero
  809a20:	00e00034 	movhi	r3,32768
  809a24:	18c00004 	addi	r3,r3,0
  809a28:	1488f03a 	xor	r4,r2,r18
  809a2c:	48caf03a 	xor	r5,r9,r3
  809a30:	2011883a 	mov	r8,r4
  809a34:	2813883a 	mov	r9,r5
  809a38:	d9008d17 	ldw	r4,564(sp)
  809a3c:	d8803c17 	ldw	r2,240(sp)
  809a40:	d9c09517 	ldw	r7,596(sp)
  809a44:	22400115 	stw	r9,4(r4)
  809a48:	d8c03d17 	ldw	r3,244(sp)
  809a4c:	d9809417 	ldw	r6,592(sp)
  809a50:	22000015 	stw	r8,0(r4)
  809a54:	180b883a 	mov	r5,r3
  809a58:	1009883a 	mov	r4,r2
  809a5c:	080b1a40 	call	80b1a4 <__subdf3>
  809a60:	d9c08e17 	ldw	r7,568(sp)
  809a64:	07000044 	movi	fp,1
  809a68:	d8809415 	stw	r2,592(sp)
  809a6c:	d8c09515 	stw	r3,596(sp)
  809a70:	3f000e16 	blt	r7,fp,809aac <__kernel_rem_pio2+0xc94>
  809a74:	dc003e04 	addi	r16,sp,248
  809a78:	80800017 	ldw	r2,0(r16)
  809a7c:	80c00117 	ldw	r3,4(r16)
  809a80:	d9409517 	ldw	r5,596(sp)
  809a84:	d9009417 	ldw	r4,592(sp)
  809a88:	180f883a 	mov	r7,r3
  809a8c:	100d883a 	mov	r6,r2
  809a90:	080b1380 	call	80b138 <__adddf3>
  809a94:	dc808e17 	ldw	r18,568(sp)
  809a98:	e7000044 	addi	fp,fp,1
  809a9c:	84000204 	addi	r16,r16,8
  809aa0:	d8809415 	stw	r2,592(sp)
  809aa4:	d8c09515 	stw	r3,596(sp)
  809aa8:	973ff30e 	bge	r18,fp,809a78 <__kernel_rem_pio2+0xc60>
  809aac:	d8809417 	ldw	r2,592(sp)
  809ab0:	d8c09517 	ldw	r3,596(sp)
  809ab4:	100d883a 	mov	r6,r2
  809ab8:	180f883a 	mov	r7,r3
  809abc:	8800071e 	bne	r17,zero,809adc <__kernel_rem_pio2+0xcc4>
  809ac0:	0005883a 	mov	r2,zero
  809ac4:	00e00034 	movhi	r3,32768
  809ac8:	18c00004 	addi	r3,r3,0
  809acc:	1188f03a 	xor	r4,r2,r6
  809ad0:	38caf03a 	xor	r5,r7,r3
  809ad4:	200d883a 	mov	r6,r4
  809ad8:	280f883a 	mov	r7,r5
  809adc:	d9008d17 	ldw	r4,564(sp)
  809ae0:	21c00315 	stw	r7,12(r4)
  809ae4:	21800215 	stw	r6,8(r4)
  809ae8:	003ee106 	br	809670 <__kernel_rem_pio2+0x858>
  809aec:	000b883a 	mov	r5,zero
  809af0:	d9409415 	stw	r5,592(sp)
  809af4:	df008e17 	ldw	fp,568(sp)
  809af8:	d9409515 	stw	r5,596(sp)
  809afc:	a8000f1e 	bne	r21,zero,809b3c <__kernel_rem_pio2+0xd24>
  809b00:	e00490fa 	slli	r2,fp,3
  809b04:	16c5883a 	add	r2,r2,sp
  809b08:	14003c04 	addi	r16,r2,240
  809b0c:	80800017 	ldw	r2,0(r16)
  809b10:	80c00117 	ldw	r3,4(r16)
  809b14:	d9409517 	ldw	r5,596(sp)
  809b18:	d9009417 	ldw	r4,592(sp)
  809b1c:	180f883a 	mov	r7,r3
  809b20:	100d883a 	mov	r6,r2
  809b24:	080b1380 	call	80b138 <__adddf3>
  809b28:	e73fffc4 	addi	fp,fp,-1
  809b2c:	843ffe04 	addi	r16,r16,-8
  809b30:	d8809415 	stw	r2,592(sp)
  809b34:	d8c09515 	stw	r3,596(sp)
  809b38:	e03ff40e 	bge	fp,zero,809b0c <__kernel_rem_pio2+0xcf4>
  809b3c:	da009417 	ldw	r8,592(sp)
  809b40:	dc809517 	ldw	r18,596(sp)
  809b44:	d8809317 	ldw	r2,588(sp)
  809b48:	400d883a 	mov	r6,r8
  809b4c:	900f883a 	mov	r7,r18
  809b50:	10000726 	beq	r2,zero,809b70 <__kernel_rem_pio2+0xd58>
  809b54:	0005883a 	mov	r2,zero
  809b58:	00e00034 	movhi	r3,32768
  809b5c:	18c00004 	addi	r3,r3,0
  809b60:	1208f03a 	xor	r4,r2,r8
  809b64:	90caf03a 	xor	r5,r18,r3
  809b68:	200d883a 	mov	r6,r4
  809b6c:	280f883a 	mov	r7,r5
  809b70:	d8c08d17 	ldw	r3,564(sp)
  809b74:	19c00115 	stw	r7,4(r3)
  809b78:	19800015 	stw	r6,0(r3)
  809b7c:	003ebc06 	br	809670 <__kernel_rem_pio2+0x858>
  809b80:	d9c08e17 	ldw	r7,568(sp)
  809b84:	b80b883a 	mov	r5,r23
  809b88:	b009883a 	mov	r4,r22
  809b8c:	382090ba 	slli	r16,r7,2
  809b90:	080bbf80 	call	80bbf8 <__fixdfsi>
  809b94:	86e1883a 	add	r16,r16,sp
  809b98:	80800015 	stw	r2,0(r16)
  809b9c:	003e5706 	br	8094fc <__kernel_rem_pio2+0x6e4>
  809ba0:	db803e17 	ldw	r14,248(sp)
  809ba4:	dc809417 	ldw	r18,592(sp)
  809ba8:	dc003c17 	ldw	r16,240(sp)
  809bac:	0009883a 	mov	r4,zero
  809bb0:	000d883a 	mov	r6,zero
  809bb4:	dc403d17 	ldw	r17,244(sp)
  809bb8:	dbc03f17 	ldw	r15,252(sp)
  809bbc:	0005883a 	mov	r2,zero
  809bc0:	2398f03a 	xor	r12,r4,r14
  809bc4:	3490f03a 	xor	r8,r6,r18
  809bc8:	d9009517 	ldw	r4,596(sp)
  809bcc:	1414f03a 	xor	r10,r2,r16
  809bd0:	4005883a 	mov	r2,r8
  809bd4:	da008d17 	ldw	r8,564(sp)
  809bd8:	00e00034 	movhi	r3,32768
  809bdc:	18c00004 	addi	r3,r3,0
  809be0:	78daf03a 	xor	r13,r15,r3
  809be4:	20d2f03a 	xor	r9,r4,r3
  809be8:	88d6f03a 	xor	r11,r17,r3
  809bec:	42400515 	stw	r9,20(r8)
  809bf0:	42c00115 	stw	r11,4(r8)
  809bf4:	43400315 	stw	r13,12(r8)
  809bf8:	42800015 	stw	r10,0(r8)
  809bfc:	43000215 	stw	r12,8(r8)
  809c00:	40800415 	stw	r2,16(r8)
  809c04:	003e9a06 	br	809670 <__kernel_rem_pio2+0x858>

00809c08 <__kernel_sin>:
  809c08:	00a00034 	movhi	r2,32768
  809c0c:	10bfffc4 	addi	r2,r2,-1
  809c10:	deffef04 	addi	sp,sp,-68
  809c14:	2886703a 	and	r3,r5,r2
  809c18:	008f9034 	movhi	r2,15936
  809c1c:	10bfffc4 	addi	r2,r2,-1
  809c20:	dd000b15 	stw	r20,44(sp)
  809c24:	dd400a15 	stw	r21,40(sp)
  809c28:	dfc01015 	stw	ra,64(sp)
  809c2c:	dc000f15 	stw	r16,60(sp)
  809c30:	dc400e15 	stw	r17,56(sp)
  809c34:	dc800d15 	stw	r18,52(sp)
  809c38:	dcc00c15 	stw	r19,48(sp)
  809c3c:	dd800915 	stw	r22,36(sp)
  809c40:	ddc00815 	stw	r23,32(sp)
  809c44:	2029883a 	mov	r20,r4
  809c48:	282b883a 	mov	r21,r5
  809c4c:	d9800015 	stw	r6,0(sp)
  809c50:	d9c00115 	stw	r7,4(sp)
  809c54:	10c00516 	blt	r2,r3,809c6c <__kernel_sin+0x64>
  809c58:	080bbf80 	call	80bbf8 <__fixdfsi>
  809c5c:	1000031e 	bne	r2,zero,809c6c <__kernel_sin+0x64>
  809c60:	a00d883a 	mov	r6,r20
  809c64:	a80f883a 	mov	r7,r21
  809c68:	00008906 	br	809e90 <__kernel_sin+0x288>
  809c6c:	a009883a 	mov	r4,r20
  809c70:	a80b883a 	mov	r5,r21
  809c74:	a00d883a 	mov	r6,r20
  809c78:	a80f883a 	mov	r7,r21
  809c7c:	080b21c0 	call	80b21c <__muldf3>
  809c80:	102d883a 	mov	r22,r2
  809c84:	b009883a 	mov	r4,r22
  809c88:	180b883a 	mov	r5,r3
  809c8c:	a00d883a 	mov	r6,r20
  809c90:	a80f883a 	mov	r7,r21
  809c94:	182f883a 	mov	r23,r3
  809c98:	d8800215 	stw	r2,8(sp)
  809c9c:	d8c00315 	stw	r3,12(sp)
  809ca0:	080b21c0 	call	80b21c <__muldf3>
  809ca4:	d9000217 	ldw	r4,8(sp)
  809ca8:	0216b434 	movhi	r8,23248
  809cac:	42355f04 	addi	r8,r8,-10884
  809cb0:	024f79b4 	movhi	r9,15846
  809cb4:	4a764e84 	addi	r9,r9,-9926
  809cb8:	480f883a 	mov	r7,r9
  809cbc:	400d883a 	mov	r6,r8
  809cc0:	b80b883a 	mov	r5,r23
  809cc4:	d8800615 	stw	r2,24(sp)
  809cc8:	d8c00715 	stw	r3,28(sp)
  809ccc:	080b21c0 	call	80b21c <__muldf3>
  809cd0:	02228b34 	movhi	r8,35372
  809cd4:	42273ac4 	addi	r8,r8,-25365
  809cd8:	026f96f4 	movhi	r9,48731
  809cdc:	4a797984 	addi	r9,r9,-6682
  809ce0:	480f883a 	mov	r7,r9
  809ce4:	400d883a 	mov	r6,r8
  809ce8:	180b883a 	mov	r5,r3
  809cec:	1009883a 	mov	r4,r2
  809cf0:	080b1380 	call	80b138 <__adddf3>
  809cf4:	d9800217 	ldw	r6,8(sp)
  809cf8:	180b883a 	mov	r5,r3
  809cfc:	1009883a 	mov	r4,r2
  809d00:	b80f883a 	mov	r7,r23
  809d04:	080b21c0 	call	80b21c <__muldf3>
  809d08:	0215ecb4 	movhi	r8,22450
  809d0c:	423f9f44 	addi	r8,r8,-387
  809d10:	024fb1f4 	movhi	r9,16071
  809d14:	4a4778c4 	addi	r9,r9,7651
  809d18:	480f883a 	mov	r7,r9
  809d1c:	400d883a 	mov	r6,r8
  809d20:	180b883a 	mov	r5,r3
  809d24:	1009883a 	mov	r4,r2
  809d28:	080b1380 	call	80b138 <__adddf3>
  809d2c:	d9800217 	ldw	r6,8(sp)
  809d30:	180b883a 	mov	r5,r3
  809d34:	1009883a 	mov	r4,r2
  809d38:	b80f883a 	mov	r7,r23
  809d3c:	080b21c0 	call	80b21c <__muldf3>
  809d40:	02067074 	movhi	r8,6593
  809d44:	42187544 	addi	r8,r8,25045
  809d48:	026fcab4 	movhi	r9,48938
  809d4c:	4a406804 	addi	r9,r9,416
  809d50:	480f883a 	mov	r7,r9
  809d54:	400d883a 	mov	r6,r8
  809d58:	180b883a 	mov	r5,r3
  809d5c:	1009883a 	mov	r4,r2
  809d60:	080b1380 	call	80b138 <__adddf3>
  809d64:	d9800217 	ldw	r6,8(sp)
  809d68:	180b883a 	mov	r5,r3
  809d6c:	1009883a 	mov	r4,r2
  809d70:	b80f883a 	mov	r7,r23
  809d74:	080b21c0 	call	80b21c <__muldf3>
  809d78:	02044474 	movhi	r8,4369
  809d7c:	423e2984 	addi	r8,r8,-1882
  809d80:	024fe074 	movhi	r9,16257
  809d84:	4a444444 	addi	r9,r9,4369
  809d88:	180b883a 	mov	r5,r3
  809d8c:	480f883a 	mov	r7,r9
  809d90:	1009883a 	mov	r4,r2
  809d94:	400d883a 	mov	r6,r8
  809d98:	080b1380 	call	80b138 <__adddf3>
  809d9c:	1021883a 	mov	r16,r2
  809da0:	d8800617 	ldw	r2,24(sp)
  809da4:	1823883a 	mov	r17,r3
  809da8:	d8800415 	stw	r2,16(sp)
  809dac:	d8800717 	ldw	r2,28(sp)
  809db0:	d8800515 	stw	r2,20(sp)
  809db4:	d8801117 	ldw	r2,68(sp)
  809db8:	10004226 	beq	r2,zero,809ec4 <__kernel_sin+0x2bc>
  809dbc:	d9000017 	ldw	r4,0(sp)
  809dc0:	d9400117 	ldw	r5,4(sp)
  809dc4:	0005883a 	mov	r2,zero
  809dc8:	00cff834 	movhi	r3,16352
  809dcc:	18c00004 	addi	r3,r3,0
  809dd0:	180f883a 	mov	r7,r3
  809dd4:	100d883a 	mov	r6,r2
  809dd8:	080b21c0 	call	80b21c <__muldf3>
  809ddc:	d9000417 	ldw	r4,16(sp)
  809de0:	d9400717 	ldw	r5,28(sp)
  809de4:	800d883a 	mov	r6,r16
  809de8:	880f883a 	mov	r7,r17
  809dec:	1021883a 	mov	r16,r2
  809df0:	1823883a 	mov	r17,r3
  809df4:	080b21c0 	call	80b21c <__muldf3>
  809df8:	180f883a 	mov	r7,r3
  809dfc:	880b883a 	mov	r5,r17
  809e00:	8009883a 	mov	r4,r16
  809e04:	100d883a 	mov	r6,r2
  809e08:	080b1a40 	call	80b1a4 <__subdf3>
  809e0c:	d9800217 	ldw	r6,8(sp)
  809e10:	180b883a 	mov	r5,r3
  809e14:	b80f883a 	mov	r7,r23
  809e18:	1009883a 	mov	r4,r2
  809e1c:	080b21c0 	call	80b21c <__muldf3>
  809e20:	d9c00117 	ldw	r7,4(sp)
  809e24:	d9800017 	ldw	r6,0(sp)
  809e28:	180b883a 	mov	r5,r3
  809e2c:	1009883a 	mov	r4,r2
  809e30:	080b1a40 	call	80b1a4 <__subdf3>
  809e34:	d9000417 	ldw	r4,16(sp)
  809e38:	d9400717 	ldw	r5,28(sp)
  809e3c:	02155574 	movhi	r8,21845
  809e40:	42155244 	addi	r8,r8,21833
  809e44:	026ff174 	movhi	r9,49093
  809e48:	4a555544 	addi	r9,r9,21845
  809e4c:	480f883a 	mov	r7,r9
  809e50:	400d883a 	mov	r6,r8
  809e54:	1021883a 	mov	r16,r2
  809e58:	1823883a 	mov	r17,r3
  809e5c:	080b21c0 	call	80b21c <__muldf3>
  809e60:	180f883a 	mov	r7,r3
  809e64:	880b883a 	mov	r5,r17
  809e68:	8009883a 	mov	r4,r16
  809e6c:	100d883a 	mov	r6,r2
  809e70:	080b1a40 	call	80b1a4 <__subdf3>
  809e74:	180f883a 	mov	r7,r3
  809e78:	a80b883a 	mov	r5,r21
  809e7c:	a009883a 	mov	r4,r20
  809e80:	100d883a 	mov	r6,r2
  809e84:	080b1a40 	call	80b1a4 <__subdf3>
  809e88:	100d883a 	mov	r6,r2
  809e8c:	180f883a 	mov	r7,r3
  809e90:	3807883a 	mov	r3,r7
  809e94:	3005883a 	mov	r2,r6
  809e98:	dfc01017 	ldw	ra,64(sp)
  809e9c:	dc000f17 	ldw	r16,60(sp)
  809ea0:	dc400e17 	ldw	r17,56(sp)
  809ea4:	dc800d17 	ldw	r18,52(sp)
  809ea8:	dcc00c17 	ldw	r19,48(sp)
  809eac:	dd000b17 	ldw	r20,44(sp)
  809eb0:	dd400a17 	ldw	r21,40(sp)
  809eb4:	dd800917 	ldw	r22,36(sp)
  809eb8:	ddc00817 	ldw	r23,32(sp)
  809ebc:	dec01104 	addi	sp,sp,68
  809ec0:	f800283a 	ret
  809ec4:	d9000217 	ldw	r4,8(sp)
  809ec8:	b80b883a 	mov	r5,r23
  809ecc:	800d883a 	mov	r6,r16
  809ed0:	180f883a 	mov	r7,r3
  809ed4:	080b21c0 	call	80b21c <__muldf3>
  809ed8:	02155574 	movhi	r8,21845
  809edc:	42155244 	addi	r8,r8,21833
  809ee0:	026ff174 	movhi	r9,49093
  809ee4:	4a555544 	addi	r9,r9,21845
  809ee8:	480f883a 	mov	r7,r9
  809eec:	400d883a 	mov	r6,r8
  809ef0:	180b883a 	mov	r5,r3
  809ef4:	1009883a 	mov	r4,r2
  809ef8:	080b1380 	call	80b138 <__adddf3>
  809efc:	d9800417 	ldw	r6,16(sp)
  809f00:	d9c00717 	ldw	r7,28(sp)
  809f04:	180b883a 	mov	r5,r3
  809f08:	1009883a 	mov	r4,r2
  809f0c:	080b21c0 	call	80b21c <__muldf3>
  809f10:	180b883a 	mov	r5,r3
  809f14:	a80f883a 	mov	r7,r21
  809f18:	1009883a 	mov	r4,r2
  809f1c:	a00d883a 	mov	r6,r20
  809f20:	080b1380 	call	80b138 <__adddf3>
  809f24:	003fd806 	br	809e88 <__kernel_sin+0x280>

00809f28 <fabs>:
  809f28:	01e00034 	movhi	r7,32768
  809f2c:	39ffffc4 	addi	r7,r7,-1
  809f30:	29ce703a 	and	r7,r5,r7
  809f34:	2005883a 	mov	r2,r4
  809f38:	3807883a 	mov	r3,r7
  809f3c:	f800283a 	ret

00809f40 <floor>:
  809f40:	2805d53a 	srai	r2,r5,20
  809f44:	defff904 	addi	sp,sp,-28
  809f48:	dc800315 	stw	r18,12(sp)
  809f4c:	1181ffcc 	andi	r6,r2,2047
  809f50:	34bf0044 	addi	r18,r6,-1023
  809f54:	008004c4 	movi	r2,19
  809f58:	dcc00215 	stw	r19,8(sp)
  809f5c:	dd000115 	stw	r20,4(sp)
  809f60:	dfc00615 	stw	ra,24(sp)
  809f64:	dc000515 	stw	r16,20(sp)
  809f68:	dc400415 	stw	r17,16(sp)
  809f6c:	dd400015 	stw	r21,0(sp)
  809f70:	2827883a 	mov	r19,r5
  809f74:	2011883a 	mov	r8,r4
  809f78:	2029883a 	mov	r20,r4
  809f7c:	14801b16 	blt	r2,r18,809fec <floor+0xac>
  809f80:	90004216 	blt	r18,zero,80a08c <floor+0x14c>
  809f84:	00c00434 	movhi	r3,16
  809f88:	18ffffc4 	addi	r3,r3,-1
  809f8c:	1cabd83a 	sra	r21,r3,r18
  809f90:	2d44703a 	and	r2,r5,r21
  809f94:	1104b03a 	or	r2,r2,r4
  809f98:	10001826 	beq	r2,zero,809ffc <floor+0xbc>
  809f9c:	00a20034 	movhi	r2,34816
  809fa0:	109d6704 	addi	r2,r2,30108
  809fa4:	00df8e34 	movhi	r3,32312
  809fa8:	18f90f04 	addi	r3,r3,-7108
  809fac:	180f883a 	mov	r7,r3
  809fb0:	100d883a 	mov	r6,r2
  809fb4:	080b1380 	call	80b138 <__adddf3>
  809fb8:	180b883a 	mov	r5,r3
  809fbc:	000d883a 	mov	r6,zero
  809fc0:	000f883a 	mov	r7,zero
  809fc4:	1009883a 	mov	r4,r2
  809fc8:	080b9840 	call	80b984 <__gtdf2>
  809fcc:	0080040e 	bge	zero,r2,809fe0 <floor+0xa0>
  809fd0:	98004516 	blt	r19,zero,80a0e8 <floor+0x1a8>
  809fd4:	0544303a 	nor	r2,zero,r21
  809fd8:	98a6703a 	and	r19,r19,r2
  809fdc:	0029883a 	mov	r20,zero
  809fe0:	a00d883a 	mov	r6,r20
  809fe4:	980f883a 	mov	r7,r19
  809fe8:	00000606 	br	80a004 <floor+0xc4>
  809fec:	00800cc4 	movi	r2,51
  809ff0:	14800f0e 	bge	r2,r18,80a030 <floor+0xf0>
  809ff4:	00810004 	movi	r2,1024
  809ff8:	90803526 	beq	r18,r2,80a0d0 <floor+0x190>
  809ffc:	400d883a 	mov	r6,r8
  80a000:	980f883a 	mov	r7,r19
  80a004:	3807883a 	mov	r3,r7
  80a008:	3005883a 	mov	r2,r6
  80a00c:	dfc00617 	ldw	ra,24(sp)
  80a010:	dc000517 	ldw	r16,20(sp)
  80a014:	dc400417 	ldw	r17,16(sp)
  80a018:	dc800317 	ldw	r18,12(sp)
  80a01c:	dcc00217 	ldw	r19,8(sp)
  80a020:	dd000117 	ldw	r20,4(sp)
  80a024:	dd400017 	ldw	r21,0(sp)
  80a028:	dec00704 	addi	sp,sp,28
  80a02c:	f800283a 	ret
  80a030:	30befb44 	addi	r2,r6,-1043
  80a034:	00ffffc4 	movi	r3,-1
  80a038:	18aad83a 	srl	r21,r3,r2
  80a03c:	2548703a 	and	r4,r4,r21
  80a040:	203fee26 	beq	r4,zero,809ffc <floor+0xbc>
  80a044:	00a20034 	movhi	r2,34816
  80a048:	109d6704 	addi	r2,r2,30108
  80a04c:	00df8e34 	movhi	r3,32312
  80a050:	18f90f04 	addi	r3,r3,-7108
  80a054:	4009883a 	mov	r4,r8
  80a058:	180f883a 	mov	r7,r3
  80a05c:	100d883a 	mov	r6,r2
  80a060:	080b1380 	call	80b138 <__adddf3>
  80a064:	180b883a 	mov	r5,r3
  80a068:	000d883a 	mov	r6,zero
  80a06c:	000f883a 	mov	r7,zero
  80a070:	1009883a 	mov	r4,r2
  80a074:	080b9840 	call	80b984 <__gtdf2>
  80a078:	00bfd90e 	bge	zero,r2,809fe0 <floor+0xa0>
  80a07c:	98001f16 	blt	r19,zero,80a0fc <floor+0x1bc>
  80a080:	0544303a 	nor	r2,zero,r21
  80a084:	a0a8703a 	and	r20,r20,r2
  80a088:	003fd506 	br	809fe0 <floor+0xa0>
  80a08c:	00a20034 	movhi	r2,34816
  80a090:	109d6704 	addi	r2,r2,30108
  80a094:	00df8e34 	movhi	r3,32312
  80a098:	18f90f04 	addi	r3,r3,-7108
  80a09c:	180f883a 	mov	r7,r3
  80a0a0:	100d883a 	mov	r6,r2
  80a0a4:	080b1380 	call	80b138 <__adddf3>
  80a0a8:	180b883a 	mov	r5,r3
  80a0ac:	000d883a 	mov	r6,zero
  80a0b0:	000f883a 	mov	r7,zero
  80a0b4:	1009883a 	mov	r4,r2
  80a0b8:	080b9840 	call	80b984 <__gtdf2>
  80a0bc:	00bfc80e 	bge	zero,r2,809fe0 <floor+0xa0>
  80a0c0:	98001916 	blt	r19,zero,80a128 <floor+0x1e8>
  80a0c4:	0029883a 	mov	r20,zero
  80a0c8:	0027883a 	mov	r19,zero
  80a0cc:	003fc406 	br	809fe0 <floor+0xa0>
  80a0d0:	200d883a 	mov	r6,r4
  80a0d4:	280f883a 	mov	r7,r5
  80a0d8:	080b1380 	call	80b138 <__adddf3>
  80a0dc:	100d883a 	mov	r6,r2
  80a0e0:	180f883a 	mov	r7,r3
  80a0e4:	003fc706 	br	80a004 <floor+0xc4>
  80a0e8:	00800434 	movhi	r2,16
  80a0ec:	10800004 	addi	r2,r2,0
  80a0f0:	1485d83a 	sra	r2,r2,r18
  80a0f4:	98a7883a 	add	r19,r19,r2
  80a0f8:	003fb606 	br	809fd4 <floor+0x94>
  80a0fc:	00800504 	movi	r2,20
  80a100:	90801126 	beq	r18,r2,80a148 <floor+0x208>
  80a104:	00c00d04 	movi	r3,52
  80a108:	1c87c83a 	sub	r3,r3,r18
  80a10c:	00800044 	movi	r2,1
  80a110:	10c4983a 	sll	r2,r2,r3
  80a114:	1505883a 	add	r2,r2,r20
  80a118:	1500012e 	bgeu	r2,r20,80a120 <floor+0x1e0>
  80a11c:	9cc00044 	addi	r19,r19,1
  80a120:	1029883a 	mov	r20,r2
  80a124:	003fd606 	br	80a080 <floor+0x140>
  80a128:	00a00034 	movhi	r2,32768
  80a12c:	10bfffc4 	addi	r2,r2,-1
  80a130:	9884703a 	and	r2,r19,r2
  80a134:	1504b03a 	or	r2,r2,r20
  80a138:	103fa926 	beq	r2,zero,809fe0 <floor+0xa0>
  80a13c:	04effc34 	movhi	r19,49136
  80a140:	9cc00004 	addi	r19,r19,0
  80a144:	003fa506 	br	809fdc <floor+0x9c>
  80a148:	9cc00044 	addi	r19,r19,1
  80a14c:	003fcc06 	br	80a080 <floor+0x140>

0080a150 <isnan>:
  80a150:	200d883a 	mov	r6,r4
  80a154:	0109c83a 	sub	r4,zero,r4
  80a158:	2188b03a 	or	r4,r4,r6
  80a15c:	2008d7fa 	srli	r4,r4,31
  80a160:	00e00034 	movhi	r3,32768
  80a164:	18ffffc4 	addi	r3,r3,-1
  80a168:	28c4703a 	and	r2,r5,r3
  80a16c:	1104b03a 	or	r2,r2,r4
  80a170:	00dffc34 	movhi	r3,32752
  80a174:	18c00004 	addi	r3,r3,0
  80a178:	1885c83a 	sub	r2,r3,r2
  80a17c:	1004d7fa 	srli	r2,r2,31
  80a180:	f800283a 	ret

0080a184 <matherr>:
  80a184:	0005883a 	mov	r2,zero
  80a188:	f800283a 	ret

0080a18c <scalbn>:
  80a18c:	289ffc2c 	andhi	r2,r5,32752
  80a190:	100fd53a 	srai	r7,r2,20
  80a194:	defffd04 	addi	sp,sp,-12
  80a198:	dc000115 	stw	r16,4(sp)
  80a19c:	dfc00215 	stw	ra,8(sp)
  80a1a0:	dc400015 	stw	r17,0(sp)
  80a1a4:	2811883a 	mov	r8,r5
  80a1a8:	2015883a 	mov	r10,r4
  80a1ac:	2817883a 	mov	r11,r5
  80a1b0:	3021883a 	mov	r16,r6
  80a1b4:	38001f1e 	bne	r7,zero,80a234 <scalbn+0xa8>
  80a1b8:	00a00034 	movhi	r2,32768
  80a1bc:	10bfffc4 	addi	r2,r2,-1
  80a1c0:	2884703a 	and	r2,r5,r2
  80a1c4:	1104b03a 	or	r2,r2,r4
  80a1c8:	1000091e 	bne	r2,zero,80a1f0 <scalbn+0x64>
  80a1cc:	200d883a 	mov	r6,r4
  80a1d0:	280f883a 	mov	r7,r5
  80a1d4:	3807883a 	mov	r3,r7
  80a1d8:	3005883a 	mov	r2,r6
  80a1dc:	dfc00217 	ldw	ra,8(sp)
  80a1e0:	dc000117 	ldw	r16,4(sp)
  80a1e4:	dc400017 	ldw	r17,0(sp)
  80a1e8:	dec00304 	addi	sp,sp,12
  80a1ec:	f800283a 	ret
  80a1f0:	0005883a 	mov	r2,zero
  80a1f4:	00d0d434 	movhi	r3,17232
  80a1f8:	18c00004 	addi	r3,r3,0
  80a1fc:	180f883a 	mov	r7,r3
  80a200:	100d883a 	mov	r6,r2
  80a204:	080b21c0 	call	80b21c <__muldf3>
  80a208:	1009883a 	mov	r4,r2
  80a20c:	189ffc2c 	andhi	r2,r3,32752
  80a210:	1005d53a 	srai	r2,r2,20
  80a214:	180b883a 	mov	r5,r3
  80a218:	1811883a 	mov	r8,r3
  80a21c:	11fff284 	addi	r7,r2,-54
  80a220:	00bffff4 	movhi	r2,65535
  80a224:	108f2c04 	addi	r2,r2,15536
  80a228:	2015883a 	mov	r10,r4
  80a22c:	1817883a 	mov	r11,r3
  80a230:	80802216 	blt	r16,r2,80a2bc <scalbn+0x130>
  80a234:	0081ffc4 	movi	r2,2047
  80a238:	38801226 	beq	r7,r2,80a284 <scalbn+0xf8>
  80a23c:	3c0f883a 	add	r7,r7,r16
  80a240:	0081ff84 	movi	r2,2046
  80a244:	11c02516 	blt	r2,r7,80a2dc <scalbn+0x150>
  80a248:	01c0330e 	bge	zero,r7,80a318 <scalbn+0x18c>
  80a24c:	380a953a 	slli	r5,r7,20
  80a250:	01200434 	movhi	r4,32784
  80a254:	213fffc4 	addi	r4,r4,-1
  80a258:	4108703a 	and	r4,r8,r4
  80a25c:	2148b03a 	or	r4,r4,r5
  80a260:	500d883a 	mov	r6,r10
  80a264:	200f883a 	mov	r7,r4
  80a268:	3807883a 	mov	r3,r7
  80a26c:	3005883a 	mov	r2,r6
  80a270:	dfc00217 	ldw	ra,8(sp)
  80a274:	dc000117 	ldw	r16,4(sp)
  80a278:	dc400017 	ldw	r17,0(sp)
  80a27c:	dec00304 	addi	sp,sp,12
  80a280:	f800283a 	ret
  80a284:	580f883a 	mov	r7,r11
  80a288:	5009883a 	mov	r4,r10
  80a28c:	580b883a 	mov	r5,r11
  80a290:	500d883a 	mov	r6,r10
  80a294:	080b1380 	call	80b138 <__adddf3>
  80a298:	100d883a 	mov	r6,r2
  80a29c:	180f883a 	mov	r7,r3
  80a2a0:	3807883a 	mov	r3,r7
  80a2a4:	3005883a 	mov	r2,r6
  80a2a8:	dfc00217 	ldw	ra,8(sp)
  80a2ac:	dc000117 	ldw	r16,4(sp)
  80a2b0:	dc400017 	ldw	r17,0(sp)
  80a2b4:	dec00304 	addi	sp,sp,12
  80a2b8:	f800283a 	ret
  80a2bc:	00b0be74 	movhi	r2,49913
  80a2c0:	10bcd644 	addi	r2,r2,-3239
  80a2c4:	00c06974 	movhi	r3,421
  80a2c8:	18db87c4 	addi	r3,r3,28191
  80a2cc:	180f883a 	mov	r7,r3
  80a2d0:	100d883a 	mov	r6,r2
  80a2d4:	080b21c0 	call	80b21c <__muldf3>
  80a2d8:	003fef06 	br	80a298 <scalbn+0x10c>
  80a2dc:	04220034 	movhi	r16,34816
  80a2e0:	841d6704 	addi	r16,r16,30108
  80a2e4:	045f8e34 	movhi	r17,32312
  80a2e8:	8c790f04 	addi	r17,r17,-7108
  80a2ec:	580f883a 	mov	r7,r11
  80a2f0:	8009883a 	mov	r4,r16
  80a2f4:	880b883a 	mov	r5,r17
  80a2f8:	500d883a 	mov	r6,r10
  80a2fc:	080a3740 	call	80a374 <copysign>
  80a300:	1009883a 	mov	r4,r2
  80a304:	800d883a 	mov	r6,r16
  80a308:	180b883a 	mov	r5,r3
  80a30c:	880f883a 	mov	r7,r17
  80a310:	080b21c0 	call	80b21c <__muldf3>
  80a314:	003fe006 	br	80a298 <scalbn+0x10c>
  80a318:	00bff284 	movi	r2,-54
  80a31c:	11c00716 	blt	r2,r7,80a33c <scalbn+0x1b0>
  80a320:	00b0d414 	movui	r2,50000
  80a324:	143fed16 	blt	r2,r16,80a2dc <scalbn+0x150>
  80a328:	0430be74 	movhi	r16,49913
  80a32c:	843cd644 	addi	r16,r16,-3239
  80a330:	04406974 	movhi	r17,421
  80a334:	8c5b87c4 	addi	r17,r17,28191
  80a338:	003fec06 	br	80a2ec <scalbn+0x160>
  80a33c:	39c00d84 	addi	r7,r7,54
  80a340:	3808953a 	slli	r4,r7,20
  80a344:	01600434 	movhi	r5,32784
  80a348:	297fffc4 	addi	r5,r5,-1
  80a34c:	414a703a 	and	r5,r8,r5
  80a350:	024f2434 	movhi	r9,15504
  80a354:	4a400004 	addi	r9,r9,0
  80a358:	0011883a 	mov	r8,zero
  80a35c:	290ab03a 	or	r5,r5,r4
  80a360:	480f883a 	mov	r7,r9
  80a364:	5009883a 	mov	r4,r10
  80a368:	400d883a 	mov	r6,r8
  80a36c:	080b21c0 	call	80b21c <__muldf3>
  80a370:	003fc906 	br	80a298 <scalbn+0x10c>

0080a374 <copysign>:
  80a374:	02200034 	movhi	r8,32768
  80a378:	423fffc4 	addi	r8,r8,-1
  80a37c:	2a10703a 	and	r8,r5,r8
  80a380:	39e0002c 	andhi	r7,r7,32768
  80a384:	2013883a 	mov	r9,r4
  80a388:	41d0b03a 	or	r8,r8,r7
  80a38c:	4805883a 	mov	r2,r9
  80a390:	4007883a 	mov	r3,r8
  80a394:	f800283a 	ret

0080a398 <__fixunssfsi>:
  80a398:	defffe04 	addi	sp,sp,-8
  80a39c:	0153c034 	movhi	r5,20224
  80a3a0:	29400004 	addi	r5,r5,0
  80a3a4:	dc000015 	stw	r16,0(sp)
  80a3a8:	dfc00115 	stw	ra,4(sp)
  80a3ac:	2021883a 	mov	r16,r4
  80a3b0:	080ab140 	call	80ab14 <__gesf2>
  80a3b4:	8009883a 	mov	r4,r16
  80a3b8:	0173c034 	movhi	r5,52992
  80a3bc:	29400004 	addi	r5,r5,0
  80a3c0:	10000a16 	blt	r2,zero,80a3ec <__fixunssfsi+0x54>
  80a3c4:	080a5dc0 	call	80a5dc <__addsf3>
  80a3c8:	1009883a 	mov	r4,r2
  80a3cc:	080ad2c0 	call	80ad2c <__fixsfsi>
  80a3d0:	00e00034 	movhi	r3,32768
  80a3d4:	18c00004 	addi	r3,r3,0
  80a3d8:	10c5883a 	add	r2,r2,r3
  80a3dc:	dfc00117 	ldw	ra,4(sp)
  80a3e0:	dc000017 	ldw	r16,0(sp)
  80a3e4:	dec00204 	addi	sp,sp,8
  80a3e8:	f800283a 	ret
  80a3ec:	8009883a 	mov	r4,r16
  80a3f0:	080ad2c0 	call	80ad2c <__fixsfsi>
  80a3f4:	dfc00117 	ldw	ra,4(sp)
  80a3f8:	dc000017 	ldw	r16,0(sp)
  80a3fc:	dec00204 	addi	sp,sp,8
  80a400:	f800283a 	ret

0080a404 <_fpadd_parts>:
  80a404:	20c00017 	ldw	r3,0(r4)
  80a408:	00800044 	movi	r2,1
  80a40c:	200f883a 	mov	r7,r4
  80a410:	10c03d2e 	bgeu	r2,r3,80a508 <_fpadd_parts+0x104>
  80a414:	2a000017 	ldw	r8,0(r5)
  80a418:	280f883a 	mov	r7,r5
  80a41c:	12003a2e 	bgeu	r2,r8,80a508 <_fpadd_parts+0x104>
  80a420:	18800118 	cmpnei	r2,r3,4
  80a424:	10003a26 	beq	r2,zero,80a510 <_fpadd_parts+0x10c>
  80a428:	40800118 	cmpnei	r2,r8,4
  80a42c:	280f883a 	mov	r7,r5
  80a430:	10003526 	beq	r2,zero,80a508 <_fpadd_parts+0x104>
  80a434:	40800098 	cmpnei	r2,r8,2
  80a438:	10002426 	beq	r2,zero,80a4cc <_fpadd_parts+0xc8>
  80a43c:	18800098 	cmpnei	r2,r3,2
  80a440:	280f883a 	mov	r7,r5
  80a444:	10003026 	beq	r2,zero,80a508 <_fpadd_parts+0x104>
  80a448:	22000217 	ldw	r8,8(r4)
  80a44c:	29c00217 	ldw	r7,8(r5)
  80a450:	22400317 	ldw	r9,12(r4)
  80a454:	2a800317 	ldw	r10,12(r5)
  80a458:	41c7c83a 	sub	r3,r8,r7
  80a45c:	18004f16 	blt	r3,zero,80a59c <_fpadd_parts+0x198>
  80a460:	008007c4 	movi	r2,31
  80a464:	10c02d0e 	bge	r2,r3,80a51c <_fpadd_parts+0x118>
  80a468:	3a00490e 	bge	r7,r8,80a590 <_fpadd_parts+0x18c>
  80a46c:	0015883a 	mov	r10,zero
  80a470:	21000117 	ldw	r4,4(r4)
  80a474:	28800117 	ldw	r2,4(r5)
  80a478:	20803a26 	beq	r4,r2,80a564 <_fpadd_parts+0x160>
  80a47c:	5245c83a 	sub	r2,r10,r9
  80a480:	2000011e 	bne	r4,zero,80a488 <_fpadd_parts+0x84>
  80a484:	4a85c83a 	sub	r2,r9,r10
  80a488:	10004e16 	blt	r2,zero,80a5c4 <_fpadd_parts+0x1c0>
  80a48c:	1007883a 	mov	r3,r2
  80a490:	4009883a 	mov	r4,r8
  80a494:	100f883a 	mov	r7,r2
  80a498:	30000115 	stw	zero,4(r6)
  80a49c:	38bfffc4 	addi	r2,r7,-1
  80a4a0:	02500034 	movhi	r9,16384
  80a4a4:	4a7fff84 	addi	r9,r9,-2
  80a4a8:	380b883a 	mov	r5,r7
  80a4ac:	48803136 	bltu	r9,r2,80a574 <_fpadd_parts+0x170>
  80a4b0:	2947883a 	add	r3,r5,r5
  80a4b4:	223fffc4 	addi	r8,r4,-1
  80a4b8:	4009883a 	mov	r4,r8
  80a4bc:	18bfffc4 	addi	r2,r3,-1
  80a4c0:	180f883a 	mov	r7,r3
  80a4c4:	180b883a 	mov	r5,r3
  80a4c8:	003ff806 	br	80a4ac <_fpadd_parts+0xa8>
  80a4cc:	200f883a 	mov	r7,r4
  80a4d0:	1a000d1e 	bne	r3,r8,80a508 <_fpadd_parts+0x104>
  80a4d4:	20800017 	ldw	r2,0(r4)
  80a4d8:	20c00117 	ldw	r3,4(r4)
  80a4dc:	21c00217 	ldw	r7,8(r4)
  80a4e0:	30800015 	stw	r2,0(r6)
  80a4e4:	20800317 	ldw	r2,12(r4)
  80a4e8:	30c00115 	stw	r3,4(r6)
  80a4ec:	31c00215 	stw	r7,8(r6)
  80a4f0:	30800315 	stw	r2,12(r6)
  80a4f4:	20800117 	ldw	r2,4(r4)
  80a4f8:	28c00117 	ldw	r3,4(r5)
  80a4fc:	300f883a 	mov	r7,r6
  80a500:	10c4703a 	and	r2,r2,r3
  80a504:	30800115 	stw	r2,4(r6)
  80a508:	3805883a 	mov	r2,r7
  80a50c:	f800283a 	ret
  80a510:	40c00e26 	beq	r8,r3,80a54c <_fpadd_parts+0x148>
  80a514:	200f883a 	mov	r7,r4
  80a518:	003ffb06 	br	80a508 <_fpadd_parts+0x104>
  80a51c:	3a00050e 	bge	r7,r8,80a534 <_fpadd_parts+0x130>
  80a520:	5006d07a 	srli	r3,r10,1
  80a524:	5080004c 	andi	r2,r10,1
  80a528:	39c00044 	addi	r7,r7,1
  80a52c:	10d4b03a 	or	r10,r2,r3
  80a530:	003ffa06 	br	80a51c <_fpadd_parts+0x118>
  80a534:	41ffce0e 	bge	r8,r7,80a470 <_fpadd_parts+0x6c>
  80a538:	4806d07a 	srli	r3,r9,1
  80a53c:	4880004c 	andi	r2,r9,1
  80a540:	42000044 	addi	r8,r8,1
  80a544:	10d2b03a 	or	r9,r2,r3
  80a548:	003ffa06 	br	80a534 <_fpadd_parts+0x130>
  80a54c:	28c00117 	ldw	r3,4(r5)
  80a550:	20800117 	ldw	r2,4(r4)
  80a554:	01c020b4 	movhi	r7,130
  80a558:	39e70304 	addi	r7,r7,-25588
  80a55c:	10ffea1e 	bne	r2,r3,80a508 <_fpadd_parts+0x104>
  80a560:	003fec06 	br	80a514 <_fpadd_parts+0x110>
  80a564:	4a87883a 	add	r3,r9,r10
  80a568:	31000115 	stw	r4,4(r6)
  80a56c:	180f883a 	mov	r7,r3
  80a570:	4009883a 	mov	r4,r8
  80a574:	008000c4 	movi	r2,3
  80a578:	30800015 	stw	r2,0(r6)
  80a57c:	38000916 	blt	r7,zero,80a5a4 <_fpadd_parts+0x1a0>
  80a580:	300f883a 	mov	r7,r6
  80a584:	30c00315 	stw	r3,12(r6)
  80a588:	32000215 	stw	r8,8(r6)
  80a58c:	003fde06 	br	80a508 <_fpadd_parts+0x104>
  80a590:	3811883a 	mov	r8,r7
  80a594:	0013883a 	mov	r9,zero
  80a598:	003fb506 	br	80a470 <_fpadd_parts+0x6c>
  80a59c:	00c7c83a 	sub	r3,zero,r3
  80a5a0:	003faf06 	br	80a460 <_fpadd_parts+0x5c>
  80a5a4:	3804d07a 	srli	r2,r7,1
  80a5a8:	38c0004c 	andi	r3,r7,1
  80a5ac:	21000044 	addi	r4,r4,1
  80a5b0:	1886b03a 	or	r3,r3,r2
  80a5b4:	300f883a 	mov	r7,r6
  80a5b8:	30c00315 	stw	r3,12(r6)
  80a5bc:	31000215 	stw	r4,8(r6)
  80a5c0:	003fd106 	br	80a508 <_fpadd_parts+0x104>
  80a5c4:	0087c83a 	sub	r3,zero,r2
  80a5c8:	4009883a 	mov	r4,r8
  80a5cc:	00800044 	movi	r2,1
  80a5d0:	180f883a 	mov	r7,r3
  80a5d4:	30800115 	stw	r2,4(r6)
  80a5d8:	003fb006 	br	80a49c <_fpadd_parts+0x98>

0080a5dc <__addsf3>:
  80a5dc:	defff004 	addi	sp,sp,-64
  80a5e0:	dc400e15 	stw	r17,56(sp)
  80a5e4:	d9000c15 	stw	r4,48(sp)
  80a5e8:	d9400d15 	stw	r5,52(sp)
  80a5ec:	d9000c04 	addi	r4,sp,48
  80a5f0:	d80b883a 	mov	r5,sp
  80a5f4:	dc400404 	addi	r17,sp,16
  80a5f8:	dfc00f15 	stw	ra,60(sp)
  80a5fc:	080c0a80 	call	80c0a8 <__unpack_f>
  80a600:	d9000d04 	addi	r4,sp,52
  80a604:	880b883a 	mov	r5,r17
  80a608:	080c0a80 	call	80c0a8 <__unpack_f>
  80a60c:	d9800804 	addi	r6,sp,32
  80a610:	d809883a 	mov	r4,sp
  80a614:	880b883a 	mov	r5,r17
  80a618:	080a4040 	call	80a404 <_fpadd_parts>
  80a61c:	1009883a 	mov	r4,r2
  80a620:	080bf740 	call	80bf74 <__pack_f>
  80a624:	dfc00f17 	ldw	ra,60(sp)
  80a628:	dc400e17 	ldw	r17,56(sp)
  80a62c:	dec01004 	addi	sp,sp,64
  80a630:	f800283a 	ret

0080a634 <__subsf3>:
  80a634:	defff004 	addi	sp,sp,-64
  80a638:	dc400e15 	stw	r17,56(sp)
  80a63c:	d9000c15 	stw	r4,48(sp)
  80a640:	d9400d15 	stw	r5,52(sp)
  80a644:	d9000c04 	addi	r4,sp,48
  80a648:	d80b883a 	mov	r5,sp
  80a64c:	dc400404 	addi	r17,sp,16
  80a650:	dfc00f15 	stw	ra,60(sp)
  80a654:	080c0a80 	call	80c0a8 <__unpack_f>
  80a658:	d9000d04 	addi	r4,sp,52
  80a65c:	880b883a 	mov	r5,r17
  80a660:	080c0a80 	call	80c0a8 <__unpack_f>
  80a664:	d8800517 	ldw	r2,20(sp)
  80a668:	880b883a 	mov	r5,r17
  80a66c:	d809883a 	mov	r4,sp
  80a670:	d9800804 	addi	r6,sp,32
  80a674:	1080005c 	xori	r2,r2,1
  80a678:	d8800515 	stw	r2,20(sp)
  80a67c:	080a4040 	call	80a404 <_fpadd_parts>
  80a680:	1009883a 	mov	r4,r2
  80a684:	080bf740 	call	80bf74 <__pack_f>
  80a688:	dfc00f17 	ldw	ra,60(sp)
  80a68c:	dc400e17 	ldw	r17,56(sp)
  80a690:	dec01004 	addi	sp,sp,64
  80a694:	f800283a 	ret

0080a698 <__mulsf3>:
  80a698:	deffef04 	addi	sp,sp,-68
  80a69c:	dc000f15 	stw	r16,60(sp)
  80a6a0:	d9000c15 	stw	r4,48(sp)
  80a6a4:	d9400d15 	stw	r5,52(sp)
  80a6a8:	d9000c04 	addi	r4,sp,48
  80a6ac:	d80b883a 	mov	r5,sp
  80a6b0:	dc000404 	addi	r16,sp,16
  80a6b4:	dfc01015 	stw	ra,64(sp)
  80a6b8:	dc400e15 	stw	r17,56(sp)
  80a6bc:	080c0a80 	call	80c0a8 <__unpack_f>
  80a6c0:	d9000d04 	addi	r4,sp,52
  80a6c4:	800b883a 	mov	r5,r16
  80a6c8:	080c0a80 	call	80c0a8 <__unpack_f>
  80a6cc:	d8c00017 	ldw	r3,0(sp)
  80a6d0:	00800044 	movi	r2,1
  80a6d4:	dc400804 	addi	r17,sp,32
  80a6d8:	10c0132e 	bgeu	r2,r3,80a728 <__mulsf3+0x90>
  80a6dc:	81000017 	ldw	r4,0(r16)
  80a6e0:	11000b36 	bltu	r2,r4,80a710 <__mulsf3+0x78>
  80a6e4:	d8c00517 	ldw	r3,20(sp)
  80a6e8:	d8800117 	ldw	r2,4(sp)
  80a6ec:	8009883a 	mov	r4,r16
  80a6f0:	10c4c03a 	cmpne	r2,r2,r3
  80a6f4:	d8800515 	stw	r2,20(sp)
  80a6f8:	080bf740 	call	80bf74 <__pack_f>
  80a6fc:	dfc01017 	ldw	ra,64(sp)
  80a700:	dc000f17 	ldw	r16,60(sp)
  80a704:	dc400e17 	ldw	r17,56(sp)
  80a708:	dec01104 	addi	sp,sp,68
  80a70c:	f800283a 	ret
  80a710:	18800118 	cmpnei	r2,r3,4
  80a714:	10000f1e 	bne	r2,zero,80a754 <__mulsf3+0xbc>
  80a718:	20800098 	cmpnei	r2,r4,2
  80a71c:	010020b4 	movhi	r4,130
  80a720:	21270304 	addi	r4,r4,-25588
  80a724:	10000526 	beq	r2,zero,80a73c <__mulsf3+0xa4>
  80a728:	d8800117 	ldw	r2,4(sp)
  80a72c:	d8c00517 	ldw	r3,20(sp)
  80a730:	d809883a 	mov	r4,sp
  80a734:	10c4c03a 	cmpne	r2,r2,r3
  80a738:	d8800115 	stw	r2,4(sp)
  80a73c:	080bf740 	call	80bf74 <__pack_f>
  80a740:	dfc01017 	ldw	ra,64(sp)
  80a744:	dc000f17 	ldw	r16,60(sp)
  80a748:	dc400e17 	ldw	r17,56(sp)
  80a74c:	dec01104 	addi	sp,sp,68
  80a750:	f800283a 	ret
  80a754:	20800118 	cmpnei	r2,r4,4
  80a758:	10002526 	beq	r2,zero,80a7f0 <__mulsf3+0x158>
  80a75c:	18800098 	cmpnei	r2,r3,2
  80a760:	103ff126 	beq	r2,zero,80a728 <__mulsf3+0x90>
  80a764:	20800098 	cmpnei	r2,r4,2
  80a768:	103fde26 	beq	r2,zero,80a6e4 <__mulsf3+0x4c>
  80a76c:	d8800317 	ldw	r2,12(sp)
  80a770:	d9800717 	ldw	r6,28(sp)
  80a774:	000b883a 	mov	r5,zero
  80a778:	000f883a 	mov	r7,zero
  80a77c:	1009883a 	mov	r4,r2
  80a780:	080be740 	call	80be74 <__muldi3>
  80a784:	d9800617 	ldw	r6,24(sp)
  80a788:	da800217 	ldw	r10,8(sp)
  80a78c:	da400117 	ldw	r9,4(sp)
  80a790:	180b883a 	mov	r5,r3
  80a794:	5195883a 	add	r10,r10,r6
  80a798:	d9800517 	ldw	r6,20(sp)
  80a79c:	52800084 	addi	r10,r10,2
  80a7a0:	180f883a 	mov	r7,r3
  80a7a4:	4992c03a 	cmpne	r9,r9,r6
  80a7a8:	da400915 	stw	r9,36(sp)
  80a7ac:	1007883a 	mov	r3,r2
  80a7b0:	da800a15 	stw	r10,40(sp)
  80a7b4:	28001316 	blt	r5,zero,80a804 <__mulsf3+0x16c>
  80a7b8:	00900034 	movhi	r2,16384
  80a7bc:	10bfffc4 	addi	r2,r2,-1
  80a7c0:	11c01936 	bltu	r2,r7,80a828 <__mulsf3+0x190>
  80a7c4:	8a800217 	ldw	r10,8(r17)
  80a7c8:	1009883a 	mov	r4,r2
  80a7cc:	00000206 	br	80a7d8 <__mulsf3+0x140>
  80a7d0:	18c7883a 	add	r3,r3,r3
  80a7d4:	21c01336 	bltu	r4,r7,80a824 <__mulsf3+0x18c>
  80a7d8:	50bfffc4 	addi	r2,r10,-1
  80a7dc:	39cf883a 	add	r7,r7,r7
  80a7e0:	1015883a 	mov	r10,r2
  80a7e4:	183ffa0e 	bge	r3,zero,80a7d0 <__mulsf3+0x138>
  80a7e8:	39c00054 	ori	r7,r7,1
  80a7ec:	003ff806 	br	80a7d0 <__mulsf3+0x138>
  80a7f0:	18800098 	cmpnei	r2,r3,2
  80a7f4:	010020b4 	movhi	r4,130
  80a7f8:	21270304 	addi	r4,r4,-25588
  80a7fc:	103fb91e 	bne	r2,zero,80a6e4 <__mulsf3+0x4c>
  80a800:	003fce06 	br	80a73c <__mulsf3+0xa4>
  80a804:	2880004c 	andi	r2,r5,1
  80a808:	52800044 	addi	r10,r10,1
  80a80c:	10000226 	beq	r2,zero,80a818 <__mulsf3+0x180>
  80a810:	1806d07a 	srli	r3,r3,1
  80a814:	18e00034 	orhi	r3,r3,32768
  80a818:	380ed07a 	srli	r7,r7,1
  80a81c:	8a800215 	stw	r10,8(r17)
  80a820:	003fe506 	br	80a7b8 <__mulsf3+0x120>
  80a824:	88800215 	stw	r2,8(r17)
  80a828:	39001fcc 	andi	r4,r7,127
  80a82c:	00801004 	movi	r2,64
  80a830:	20800526 	beq	r4,r2,80a848 <__mulsf3+0x1b0>
  80a834:	008000c4 	movi	r2,3
  80a838:	8809883a 	mov	r4,r17
  80a83c:	89c00315 	stw	r7,12(r17)
  80a840:	88800015 	stw	r2,0(r17)
  80a844:	003fbd06 	br	80a73c <__mulsf3+0xa4>
  80a848:	3880200c 	andi	r2,r7,128
  80a84c:	1000011e 	bne	r2,zero,80a854 <__mulsf3+0x1bc>
  80a850:	183ff826 	beq	r3,zero,80a834 <__mulsf3+0x19c>
  80a854:	390f883a 	add	r7,r7,r4
  80a858:	003ff606 	br	80a834 <__mulsf3+0x19c>

0080a85c <__divsf3>:
  80a85c:	defff404 	addi	sp,sp,-48
  80a860:	dc000a15 	stw	r16,40(sp)
  80a864:	d9000815 	stw	r4,32(sp)
  80a868:	d9400915 	stw	r5,36(sp)
  80a86c:	d9000804 	addi	r4,sp,32
  80a870:	d80b883a 	mov	r5,sp
  80a874:	dc000404 	addi	r16,sp,16
  80a878:	dfc00b15 	stw	ra,44(sp)
  80a87c:	080c0a80 	call	80c0a8 <__unpack_f>
  80a880:	d9000904 	addi	r4,sp,36
  80a884:	800b883a 	mov	r5,r16
  80a888:	080c0a80 	call	80c0a8 <__unpack_f>
  80a88c:	d9400017 	ldw	r5,0(sp)
  80a890:	00800044 	movi	r2,1
  80a894:	d80f883a 	mov	r7,sp
  80a898:	d809883a 	mov	r4,sp
  80a89c:	1140262e 	bgeu	r2,r5,80a938 <__divsf3+0xdc>
  80a8a0:	81800017 	ldw	r6,0(r16)
  80a8a4:	8009883a 	mov	r4,r16
  80a8a8:	1180232e 	bgeu	r2,r6,80a938 <__divsf3+0xdc>
  80a8ac:	d8c00117 	ldw	r3,4(sp)
  80a8b0:	d9000517 	ldw	r4,20(sp)
  80a8b4:	28800120 	cmpeqi	r2,r5,4
  80a8b8:	1906f03a 	xor	r3,r3,r4
  80a8bc:	d8c00115 	stw	r3,4(sp)
  80a8c0:	1000221e 	bne	r2,zero,80a94c <__divsf3+0xf0>
  80a8c4:	288000a0 	cmpeqi	r2,r5,2
  80a8c8:	1000201e 	bne	r2,zero,80a94c <__divsf3+0xf0>
  80a8cc:	30800118 	cmpnei	r2,r6,4
  80a8d0:	10002326 	beq	r2,zero,80a960 <__divsf3+0x104>
  80a8d4:	30800098 	cmpnei	r2,r6,2
  80a8d8:	10002526 	beq	r2,zero,80a970 <__divsf3+0x114>
  80a8dc:	d8c00217 	ldw	r3,8(sp)
  80a8e0:	d8800617 	ldw	r2,24(sp)
  80a8e4:	d9000317 	ldw	r4,12(sp)
  80a8e8:	d9400717 	ldw	r5,28(sp)
  80a8ec:	1885c83a 	sub	r2,r3,r2
  80a8f0:	2140022e 	bgeu	r4,r5,80a8fc <__divsf3+0xa0>
  80a8f4:	10bfffc4 	addi	r2,r2,-1
  80a8f8:	2109883a 	add	r4,r4,r4
  80a8fc:	d8800215 	stw	r2,8(sp)
  80a900:	0007883a 	mov	r3,zero
  80a904:	00900034 	movhi	r2,16384
  80a908:	10800004 	addi	r2,r2,0
  80a90c:	21400236 	bltu	r4,r5,80a918 <__divsf3+0xbc>
  80a910:	1886b03a 	or	r3,r3,r2
  80a914:	2149c83a 	sub	r4,r4,r5
  80a918:	1004d07a 	srli	r2,r2,1
  80a91c:	2109883a 	add	r4,r4,r4
  80a920:	103ffa1e 	bne	r2,zero,80a90c <__divsf3+0xb0>
  80a924:	19401fcc 	andi	r5,r3,127
  80a928:	00801004 	movi	r2,64
  80a92c:	28801426 	beq	r5,r2,80a980 <__divsf3+0x124>
  80a930:	38c00315 	stw	r3,12(r7)
  80a934:	3809883a 	mov	r4,r7
  80a938:	080bf740 	call	80bf74 <__pack_f>
  80a93c:	dfc00b17 	ldw	ra,44(sp)
  80a940:	dc000a17 	ldw	r16,40(sp)
  80a944:	dec00c04 	addi	sp,sp,48
  80a948:	f800283a 	ret
  80a94c:	010020b4 	movhi	r4,130
  80a950:	21270304 	addi	r4,r4,-25588
  80a954:	29bff826 	beq	r5,r6,80a938 <__divsf3+0xdc>
  80a958:	d809883a 	mov	r4,sp
  80a95c:	003ff606 	br	80a938 <__divsf3+0xdc>
  80a960:	d809883a 	mov	r4,sp
  80a964:	d8000315 	stw	zero,12(sp)
  80a968:	d8000215 	stw	zero,8(sp)
  80a96c:	003ff206 	br	80a938 <__divsf3+0xdc>
  80a970:	00800104 	movi	r2,4
  80a974:	d809883a 	mov	r4,sp
  80a978:	d8800015 	stw	r2,0(sp)
  80a97c:	003fee06 	br	80a938 <__divsf3+0xdc>
  80a980:	1880200c 	andi	r2,r3,128
  80a984:	1000011e 	bne	r2,zero,80a98c <__divsf3+0x130>
  80a988:	203fe926 	beq	r4,zero,80a930 <__divsf3+0xd4>
  80a98c:	1947883a 	add	r3,r3,r5
  80a990:	003fe706 	br	80a930 <__divsf3+0xd4>

0080a994 <__eqsf2>:
  80a994:	defff404 	addi	sp,sp,-48
  80a998:	dc000a15 	stw	r16,40(sp)
  80a99c:	d9000815 	stw	r4,32(sp)
  80a9a0:	d9400915 	stw	r5,36(sp)
  80a9a4:	d9000804 	addi	r4,sp,32
  80a9a8:	d80b883a 	mov	r5,sp
  80a9ac:	dc000404 	addi	r16,sp,16
  80a9b0:	dfc00b15 	stw	ra,44(sp)
  80a9b4:	080c0a80 	call	80c0a8 <__unpack_f>
  80a9b8:	d9000904 	addi	r4,sp,36
  80a9bc:	800b883a 	mov	r5,r16
  80a9c0:	080c0a80 	call	80c0a8 <__unpack_f>
  80a9c4:	d8800017 	ldw	r2,0(sp)
  80a9c8:	00c00044 	movi	r3,1
  80a9cc:	180d883a 	mov	r6,r3
  80a9d0:	1880042e 	bgeu	r3,r2,80a9e4 <__eqsf2+0x50>
  80a9d4:	80800017 	ldw	r2,0(r16)
  80a9d8:	800b883a 	mov	r5,r16
  80a9dc:	d809883a 	mov	r4,sp
  80a9e0:	18800536 	bltu	r3,r2,80a9f8 <__eqsf2+0x64>
  80a9e4:	3005883a 	mov	r2,r6
  80a9e8:	dfc00b17 	ldw	ra,44(sp)
  80a9ec:	dc000a17 	ldw	r16,40(sp)
  80a9f0:	dec00c04 	addi	sp,sp,48
  80a9f4:	f800283a 	ret
  80a9f8:	080c15c0 	call	80c15c <__fpcmp_parts_f>
  80a9fc:	100d883a 	mov	r6,r2
  80aa00:	3005883a 	mov	r2,r6
  80aa04:	dfc00b17 	ldw	ra,44(sp)
  80aa08:	dc000a17 	ldw	r16,40(sp)
  80aa0c:	dec00c04 	addi	sp,sp,48
  80aa10:	f800283a 	ret

0080aa14 <__nesf2>:
  80aa14:	defff404 	addi	sp,sp,-48
  80aa18:	dc000a15 	stw	r16,40(sp)
  80aa1c:	d9000815 	stw	r4,32(sp)
  80aa20:	d9400915 	stw	r5,36(sp)
  80aa24:	d9000804 	addi	r4,sp,32
  80aa28:	d80b883a 	mov	r5,sp
  80aa2c:	dc000404 	addi	r16,sp,16
  80aa30:	dfc00b15 	stw	ra,44(sp)
  80aa34:	080c0a80 	call	80c0a8 <__unpack_f>
  80aa38:	d9000904 	addi	r4,sp,36
  80aa3c:	800b883a 	mov	r5,r16
  80aa40:	080c0a80 	call	80c0a8 <__unpack_f>
  80aa44:	d8800017 	ldw	r2,0(sp)
  80aa48:	00c00044 	movi	r3,1
  80aa4c:	180d883a 	mov	r6,r3
  80aa50:	1880042e 	bgeu	r3,r2,80aa64 <__nesf2+0x50>
  80aa54:	80800017 	ldw	r2,0(r16)
  80aa58:	800b883a 	mov	r5,r16
  80aa5c:	d809883a 	mov	r4,sp
  80aa60:	18800536 	bltu	r3,r2,80aa78 <__nesf2+0x64>
  80aa64:	3005883a 	mov	r2,r6
  80aa68:	dfc00b17 	ldw	ra,44(sp)
  80aa6c:	dc000a17 	ldw	r16,40(sp)
  80aa70:	dec00c04 	addi	sp,sp,48
  80aa74:	f800283a 	ret
  80aa78:	080c15c0 	call	80c15c <__fpcmp_parts_f>
  80aa7c:	100d883a 	mov	r6,r2
  80aa80:	3005883a 	mov	r2,r6
  80aa84:	dfc00b17 	ldw	ra,44(sp)
  80aa88:	dc000a17 	ldw	r16,40(sp)
  80aa8c:	dec00c04 	addi	sp,sp,48
  80aa90:	f800283a 	ret

0080aa94 <__gtsf2>:
  80aa94:	defff404 	addi	sp,sp,-48
  80aa98:	dc000a15 	stw	r16,40(sp)
  80aa9c:	d9000815 	stw	r4,32(sp)
  80aaa0:	d9400915 	stw	r5,36(sp)
  80aaa4:	d9000804 	addi	r4,sp,32
  80aaa8:	d80b883a 	mov	r5,sp
  80aaac:	dc000404 	addi	r16,sp,16
  80aab0:	dfc00b15 	stw	ra,44(sp)
  80aab4:	080c0a80 	call	80c0a8 <__unpack_f>
  80aab8:	d9000904 	addi	r4,sp,36
  80aabc:	800b883a 	mov	r5,r16
  80aac0:	080c0a80 	call	80c0a8 <__unpack_f>
  80aac4:	d8800017 	ldw	r2,0(sp)
  80aac8:	00c00044 	movi	r3,1
  80aacc:	01bfffc4 	movi	r6,-1
  80aad0:	1880042e 	bgeu	r3,r2,80aae4 <__gtsf2+0x50>
  80aad4:	80800017 	ldw	r2,0(r16)
  80aad8:	800b883a 	mov	r5,r16
  80aadc:	d809883a 	mov	r4,sp
  80aae0:	18800536 	bltu	r3,r2,80aaf8 <__gtsf2+0x64>
  80aae4:	3005883a 	mov	r2,r6
  80aae8:	dfc00b17 	ldw	ra,44(sp)
  80aaec:	dc000a17 	ldw	r16,40(sp)
  80aaf0:	dec00c04 	addi	sp,sp,48
  80aaf4:	f800283a 	ret
  80aaf8:	080c15c0 	call	80c15c <__fpcmp_parts_f>
  80aafc:	100d883a 	mov	r6,r2
  80ab00:	3005883a 	mov	r2,r6
  80ab04:	dfc00b17 	ldw	ra,44(sp)
  80ab08:	dc000a17 	ldw	r16,40(sp)
  80ab0c:	dec00c04 	addi	sp,sp,48
  80ab10:	f800283a 	ret

0080ab14 <__gesf2>:
  80ab14:	defff404 	addi	sp,sp,-48
  80ab18:	dc000a15 	stw	r16,40(sp)
  80ab1c:	d9000815 	stw	r4,32(sp)
  80ab20:	d9400915 	stw	r5,36(sp)
  80ab24:	d9000804 	addi	r4,sp,32
  80ab28:	d80b883a 	mov	r5,sp
  80ab2c:	dc000404 	addi	r16,sp,16
  80ab30:	dfc00b15 	stw	ra,44(sp)
  80ab34:	080c0a80 	call	80c0a8 <__unpack_f>
  80ab38:	d9000904 	addi	r4,sp,36
  80ab3c:	800b883a 	mov	r5,r16
  80ab40:	080c0a80 	call	80c0a8 <__unpack_f>
  80ab44:	d8800017 	ldw	r2,0(sp)
  80ab48:	00c00044 	movi	r3,1
  80ab4c:	01bfffc4 	movi	r6,-1
  80ab50:	1880042e 	bgeu	r3,r2,80ab64 <__gesf2+0x50>
  80ab54:	80800017 	ldw	r2,0(r16)
  80ab58:	800b883a 	mov	r5,r16
  80ab5c:	d809883a 	mov	r4,sp
  80ab60:	18800536 	bltu	r3,r2,80ab78 <__gesf2+0x64>
  80ab64:	3005883a 	mov	r2,r6
  80ab68:	dfc00b17 	ldw	ra,44(sp)
  80ab6c:	dc000a17 	ldw	r16,40(sp)
  80ab70:	dec00c04 	addi	sp,sp,48
  80ab74:	f800283a 	ret
  80ab78:	080c15c0 	call	80c15c <__fpcmp_parts_f>
  80ab7c:	100d883a 	mov	r6,r2
  80ab80:	3005883a 	mov	r2,r6
  80ab84:	dfc00b17 	ldw	ra,44(sp)
  80ab88:	dc000a17 	ldw	r16,40(sp)
  80ab8c:	dec00c04 	addi	sp,sp,48
  80ab90:	f800283a 	ret

0080ab94 <__ltsf2>:
  80ab94:	defff404 	addi	sp,sp,-48
  80ab98:	dc000a15 	stw	r16,40(sp)
  80ab9c:	d9000815 	stw	r4,32(sp)
  80aba0:	d9400915 	stw	r5,36(sp)
  80aba4:	d9000804 	addi	r4,sp,32
  80aba8:	d80b883a 	mov	r5,sp
  80abac:	dc000404 	addi	r16,sp,16
  80abb0:	dfc00b15 	stw	ra,44(sp)
  80abb4:	080c0a80 	call	80c0a8 <__unpack_f>
  80abb8:	d9000904 	addi	r4,sp,36
  80abbc:	800b883a 	mov	r5,r16
  80abc0:	080c0a80 	call	80c0a8 <__unpack_f>
  80abc4:	d8800017 	ldw	r2,0(sp)
  80abc8:	00c00044 	movi	r3,1
  80abcc:	180d883a 	mov	r6,r3
  80abd0:	1880042e 	bgeu	r3,r2,80abe4 <__ltsf2+0x50>
  80abd4:	80800017 	ldw	r2,0(r16)
  80abd8:	800b883a 	mov	r5,r16
  80abdc:	d809883a 	mov	r4,sp
  80abe0:	18800536 	bltu	r3,r2,80abf8 <__ltsf2+0x64>
  80abe4:	3005883a 	mov	r2,r6
  80abe8:	dfc00b17 	ldw	ra,44(sp)
  80abec:	dc000a17 	ldw	r16,40(sp)
  80abf0:	dec00c04 	addi	sp,sp,48
  80abf4:	f800283a 	ret
  80abf8:	080c15c0 	call	80c15c <__fpcmp_parts_f>
  80abfc:	100d883a 	mov	r6,r2
  80ac00:	3005883a 	mov	r2,r6
  80ac04:	dfc00b17 	ldw	ra,44(sp)
  80ac08:	dc000a17 	ldw	r16,40(sp)
  80ac0c:	dec00c04 	addi	sp,sp,48
  80ac10:	f800283a 	ret

0080ac14 <__lesf2>:
  80ac14:	defff404 	addi	sp,sp,-48
  80ac18:	dc000a15 	stw	r16,40(sp)
  80ac1c:	d9000815 	stw	r4,32(sp)
  80ac20:	d9400915 	stw	r5,36(sp)
  80ac24:	d9000804 	addi	r4,sp,32
  80ac28:	d80b883a 	mov	r5,sp
  80ac2c:	dc000404 	addi	r16,sp,16
  80ac30:	dfc00b15 	stw	ra,44(sp)
  80ac34:	080c0a80 	call	80c0a8 <__unpack_f>
  80ac38:	d9000904 	addi	r4,sp,36
  80ac3c:	800b883a 	mov	r5,r16
  80ac40:	080c0a80 	call	80c0a8 <__unpack_f>
  80ac44:	d8800017 	ldw	r2,0(sp)
  80ac48:	00c00044 	movi	r3,1
  80ac4c:	180d883a 	mov	r6,r3
  80ac50:	1880042e 	bgeu	r3,r2,80ac64 <__lesf2+0x50>
  80ac54:	80800017 	ldw	r2,0(r16)
  80ac58:	800b883a 	mov	r5,r16
  80ac5c:	d809883a 	mov	r4,sp
  80ac60:	18800536 	bltu	r3,r2,80ac78 <__lesf2+0x64>
  80ac64:	3005883a 	mov	r2,r6
  80ac68:	dfc00b17 	ldw	ra,44(sp)
  80ac6c:	dc000a17 	ldw	r16,40(sp)
  80ac70:	dec00c04 	addi	sp,sp,48
  80ac74:	f800283a 	ret
  80ac78:	080c15c0 	call	80c15c <__fpcmp_parts_f>
  80ac7c:	100d883a 	mov	r6,r2
  80ac80:	3005883a 	mov	r2,r6
  80ac84:	dfc00b17 	ldw	ra,44(sp)
  80ac88:	dc000a17 	ldw	r16,40(sp)
  80ac8c:	dec00c04 	addi	sp,sp,48
  80ac90:	f800283a 	ret

0080ac94 <__floatsisf>:
  80ac94:	200ad7fa 	srli	r5,r4,31
  80ac98:	defffb04 	addi	sp,sp,-20
  80ac9c:	dfc00415 	stw	ra,16(sp)
  80aca0:	d9400115 	stw	r5,4(sp)
  80aca4:	2000071e 	bne	r4,zero,80acc4 <__floatsisf+0x30>
  80aca8:	00800084 	movi	r2,2
  80acac:	d8800015 	stw	r2,0(sp)
  80acb0:	d809883a 	mov	r4,sp
  80acb4:	080bf740 	call	80bf74 <__pack_f>
  80acb8:	dfc00417 	ldw	ra,16(sp)
  80acbc:	dec00504 	addi	sp,sp,20
  80acc0:	f800283a 	ret
  80acc4:	01800784 	movi	r6,30
  80acc8:	008000c4 	movi	r2,3
  80accc:	d8800015 	stw	r2,0(sp)
  80acd0:	3007883a 	mov	r3,r6
  80acd4:	28000426 	beq	r5,zero,80ace8 <__floatsisf+0x54>
  80acd8:	00a00034 	movhi	r2,32768
  80acdc:	10800004 	addi	r2,r2,0
  80ace0:	20800e26 	beq	r4,r2,80ad1c <__floatsisf+0x88>
  80ace4:	0109c83a 	sub	r4,zero,r4
  80ace8:	01500034 	movhi	r5,16384
  80acec:	297fffc4 	addi	r5,r5,-1
  80acf0:	2005883a 	mov	r2,r4
  80acf4:	29000636 	bltu	r5,r4,80ad10 <__floatsisf+0x7c>
  80acf8:	1089883a 	add	r4,r2,r2
  80acfc:	18bfffc4 	addi	r2,r3,-1
  80ad00:	1007883a 	mov	r3,r2
  80ad04:	100d883a 	mov	r6,r2
  80ad08:	2005883a 	mov	r2,r4
  80ad0c:	293ffa2e 	bgeu	r5,r4,80acf8 <__floatsisf+0x64>
  80ad10:	d9000315 	stw	r4,12(sp)
  80ad14:	d9800215 	stw	r6,8(sp)
  80ad18:	003fe506 	br	80acb0 <__floatsisf+0x1c>
  80ad1c:	00b3c034 	movhi	r2,52992
  80ad20:	10800004 	addi	r2,r2,0
  80ad24:	d9800215 	stw	r6,8(sp)
  80ad28:	003fe306 	br	80acb8 <__floatsisf+0x24>

0080ad2c <__fixsfsi>:
  80ad2c:	defffa04 	addi	sp,sp,-24
  80ad30:	d9000415 	stw	r4,16(sp)
  80ad34:	d80b883a 	mov	r5,sp
  80ad38:	d9000404 	addi	r4,sp,16
  80ad3c:	dfc00515 	stw	ra,20(sp)
  80ad40:	080c0a80 	call	80c0a8 <__unpack_f>
  80ad44:	d8c00017 	ldw	r3,0(sp)
  80ad48:	0009883a 	mov	r4,zero
  80ad4c:	18800098 	cmpnei	r2,r3,2
  80ad50:	10000f26 	beq	r2,zero,80ad90 <__fixsfsi+0x64>
  80ad54:	00800044 	movi	r2,1
  80ad58:	10c00d2e 	bgeu	r2,r3,80ad90 <__fixsfsi+0x64>
  80ad5c:	18800118 	cmpnei	r2,r3,4
  80ad60:	10000526 	beq	r2,zero,80ad78 <__fixsfsi+0x4c>
  80ad64:	d8800217 	ldw	r2,8(sp)
  80ad68:	0009883a 	mov	r4,zero
  80ad6c:	10000816 	blt	r2,zero,80ad90 <__fixsfsi+0x64>
  80ad70:	00c00784 	movi	r3,30
  80ad74:	18800a0e 	bge	r3,r2,80ada0 <__fixsfsi+0x74>
  80ad78:	d8800117 	ldw	r2,4(sp)
  80ad7c:	00e00034 	movhi	r3,32768
  80ad80:	18c00004 	addi	r3,r3,0
  80ad84:	1000011e 	bne	r2,zero,80ad8c <__fixsfsi+0x60>
  80ad88:	18ffffc4 	addi	r3,r3,-1
  80ad8c:	1809883a 	mov	r4,r3
  80ad90:	2005883a 	mov	r2,r4
  80ad94:	dfc00517 	ldw	ra,20(sp)
  80ad98:	dec00604 	addi	sp,sp,24
  80ad9c:	f800283a 	ret
  80ada0:	1885c83a 	sub	r2,r3,r2
  80ada4:	d9000117 	ldw	r4,4(sp)
  80ada8:	d8c00317 	ldw	r3,12(sp)
  80adac:	1884d83a 	srl	r2,r3,r2
  80adb0:	20000126 	beq	r4,zero,80adb8 <__fixsfsi+0x8c>
  80adb4:	0085c83a 	sub	r2,zero,r2
  80adb8:	1009883a 	mov	r4,r2
  80adbc:	003ff406 	br	80ad90 <__fixsfsi+0x64>

0080adc0 <__extendsfdf2>:
  80adc0:	defff904 	addi	sp,sp,-28
  80adc4:	d9000515 	stw	r4,20(sp)
  80adc8:	d9400104 	addi	r5,sp,4
  80adcc:	d9000504 	addi	r4,sp,20
  80add0:	dfc00615 	stw	ra,24(sp)
  80add4:	080c0a80 	call	80c0a8 <__unpack_f>
  80add8:	d8800417 	ldw	r2,16(sp)
  80addc:	0007883a 	mov	r3,zero
  80ade0:	180e97ba 	slli	r7,r3,30
  80ade4:	1014d0ba 	srli	r10,r2,2
  80ade8:	101097ba 	slli	r8,r2,30
  80adec:	d9000117 	ldw	r4,4(sp)
  80adf0:	d9400217 	ldw	r5,8(sp)
  80adf4:	d9800317 	ldw	r6,12(sp)
  80adf8:	51d2b03a 	or	r9,r10,r7
  80adfc:	400f883a 	mov	r7,r8
  80ae00:	da400015 	stw	r9,0(sp)
  80ae04:	080bca80 	call	80bca8 <__make_dp>
  80ae08:	1009883a 	mov	r4,r2
  80ae0c:	2005883a 	mov	r2,r4
  80ae10:	dfc00617 	ldw	ra,24(sp)
  80ae14:	dec00704 	addi	sp,sp,28
  80ae18:	f800283a 	ret

0080ae1c <_fpadd_parts>:
  80ae1c:	defffc04 	addi	sp,sp,-16
  80ae20:	dc000215 	stw	r16,8(sp)
  80ae24:	dfc00315 	stw	ra,12(sp)
  80ae28:	dc400115 	stw	r17,4(sp)
  80ae2c:	dc800015 	stw	r18,0(sp)
  80ae30:	20c00017 	ldw	r3,0(r4)
  80ae34:	00800044 	movi	r2,1
  80ae38:	3021883a 	mov	r16,r6
  80ae3c:	2019883a 	mov	r12,r4
  80ae40:	281b883a 	mov	r13,r5
  80ae44:	200d883a 	mov	r6,r4
  80ae48:	10c05d2e 	bgeu	r2,r3,80afc0 <_fpadd_parts+0x1a4>
  80ae4c:	29000017 	ldw	r4,0(r5)
  80ae50:	280d883a 	mov	r6,r5
  80ae54:	11005a2e 	bgeu	r2,r4,80afc0 <_fpadd_parts+0x1a4>
  80ae58:	18800118 	cmpnei	r2,r3,4
  80ae5c:	10005f26 	beq	r2,zero,80afdc <_fpadd_parts+0x1c0>
  80ae60:	20800118 	cmpnei	r2,r4,4
  80ae64:	280d883a 	mov	r6,r5
  80ae68:	10005526 	beq	r2,zero,80afc0 <_fpadd_parts+0x1a4>
  80ae6c:	20800098 	cmpnei	r2,r4,2
  80ae70:	10007b26 	beq	r2,zero,80b060 <_fpadd_parts+0x244>
  80ae74:	18800098 	cmpnei	r2,r3,2
  80ae78:	280d883a 	mov	r6,r5
  80ae7c:	10005026 	beq	r2,zero,80afc0 <_fpadd_parts+0x1a4>
  80ae80:	63c00217 	ldw	r15,8(r12)
  80ae84:	2b800217 	ldw	r14,8(r5)
  80ae88:	62800317 	ldw	r10,12(r12)
  80ae8c:	2a000317 	ldw	r8,12(r5)
  80ae90:	7b87c83a 	sub	r3,r15,r14
  80ae94:	62c00417 	ldw	r11,16(r12)
  80ae98:	2a400417 	ldw	r9,16(r5)
  80ae9c:	18009716 	blt	r3,zero,80b0fc <_fpadd_parts+0x2e0>
  80aea0:	00800fc4 	movi	r2,63
  80aea4:	10c0500e 	bge	r2,r3,80afe8 <_fpadd_parts+0x1cc>
  80aea8:	73c0900e 	bge	r14,r15,80b0ec <_fpadd_parts+0x2d0>
  80aeac:	0011883a 	mov	r8,zero
  80aeb0:	0013883a 	mov	r9,zero
  80aeb4:	61400117 	ldw	r5,4(r12)
  80aeb8:	68800117 	ldw	r2,4(r13)
  80aebc:	28808126 	beq	r5,r2,80b0c4 <_fpadd_parts+0x2a8>
  80aec0:	28007c26 	beq	r5,zero,80b0b4 <_fpadd_parts+0x298>
  80aec4:	4285c83a 	sub	r2,r8,r10
  80aec8:	4089803a 	cmpltu	r4,r8,r2
  80aecc:	4ac7c83a 	sub	r3,r9,r11
  80aed0:	1909c83a 	sub	r4,r3,r4
  80aed4:	100d883a 	mov	r6,r2
  80aed8:	20008a16 	blt	r4,zero,80b104 <_fpadd_parts+0x2e8>
  80aedc:	7823883a 	mov	r17,r15
  80aee0:	781d883a 	mov	r14,r15
  80aee4:	81000415 	stw	r4,16(r16)
  80aee8:	80000115 	stw	zero,4(r16)
  80aeec:	80800315 	stw	r2,12(r16)
  80aef0:	80800317 	ldw	r2,12(r16)
  80aef4:	80c00417 	ldw	r3,16(r16)
  80aef8:	013fffc4 	movi	r4,-1
  80aefc:	110f883a 	add	r7,r2,r4
  80af00:	388d803a 	cmpltu	r6,r7,r2
  80af04:	1911883a 	add	r8,r3,r4
  80af08:	02440034 	movhi	r9,4096
  80af0c:	4a7fffc4 	addi	r9,r9,-1
  80af10:	3211883a 	add	r8,r6,r8
  80af14:	4a001536 	bltu	r9,r8,80af6c <_fpadd_parts+0x150>
  80af18:	42408426 	beq	r8,r9,80b12c <_fpadd_parts+0x310>
  80af1c:	481f883a 	mov	r15,r9
  80af20:	04bfff84 	movi	r18,-2
  80af24:	80800317 	ldw	r2,12(r16)
  80af28:	80c00417 	ldw	r3,16(r16)
  80af2c:	013fffc4 	movi	r4,-1
  80af30:	1091883a 	add	r8,r2,r2
  80af34:	1016d7fa 	srli	r11,r2,31
  80af38:	18d5883a 	add	r10,r3,r3
  80af3c:	4119883a 	add	r12,r8,r4
  80af40:	6205803a 	cmpltu	r2,r12,r8
  80af44:	5a92b03a 	or	r9,r11,r10
  80af48:	491b883a 	add	r13,r9,r4
  80af4c:	7123883a 	add	r17,r14,r4
  80af50:	135b883a 	add	r13,r2,r13
  80af54:	881d883a 	mov	r14,r17
  80af58:	82000315 	stw	r8,12(r16)
  80af5c:	82400415 	stw	r9,16(r16)
  80af60:	7b400236 	bltu	r15,r13,80af6c <_fpadd_parts+0x150>
  80af64:	7b7fef1e 	bne	r15,r13,80af24 <_fpadd_parts+0x108>
  80af68:	933fee2e 	bgeu	r18,r12,80af24 <_fpadd_parts+0x108>
  80af6c:	83400417 	ldw	r13,16(r16)
  80af70:	008000c4 	movi	r2,3
  80af74:	00c80034 	movhi	r3,8192
  80af78:	18ffffc4 	addi	r3,r3,-1
  80af7c:	83000317 	ldw	r12,12(r16)
  80af80:	80800015 	stw	r2,0(r16)
  80af84:	1b40482e 	bgeu	r3,r13,80b0a8 <_fpadd_parts+0x28c>
  80af88:	01800044 	movi	r6,1
  80af8c:	6184d83a 	srl	r2,r12,r6
  80af90:	680697fa 	slli	r3,r13,31
  80af94:	6992d83a 	srl	r9,r13,r6
  80af98:	1890b03a 	or	r8,r3,r2
  80af9c:	6184703a 	and	r2,r12,r6
  80afa0:	0007883a 	mov	r3,zero
  80afa4:	718d883a 	add	r6,r14,r6
  80afa8:	1208b03a 	or	r4,r2,r8
  80afac:	1a4ab03a 	or	r5,r3,r9
  80afb0:	81800215 	stw	r6,8(r16)
  80afb4:	81400415 	stw	r5,16(r16)
  80afb8:	81000315 	stw	r4,12(r16)
  80afbc:	800d883a 	mov	r6,r16
  80afc0:	3005883a 	mov	r2,r6
  80afc4:	dfc00317 	ldw	ra,12(sp)
  80afc8:	dc000217 	ldw	r16,8(sp)
  80afcc:	dc400117 	ldw	r17,4(sp)
  80afd0:	dc800017 	ldw	r18,0(sp)
  80afd4:	dec00404 	addi	sp,sp,16
  80afd8:	f800283a 	ret
  80afdc:	20c01a26 	beq	r4,r3,80b048 <_fpadd_parts+0x22c>
  80afe0:	600d883a 	mov	r6,r12
  80afe4:	003ff606 	br	80afc0 <_fpadd_parts+0x1a4>
  80afe8:	73c00b0e 	bge	r14,r15,80b018 <_fpadd_parts+0x1fc>
  80afec:	480697fa 	slli	r3,r9,31
  80aff0:	4004d07a 	srli	r2,r8,1
  80aff4:	01000044 	movi	r4,1
  80aff8:	490ed83a 	srl	r7,r9,r4
  80affc:	188cb03a 	or	r6,r3,r2
  80b000:	4104703a 	and	r2,r8,r4
  80b004:	0007883a 	mov	r3,zero
  80b008:	711d883a 	add	r14,r14,r4
  80b00c:	1190b03a 	or	r8,r2,r6
  80b010:	19d2b03a 	or	r9,r3,r7
  80b014:	003ff406 	br	80afe8 <_fpadd_parts+0x1cc>
  80b018:	7bbfa60e 	bge	r15,r14,80aeb4 <_fpadd_parts+0x98>
  80b01c:	580697fa 	slli	r3,r11,31
  80b020:	5004d07a 	srli	r2,r10,1
  80b024:	01000044 	movi	r4,1
  80b028:	590ed83a 	srl	r7,r11,r4
  80b02c:	188cb03a 	or	r6,r3,r2
  80b030:	5104703a 	and	r2,r10,r4
  80b034:	0007883a 	mov	r3,zero
  80b038:	791f883a 	add	r15,r15,r4
  80b03c:	1194b03a 	or	r10,r2,r6
  80b040:	19d6b03a 	or	r11,r3,r7
  80b044:	003ff406 	br	80b018 <_fpadd_parts+0x1fc>
  80b048:	28c00117 	ldw	r3,4(r5)
  80b04c:	60800117 	ldw	r2,4(r12)
  80b050:	018020b4 	movhi	r6,130
  80b054:	31a70704 	addi	r6,r6,-25572
  80b058:	10ffd91e 	bne	r2,r3,80afc0 <_fpadd_parts+0x1a4>
  80b05c:	003fe006 	br	80afe0 <_fpadd_parts+0x1c4>
  80b060:	600d883a 	mov	r6,r12
  80b064:	193fd61e 	bne	r3,r4,80afc0 <_fpadd_parts+0x1a4>
  80b068:	60800017 	ldw	r2,0(r12)
  80b06c:	60c00117 	ldw	r3,4(r12)
  80b070:	61000217 	ldw	r4,8(r12)
  80b074:	80800015 	stw	r2,0(r16)
  80b078:	60800317 	ldw	r2,12(r12)
  80b07c:	80c00115 	stw	r3,4(r16)
  80b080:	60c00417 	ldw	r3,16(r12)
  80b084:	81000215 	stw	r4,8(r16)
  80b088:	80800315 	stw	r2,12(r16)
  80b08c:	80c00415 	stw	r3,16(r16)
  80b090:	60800117 	ldw	r2,4(r12)
  80b094:	28c00117 	ldw	r3,4(r5)
  80b098:	800d883a 	mov	r6,r16
  80b09c:	10c4703a 	and	r2,r2,r3
  80b0a0:	80800115 	stw	r2,4(r16)
  80b0a4:	003fc606 	br	80afc0 <_fpadd_parts+0x1a4>
  80b0a8:	800d883a 	mov	r6,r16
  80b0ac:	84400215 	stw	r17,8(r16)
  80b0b0:	003fc306 	br	80afc0 <_fpadd_parts+0x1a4>
  80b0b4:	5205c83a 	sub	r2,r10,r8
  80b0b8:	5089803a 	cmpltu	r4,r10,r2
  80b0bc:	5a47c83a 	sub	r3,r11,r9
  80b0c0:	003f8306 	br	80aed0 <_fpadd_parts+0xb4>
  80b0c4:	5205883a 	add	r2,r10,r8
  80b0c8:	1289803a 	cmpltu	r4,r2,r10
  80b0cc:	5a47883a 	add	r3,r11,r9
  80b0d0:	20c9883a 	add	r4,r4,r3
  80b0d4:	7823883a 	mov	r17,r15
  80b0d8:	781d883a 	mov	r14,r15
  80b0dc:	81400115 	stw	r5,4(r16)
  80b0e0:	80800315 	stw	r2,12(r16)
  80b0e4:	81000415 	stw	r4,16(r16)
  80b0e8:	003fa006 	br	80af6c <_fpadd_parts+0x150>
  80b0ec:	0015883a 	mov	r10,zero
  80b0f0:	701f883a 	mov	r15,r14
  80b0f4:	0017883a 	mov	r11,zero
  80b0f8:	003f6e06 	br	80aeb4 <_fpadd_parts+0x98>
  80b0fc:	00c7c83a 	sub	r3,zero,r3
  80b100:	003f6706 	br	80aea0 <_fpadd_parts+0x84>
  80b104:	00800044 	movi	r2,1
  80b108:	200b883a 	mov	r5,r4
  80b10c:	80800115 	stw	r2,4(r16)
  80b110:	3009883a 	mov	r4,r6
  80b114:	7823883a 	mov	r17,r15
  80b118:	080bf040 	call	80bf04 <__negdi2>
  80b11c:	881d883a 	mov	r14,r17
  80b120:	80c00415 	stw	r3,16(r16)
  80b124:	80800315 	stw	r2,12(r16)
  80b128:	003f7106 	br	80aef0 <_fpadd_parts+0xd4>
  80b12c:	00bfff84 	movi	r2,-2
  80b130:	11ff7a2e 	bgeu	r2,r7,80af1c <_fpadd_parts+0x100>
  80b134:	003f8d06 	br	80af6c <_fpadd_parts+0x150>

0080b138 <__adddf3>:
  80b138:	deffeb04 	addi	sp,sp,-84
  80b13c:	2011883a 	mov	r8,r4
  80b140:	dc401315 	stw	r17,76(sp)
  80b144:	d9401015 	stw	r5,64(sp)
  80b148:	d9000f04 	addi	r4,sp,60
  80b14c:	d80b883a 	mov	r5,sp
  80b150:	dc400504 	addi	r17,sp,20
  80b154:	dfc01415 	stw	ra,80(sp)
  80b158:	d9c01215 	stw	r7,72(sp)
  80b15c:	da000f15 	stw	r8,60(sp)
  80b160:	d9801115 	stw	r6,68(sp)
  80b164:	080c50c0 	call	80c50c <__unpack_d>
  80b168:	d9001104 	addi	r4,sp,68
  80b16c:	880b883a 	mov	r5,r17
  80b170:	080c50c0 	call	80c50c <__unpack_d>
  80b174:	d9800a04 	addi	r6,sp,40
  80b178:	d809883a 	mov	r4,sp
  80b17c:	880b883a 	mov	r5,r17
  80b180:	080ae1c0 	call	80ae1c <_fpadd_parts>
  80b184:	1009883a 	mov	r4,r2
  80b188:	080c27c0 	call	80c27c <__pack_d>
  80b18c:	1009883a 	mov	r4,r2
  80b190:	2005883a 	mov	r2,r4
  80b194:	dfc01417 	ldw	ra,80(sp)
  80b198:	dc401317 	ldw	r17,76(sp)
  80b19c:	dec01504 	addi	sp,sp,84
  80b1a0:	f800283a 	ret

0080b1a4 <__subdf3>:
  80b1a4:	deffeb04 	addi	sp,sp,-84
  80b1a8:	2011883a 	mov	r8,r4
  80b1ac:	dc401315 	stw	r17,76(sp)
  80b1b0:	d9401015 	stw	r5,64(sp)
  80b1b4:	d9000f04 	addi	r4,sp,60
  80b1b8:	d80b883a 	mov	r5,sp
  80b1bc:	dc400504 	addi	r17,sp,20
  80b1c0:	dfc01415 	stw	ra,80(sp)
  80b1c4:	d9c01215 	stw	r7,72(sp)
  80b1c8:	da000f15 	stw	r8,60(sp)
  80b1cc:	d9801115 	stw	r6,68(sp)
  80b1d0:	080c50c0 	call	80c50c <__unpack_d>
  80b1d4:	d9001104 	addi	r4,sp,68
  80b1d8:	880b883a 	mov	r5,r17
  80b1dc:	080c50c0 	call	80c50c <__unpack_d>
  80b1e0:	d8800617 	ldw	r2,24(sp)
  80b1e4:	880b883a 	mov	r5,r17
  80b1e8:	d809883a 	mov	r4,sp
  80b1ec:	d9800a04 	addi	r6,sp,40
  80b1f0:	1080005c 	xori	r2,r2,1
  80b1f4:	d8800615 	stw	r2,24(sp)
  80b1f8:	080ae1c0 	call	80ae1c <_fpadd_parts>
  80b1fc:	1009883a 	mov	r4,r2
  80b200:	080c27c0 	call	80c27c <__pack_d>
  80b204:	1009883a 	mov	r4,r2
  80b208:	2005883a 	mov	r2,r4
  80b20c:	dfc01417 	ldw	ra,80(sp)
  80b210:	dc401317 	ldw	r17,76(sp)
  80b214:	dec01504 	addi	sp,sp,84
  80b218:	f800283a 	ret

0080b21c <__muldf3>:
  80b21c:	deffe004 	addi	sp,sp,-128
  80b220:	2011883a 	mov	r8,r4
  80b224:	df001e15 	stw	fp,120(sp)
  80b228:	d9401015 	stw	r5,64(sp)
  80b22c:	d9000f04 	addi	r4,sp,60
  80b230:	d80b883a 	mov	r5,sp
  80b234:	df000504 	addi	fp,sp,20
  80b238:	dfc01f15 	stw	ra,124(sp)
  80b23c:	ddc01715 	stw	r23,92(sp)
  80b240:	d9c01215 	stw	r7,72(sp)
  80b244:	da000f15 	stw	r8,60(sp)
  80b248:	d9801115 	stw	r6,68(sp)
  80b24c:	dc001d15 	stw	r16,116(sp)
  80b250:	dc401c15 	stw	r17,112(sp)
  80b254:	dc801b15 	stw	r18,108(sp)
  80b258:	dcc01a15 	stw	r19,104(sp)
  80b25c:	dd001915 	stw	r20,100(sp)
  80b260:	dd401815 	stw	r21,96(sp)
  80b264:	080c50c0 	call	80c50c <__unpack_d>
  80b268:	d9001104 	addi	r4,sp,68
  80b26c:	e00b883a 	mov	r5,fp
  80b270:	080c50c0 	call	80c50c <__unpack_d>
  80b274:	d8c00017 	ldw	r3,0(sp)
  80b278:	05c00044 	movi	r23,1
  80b27c:	b8c00e2e 	bgeu	r23,r3,80b2b8 <__muldf3+0x9c>
  80b280:	e1000017 	ldw	r4,0(fp)
  80b284:	b9000636 	bltu	r23,r4,80b2a0 <__muldf3+0x84>
  80b288:	d8c00617 	ldw	r3,24(sp)
  80b28c:	d8800117 	ldw	r2,4(sp)
  80b290:	e009883a 	mov	r4,fp
  80b294:	10c4c03a 	cmpne	r2,r2,r3
  80b298:	d8800615 	stw	r2,24(sp)
  80b29c:	00000b06 	br	80b2cc <__muldf3+0xb0>
  80b2a0:	18800118 	cmpnei	r2,r3,4
  80b2a4:	1000171e 	bne	r2,zero,80b304 <__muldf3+0xe8>
  80b2a8:	20800098 	cmpnei	r2,r4,2
  80b2ac:	010020b4 	movhi	r4,130
  80b2b0:	21270704 	addi	r4,r4,-25572
  80b2b4:	10000526 	beq	r2,zero,80b2cc <__muldf3+0xb0>
  80b2b8:	d8800117 	ldw	r2,4(sp)
  80b2bc:	d8c00617 	ldw	r3,24(sp)
  80b2c0:	d809883a 	mov	r4,sp
  80b2c4:	10c4c03a 	cmpne	r2,r2,r3
  80b2c8:	d8800115 	stw	r2,4(sp)
  80b2cc:	080c27c0 	call	80c27c <__pack_d>
  80b2d0:	1009883a 	mov	r4,r2
  80b2d4:	2005883a 	mov	r2,r4
  80b2d8:	dfc01f17 	ldw	ra,124(sp)
  80b2dc:	df001e17 	ldw	fp,120(sp)
  80b2e0:	dc001d17 	ldw	r16,116(sp)
  80b2e4:	dc401c17 	ldw	r17,112(sp)
  80b2e8:	dc801b17 	ldw	r18,108(sp)
  80b2ec:	dcc01a17 	ldw	r19,104(sp)
  80b2f0:	dd001917 	ldw	r20,100(sp)
  80b2f4:	dd401817 	ldw	r21,96(sp)
  80b2f8:	ddc01717 	ldw	r23,92(sp)
  80b2fc:	dec02004 	addi	sp,sp,128
  80b300:	f800283a 	ret
  80b304:	20800118 	cmpnei	r2,r4,4
  80b308:	10009a26 	beq	r2,zero,80b574 <__muldf3+0x358>
  80b30c:	18800098 	cmpnei	r2,r3,2
  80b310:	103fe926 	beq	r2,zero,80b2b8 <__muldf3+0x9c>
  80b314:	20800098 	cmpnei	r2,r4,2
  80b318:	103fdb26 	beq	r2,zero,80b288 <__muldf3+0x6c>
  80b31c:	dc000317 	ldw	r16,12(sp)
  80b320:	dc800817 	ldw	r18,32(sp)
  80b324:	0013883a 	mov	r9,zero
  80b328:	0007883a 	mov	r3,zero
  80b32c:	dcc00917 	ldw	r19,36(sp)
  80b330:	480f883a 	mov	r7,r9
  80b334:	9009883a 	mov	r4,r18
  80b338:	800d883a 	mov	r6,r16
  80b33c:	180b883a 	mov	r5,r3
  80b340:	080be740 	call	80be74 <__muldi3>
  80b344:	dc400417 	ldw	r17,16(sp)
  80b348:	0013883a 	mov	r9,zero
  80b34c:	0017883a 	mov	r11,zero
  80b350:	480b883a 	mov	r5,r9
  80b354:	580f883a 	mov	r7,r11
  80b358:	9809883a 	mov	r4,r19
  80b35c:	800d883a 	mov	r6,r16
  80b360:	dc401315 	stw	r17,76(sp)
  80b364:	d8801515 	stw	r2,84(sp)
  80b368:	d8c01615 	stw	r3,88(sp)
  80b36c:	080be740 	call	80be74 <__muldi3>
  80b370:	d9401317 	ldw	r5,76(sp)
  80b374:	0017883a 	mov	r11,zero
  80b378:	0013883a 	mov	r9,zero
  80b37c:	2811883a 	mov	r8,r5
  80b380:	0009883a 	mov	r4,zero
  80b384:	580b883a 	mov	r5,r11
  80b388:	400d883a 	mov	r6,r8
  80b38c:	480f883a 	mov	r7,r9
  80b390:	d9001415 	stw	r4,80(sp)
  80b394:	9009883a 	mov	r4,r18
  80b398:	9829883a 	mov	r20,r19
  80b39c:	1025883a 	mov	r18,r2
  80b3a0:	1827883a 	mov	r19,r3
  80b3a4:	080be740 	call	80be74 <__muldi3>
  80b3a8:	d9801317 	ldw	r6,76(sp)
  80b3ac:	1009883a 	mov	r4,r2
  80b3b0:	180b883a 	mov	r5,r3
  80b3b4:	0013883a 	mov	r9,zero
  80b3b8:	0007883a 	mov	r3,zero
  80b3bc:	2021883a 	mov	r16,r4
  80b3c0:	2823883a 	mov	r17,r5
  80b3c4:	a009883a 	mov	r4,r20
  80b3c8:	480b883a 	mov	r5,r9
  80b3cc:	180f883a 	mov	r7,r3
  80b3d0:	080be740 	call	80be74 <__muldi3>
  80b3d4:	9409883a 	add	r4,r18,r16
  80b3d8:	2491803a 	cmpltu	r8,r4,r18
  80b3dc:	9c4b883a 	add	r5,r19,r17
  80b3e0:	4151883a 	add	r8,r8,r5
  80b3e4:	2013883a 	mov	r9,r4
  80b3e8:	4015883a 	mov	r10,r8
  80b3ec:	101f883a 	mov	r15,r2
  80b3f0:	0017883a 	mov	r11,zero
  80b3f4:	1821883a 	mov	r16,r3
  80b3f8:	0019883a 	mov	r12,zero
  80b3fc:	44c0622e 	bgeu	r8,r19,80b588 <__muldf3+0x36c>
  80b400:	0005883a 	mov	r2,zero
  80b404:	5889883a 	add	r4,r11,r2
  80b408:	22cd803a 	cmpltu	r6,r4,r11
  80b40c:	35cd883a 	add	r6,r6,r23
  80b410:	2017883a 	mov	r11,r4
  80b414:	3019883a 	mov	r12,r6
  80b418:	d9001517 	ldw	r4,84(sp)
  80b41c:	d9801617 	ldw	r6,88(sp)
  80b420:	0025883a 	mov	r18,zero
  80b424:	2485883a 	add	r2,r4,r18
  80b428:	200b883a 	mov	r5,r4
  80b42c:	3247883a 	add	r3,r6,r9
  80b430:	1109803a 	cmpltu	r4,r2,r4
  80b434:	20c9883a 	add	r4,r4,r3
  80b438:	101b883a 	mov	r13,r2
  80b43c:	201d883a 	mov	r14,r4
  80b440:	21806236 	bltu	r4,r6,80b5cc <__muldf3+0x3b0>
  80b444:	33806026 	beq	r6,r14,80b5c8 <__muldf3+0x3ac>
  80b448:	53c5883a 	add	r2,r10,r15
  80b44c:	000b883a 	mov	r5,zero
  80b450:	128d803a 	cmpltu	r6,r2,r10
  80b454:	2c07883a 	add	r3,r5,r16
  80b458:	5889883a 	add	r4,r11,r2
  80b45c:	30c7883a 	add	r3,r6,r3
  80b460:	d8800217 	ldw	r2,8(sp)
  80b464:	e1c00217 	ldw	r7,8(fp)
  80b468:	60cb883a 	add	r5,r12,r3
  80b46c:	e2000117 	ldw	r8,4(fp)
  80b470:	d8c00117 	ldw	r3,4(sp)
  80b474:	22cd803a 	cmpltu	r6,r4,r11
  80b478:	11c5883a 	add	r2,r2,r7
  80b47c:	15000104 	addi	r20,r2,4
  80b480:	314d883a 	add	r6,r6,r5
  80b484:	1a06c03a 	cmpne	r3,r3,r8
  80b488:	00880034 	movhi	r2,8192
  80b48c:	10bfffc4 	addi	r2,r2,-1
  80b490:	2013883a 	mov	r9,r4
  80b494:	3015883a 	mov	r10,r6
  80b498:	6817883a 	mov	r11,r13
  80b49c:	d8c00b15 	stw	r3,44(sp)
  80b4a0:	7019883a 	mov	r12,r14
  80b4a4:	a027883a 	mov	r19,r20
  80b4a8:	1180182e 	bgeu	r2,r6,80b50c <__muldf3+0x2f0>
  80b4ac:	1011883a 	mov	r8,r2
  80b4b0:	5804d07a 	srli	r2,r11,1
  80b4b4:	600697fa 	slli	r3,r12,31
  80b4b8:	4808d07a 	srli	r4,r9,1
  80b4bc:	500a97fa 	slli	r5,r10,31
  80b4c0:	500ed07a 	srli	r7,r10,1
  80b4c4:	189eb03a 	or	r15,r3,r2
  80b4c8:	00800044 	movi	r2,1
  80b4cc:	290cb03a 	or	r6,r5,r4
  80b4d0:	a0a9883a 	add	r20,r20,r2
  80b4d4:	4888703a 	and	r4,r9,r2
  80b4d8:	6020d07a 	srli	r16,r12,1
  80b4dc:	001b883a 	mov	r13,zero
  80b4e0:	03a00034 	movhi	r14,32768
  80b4e4:	73800004 	addi	r14,r14,0
  80b4e8:	3013883a 	mov	r9,r6
  80b4ec:	3815883a 	mov	r10,r7
  80b4f0:	a027883a 	mov	r19,r20
  80b4f4:	20000426 	beq	r4,zero,80b508 <__muldf3+0x2ec>
  80b4f8:	7b62b03a 	or	r17,r15,r13
  80b4fc:	83a4b03a 	or	r18,r16,r14
  80b500:	8817883a 	mov	r11,r17
  80b504:	9019883a 	mov	r12,r18
  80b508:	42bfe936 	bltu	r8,r10,80b4b0 <__muldf3+0x294>
  80b50c:	00840034 	movhi	r2,4096
  80b510:	10bfffc4 	addi	r2,r2,-1
  80b514:	12801f36 	bltu	r2,r10,80b594 <__muldf3+0x378>
  80b518:	101f883a 	mov	r15,r2
  80b51c:	00000306 	br	80b52c <__muldf3+0x310>
  80b520:	6817883a 	mov	r11,r13
  80b524:	7019883a 	mov	r12,r14
  80b528:	7a801a36 	bltu	r15,r10,80b594 <__muldf3+0x378>
  80b52c:	5806d7fa 	srli	r3,r11,31
  80b530:	6305883a 	add	r2,r12,r12
  80b534:	480ed7fa 	srli	r7,r9,31
  80b538:	528d883a 	add	r6,r10,r10
  80b53c:	01000044 	movi	r4,1
  80b540:	189cb03a 	or	r14,r3,r2
  80b544:	4904983a 	sll	r2,r9,r4
  80b548:	3986b03a 	or	r3,r7,r6
  80b54c:	99bfffc4 	addi	r6,r19,-1
  80b550:	5adb883a 	add	r13,r11,r11
  80b554:	3027883a 	mov	r19,r6
  80b558:	1013883a 	mov	r9,r2
  80b55c:	1815883a 	mov	r10,r3
  80b560:	110eb03a 	or	r7,r2,r4
  80b564:	3029883a 	mov	r20,r6
  80b568:	603fed0e 	bge	r12,zero,80b520 <__muldf3+0x304>
  80b56c:	3813883a 	mov	r9,r7
  80b570:	003feb06 	br	80b520 <__muldf3+0x304>
  80b574:	18800098 	cmpnei	r2,r3,2
  80b578:	010020b4 	movhi	r4,130
  80b57c:	21270704 	addi	r4,r4,-25572
  80b580:	103f411e 	bne	r2,zero,80b288 <__muldf3+0x6c>
  80b584:	003f5106 	br	80b2cc <__muldf3+0xb0>
  80b588:	9a3fa31e 	bne	r19,r8,80b418 <__muldf3+0x1fc>
  80b58c:	24bfa22e 	bgeu	r4,r18,80b418 <__muldf3+0x1fc>
  80b590:	003f9b06 	br	80b400 <__muldf3+0x1e4>
  80b594:	00803fc4 	movi	r2,255
  80b598:	488c703a 	and	r6,r9,r2
  80b59c:	00802004 	movi	r2,128
  80b5a0:	0007883a 	mov	r3,zero
  80b5a4:	000f883a 	mov	r7,zero
  80b5a8:	dd000c15 	stw	r20,48(sp)
  80b5ac:	30800e26 	beq	r6,r2,80b5e8 <__muldf3+0x3cc>
  80b5b0:	008000c4 	movi	r2,3
  80b5b4:	d9000a04 	addi	r4,sp,40
  80b5b8:	da800e15 	stw	r10,56(sp)
  80b5bc:	d8800a15 	stw	r2,40(sp)
  80b5c0:	da400d15 	stw	r9,52(sp)
  80b5c4:	003f4106 	br	80b2cc <__muldf3+0xb0>
  80b5c8:	697f9f2e 	bgeu	r13,r5,80b448 <__muldf3+0x22c>
  80b5cc:	00800044 	movi	r2,1
  80b5d0:	5889883a 	add	r4,r11,r2
  80b5d4:	22cd803a 	cmpltu	r6,r4,r11
  80b5d8:	330d883a 	add	r6,r6,r12
  80b5dc:	2017883a 	mov	r11,r4
  80b5e0:	3019883a 	mov	r12,r6
  80b5e4:	003f9806 	br	80b448 <__muldf3+0x22c>
  80b5e8:	383ff11e 	bne	r7,zero,80b5b0 <__muldf3+0x394>
  80b5ec:	01004004 	movi	r4,256
  80b5f0:	4904703a 	and	r2,r9,r4
  80b5f4:	10c4b03a 	or	r2,r2,r3
  80b5f8:	1000021e 	bne	r2,zero,80b604 <__muldf3+0x3e8>
  80b5fc:	5b04b03a 	or	r2,r11,r12
  80b600:	103feb26 	beq	r2,zero,80b5b0 <__muldf3+0x394>
  80b604:	4989883a 	add	r4,r9,r6
  80b608:	224d803a 	cmpltu	r6,r4,r9
  80b60c:	328d883a 	add	r6,r6,r10
  80b610:	2013883a 	mov	r9,r4
  80b614:	3015883a 	mov	r10,r6
  80b618:	003fe506 	br	80b5b0 <__muldf3+0x394>

0080b61c <__divdf3>:
  80b61c:	deffea04 	addi	sp,sp,-88
  80b620:	2011883a 	mov	r8,r4
  80b624:	dc001415 	stw	r16,80(sp)
  80b628:	d9400b15 	stw	r5,44(sp)
  80b62c:	d9000a04 	addi	r4,sp,40
  80b630:	d80b883a 	mov	r5,sp
  80b634:	dc000504 	addi	r16,sp,20
  80b638:	dfc01515 	stw	ra,84(sp)
  80b63c:	d9c00d15 	stw	r7,52(sp)
  80b640:	da000a15 	stw	r8,40(sp)
  80b644:	d9800c15 	stw	r6,48(sp)
  80b648:	dc401315 	stw	r17,76(sp)
  80b64c:	dc801215 	stw	r18,72(sp)
  80b650:	dcc01115 	stw	r19,68(sp)
  80b654:	dd001015 	stw	r20,64(sp)
  80b658:	dd400f15 	stw	r21,60(sp)
  80b65c:	dd800e15 	stw	r22,56(sp)
  80b660:	080c50c0 	call	80c50c <__unpack_d>
  80b664:	d9000c04 	addi	r4,sp,48
  80b668:	800b883a 	mov	r5,r16
  80b66c:	080c50c0 	call	80c50c <__unpack_d>
  80b670:	d9400017 	ldw	r5,0(sp)
  80b674:	00800044 	movi	r2,1
  80b678:	d83f883a 	mov	ra,sp
  80b67c:	d809883a 	mov	r4,sp
  80b680:	11404c2e 	bgeu	r2,r5,80b7b4 <__divdf3+0x198>
  80b684:	81800017 	ldw	r6,0(r16)
  80b688:	8009883a 	mov	r4,r16
  80b68c:	1180492e 	bgeu	r2,r6,80b7b4 <__divdf3+0x198>
  80b690:	d8c00117 	ldw	r3,4(sp)
  80b694:	d9000617 	ldw	r4,24(sp)
  80b698:	28800120 	cmpeqi	r2,r5,4
  80b69c:	1906f03a 	xor	r3,r3,r4
  80b6a0:	d8c00115 	stw	r3,4(sp)
  80b6a4:	1000501e 	bne	r2,zero,80b7e8 <__divdf3+0x1cc>
  80b6a8:	288000a0 	cmpeqi	r2,r5,2
  80b6ac:	10004e1e 	bne	r2,zero,80b7e8 <__divdf3+0x1cc>
  80b6b0:	30800118 	cmpnei	r2,r6,4
  80b6b4:	10005726 	beq	r2,zero,80b814 <__divdf3+0x1f8>
  80b6b8:	30800098 	cmpnei	r2,r6,2
  80b6bc:	10005a26 	beq	r2,zero,80b828 <__divdf3+0x20c>
  80b6c0:	d8c00217 	ldw	r3,8(sp)
  80b6c4:	d8800717 	ldw	r2,28(sp)
  80b6c8:	da000417 	ldw	r8,16(sp)
  80b6cc:	dd800917 	ldw	r22,36(sp)
  80b6d0:	d9c00317 	ldw	r7,12(sp)
  80b6d4:	dd400817 	ldw	r21,32(sp)
  80b6d8:	1893c83a 	sub	r9,r3,r2
  80b6dc:	4580472e 	bgeu	r8,r22,80b7fc <__divdf3+0x1e0>
  80b6e0:	39c5883a 	add	r2,r7,r7
  80b6e4:	11cd803a 	cmpltu	r6,r2,r7
  80b6e8:	4207883a 	add	r3,r8,r8
  80b6ec:	30cd883a 	add	r6,r6,r3
  80b6f0:	493fffc4 	addi	r4,r9,-1
  80b6f4:	100f883a 	mov	r7,r2
  80b6f8:	3011883a 	mov	r8,r6
  80b6fc:	d9000215 	stw	r4,8(sp)
  80b700:	0009883a 	mov	r4,zero
  80b704:	01440034 	movhi	r5,4096
  80b708:	29400004 	addi	r5,r5,0
  80b70c:	2144b03a 	or	r2,r4,r5
  80b710:	0027883a 	mov	r19,zero
  80b714:	0029883a 	mov	r20,zero
  80b718:	1000111e 	bne	r2,zero,80b760 <__divdf3+0x144>
  80b71c:	00001c06 	br	80b790 <__divdf3+0x174>
  80b720:	6827883a 	mov	r19,r13
  80b724:	7029883a 	mov	r20,r14
  80b728:	580f883a 	mov	r7,r11
  80b72c:	1011883a 	mov	r8,r2
  80b730:	2820d07a 	srli	r16,r5,1
  80b734:	39d3883a 	add	r9,r7,r7
  80b738:	30deb03a 	or	r15,r6,r3
  80b73c:	49c5803a 	cmpltu	r2,r9,r7
  80b740:	4215883a 	add	r10,r8,r8
  80b744:	1285883a 	add	r2,r2,r10
  80b748:	7c06b03a 	or	r3,r15,r16
  80b74c:	7809883a 	mov	r4,r15
  80b750:	800b883a 	mov	r5,r16
  80b754:	480f883a 	mov	r7,r9
  80b758:	1011883a 	mov	r8,r2
  80b75c:	18000c26 	beq	r3,zero,80b790 <__divdf3+0x174>
  80b760:	280c97fa 	slli	r6,r5,31
  80b764:	2006d07a 	srli	r3,r4,1
  80b768:	45bff136 	bltu	r8,r22,80b730 <__divdf3+0x114>
  80b76c:	3d57c83a 	sub	r11,r7,r21
  80b770:	3ac5803a 	cmpltu	r2,r7,r11
  80b774:	4599c83a 	sub	r12,r8,r22
  80b778:	991ab03a 	or	r13,r19,r4
  80b77c:	a15cb03a 	or	r14,r20,r5
  80b780:	6085c83a 	sub	r2,r12,r2
  80b784:	b23fe61e 	bne	r22,r8,80b720 <__divdf3+0x104>
  80b788:	3d7fe936 	bltu	r7,r21,80b730 <__divdf3+0x114>
  80b78c:	003fe406 	br	80b720 <__divdf3+0x104>
  80b790:	00803fc4 	movi	r2,255
  80b794:	9892703a 	and	r9,r19,r2
  80b798:	00802004 	movi	r2,128
  80b79c:	0007883a 	mov	r3,zero
  80b7a0:	0015883a 	mov	r10,zero
  80b7a4:	48802426 	beq	r9,r2,80b838 <__divdf3+0x21c>
  80b7a8:	fd000415 	stw	r20,16(ra)
  80b7ac:	fcc00315 	stw	r19,12(ra)
  80b7b0:	f809883a 	mov	r4,ra
  80b7b4:	080c27c0 	call	80c27c <__pack_d>
  80b7b8:	1009883a 	mov	r4,r2
  80b7bc:	2005883a 	mov	r2,r4
  80b7c0:	dfc01517 	ldw	ra,84(sp)
  80b7c4:	dc001417 	ldw	r16,80(sp)
  80b7c8:	dc401317 	ldw	r17,76(sp)
  80b7cc:	dc801217 	ldw	r18,72(sp)
  80b7d0:	dcc01117 	ldw	r19,68(sp)
  80b7d4:	dd001017 	ldw	r20,64(sp)
  80b7d8:	dd400f17 	ldw	r21,60(sp)
  80b7dc:	dd800e17 	ldw	r22,56(sp)
  80b7e0:	dec01604 	addi	sp,sp,88
  80b7e4:	f800283a 	ret
  80b7e8:	010020b4 	movhi	r4,130
  80b7ec:	21270704 	addi	r4,r4,-25572
  80b7f0:	29bff026 	beq	r5,r6,80b7b4 <__divdf3+0x198>
  80b7f4:	d809883a 	mov	r4,sp
  80b7f8:	003fee06 	br	80b7b4 <__divdf3+0x198>
  80b7fc:	b2000226 	beq	r22,r8,80b808 <__divdf3+0x1ec>
  80b800:	da400215 	stw	r9,8(sp)
  80b804:	003fbe06 	br	80b700 <__divdf3+0xe4>
  80b808:	3d7fb536 	bltu	r7,r21,80b6e0 <__divdf3+0xc4>
  80b80c:	da400215 	stw	r9,8(sp)
  80b810:	003fbb06 	br	80b700 <__divdf3+0xe4>
  80b814:	d809883a 	mov	r4,sp
  80b818:	d8000315 	stw	zero,12(sp)
  80b81c:	d8000415 	stw	zero,16(sp)
  80b820:	d8000215 	stw	zero,8(sp)
  80b824:	003fe306 	br	80b7b4 <__divdf3+0x198>
  80b828:	00800104 	movi	r2,4
  80b82c:	d809883a 	mov	r4,sp
  80b830:	d8800015 	stw	r2,0(sp)
  80b834:	003fdf06 	br	80b7b4 <__divdf3+0x198>
  80b838:	503fdb1e 	bne	r10,zero,80b7a8 <__divdf3+0x18c>
  80b83c:	01004004 	movi	r4,256
  80b840:	9904703a 	and	r2,r19,r4
  80b844:	10c4b03a 	or	r2,r2,r3
  80b848:	1000021e 	bne	r2,zero,80b854 <__divdf3+0x238>
  80b84c:	3a04b03a 	or	r2,r7,r8
  80b850:	103fd526 	beq	r2,zero,80b7a8 <__divdf3+0x18c>
  80b854:	9a49883a 	add	r4,r19,r9
  80b858:	24cd803a 	cmpltu	r6,r4,r19
  80b85c:	350d883a 	add	r6,r6,r20
  80b860:	2027883a 	mov	r19,r4
  80b864:	3029883a 	mov	r20,r6
  80b868:	003fcf06 	br	80b7a8 <__divdf3+0x18c>

0080b86c <__eqdf2>:
  80b86c:	defff004 	addi	sp,sp,-64
  80b870:	2005883a 	mov	r2,r4
  80b874:	dc000e15 	stw	r16,56(sp)
  80b878:	d9400b15 	stw	r5,44(sp)
  80b87c:	d9000a04 	addi	r4,sp,40
  80b880:	d80b883a 	mov	r5,sp
  80b884:	dc000504 	addi	r16,sp,20
  80b888:	d8800a15 	stw	r2,40(sp)
  80b88c:	d9800c15 	stw	r6,48(sp)
  80b890:	dfc00f15 	stw	ra,60(sp)
  80b894:	d9c00d15 	stw	r7,52(sp)
  80b898:	080c50c0 	call	80c50c <__unpack_d>
  80b89c:	d9000c04 	addi	r4,sp,48
  80b8a0:	800b883a 	mov	r5,r16
  80b8a4:	080c50c0 	call	80c50c <__unpack_d>
  80b8a8:	d8800017 	ldw	r2,0(sp)
  80b8ac:	00c00044 	movi	r3,1
  80b8b0:	180d883a 	mov	r6,r3
  80b8b4:	1880042e 	bgeu	r3,r2,80b8c8 <__eqdf2+0x5c>
  80b8b8:	80800017 	ldw	r2,0(r16)
  80b8bc:	800b883a 	mov	r5,r16
  80b8c0:	d809883a 	mov	r4,sp
  80b8c4:	18800536 	bltu	r3,r2,80b8dc <__eqdf2+0x70>
  80b8c8:	3005883a 	mov	r2,r6
  80b8cc:	dfc00f17 	ldw	ra,60(sp)
  80b8d0:	dc000e17 	ldw	r16,56(sp)
  80b8d4:	dec01004 	addi	sp,sp,64
  80b8d8:	f800283a 	ret
  80b8dc:	080c6340 	call	80c634 <__fpcmp_parts_d>
  80b8e0:	100d883a 	mov	r6,r2
  80b8e4:	3005883a 	mov	r2,r6
  80b8e8:	dfc00f17 	ldw	ra,60(sp)
  80b8ec:	dc000e17 	ldw	r16,56(sp)
  80b8f0:	dec01004 	addi	sp,sp,64
  80b8f4:	f800283a 	ret

0080b8f8 <__nedf2>:
  80b8f8:	defff004 	addi	sp,sp,-64
  80b8fc:	2005883a 	mov	r2,r4
  80b900:	dc000e15 	stw	r16,56(sp)
  80b904:	d9400b15 	stw	r5,44(sp)
  80b908:	d9000a04 	addi	r4,sp,40
  80b90c:	d80b883a 	mov	r5,sp
  80b910:	dc000504 	addi	r16,sp,20
  80b914:	d8800a15 	stw	r2,40(sp)
  80b918:	d9800c15 	stw	r6,48(sp)
  80b91c:	dfc00f15 	stw	ra,60(sp)
  80b920:	d9c00d15 	stw	r7,52(sp)
  80b924:	080c50c0 	call	80c50c <__unpack_d>
  80b928:	d9000c04 	addi	r4,sp,48
  80b92c:	800b883a 	mov	r5,r16
  80b930:	080c50c0 	call	80c50c <__unpack_d>
  80b934:	d8800017 	ldw	r2,0(sp)
  80b938:	00c00044 	movi	r3,1
  80b93c:	180d883a 	mov	r6,r3
  80b940:	1880042e 	bgeu	r3,r2,80b954 <__nedf2+0x5c>
  80b944:	80800017 	ldw	r2,0(r16)
  80b948:	800b883a 	mov	r5,r16
  80b94c:	d809883a 	mov	r4,sp
  80b950:	18800536 	bltu	r3,r2,80b968 <__nedf2+0x70>
  80b954:	3005883a 	mov	r2,r6
  80b958:	dfc00f17 	ldw	ra,60(sp)
  80b95c:	dc000e17 	ldw	r16,56(sp)
  80b960:	dec01004 	addi	sp,sp,64
  80b964:	f800283a 	ret
  80b968:	080c6340 	call	80c634 <__fpcmp_parts_d>
  80b96c:	100d883a 	mov	r6,r2
  80b970:	3005883a 	mov	r2,r6
  80b974:	dfc00f17 	ldw	ra,60(sp)
  80b978:	dc000e17 	ldw	r16,56(sp)
  80b97c:	dec01004 	addi	sp,sp,64
  80b980:	f800283a 	ret

0080b984 <__gtdf2>:
  80b984:	defff004 	addi	sp,sp,-64
  80b988:	2005883a 	mov	r2,r4
  80b98c:	dc000e15 	stw	r16,56(sp)
  80b990:	d9400b15 	stw	r5,44(sp)
  80b994:	d9000a04 	addi	r4,sp,40
  80b998:	d80b883a 	mov	r5,sp
  80b99c:	dc000504 	addi	r16,sp,20
  80b9a0:	d8800a15 	stw	r2,40(sp)
  80b9a4:	d9800c15 	stw	r6,48(sp)
  80b9a8:	dfc00f15 	stw	ra,60(sp)
  80b9ac:	d9c00d15 	stw	r7,52(sp)
  80b9b0:	080c50c0 	call	80c50c <__unpack_d>
  80b9b4:	d9000c04 	addi	r4,sp,48
  80b9b8:	800b883a 	mov	r5,r16
  80b9bc:	080c50c0 	call	80c50c <__unpack_d>
  80b9c0:	d8800017 	ldw	r2,0(sp)
  80b9c4:	00c00044 	movi	r3,1
  80b9c8:	01bfffc4 	movi	r6,-1
  80b9cc:	1880042e 	bgeu	r3,r2,80b9e0 <__gtdf2+0x5c>
  80b9d0:	80800017 	ldw	r2,0(r16)
  80b9d4:	800b883a 	mov	r5,r16
  80b9d8:	d809883a 	mov	r4,sp
  80b9dc:	18800536 	bltu	r3,r2,80b9f4 <__gtdf2+0x70>
  80b9e0:	3005883a 	mov	r2,r6
  80b9e4:	dfc00f17 	ldw	ra,60(sp)
  80b9e8:	dc000e17 	ldw	r16,56(sp)
  80b9ec:	dec01004 	addi	sp,sp,64
  80b9f0:	f800283a 	ret
  80b9f4:	080c6340 	call	80c634 <__fpcmp_parts_d>
  80b9f8:	100d883a 	mov	r6,r2
  80b9fc:	3005883a 	mov	r2,r6
  80ba00:	dfc00f17 	ldw	ra,60(sp)
  80ba04:	dc000e17 	ldw	r16,56(sp)
  80ba08:	dec01004 	addi	sp,sp,64
  80ba0c:	f800283a 	ret

0080ba10 <__gedf2>:
  80ba10:	defff004 	addi	sp,sp,-64
  80ba14:	2005883a 	mov	r2,r4
  80ba18:	dc000e15 	stw	r16,56(sp)
  80ba1c:	d9400b15 	stw	r5,44(sp)
  80ba20:	d9000a04 	addi	r4,sp,40
  80ba24:	d80b883a 	mov	r5,sp
  80ba28:	dc000504 	addi	r16,sp,20
  80ba2c:	d8800a15 	stw	r2,40(sp)
  80ba30:	d9800c15 	stw	r6,48(sp)
  80ba34:	dfc00f15 	stw	ra,60(sp)
  80ba38:	d9c00d15 	stw	r7,52(sp)
  80ba3c:	080c50c0 	call	80c50c <__unpack_d>
  80ba40:	d9000c04 	addi	r4,sp,48
  80ba44:	800b883a 	mov	r5,r16
  80ba48:	080c50c0 	call	80c50c <__unpack_d>
  80ba4c:	d8800017 	ldw	r2,0(sp)
  80ba50:	00c00044 	movi	r3,1
  80ba54:	01bfffc4 	movi	r6,-1
  80ba58:	1880042e 	bgeu	r3,r2,80ba6c <__gedf2+0x5c>
  80ba5c:	80800017 	ldw	r2,0(r16)
  80ba60:	800b883a 	mov	r5,r16
  80ba64:	d809883a 	mov	r4,sp
  80ba68:	18800536 	bltu	r3,r2,80ba80 <__gedf2+0x70>
  80ba6c:	3005883a 	mov	r2,r6
  80ba70:	dfc00f17 	ldw	ra,60(sp)
  80ba74:	dc000e17 	ldw	r16,56(sp)
  80ba78:	dec01004 	addi	sp,sp,64
  80ba7c:	f800283a 	ret
  80ba80:	080c6340 	call	80c634 <__fpcmp_parts_d>
  80ba84:	100d883a 	mov	r6,r2
  80ba88:	3005883a 	mov	r2,r6
  80ba8c:	dfc00f17 	ldw	ra,60(sp)
  80ba90:	dc000e17 	ldw	r16,56(sp)
  80ba94:	dec01004 	addi	sp,sp,64
  80ba98:	f800283a 	ret

0080ba9c <__ltdf2>:
  80ba9c:	defff004 	addi	sp,sp,-64
  80baa0:	2005883a 	mov	r2,r4
  80baa4:	dc000e15 	stw	r16,56(sp)
  80baa8:	d9400b15 	stw	r5,44(sp)
  80baac:	d9000a04 	addi	r4,sp,40
  80bab0:	d80b883a 	mov	r5,sp
  80bab4:	dc000504 	addi	r16,sp,20
  80bab8:	d8800a15 	stw	r2,40(sp)
  80babc:	d9800c15 	stw	r6,48(sp)
  80bac0:	dfc00f15 	stw	ra,60(sp)
  80bac4:	d9c00d15 	stw	r7,52(sp)
  80bac8:	080c50c0 	call	80c50c <__unpack_d>
  80bacc:	d9000c04 	addi	r4,sp,48
  80bad0:	800b883a 	mov	r5,r16
  80bad4:	080c50c0 	call	80c50c <__unpack_d>
  80bad8:	d8800017 	ldw	r2,0(sp)
  80badc:	00c00044 	movi	r3,1
  80bae0:	180d883a 	mov	r6,r3
  80bae4:	1880042e 	bgeu	r3,r2,80baf8 <__ltdf2+0x5c>
  80bae8:	80800017 	ldw	r2,0(r16)
  80baec:	800b883a 	mov	r5,r16
  80baf0:	d809883a 	mov	r4,sp
  80baf4:	18800536 	bltu	r3,r2,80bb0c <__ltdf2+0x70>
  80baf8:	3005883a 	mov	r2,r6
  80bafc:	dfc00f17 	ldw	ra,60(sp)
  80bb00:	dc000e17 	ldw	r16,56(sp)
  80bb04:	dec01004 	addi	sp,sp,64
  80bb08:	f800283a 	ret
  80bb0c:	080c6340 	call	80c634 <__fpcmp_parts_d>
  80bb10:	100d883a 	mov	r6,r2
  80bb14:	3005883a 	mov	r2,r6
  80bb18:	dfc00f17 	ldw	ra,60(sp)
  80bb1c:	dc000e17 	ldw	r16,56(sp)
  80bb20:	dec01004 	addi	sp,sp,64
  80bb24:	f800283a 	ret

0080bb28 <__floatsidf>:
  80bb28:	2006d7fa 	srli	r3,r4,31
  80bb2c:	defffa04 	addi	sp,sp,-24
  80bb30:	dfc00515 	stw	ra,20(sp)
  80bb34:	d8c00115 	stw	r3,4(sp)
  80bb38:	20000b1e 	bne	r4,zero,80bb68 <__floatsidf+0x40>
  80bb3c:	00800084 	movi	r2,2
  80bb40:	d8800015 	stw	r2,0(sp)
  80bb44:	d809883a 	mov	r4,sp
  80bb48:	080c27c0 	call	80c27c <__pack_d>
  80bb4c:	100d883a 	mov	r6,r2
  80bb50:	180f883a 	mov	r7,r3
  80bb54:	3807883a 	mov	r3,r7
  80bb58:	3005883a 	mov	r2,r6
  80bb5c:	dfc00517 	ldw	ra,20(sp)
  80bb60:	dec00604 	addi	sp,sp,24
  80bb64:	f800283a 	ret
  80bb68:	02c00f04 	movi	r11,60
  80bb6c:	008000c4 	movi	r2,3
  80bb70:	d8800015 	stw	r2,0(sp)
  80bb74:	5815883a 	mov	r10,r11
  80bb78:	18000426 	beq	r3,zero,80bb8c <__floatsidf+0x64>
  80bb7c:	00a00034 	movhi	r2,32768
  80bb80:	10800004 	addi	r2,r2,0
  80bb84:	20801726 	beq	r4,r2,80bbe4 <__floatsidf+0xbc>
  80bb88:	0109c83a 	sub	r4,zero,r4
  80bb8c:	2007d7fa 	srai	r3,r4,31
  80bb90:	03040034 	movhi	r12,4096
  80bb94:	633fffc4 	addi	r12,r12,-1
  80bb98:	d9000315 	stw	r4,12(sp)
  80bb9c:	d8c00415 	stw	r3,16(sp)
  80bba0:	da400417 	ldw	r9,16(sp)
  80bba4:	62400d36 	bltu	r12,r9,80bbdc <__floatsidf+0xb4>
  80bba8:	d8800317 	ldw	r2,12(sp)
  80bbac:	d8c00417 	ldw	r3,16(sp)
  80bbb0:	51bfffc4 	addi	r6,r10,-1
  80bbb4:	3015883a 	mov	r10,r6
  80bbb8:	3017883a 	mov	r11,r6
  80bbbc:	100ed7fa 	srli	r7,r2,31
  80bbc0:	18cd883a 	add	r6,r3,r3
  80bbc4:	1089883a 	add	r4,r2,r2
  80bbc8:	398ab03a 	or	r5,r7,r6
  80bbcc:	2813883a 	mov	r9,r5
  80bbd0:	d9000315 	stw	r4,12(sp)
  80bbd4:	d9400415 	stw	r5,16(sp)
  80bbd8:	627ff32e 	bgeu	r12,r9,80bba8 <__floatsidf+0x80>
  80bbdc:	dac00215 	stw	r11,8(sp)
  80bbe0:	003fd806 	br	80bb44 <__floatsidf+0x1c>
  80bbe4:	000d883a 	mov	r6,zero
  80bbe8:	01f07834 	movhi	r7,49632
  80bbec:	39c00004 	addi	r7,r7,0
  80bbf0:	dac00215 	stw	r11,8(sp)
  80bbf4:	003fd706 	br	80bb54 <__floatsidf+0x2c>

0080bbf8 <__fixdfsi>:
  80bbf8:	defff804 	addi	sp,sp,-32
  80bbfc:	2005883a 	mov	r2,r4
  80bc00:	d9400615 	stw	r5,24(sp)
  80bc04:	d9000504 	addi	r4,sp,20
  80bc08:	d80b883a 	mov	r5,sp
  80bc0c:	d8800515 	stw	r2,20(sp)
  80bc10:	dfc00715 	stw	ra,28(sp)
  80bc14:	080c50c0 	call	80c50c <__unpack_d>
  80bc18:	d8c00017 	ldw	r3,0(sp)
  80bc1c:	000b883a 	mov	r5,zero
  80bc20:	18800098 	cmpnei	r2,r3,2
  80bc24:	10000f26 	beq	r2,zero,80bc64 <__fixdfsi+0x6c>
  80bc28:	00800044 	movi	r2,1
  80bc2c:	10c00d2e 	bgeu	r2,r3,80bc64 <__fixdfsi+0x6c>
  80bc30:	18800118 	cmpnei	r2,r3,4
  80bc34:	10000526 	beq	r2,zero,80bc4c <__fixdfsi+0x54>
  80bc38:	d9000217 	ldw	r4,8(sp)
  80bc3c:	000b883a 	mov	r5,zero
  80bc40:	20000816 	blt	r4,zero,80bc64 <__fixdfsi+0x6c>
  80bc44:	00800784 	movi	r2,30
  80bc48:	11000a0e 	bge	r2,r4,80bc74 <__fixdfsi+0x7c>
  80bc4c:	d8800117 	ldw	r2,4(sp)
  80bc50:	00e00034 	movhi	r3,32768
  80bc54:	18c00004 	addi	r3,r3,0
  80bc58:	1000011e 	bne	r2,zero,80bc60 <__fixdfsi+0x68>
  80bc5c:	18ffffc4 	addi	r3,r3,-1
  80bc60:	180b883a 	mov	r5,r3
  80bc64:	2805883a 	mov	r2,r5
  80bc68:	dfc00717 	ldw	ra,28(sp)
  80bc6c:	dec00804 	addi	sp,sp,32
  80bc70:	f800283a 	ret
  80bc74:	d8800317 	ldw	r2,12(sp)
  80bc78:	d8c00417 	ldw	r3,16(sp)
  80bc7c:	01800f04 	movi	r6,60
  80bc80:	310dc83a 	sub	r6,r6,r4
  80bc84:	180b883a 	mov	r5,r3
  80bc88:	1009883a 	mov	r4,r2
  80bc8c:	080bf240 	call	80bf24 <__lshrdi3>
  80bc90:	1007883a 	mov	r3,r2
  80bc94:	d8800117 	ldw	r2,4(sp)
  80bc98:	103ff126 	beq	r2,zero,80bc60 <__fixdfsi+0x68>
  80bc9c:	00c7c83a 	sub	r3,zero,r3
  80bca0:	180b883a 	mov	r5,r3
  80bca4:	003fef06 	br	80bc64 <__fixdfsi+0x6c>

0080bca8 <__make_dp>:
  80bca8:	defff904 	addi	sp,sp,-28
  80bcac:	d8c00717 	ldw	r3,28(sp)
  80bcb0:	d9000015 	stw	r4,0(sp)
  80bcb4:	d809883a 	mov	r4,sp
  80bcb8:	dfc00515 	stw	ra,20(sp)
  80bcbc:	d9400115 	stw	r5,4(sp)
  80bcc0:	d9800215 	stw	r6,8(sp)
  80bcc4:	d8c00415 	stw	r3,16(sp)
  80bcc8:	d9c00615 	stw	r7,24(sp)
  80bccc:	d9c00315 	stw	r7,12(sp)
  80bcd0:	080c27c0 	call	80c27c <__pack_d>
  80bcd4:	1009883a 	mov	r4,r2
  80bcd8:	2005883a 	mov	r2,r4
  80bcdc:	dfc00517 	ldw	ra,20(sp)
  80bce0:	dec00704 	addi	sp,sp,28
  80bce4:	f800283a 	ret

0080bce8 <__truncdfsf2>:
  80bce8:	defff804 	addi	sp,sp,-32
  80bcec:	2005883a 	mov	r2,r4
  80bcf0:	d9400615 	stw	r5,24(sp)
  80bcf4:	d9000504 	addi	r4,sp,20
  80bcf8:	d80b883a 	mov	r5,sp
  80bcfc:	d8800515 	stw	r2,20(sp)
  80bd00:	dfc00715 	stw	ra,28(sp)
  80bd04:	080c50c0 	call	80c50c <__unpack_d>
  80bd08:	d9400317 	ldw	r5,12(sp)
  80bd0c:	d9800417 	ldw	r6,16(sp)
  80bd10:	01d00034 	movhi	r7,16384
  80bd14:	39ffffc4 	addi	r7,r7,-1
  80bd18:	281ad7ba 	srli	r13,r5,30
  80bd1c:	301c90ba 	slli	r14,r6,2
  80bd20:	29c4703a 	and	r2,r5,r7
  80bd24:	0007883a 	mov	r3,zero
  80bd28:	7356b03a 	or	r11,r14,r13
  80bd2c:	10c4b03a 	or	r2,r2,r3
  80bd30:	d9000017 	ldw	r4,0(sp)
  80bd34:	d9400117 	ldw	r5,4(sp)
  80bd38:	d9800217 	ldw	r6,8(sp)
  80bd3c:	580f883a 	mov	r7,r11
  80bd40:	10000126 	beq	r2,zero,80bd48 <__truncdfsf2+0x60>
  80bd44:	59c00054 	ori	r7,r11,1
  80bd48:	080c2500 	call	80c250 <__make_fp>
  80bd4c:	dfc00717 	ldw	ra,28(sp)
  80bd50:	dec00804 	addi	sp,sp,32
  80bd54:	f800283a 	ret

0080bd58 <udivmodsi4>:
  80bd58:	00800044 	movi	r2,1
  80bd5c:	000f883a 	mov	r7,zero
  80bd60:	2900082e 	bgeu	r5,r4,80bd84 <udivmodsi4+0x2c>
  80bd64:	28000716 	blt	r5,zero,80bd84 <udivmodsi4+0x2c>
  80bd68:	294b883a 	add	r5,r5,r5
  80bd6c:	1085883a 	add	r2,r2,r2
  80bd70:	29000e2e 	bgeu	r5,r4,80bdac <udivmodsi4+0x54>
  80bd74:	1007003a 	cmpeq	r3,r2,zero
  80bd78:	1800081e 	bne	r3,zero,80bd9c <udivmodsi4+0x44>
  80bd7c:	283ffa0e 	bge	r5,zero,80bd68 <udivmodsi4+0x10>
  80bd80:	1800061e 	bne	r3,zero,80bd9c <udivmodsi4+0x44>
  80bd84:	21400236 	bltu	r4,r5,80bd90 <udivmodsi4+0x38>
  80bd88:	2149c83a 	sub	r4,r4,r5
  80bd8c:	388eb03a 	or	r7,r7,r2
  80bd90:	1004d07a 	srli	r2,r2,1
  80bd94:	280ad07a 	srli	r5,r5,1
  80bd98:	103ffa1e 	bne	r2,zero,80bd84 <udivmodsi4+0x2c>
  80bd9c:	3000011e 	bne	r6,zero,80bda4 <udivmodsi4+0x4c>
  80bda0:	3809883a 	mov	r4,r7
  80bda4:	2005883a 	mov	r2,r4
  80bda8:	f800283a 	ret
  80bdac:	1007003a 	cmpeq	r3,r2,zero
  80bdb0:	183ff426 	beq	r3,zero,80bd84 <udivmodsi4+0x2c>
  80bdb4:	003ff906 	br	80bd9c <udivmodsi4+0x44>

0080bdb8 <__divsi3>:
  80bdb8:	defffe04 	addi	sp,sp,-8
  80bdbc:	dc000015 	stw	r16,0(sp)
  80bdc0:	dfc00115 	stw	ra,4(sp)
  80bdc4:	000d883a 	mov	r6,zero
  80bdc8:	0021883a 	mov	r16,zero
  80bdcc:	20000816 	blt	r4,zero,80bdf0 <__divsi3+0x38>
  80bdd0:	28000a16 	blt	r5,zero,80bdfc <__divsi3+0x44>
  80bdd4:	080bd580 	call	80bd58 <udivmodsi4>
  80bdd8:	80000126 	beq	r16,zero,80bde0 <__divsi3+0x28>
  80bddc:	0085c83a 	sub	r2,zero,r2
  80bde0:	dfc00117 	ldw	ra,4(sp)
  80bde4:	dc000017 	ldw	r16,0(sp)
  80bde8:	dec00204 	addi	sp,sp,8
  80bdec:	f800283a 	ret
  80bdf0:	0109c83a 	sub	r4,zero,r4
  80bdf4:	0021003a 	cmpeq	r16,zero,zero
  80bdf8:	283ff60e 	bge	r5,zero,80bdd4 <__divsi3+0x1c>
  80bdfc:	014bc83a 	sub	r5,zero,r5
  80be00:	8021003a 	cmpeq	r16,r16,zero
  80be04:	003ff306 	br	80bdd4 <__divsi3+0x1c>

0080be08 <__modsi3>:
  80be08:	defffe04 	addi	sp,sp,-8
  80be0c:	dc000015 	stw	r16,0(sp)
  80be10:	dfc00115 	stw	ra,4(sp)
  80be14:	01800044 	movi	r6,1
  80be18:	0021883a 	mov	r16,zero
  80be1c:	20000816 	blt	r4,zero,80be40 <__modsi3+0x38>
  80be20:	28000a16 	blt	r5,zero,80be4c <__modsi3+0x44>
  80be24:	080bd580 	call	80bd58 <udivmodsi4>
  80be28:	80000126 	beq	r16,zero,80be30 <__modsi3+0x28>
  80be2c:	0085c83a 	sub	r2,zero,r2
  80be30:	dfc00117 	ldw	ra,4(sp)
  80be34:	dc000017 	ldw	r16,0(sp)
  80be38:	dec00204 	addi	sp,sp,8
  80be3c:	f800283a 	ret
  80be40:	0109c83a 	sub	r4,zero,r4
  80be44:	3021883a 	mov	r16,r6
  80be48:	283ff60e 	bge	r5,zero,80be24 <__modsi3+0x1c>
  80be4c:	014bc83a 	sub	r5,zero,r5
  80be50:	003ff406 	br	80be24 <__modsi3+0x1c>

0080be54 <__udivsi3>:
  80be54:	000d883a 	mov	r6,zero
  80be58:	02002074 	movhi	r8,129
  80be5c:	422f5604 	addi	r8,r8,-17064
  80be60:	4000683a 	jmp	r8

0080be64 <__umodsi3>:
  80be64:	01800044 	movi	r6,1
  80be68:	02002074 	movhi	r8,129
  80be6c:	422f5604 	addi	r8,r8,-17064
  80be70:	4000683a 	jmp	r8

0080be74 <__muldi3>:
  80be74:	3019883a 	mov	r12,r6
  80be78:	2015883a 	mov	r10,r4
  80be7c:	2011883a 	mov	r8,r4
  80be80:	31bfffcc 	andi	r6,r6,65535
  80be84:	213fffcc 	andi	r4,r4,65535
  80be88:	2813883a 	mov	r9,r5
  80be8c:	6016d43a 	srli	r11,r12,16
  80be90:	218b383a 	mul	r5,r4,r6
  80be94:	5014d43a 	srli	r10,r10,16
  80be98:	3807883a 	mov	r3,r7
  80be9c:	22c9383a 	mul	r4,r4,r11
  80bea0:	4b0f383a 	mul	r7,r9,r12
  80bea4:	2b3fffcc 	andi	r12,r5,65535
  80bea8:	280ad43a 	srli	r5,r5,16
  80beac:	518d383a 	mul	r6,r10,r6
  80beb0:	40d1383a 	mul	r8,r8,r3
  80beb4:	2149883a 	add	r4,r4,r5
  80beb8:	2189883a 	add	r4,r4,r6
  80bebc:	2004943a 	slli	r2,r4,16
  80bec0:	deffff04 	addi	sp,sp,-4
  80bec4:	dc000015 	stw	r16,0(sp)
  80bec8:	130b883a 	add	r5,r2,r12
  80becc:	41d3883a 	add	r9,r8,r7
  80bed0:	2006d43a 	srli	r3,r4,16
  80bed4:	52d5383a 	mul	r10,r10,r11
  80bed8:	281f883a 	mov	r15,r5
  80bedc:	2180032e 	bgeu	r4,r6,80beec <__muldi3+0x78>
  80bee0:	00800074 	movhi	r2,1
  80bee4:	10800004 	addi	r2,r2,0
  80bee8:	5095883a 	add	r10,r10,r2
  80beec:	1a9d883a 	add	r14,r3,r10
  80bef0:	4b87883a 	add	r3,r9,r14
  80bef4:	7805883a 	mov	r2,r15
  80bef8:	dc000017 	ldw	r16,0(sp)
  80befc:	dec00104 	addi	sp,sp,4
  80bf00:	f800283a 	ret

0080bf04 <__negdi2>:
  80bf04:	280f883a 	mov	r7,r5
  80bf08:	010bc83a 	sub	r5,zero,r4
  80bf0c:	2808c03a 	cmpne	r4,r5,zero
  80bf10:	01d3c83a 	sub	r9,zero,r7
  80bf14:	4913c83a 	sub	r9,r9,r4
  80bf18:	2805883a 	mov	r2,r5
  80bf1c:	4807883a 	mov	r3,r9
  80bf20:	f800283a 	ret

0080bf24 <__lshrdi3>:
  80bf24:	00800804 	movi	r2,32
  80bf28:	119bc83a 	sub	r13,r2,r6
  80bf2c:	2013883a 	mov	r9,r4
  80bf30:	2005883a 	mov	r2,r4
  80bf34:	2815883a 	mov	r10,r5
  80bf38:	30000826 	beq	r6,zero,80bf5c <__lshrdi3+0x38>
  80bf3c:	1186d83a 	srl	r3,r2,r6
  80bf40:	0349c83a 	sub	r4,zero,r13
  80bf44:	2b44983a 	sll	r2,r5,r13
  80bf48:	0340070e 	bge	zero,r13,80bf68 <__lshrdi3+0x44>
  80bf4c:	2998d83a 	srl	r12,r5,r6
  80bf50:	1896b03a 	or	r11,r3,r2
  80bf54:	5813883a 	mov	r9,r11
  80bf58:	6015883a 	mov	r10,r12
  80bf5c:	5007883a 	mov	r3,r10
  80bf60:	4805883a 	mov	r2,r9
  80bf64:	f800283a 	ret
  80bf68:	2916d83a 	srl	r11,r5,r4
  80bf6c:	0019883a 	mov	r12,zero
  80bf70:	003ff806 	br	80bf54 <__lshrdi3+0x30>

0080bf74 <__pack_f>:
  80bf74:	20c00017 	ldw	r3,0(r4)
  80bf78:	02000044 	movi	r8,1
  80bf7c:	21800317 	ldw	r6,12(r4)
  80bf80:	22400117 	ldw	r9,4(r4)
  80bf84:	000f883a 	mov	r7,zero
  80bf88:	40c01336 	bltu	r8,r3,80bfd8 <__pack_f+0x64>
  80bf8c:	31800434 	orhi	r6,r6,16
  80bf90:	01c03fc4 	movi	r7,255
  80bf94:	39003fcc 	andi	r4,r7,255
  80bf98:	00802034 	movhi	r2,128
  80bf9c:	10bfffc4 	addi	r2,r2,-1
  80bfa0:	3084703a 	and	r2,r6,r2
  80bfa4:	200895fa 	slli	r4,r4,23
  80bfa8:	297fe02c 	andhi	r5,r5,65408
  80bfac:	288ab03a 	or	r5,r5,r2
  80bfb0:	00e02034 	movhi	r3,32896
  80bfb4:	18ffffc4 	addi	r3,r3,-1
  80bfb8:	28ca703a 	and	r5,r5,r3
  80bfbc:	480497fa 	slli	r2,r9,31
  80bfc0:	290ab03a 	or	r5,r5,r4
  80bfc4:	00e00034 	movhi	r3,32768
  80bfc8:	18ffffc4 	addi	r3,r3,-1
  80bfcc:	28ca703a 	and	r5,r5,r3
  80bfd0:	2884b03a 	or	r2,r5,r2
  80bfd4:	f800283a 	ret
  80bfd8:	18800118 	cmpnei	r2,r3,4
  80bfdc:	10001b26 	beq	r2,zero,80c04c <__pack_f+0xd8>
  80bfe0:	18800098 	cmpnei	r2,r3,2
  80bfe4:	10001a26 	beq	r2,zero,80c050 <__pack_f+0xdc>
  80bfe8:	303fea26 	beq	r6,zero,80bf94 <__pack_f+0x20>
  80bfec:	21000217 	ldw	r4,8(r4)
  80bff0:	00bfe084 	movi	r2,-126
  80bff4:	2080130e 	bge	r4,r2,80c044 <__pack_f+0xd0>
  80bff8:	1109c83a 	sub	r4,r2,r4
  80bffc:	00800644 	movi	r2,25
  80c000:	11001f16 	blt	r2,r4,80c080 <__pack_f+0x10c>
  80c004:	4104983a 	sll	r2,r8,r4
  80c008:	3106d83a 	srl	r3,r6,r4
  80c00c:	10bfffc4 	addi	r2,r2,-1
  80c010:	1184703a 	and	r2,r2,r6
  80c014:	1004c03a 	cmpne	r2,r2,zero
  80c018:	188cb03a 	or	r6,r3,r2
  80c01c:	30c01fcc 	andi	r3,r6,127
  80c020:	00801004 	movi	r2,64
  80c024:	18801826 	beq	r3,r2,80c088 <__pack_f+0x114>
  80c028:	31800fc4 	addi	r6,r6,63
  80c02c:	00900034 	movhi	r2,16384
  80c030:	10bfffc4 	addi	r2,r2,-1
  80c034:	1180012e 	bgeu	r2,r6,80c03c <__pack_f+0xc8>
  80c038:	01c00044 	movi	r7,1
  80c03c:	300cd1fa 	srli	r6,r6,7
  80c040:	003fd406 	br	80bf94 <__pack_f+0x20>
  80c044:	00801fc4 	movi	r2,127
  80c048:	1100030e 	bge	r2,r4,80c058 <__pack_f+0xe4>
  80c04c:	01c03fc4 	movi	r7,255
  80c050:	000d883a 	mov	r6,zero
  80c054:	003fcf06 	br	80bf94 <__pack_f+0x20>
  80c058:	30c01fcc 	andi	r3,r6,127
  80c05c:	00801004 	movi	r2,64
  80c060:	21c01fc4 	addi	r7,r4,127
  80c064:	18800c26 	beq	r3,r2,80c098 <__pack_f+0x124>
  80c068:	31800fc4 	addi	r6,r6,63
  80c06c:	303ff30e 	bge	r6,zero,80c03c <__pack_f+0xc8>
  80c070:	300cd07a 	srli	r6,r6,1
  80c074:	39c00044 	addi	r7,r7,1
  80c078:	300cd1fa 	srli	r6,r6,7
  80c07c:	003fc506 	br	80bf94 <__pack_f+0x20>
  80c080:	000d883a 	mov	r6,zero
  80c084:	003fe506 	br	80c01c <__pack_f+0xa8>
  80c088:	3080200c 	andi	r2,r6,128
  80c08c:	103fe726 	beq	r2,zero,80c02c <__pack_f+0xb8>
  80c090:	30cd883a 	add	r6,r6,r3
  80c094:	003fe506 	br	80c02c <__pack_f+0xb8>
  80c098:	3080200c 	andi	r2,r6,128
  80c09c:	103ff326 	beq	r2,zero,80c06c <__pack_f+0xf8>
  80c0a0:	30cd883a 	add	r6,r6,r3
  80c0a4:	003ff106 	br	80c06c <__pack_f+0xf8>

0080c0a8 <__unpack_f>:
  80c0a8:	21000017 	ldw	r4,0(r4)
  80c0ac:	00802034 	movhi	r2,128
  80c0b0:	10bfffc4 	addi	r2,r2,-1
  80c0b4:	200cd5fa 	srli	r6,r4,23
  80c0b8:	2006d7fa 	srli	r3,r4,31
  80c0bc:	208e703a 	and	r7,r4,r2
  80c0c0:	31803fcc 	andi	r6,r6,255
  80c0c4:	28c00115 	stw	r3,4(r5)
  80c0c8:	30000f1e 	bne	r6,zero,80c108 <__unpack_f+0x60>
  80c0cc:	00800084 	movi	r2,2
  80c0d0:	38001526 	beq	r7,zero,80c128 <__unpack_f+0x80>
  80c0d4:	380e91fa 	slli	r7,r7,7
  80c0d8:	008000c4 	movi	r2,3
  80c0dc:	01100034 	movhi	r4,16384
  80c0e0:	213fffc4 	addi	r4,r4,-1
  80c0e4:	00ffe084 	movi	r3,-126
  80c0e8:	28800015 	stw	r2,0(r5)
  80c0ec:	21c00336 	bltu	r4,r7,80c0fc <__unpack_f+0x54>
  80c0f0:	39cf883a 	add	r7,r7,r7
  80c0f4:	18ffffc4 	addi	r3,r3,-1
  80c0f8:	21fffd2e 	bgeu	r4,r7,80c0f0 <__unpack_f+0x48>
  80c0fc:	29c00315 	stw	r7,12(r5)
  80c100:	28c00215 	stw	r3,8(r5)
  80c104:	f800283a 	ret
  80c108:	00803fc4 	movi	r2,255
  80c10c:	30800826 	beq	r6,r2,80c130 <__unpack_f+0x88>
  80c110:	380491fa 	slli	r2,r7,7
  80c114:	30ffe044 	addi	r3,r6,-127
  80c118:	28c00215 	stw	r3,8(r5)
  80c11c:	10900034 	orhi	r2,r2,16384
  80c120:	28800315 	stw	r2,12(r5)
  80c124:	008000c4 	movi	r2,3
  80c128:	28800015 	stw	r2,0(r5)
  80c12c:	f800283a 	ret
  80c130:	3800021e 	bne	r7,zero,80c13c <__unpack_f+0x94>
  80c134:	00800104 	movi	r2,4
  80c138:	003ffb06 	br	80c128 <__unpack_f+0x80>
  80c13c:	2080042c 	andhi	r2,r4,16
  80c140:	1000031e 	bne	r2,zero,80c150 <__unpack_f+0xa8>
  80c144:	28000015 	stw	zero,0(r5)
  80c148:	29c00315 	stw	r7,12(r5)
  80c14c:	f800283a 	ret
  80c150:	00800044 	movi	r2,1
  80c154:	28800015 	stw	r2,0(r5)
  80c158:	003ffb06 	br	80c148 <__unpack_f+0xa0>

0080c15c <__fpcmp_parts_f>:
  80c15c:	20c00017 	ldw	r3,0(r4)
  80c160:	00800044 	movi	r2,1
  80c164:	10c0022e 	bgeu	r2,r3,80c170 <__fpcmp_parts_f+0x14>
  80c168:	29800017 	ldw	r6,0(r5)
  80c16c:	11800136 	bltu	r2,r6,80c174 <__fpcmp_parts_f+0x18>
  80c170:	f800283a 	ret
  80c174:	18800118 	cmpnei	r2,r3,4
  80c178:	10001126 	beq	r2,zero,80c1c0 <__fpcmp_parts_f+0x64>
  80c17c:	18800118 	cmpnei	r2,r3,4
  80c180:	10001426 	beq	r2,zero,80c1d4 <__fpcmp_parts_f+0x78>
  80c184:	30800118 	cmpnei	r2,r6,4
  80c188:	10002026 	beq	r2,zero,80c20c <__fpcmp_parts_f+0xb0>
  80c18c:	18800098 	cmpnei	r2,r3,2
  80c190:	10002326 	beq	r2,zero,80c220 <__fpcmp_parts_f+0xc4>
  80c194:	18800098 	cmpnei	r2,r3,2
  80c198:	10001c26 	beq	r2,zero,80c20c <__fpcmp_parts_f+0xb0>
  80c19c:	30800098 	cmpnei	r2,r6,2
  80c1a0:	10000c26 	beq	r2,zero,80c1d4 <__fpcmp_parts_f+0x78>
  80c1a4:	20c00117 	ldw	r3,4(r4)
  80c1a8:	28800117 	ldw	r2,4(r5)
  80c1ac:	18800f26 	beq	r3,r2,80c1ec <__fpcmp_parts_f+0x90>
  80c1b0:	00bfffc4 	movi	r2,-1
  80c1b4:	183fee1e 	bne	r3,zero,80c170 <__fpcmp_parts_f+0x14>
  80c1b8:	00800044 	movi	r2,1
  80c1bc:	f800283a 	ret
  80c1c0:	30ffee1e 	bne	r6,r3,80c17c <__fpcmp_parts_f+0x20>
  80c1c4:	28c00117 	ldw	r3,4(r5)
  80c1c8:	20800117 	ldw	r2,4(r4)
  80c1cc:	1885c83a 	sub	r2,r3,r2
  80c1d0:	f800283a 	ret
  80c1d4:	20800117 	ldw	r2,4(r4)
  80c1d8:	00ffffc4 	movi	r3,-1
  80c1dc:	1000011e 	bne	r2,zero,80c1e4 <__fpcmp_parts_f+0x88>
  80c1e0:	00c00044 	movi	r3,1
  80c1e4:	1805883a 	mov	r2,r3
  80c1e8:	f800283a 	ret
  80c1ec:	21800217 	ldw	r6,8(r4)
  80c1f0:	28800217 	ldw	r2,8(r5)
  80c1f4:	11bfee16 	blt	r2,r6,80c1b0 <__fpcmp_parts_f+0x54>
  80c1f8:	30800c0e 	bge	r6,r2,80c22c <__fpcmp_parts_f+0xd0>
  80c1fc:	00800044 	movi	r2,1
  80c200:	183fdb1e 	bne	r3,zero,80c170 <__fpcmp_parts_f+0x14>
  80c204:	00bfffc4 	movi	r2,-1
  80c208:	f800283a 	ret
  80c20c:	28800117 	ldw	r2,4(r5)
  80c210:	00c00044 	movi	r3,1
  80c214:	103ff31e 	bne	r2,zero,80c1e4 <__fpcmp_parts_f+0x88>
  80c218:	00ffffc4 	movi	r3,-1
  80c21c:	003ff106 	br	80c1e4 <__fpcmp_parts_f+0x88>
  80c220:	0005883a 	mov	r2,zero
  80c224:	30ffdb1e 	bne	r6,r3,80c194 <__fpcmp_parts_f+0x38>
  80c228:	f800283a 	ret
  80c22c:	21000317 	ldw	r4,12(r4)
  80c230:	29400317 	ldw	r5,12(r5)
  80c234:	293fde36 	bltu	r5,r4,80c1b0 <__fpcmp_parts_f+0x54>
  80c238:	0005883a 	mov	r2,zero
  80c23c:	217fcc2e 	bgeu	r4,r5,80c170 <__fpcmp_parts_f+0x14>
  80c240:	00800044 	movi	r2,1
  80c244:	183fca1e 	bne	r3,zero,80c170 <__fpcmp_parts_f+0x14>
  80c248:	00bfffc4 	movi	r2,-1
  80c24c:	f800283a 	ret

0080c250 <__make_fp>:
  80c250:	defffb04 	addi	sp,sp,-20
  80c254:	d9000015 	stw	r4,0(sp)
  80c258:	d809883a 	mov	r4,sp
  80c25c:	dfc00415 	stw	ra,16(sp)
  80c260:	d9400115 	stw	r5,4(sp)
  80c264:	d9800215 	stw	r6,8(sp)
  80c268:	d9c00315 	stw	r7,12(sp)
  80c26c:	080bf740 	call	80bf74 <__pack_f>
  80c270:	dfc00417 	ldw	ra,16(sp)
  80c274:	dec00504 	addi	sp,sp,20
  80c278:	f800283a 	ret

0080c27c <__pack_d>:
  80c27c:	defff604 	addi	sp,sp,-40
  80c280:	dcc00415 	stw	r19,16(sp)
  80c284:	dd000315 	stw	r20,12(sp)
  80c288:	dd400215 	stw	r21,8(sp)
  80c28c:	dfc00915 	stw	ra,36(sp)
  80c290:	df000815 	stw	fp,32(sp)
  80c294:	dc000715 	stw	r16,28(sp)
  80c298:	dc400615 	stw	r17,24(sp)
  80c29c:	dc800515 	stw	r18,20(sp)
  80c2a0:	dd800115 	stw	r22,4(sp)
  80c2a4:	ddc00015 	stw	r23,0(sp)
  80c2a8:	20c00017 	ldw	r3,0(r4)
  80c2ac:	05000044 	movi	r20,1
  80c2b0:	24000317 	ldw	r16,12(r4)
  80c2b4:	0027883a 	mov	r19,zero
  80c2b8:	24400417 	ldw	r17,16(r4)
  80c2bc:	25c00117 	ldw	r23,4(r4)
  80c2c0:	002b883a 	mov	r21,zero
  80c2c4:	a0c02636 	bltu	r20,r3,80c360 <__pack_d+0xe4>
  80c2c8:	0005883a 	mov	r2,zero
  80c2cc:	00c00234 	movhi	r3,8
  80c2d0:	18c00004 	addi	r3,r3,0
  80c2d4:	8088b03a 	or	r4,r16,r2
  80c2d8:	88cab03a 	or	r5,r17,r3
  80c2dc:	2021883a 	mov	r16,r4
  80c2e0:	2823883a 	mov	r17,r5
  80c2e4:	0541ffc4 	movi	r21,2047
  80c2e8:	a941ffcc 	andi	r5,r21,2047
  80c2ec:	00c00434 	movhi	r3,16
  80c2f0:	18ffffc4 	addi	r3,r3,-1
  80c2f4:	88c6703a 	and	r3,r17,r3
  80c2f8:	280a953a 	slli	r5,r5,20
  80c2fc:	993ffc2c 	andhi	r4,r19,65520
  80c300:	20e6b03a 	or	r19,r4,r3
  80c304:	00a00434 	movhi	r2,32784
  80c308:	10bfffc4 	addi	r2,r2,-1
  80c30c:	b80697fa 	slli	r3,r23,31
  80c310:	9884703a 	and	r2,r19,r2
  80c314:	1166b03a 	or	r19,r2,r5
  80c318:	01e00034 	movhi	r7,32768
  80c31c:	39ffffc4 	addi	r7,r7,-1
  80c320:	99ce703a 	and	r7,r19,r7
  80c324:	38ceb03a 	or	r7,r7,r3
  80c328:	8005883a 	mov	r2,r16
  80c32c:	3807883a 	mov	r3,r7
  80c330:	dfc00917 	ldw	ra,36(sp)
  80c334:	df000817 	ldw	fp,32(sp)
  80c338:	dc000717 	ldw	r16,28(sp)
  80c33c:	dc400617 	ldw	r17,24(sp)
  80c340:	dc800517 	ldw	r18,20(sp)
  80c344:	dcc00417 	ldw	r19,16(sp)
  80c348:	dd000317 	ldw	r20,12(sp)
  80c34c:	dd400217 	ldw	r21,8(sp)
  80c350:	dd800117 	ldw	r22,4(sp)
  80c354:	ddc00017 	ldw	r23,0(sp)
  80c358:	dec00a04 	addi	sp,sp,40
  80c35c:	f800283a 	ret
  80c360:	18800118 	cmpnei	r2,r3,4
  80c364:	10003926 	beq	r2,zero,80c44c <__pack_d+0x1d0>
  80c368:	18800098 	cmpnei	r2,r3,2
  80c36c:	10003b26 	beq	r2,zero,80c45c <__pack_d+0x1e0>
  80c370:	8444b03a 	or	r2,r16,r17
  80c374:	103fdc26 	beq	r2,zero,80c2e8 <__pack_d+0x6c>
  80c378:	21000217 	ldw	r4,8(r4)
  80c37c:	01bf0084 	movi	r6,-1022
  80c380:	2180300e 	bge	r4,r6,80c444 <__pack_d+0x1c8>
  80c384:	312dc83a 	sub	r22,r6,r4
  80c388:	00800e04 	movi	r2,56
  80c38c:	15804e16 	blt	r2,r22,80c4c8 <__pack_d+0x24c>
  80c390:	a009883a 	mov	r4,r20
  80c394:	000b883a 	mov	r5,zero
  80c398:	b00d883a 	mov	r6,r22
  80c39c:	080c7480 	call	80c748 <__ashldi3>
  80c3a0:	01bfffc4 	movi	r6,-1
  80c3a4:	1189883a 	add	r4,r2,r6
  80c3a8:	2095803a 	cmpltu	r10,r4,r2
  80c3ac:	198b883a 	add	r5,r3,r6
  80c3b0:	514b883a 	add	r5,r10,r5
  80c3b4:	2404703a 	and	r2,r4,r16
  80c3b8:	2c46703a 	and	r3,r5,r17
  80c3bc:	10c4b03a 	or	r2,r2,r3
  80c3c0:	0039883a 	mov	fp,zero
  80c3c4:	10000126 	beq	r2,zero,80c3cc <__pack_d+0x150>
  80c3c8:	a039883a 	mov	fp,r20
  80c3cc:	880b883a 	mov	r5,r17
  80c3d0:	8009883a 	mov	r4,r16
  80c3d4:	b00d883a 	mov	r6,r22
  80c3d8:	080bf240 	call	80bf24 <__lshrdi3>
  80c3dc:	000b883a 	mov	r5,zero
  80c3e0:	1720b03a 	or	r16,r2,fp
  80c3e4:	1962b03a 	or	r17,r3,r5
  80c3e8:	00803fc4 	movi	r2,255
  80c3ec:	808c703a 	and	r6,r16,r2
  80c3f0:	00802004 	movi	r2,128
  80c3f4:	0007883a 	mov	r3,zero
  80c3f8:	000f883a 	mov	r7,zero
  80c3fc:	30803526 	beq	r6,r2,80c4d4 <__pack_d+0x258>
  80c400:	00801fc4 	movi	r2,127
  80c404:	8089883a 	add	r4,r16,r2
  80c408:	240d803a 	cmpltu	r6,r4,r16
  80c40c:	344d883a 	add	r6,r6,r17
  80c410:	2021883a 	mov	r16,r4
  80c414:	3023883a 	mov	r17,r6
  80c418:	00840034 	movhi	r2,4096
  80c41c:	10bfffc4 	addi	r2,r2,-1
  80c420:	1440012e 	bgeu	r2,r17,80c428 <__pack_d+0x1ac>
  80c424:	05400044 	movi	r21,1
  80c428:	880a963a 	slli	r5,r17,24
  80c42c:	8008d23a 	srli	r4,r16,8
  80c430:	8806d23a 	srli	r3,r17,8
  80c434:	2904b03a 	or	r2,r5,r4
  80c438:	1021883a 	mov	r16,r2
  80c43c:	1823883a 	mov	r17,r3
  80c440:	003fa906 	br	80c2e8 <__pack_d+0x6c>
  80c444:	0080ffc4 	movi	r2,1023
  80c448:	1100070e 	bge	r2,r4,80c468 <__pack_d+0x1ec>
  80c44c:	0021883a 	mov	r16,zero
  80c450:	0541ffc4 	movi	r21,2047
  80c454:	0023883a 	mov	r17,zero
  80c458:	003fa306 	br	80c2e8 <__pack_d+0x6c>
  80c45c:	0021883a 	mov	r16,zero
  80c460:	0023883a 	mov	r17,zero
  80c464:	003fa006 	br	80c2e8 <__pack_d+0x6c>
  80c468:	00803fc4 	movi	r2,255
  80c46c:	808e703a 	and	r7,r16,r2
  80c470:	00802004 	movi	r2,128
  80c474:	0007883a 	mov	r3,zero
  80c478:	0011883a 	mov	r8,zero
  80c47c:	2540ffc4 	addi	r21,r4,1023
  80c480:	38801b26 	beq	r7,r2,80c4f0 <__pack_d+0x274>
  80c484:	00801fc4 	movi	r2,127
  80c488:	8089883a 	add	r4,r16,r2
  80c48c:	240d803a 	cmpltu	r6,r4,r16
  80c490:	344d883a 	add	r6,r6,r17
  80c494:	2021883a 	mov	r16,r4
  80c498:	3023883a 	mov	r17,r6
  80c49c:	00880034 	movhi	r2,8192
  80c4a0:	10bfffc4 	addi	r2,r2,-1
  80c4a4:	147fe02e 	bgeu	r2,r17,80c428 <__pack_d+0x1ac>
  80c4a8:	880a97fa 	slli	r5,r17,31
  80c4ac:	8008d07a 	srli	r4,r16,1
  80c4b0:	8806d07a 	srli	r3,r17,1
  80c4b4:	ad400044 	addi	r21,r21,1
  80c4b8:	2904b03a 	or	r2,r5,r4
  80c4bc:	1021883a 	mov	r16,r2
  80c4c0:	1823883a 	mov	r17,r3
  80c4c4:	003fd806 	br	80c428 <__pack_d+0x1ac>
  80c4c8:	0021883a 	mov	r16,zero
  80c4cc:	0023883a 	mov	r17,zero
  80c4d0:	003fc506 	br	80c3e8 <__pack_d+0x16c>
  80c4d4:	383fca1e 	bne	r7,zero,80c400 <__pack_d+0x184>
  80c4d8:	01004004 	movi	r4,256
  80c4dc:	8104703a 	and	r2,r16,r4
  80c4e0:	10c4b03a 	or	r2,r2,r3
  80c4e4:	103fcc26 	beq	r2,zero,80c418 <__pack_d+0x19c>
  80c4e8:	3005883a 	mov	r2,r6
  80c4ec:	003fc506 	br	80c404 <__pack_d+0x188>
  80c4f0:	403fe41e 	bne	r8,zero,80c484 <__pack_d+0x208>
  80c4f4:	01004004 	movi	r4,256
  80c4f8:	8104703a 	and	r2,r16,r4
  80c4fc:	10c4b03a 	or	r2,r2,r3
  80c500:	103fe626 	beq	r2,zero,80c49c <__pack_d+0x220>
  80c504:	3805883a 	mov	r2,r7
  80c508:	003fdf06 	br	80c488 <__pack_d+0x20c>

0080c50c <__unpack_d>:
  80c50c:	21800117 	ldw	r6,4(r4)
  80c510:	00800434 	movhi	r2,16
  80c514:	10bfffc4 	addi	r2,r2,-1
  80c518:	22400017 	ldw	r9,0(r4)
  80c51c:	3010d53a 	srli	r8,r6,20
  80c520:	3006d7fa 	srli	r3,r6,31
  80c524:	2817883a 	mov	r11,r5
  80c528:	4201ffcc 	andi	r8,r8,2047
  80c52c:	28c00115 	stw	r3,4(r5)
  80c530:	3094703a 	and	r10,r6,r2
  80c534:	4000051e 	bne	r8,zero,80c54c <__unpack_d+0x40>
  80c538:	4a84b03a 	or	r2,r9,r10
  80c53c:	1000151e 	bne	r2,zero,80c594 <__unpack_d+0x88>
  80c540:	00800084 	movi	r2,2
  80c544:	58800015 	stw	r2,0(r11)
  80c548:	f800283a 	ret
  80c54c:	0081ffc4 	movi	r2,2047
  80c550:	40802a26 	beq	r8,r2,80c5fc <__unpack_d+0xf0>
  80c554:	480ad63a 	srli	r5,r9,24
  80c558:	5008923a 	slli	r4,r10,8
  80c55c:	480c923a 	slli	r6,r9,8
  80c560:	0005883a 	mov	r2,zero
  80c564:	290eb03a 	or	r7,r5,r4
  80c568:	00c40034 	movhi	r3,4096
  80c56c:	18c00004 	addi	r3,r3,0
  80c570:	3088b03a 	or	r4,r6,r2
  80c574:	423f0044 	addi	r8,r8,-1023
  80c578:	38cab03a 	or	r5,r7,r3
  80c57c:	008000c4 	movi	r2,3
  80c580:	59400415 	stw	r5,16(r11)
  80c584:	5a000215 	stw	r8,8(r11)
  80c588:	58800015 	stw	r2,0(r11)
  80c58c:	59000315 	stw	r4,12(r11)
  80c590:	f800283a 	ret
  80c594:	5008923a 	slli	r4,r10,8
  80c598:	480ad63a 	srli	r5,r9,24
  80c59c:	4804923a 	slli	r2,r9,8
  80c5a0:	01bf0084 	movi	r6,-1022
  80c5a4:	2906b03a 	or	r3,r5,r4
  80c5a8:	02040034 	movhi	r8,4096
  80c5ac:	423fffc4 	addi	r8,r8,-1
  80c5b0:	010000c4 	movi	r4,3
  80c5b4:	1815883a 	mov	r10,r3
  80c5b8:	59000015 	stw	r4,0(r11)
  80c5bc:	1013883a 	mov	r9,r2
  80c5c0:	300f883a 	mov	r7,r6
  80c5c4:	42800936 	bltu	r8,r10,80c5ec <__unpack_d+0xe0>
  80c5c8:	480ad7fa 	srli	r5,r9,31
  80c5cc:	5289883a 	add	r4,r10,r10
  80c5d0:	4a45883a 	add	r2,r9,r9
  80c5d4:	31bfffc4 	addi	r6,r6,-1
  80c5d8:	2906b03a 	or	r3,r5,r4
  80c5dc:	300f883a 	mov	r7,r6
  80c5e0:	1013883a 	mov	r9,r2
  80c5e4:	1815883a 	mov	r10,r3
  80c5e8:	42bff72e 	bgeu	r8,r10,80c5c8 <__unpack_d+0xbc>
  80c5ec:	5a800415 	stw	r10,16(r11)
  80c5f0:	59c00215 	stw	r7,8(r11)
  80c5f4:	5a400315 	stw	r9,12(r11)
  80c5f8:	f800283a 	ret
  80c5fc:	4a84b03a 	or	r2,r9,r10
  80c600:	1000021e 	bne	r2,zero,80c60c <__unpack_d+0x100>
  80c604:	00800104 	movi	r2,4
  80c608:	003fce06 	br	80c544 <__unpack_d+0x38>
  80c60c:	5004d4fa 	srli	r2,r10,19
  80c610:	1080004c 	andi	r2,r2,1
  80c614:	10000426 	beq	r2,zero,80c628 <__unpack_d+0x11c>
  80c618:	00800044 	movi	r2,1
  80c61c:	28800015 	stw	r2,0(r5)
  80c620:	5a800415 	stw	r10,16(r11)
  80c624:	003ff306 	br	80c5f4 <__unpack_d+0xe8>
  80c628:	28000015 	stw	zero,0(r5)
  80c62c:	5a800415 	stw	r10,16(r11)
  80c630:	003ff006 	br	80c5f4 <__unpack_d+0xe8>

0080c634 <__fpcmp_parts_d>:
  80c634:	20c00017 	ldw	r3,0(r4)
  80c638:	00800044 	movi	r2,1
  80c63c:	10c0022e 	bgeu	r2,r3,80c648 <__fpcmp_parts_d+0x14>
  80c640:	29800017 	ldw	r6,0(r5)
  80c644:	11800136 	bltu	r2,r6,80c64c <__fpcmp_parts_d+0x18>
  80c648:	f800283a 	ret
  80c64c:	18800118 	cmpnei	r2,r3,4
  80c650:	10001126 	beq	r2,zero,80c698 <__fpcmp_parts_d+0x64>
  80c654:	18800118 	cmpnei	r2,r3,4
  80c658:	10001426 	beq	r2,zero,80c6ac <__fpcmp_parts_d+0x78>
  80c65c:	30800118 	cmpnei	r2,r6,4
  80c660:	10002f26 	beq	r2,zero,80c720 <__fpcmp_parts_d+0xec>
  80c664:	18800098 	cmpnei	r2,r3,2
  80c668:	10003226 	beq	r2,zero,80c734 <__fpcmp_parts_d+0x100>
  80c66c:	18800098 	cmpnei	r2,r3,2
  80c670:	10002b26 	beq	r2,zero,80c720 <__fpcmp_parts_d+0xec>
  80c674:	30800098 	cmpnei	r2,r6,2
  80c678:	10000c26 	beq	r2,zero,80c6ac <__fpcmp_parts_d+0x78>
  80c67c:	22000117 	ldw	r8,4(r4)
  80c680:	28800117 	ldw	r2,4(r5)
  80c684:	40800f26 	beq	r8,r2,80c6c4 <__fpcmp_parts_d+0x90>
  80c688:	00bfffc4 	movi	r2,-1
  80c68c:	403fee1e 	bne	r8,zero,80c648 <__fpcmp_parts_d+0x14>
  80c690:	00800044 	movi	r2,1
  80c694:	f800283a 	ret
  80c698:	30ffee1e 	bne	r6,r3,80c654 <__fpcmp_parts_d+0x20>
  80c69c:	28c00117 	ldw	r3,4(r5)
  80c6a0:	20800117 	ldw	r2,4(r4)
  80c6a4:	1885c83a 	sub	r2,r3,r2
  80c6a8:	f800283a 	ret
  80c6ac:	20800117 	ldw	r2,4(r4)
  80c6b0:	00ffffc4 	movi	r3,-1
  80c6b4:	1000011e 	bne	r2,zero,80c6bc <__fpcmp_parts_d+0x88>
  80c6b8:	00c00044 	movi	r3,1
  80c6bc:	1805883a 	mov	r2,r3
  80c6c0:	f800283a 	ret
  80c6c4:	20c00217 	ldw	r3,8(r4)
  80c6c8:	28800217 	ldw	r2,8(r5)
  80c6cc:	10ffee16 	blt	r2,r3,80c688 <__fpcmp_parts_d+0x54>
  80c6d0:	18800f16 	blt	r3,r2,80c710 <__fpcmp_parts_d+0xdc>
  80c6d4:	21c00417 	ldw	r7,16(r4)
  80c6d8:	28c00417 	ldw	r3,16(r5)
  80c6dc:	21800317 	ldw	r6,12(r4)
  80c6e0:	28800317 	ldw	r2,12(r5)
  80c6e4:	19ffe836 	bltu	r3,r7,80c688 <__fpcmp_parts_d+0x54>
  80c6e8:	38c01526 	beq	r7,r3,80c740 <__fpcmp_parts_d+0x10c>
  80c6ec:	29c00417 	ldw	r7,16(r5)
  80c6f0:	20c00417 	ldw	r3,16(r4)
  80c6f4:	29800317 	ldw	r6,12(r5)
  80c6f8:	20800317 	ldw	r2,12(r4)
  80c6fc:	19c00436 	bltu	r3,r7,80c710 <__fpcmp_parts_d+0xdc>
  80c700:	38c00226 	beq	r7,r3,80c70c <__fpcmp_parts_d+0xd8>
  80c704:	0005883a 	mov	r2,zero
  80c708:	f800283a 	ret
  80c70c:	11bffd2e 	bgeu	r2,r6,80c704 <__fpcmp_parts_d+0xd0>
  80c710:	00800044 	movi	r2,1
  80c714:	403fcc1e 	bne	r8,zero,80c648 <__fpcmp_parts_d+0x14>
  80c718:	00bfffc4 	movi	r2,-1
  80c71c:	f800283a 	ret
  80c720:	28800117 	ldw	r2,4(r5)
  80c724:	00c00044 	movi	r3,1
  80c728:	103fe41e 	bne	r2,zero,80c6bc <__fpcmp_parts_d+0x88>
  80c72c:	00ffffc4 	movi	r3,-1
  80c730:	003fe206 	br	80c6bc <__fpcmp_parts_d+0x88>
  80c734:	0005883a 	mov	r2,zero
  80c738:	30ffcc1e 	bne	r6,r3,80c66c <__fpcmp_parts_d+0x38>
  80c73c:	f800283a 	ret
  80c740:	11bfea2e 	bgeu	r2,r6,80c6ec <__fpcmp_parts_d+0xb8>
  80c744:	003fd006 	br	80c688 <__fpcmp_parts_d+0x54>

0080c748 <__ashldi3>:
  80c748:	00800804 	movi	r2,32
  80c74c:	119bc83a 	sub	r13,r2,r6
  80c750:	2013883a 	mov	r9,r4
  80c754:	2005883a 	mov	r2,r4
  80c758:	2815883a 	mov	r10,r5
  80c75c:	30000826 	beq	r6,zero,80c780 <__ashldi3+0x38>
  80c760:	0349c83a 	sub	r4,zero,r13
  80c764:	2986983a 	sll	r3,r5,r6
  80c768:	1344d83a 	srl	r2,r2,r13
  80c76c:	0340070e 	bge	zero,r13,80c78c <__ashldi3+0x44>
  80c770:	4996983a 	sll	r11,r9,r6
  80c774:	1898b03a 	or	r12,r3,r2
  80c778:	5813883a 	mov	r9,r11
  80c77c:	6015883a 	mov	r10,r12
  80c780:	5007883a 	mov	r3,r10
  80c784:	4805883a 	mov	r2,r9
  80c788:	f800283a 	ret
  80c78c:	4918983a 	sll	r12,r9,r4
  80c790:	0017883a 	mov	r11,zero
  80c794:	003ff806 	br	80c778 <__ashldi3+0x30>

0080c798 <calloc>:
  80c798:	2007883a 	mov	r3,r4
  80c79c:	d1200117 	ldw	r4,-32764(gp)
  80c7a0:	280d883a 	mov	r6,r5
  80c7a4:	02002074 	movhi	r8,129
  80c7a8:	4231ed04 	addi	r8,r8,-14412
  80c7ac:	180b883a 	mov	r5,r3
  80c7b0:	4000683a 	jmp	r8

0080c7b4 <_calloc_r>:
  80c7b4:	298b383a 	mul	r5,r5,r6
  80c7b8:	defffe04 	addi	sp,sp,-8
  80c7bc:	dc000015 	stw	r16,0(sp)
  80c7c0:	dfc00115 	stw	ra,4(sp)
  80c7c4:	080cfa40 	call	80cfa4 <_malloc_r>
  80c7c8:	1021883a 	mov	r16,r2
  80c7cc:	0005883a 	mov	r2,zero
  80c7d0:	80001e26 	beq	r16,zero,80c84c <_calloc_r+0x98>
  80c7d4:	80bfff17 	ldw	r2,-4(r16)
  80c7d8:	00ffff04 	movi	r3,-4
  80c7dc:	8009883a 	mov	r4,r16
  80c7e0:	10c4703a 	and	r2,r2,r3
  80c7e4:	10cf883a 	add	r7,r2,r3
  80c7e8:	00800904 	movi	r2,36
  80c7ec:	380d883a 	mov	r6,r7
  80c7f0:	000b883a 	mov	r5,zero
  80c7f4:	11c01936 	bltu	r2,r7,80c85c <_calloc_r+0xa8>
  80c7f8:	008004c4 	movi	r2,19
  80c7fc:	8007883a 	mov	r3,r16
  80c800:	11c00d2e 	bgeu	r2,r7,80c838 <_calloc_r+0x84>
  80c804:	008006c4 	movi	r2,27
  80c808:	80000015 	stw	zero,0(r16)
  80c80c:	80000115 	stw	zero,4(r16)
  80c810:	80c00204 	addi	r3,r16,8
  80c814:	11c0082e 	bgeu	r2,r7,80c838 <_calloc_r+0x84>
  80c818:	18000015 	stw	zero,0(r3)
  80c81c:	008008c4 	movi	r2,35
  80c820:	80c00404 	addi	r3,r16,16
  80c824:	80000315 	stw	zero,12(r16)
  80c828:	11c0032e 	bgeu	r2,r7,80c838 <_calloc_r+0x84>
  80c82c:	18000015 	stw	zero,0(r3)
  80c830:	80000515 	stw	zero,20(r16)
  80c834:	80c00604 	addi	r3,r16,24
  80c838:	18000015 	stw	zero,0(r3)
  80c83c:	18c00104 	addi	r3,r3,4
  80c840:	18000115 	stw	zero,4(r3)
  80c844:	18000015 	stw	zero,0(r3)
  80c848:	8005883a 	mov	r2,r16
  80c84c:	dfc00117 	ldw	ra,4(sp)
  80c850:	dc000017 	ldw	r16,0(sp)
  80c854:	dec00204 	addi	sp,sp,8
  80c858:	f800283a 	ret
  80c85c:	080d7180 	call	80d718 <memset>
  80c860:	003ff906 	br	80c848 <_calloc_r+0x94>

0080c864 <__errno>:
  80c864:	d0a00117 	ldw	r2,-32764(gp)
  80c868:	f800283a 	ret

0080c86c <_fopen_r>:
  80c86c:	defffa04 	addi	sp,sp,-24
  80c870:	dcc00115 	stw	r19,4(sp)
  80c874:	2827883a 	mov	r19,r5
  80c878:	300b883a 	mov	r5,r6
  80c87c:	d80d883a 	mov	r6,sp
  80c880:	dc400315 	stw	r17,12(sp)
  80c884:	dc800215 	stw	r18,8(sp)
  80c888:	2023883a 	mov	r17,r4
  80c88c:	dfc00515 	stw	ra,20(sp)
  80c890:	dc000415 	stw	r16,16(sp)
  80c894:	0811ba80 	call	811ba8 <__sflags>
  80c898:	1025883a 	mov	r18,r2
  80c89c:	8809883a 	mov	r4,r17
  80c8a0:	0007883a 	mov	r3,zero
  80c8a4:	10002126 	beq	r2,zero,80c92c <_fopen_r+0xc0>
  80c8a8:	0811ac80 	call	811ac8 <__sfp>
  80c8ac:	1021883a 	mov	r16,r2
  80c8b0:	980b883a 	mov	r5,r19
  80c8b4:	8809883a 	mov	r4,r17
  80c8b8:	01c06d84 	movi	r7,438
  80c8bc:	0007883a 	mov	r3,zero
  80c8c0:	10001a26 	beq	r2,zero,80c92c <_fopen_r+0xc0>
  80c8c4:	d9800017 	ldw	r6,0(sp)
  80c8c8:	080d7b40 	call	80d7b4 <_open_r>
  80c8cc:	9200400c 	andi	r8,r18,256
  80c8d0:	0007883a 	mov	r3,zero
  80c8d4:	10001f16 	blt	r2,zero,80c954 <_fopen_r+0xe8>
  80c8d8:	00c02074 	movhi	r3,129
  80c8dc:	18f6f004 	addi	r3,r3,-9280
  80c8e0:	8080038d 	sth	r2,14(r16)
  80c8e4:	00802074 	movhi	r2,129
  80c8e8:	10b6d404 	addi	r2,r2,-9392
  80c8ec:	80800815 	stw	r2,32(r16)
  80c8f0:	80c00915 	stw	r3,36(r16)
  80c8f4:	00802074 	movhi	r2,129
  80c8f8:	10b71004 	addi	r2,r2,-9152
  80c8fc:	00c02074 	movhi	r3,129
  80c900:	18f72e04 	addi	r3,r3,-9032
  80c904:	8809883a 	mov	r4,r17
  80c908:	800b883a 	mov	r5,r16
  80c90c:	000d883a 	mov	r6,zero
  80c910:	01c00084 	movi	r7,2
  80c914:	80800a15 	stw	r2,40(r16)
  80c918:	80c00b15 	stw	r3,44(r16)
  80c91c:	8480030d 	sth	r18,12(r16)
  80c920:	84000715 	stw	r16,28(r16)
  80c924:	4000091e 	bne	r8,zero,80c94c <_fopen_r+0xe0>
  80c928:	8007883a 	mov	r3,r16
  80c92c:	1805883a 	mov	r2,r3
  80c930:	dfc00517 	ldw	ra,20(sp)
  80c934:	dc000417 	ldw	r16,16(sp)
  80c938:	dc400317 	ldw	r17,12(sp)
  80c93c:	dc800217 	ldw	r18,8(sp)
  80c940:	dcc00117 	ldw	r19,4(sp)
  80c944:	dec00604 	addi	sp,sp,24
  80c948:	f800283a 	ret
  80c94c:	080c99c0 	call	80c99c <_fseek_r>
  80c950:	003ff506 	br	80c928 <_fopen_r+0xbc>
  80c954:	8000030d 	sth	zero,12(r16)
  80c958:	003ff406 	br	80c92c <_fopen_r+0xc0>

0080c95c <fopen>:
  80c95c:	2007883a 	mov	r3,r4
  80c960:	d1200117 	ldw	r4,-32764(gp)
  80c964:	280d883a 	mov	r6,r5
  80c968:	02002074 	movhi	r8,129
  80c96c:	42321b04 	addi	r8,r8,-14228
  80c970:	180b883a 	mov	r5,r3
  80c974:	4000683a 	jmp	r8

0080c978 <fprintf>:
  80c978:	defffd04 	addi	sp,sp,-12
  80c97c:	dfc00015 	stw	ra,0(sp)
  80c980:	d9800115 	stw	r6,4(sp)
  80c984:	d9c00215 	stw	r7,8(sp)
  80c988:	d9800104 	addi	r6,sp,4
  80c98c:	080f9e40 	call	80f9e4 <__vfprintf_internal>
  80c990:	dfc00017 	ldw	ra,0(sp)
  80c994:	dec00304 	addi	sp,sp,12
  80c998:	f800283a 	ret

0080c99c <_fseek_r>:
  80c99c:	d0e00117 	ldw	r3,-32764(gp)
  80c9a0:	deffe804 	addi	sp,sp,-96
  80c9a4:	dc001615 	stw	r16,88(sp)
  80c9a8:	dc401515 	stw	r17,84(sp)
  80c9ac:	dc801415 	stw	r18,80(sp)
  80c9b0:	dd801015 	stw	r22,64(sp)
  80c9b4:	dfc01715 	stw	ra,92(sp)
  80c9b8:	dcc01315 	stw	r19,76(sp)
  80c9bc:	dd001215 	stw	r20,72(sp)
  80c9c0:	dd401115 	stw	r21,68(sp)
  80c9c4:	ddc00f15 	stw	r23,60(sp)
  80c9c8:	18800e17 	ldw	r2,56(r3)
  80c9cc:	2023883a 	mov	r17,r4
  80c9d0:	2821883a 	mov	r16,r5
  80c9d4:	302d883a 	mov	r22,r6
  80c9d8:	3825883a 	mov	r18,r7
  80c9dc:	10004226 	beq	r2,zero,80cae8 <_fseek_r+0x14c>
  80c9e0:	80c0030b 	ldhu	r3,12(r16)
  80c9e4:	1880400c 	andi	r2,r3,256
  80c9e8:	10000226 	beq	r2,zero,80c9f4 <_fseek_r+0x58>
  80c9ec:	1880020c 	andi	r2,r3,8
  80c9f0:	1000781e 	bne	r2,zero,80cbd4 <_fseek_r+0x238>
  80c9f4:	85000a17 	ldw	r20,40(r16)
  80c9f8:	a000ea26 	beq	r20,zero,80cda4 <_fseek_r+0x408>
  80c9fc:	00800044 	movi	r2,1
  80ca00:	90807f26 	beq	r18,r2,80cc00 <_fseek_r+0x264>
  80ca04:	14802716 	blt	r2,r18,80caa4 <_fseek_r+0x108>
  80ca08:	9000281e 	bne	r18,zero,80caac <_fseek_r+0x110>
  80ca0c:	81800417 	ldw	r6,16(r16)
  80ca10:	002f883a 	mov	r23,zero
  80ca14:	30008c26 	beq	r6,zero,80cc48 <_fseek_r+0x2ac>
  80ca18:	8100030b 	ldhu	r4,12(r16)
  80ca1c:	20ffffcc 	andi	r3,r4,65535
  80ca20:	1882068c 	andi	r2,r3,2074
  80ca24:	1000071e 	bne	r2,zero,80ca44 <_fseek_r+0xa8>
  80ca28:	1881000c 	andi	r2,r3,1024
  80ca2c:	1000401e 	bne	r2,zero,80cb30 <_fseek_r+0x194>
  80ca30:	00802074 	movhi	r2,129
  80ca34:	10b71004 	addi	r2,r2,-9152
  80ca38:	a0802e26 	beq	r20,r2,80caf4 <_fseek_r+0x158>
  80ca3c:	20820014 	ori	r2,r4,2048
  80ca40:	8080030d 	sth	r2,12(r16)
  80ca44:	8009883a 	mov	r4,r16
  80ca48:	081185c0 	call	81185c <fflush>
  80ca4c:	1000ba1e 	bne	r2,zero,80cd38 <_fseek_r+0x39c>
  80ca50:	81000717 	ldw	r4,28(r16)
  80ca54:	b00b883a 	mov	r5,r22
  80ca58:	900d883a 	mov	r6,r18
  80ca5c:	a03ee83a 	callr	r20
  80ca60:	00ffffc4 	movi	r3,-1
  80ca64:	10c0b426 	beq	r2,r3,80cd38 <_fseek_r+0x39c>
  80ca68:	81400c17 	ldw	r5,48(r16)
  80ca6c:	28000526 	beq	r5,zero,80ca84 <_fseek_r+0xe8>
  80ca70:	80801004 	addi	r2,r16,64
  80ca74:	28800226 	beq	r5,r2,80ca80 <_fseek_r+0xe4>
  80ca78:	d1200117 	ldw	r4,-32764(gp)
  80ca7c:	0811d740 	call	811d74 <_free_r>
  80ca80:	80000c15 	stw	zero,48(r16)
  80ca84:	8080030b 	ldhu	r2,12(r16)
  80ca88:	80c00417 	ldw	r3,16(r16)
  80ca8c:	80000115 	stw	zero,4(r16)
  80ca90:	10bff7cc 	andi	r2,r2,65503
  80ca94:	8080030d 	sth	r2,12(r16)
  80ca98:	80c00015 	stw	r3,0(r16)
  80ca9c:	0007883a 	mov	r3,zero
  80caa0:	00000506 	br	80cab8 <_fseek_r+0x11c>
  80caa4:	00800084 	movi	r2,2
  80caa8:	90bfd826 	beq	r18,r2,80ca0c <_fseek_r+0x70>
  80caac:	00ffffc4 	movi	r3,-1
  80cab0:	00800584 	movi	r2,22
  80cab4:	88800015 	stw	r2,0(r17)
  80cab8:	1805883a 	mov	r2,r3
  80cabc:	dfc01717 	ldw	ra,92(sp)
  80cac0:	dc001617 	ldw	r16,88(sp)
  80cac4:	dc401517 	ldw	r17,84(sp)
  80cac8:	dc801417 	ldw	r18,80(sp)
  80cacc:	dcc01317 	ldw	r19,76(sp)
  80cad0:	dd001217 	ldw	r20,72(sp)
  80cad4:	dd401117 	ldw	r21,68(sp)
  80cad8:	dd801017 	ldw	r22,64(sp)
  80cadc:	ddc00f17 	ldw	r23,60(sp)
  80cae0:	dec01804 	addi	sp,sp,96
  80cae4:	f800283a 	ret
  80cae8:	1809883a 	mov	r4,r3
  80caec:	08119c00 	call	8119c0 <__sinit>
  80caf0:	003fbb06 	br	80c9e0 <_fseek_r+0x44>
  80caf4:	8140038f 	ldh	r5,14(r16)
  80caf8:	283fd016 	blt	r5,zero,80ca3c <_fseek_r+0xa0>
  80cafc:	8809883a 	mov	r4,r17
  80cb00:	d80d883a 	mov	r6,sp
  80cb04:	080cdd40 	call	80cdd4 <_fstat_r>
  80cb08:	1000651e 	bne	r2,zero,80cca0 <_fseek_r+0x304>
  80cb0c:	d8800117 	ldw	r2,4(sp)
  80cb10:	00e00014 	movui	r3,32768
  80cb14:	10bc000c 	andi	r2,r2,61440
  80cb18:	10c0611e 	bne	r2,r3,80cca0 <_fseek_r+0x304>
  80cb1c:	80c0030b 	ldhu	r3,12(r16)
  80cb20:	00810004 	movi	r2,1024
  80cb24:	80801315 	stw	r2,76(r16)
  80cb28:	1886b03a 	or	r3,r3,r2
  80cb2c:	80c0030d 	sth	r3,12(r16)
  80cb30:	b02b883a 	mov	r21,r22
  80cb34:	90002a1e 	bne	r18,zero,80cbe0 <_fseek_r+0x244>
  80cb38:	b804c03a 	cmpne	r2,r23,zero
  80cb3c:	1000451e 	bne	r2,zero,80cc54 <_fseek_r+0x2b8>
  80cb40:	8100030b 	ldhu	r4,12(r16)
  80cb44:	2084000c 	andi	r2,r4,4096
  80cb48:	10008d26 	beq	r2,zero,80cd80 <_fseek_r+0x3e4>
  80cb4c:	84c01417 	ldw	r19,80(r16)
  80cb50:	81c00117 	ldw	r7,4(r16)
  80cb54:	81400c17 	ldw	r5,48(r16)
  80cb58:	99e7c83a 	sub	r19,r19,r7
  80cb5c:	2800491e 	bne	r5,zero,80cc84 <_fseek_r+0x2e8>
  80cb60:	28007726 	beq	r5,zero,80cd40 <_fseek_r+0x3a4>
  80cb64:	80800e17 	ldw	r2,56(r16)
  80cb68:	81800417 	ldw	r6,16(r16)
  80cb6c:	80c00f17 	ldw	r3,60(r16)
  80cb70:	99e7883a 	add	r19,r19,r7
  80cb74:	11a3c83a 	sub	r17,r2,r6
  80cb78:	9c67c83a 	sub	r19,r19,r17
  80cb7c:	88e3883a 	add	r17,r17,r3
  80cb80:	2088000c 	andi	r2,r4,8192
  80cb84:	1000481e 	bne	r2,zero,80cca8 <_fseek_r+0x30c>
  80cb88:	acc04716 	blt	r21,r19,80cca8 <_fseek_r+0x30c>
  80cb8c:	9c45883a 	add	r2,r19,r17
  80cb90:	a880452e 	bgeu	r21,r2,80cca8 <_fseek_r+0x30c>
  80cb94:	acc5c83a 	sub	r2,r21,r19
  80cb98:	8887c83a 	sub	r3,r17,r2
  80cb9c:	3085883a 	add	r2,r6,r2
  80cba0:	80800015 	stw	r2,0(r16)
  80cba4:	80c00115 	stw	r3,4(r16)
  80cba8:	28000626 	beq	r5,zero,80cbc4 <_fseek_r+0x228>
  80cbac:	80801004 	addi	r2,r16,64
  80cbb0:	28800326 	beq	r5,r2,80cbc0 <_fseek_r+0x224>
  80cbb4:	d1200117 	ldw	r4,-32764(gp)
  80cbb8:	0811d740 	call	811d74 <_free_r>
  80cbbc:	8100030b 	ldhu	r4,12(r16)
  80cbc0:	80000c15 	stw	zero,48(r16)
  80cbc4:	20bff7cc 	andi	r2,r4,65503
  80cbc8:	0007883a 	mov	r3,zero
  80cbcc:	8080030d 	sth	r2,12(r16)
  80cbd0:	003fb906 	br	80cab8 <_fseek_r+0x11c>
  80cbd4:	8009883a 	mov	r4,r16
  80cbd8:	081185c0 	call	81185c <fflush>
  80cbdc:	003f8506 	br	80c9f4 <_fseek_r+0x58>
  80cbe0:	8140038f 	ldh	r5,14(r16)
  80cbe4:	8809883a 	mov	r4,r17
  80cbe8:	d80d883a 	mov	r6,sp
  80cbec:	080cdd40 	call	80cdd4 <_fstat_r>
  80cbf0:	103f941e 	bne	r2,zero,80ca44 <_fseek_r+0xa8>
  80cbf4:	d8800417 	ldw	r2,16(sp)
  80cbf8:	15ab883a 	add	r21,r2,r22
  80cbfc:	003fce06 	br	80cb38 <_fseek_r+0x19c>
  80cc00:	8009883a 	mov	r4,r16
  80cc04:	081185c0 	call	81185c <fflush>
  80cc08:	8100030b 	ldhu	r4,12(r16)
  80cc0c:	2084000c 	andi	r2,r4,4096
  80cc10:	10005126 	beq	r2,zero,80cd58 <_fseek_r+0x3bc>
  80cc14:	84c01417 	ldw	r19,80(r16)
  80cc18:	20ffffcc 	andi	r3,r4,65535
  80cc1c:	1880010c 	andi	r2,r3,4
  80cc20:	10001026 	beq	r2,zero,80cc64 <_fseek_r+0x2c8>
  80cc24:	81c00117 	ldw	r7,4(r16)
  80cc28:	81400c17 	ldw	r5,48(r16)
  80cc2c:	99e7c83a 	sub	r19,r19,r7
  80cc30:	2800171e 	bne	r5,zero,80cc90 <_fseek_r+0x2f4>
  80cc34:	81800417 	ldw	r6,16(r16)
  80cc38:	b4ed883a 	add	r22,r22,r19
  80cc3c:	0025883a 	mov	r18,zero
  80cc40:	05c00044 	movi	r23,1
  80cc44:	303f741e 	bne	r6,zero,80ca18 <_fseek_r+0x7c>
  80cc48:	8009883a 	mov	r4,r16
  80cc4c:	080ce340 	call	80ce34 <__smakebuf>
  80cc50:	003f7106 	br	80ca18 <_fseek_r+0x7c>
  80cc54:	8100030b 	ldhu	r4,12(r16)
  80cc58:	81c00117 	ldw	r7,4(r16)
  80cc5c:	81400c17 	ldw	r5,48(r16)
  80cc60:	003fbf06 	br	80cb60 <_fseek_r+0x1c4>
  80cc64:	1880020c 	andi	r2,r3,8
  80cc68:	103ff226 	beq	r2,zero,80cc34 <_fseek_r+0x298>
  80cc6c:	80800017 	ldw	r2,0(r16)
  80cc70:	103ff026 	beq	r2,zero,80cc34 <_fseek_r+0x298>
  80cc74:	81800417 	ldw	r6,16(r16)
  80cc78:	1185c83a 	sub	r2,r2,r6
  80cc7c:	98a7883a 	add	r19,r19,r2
  80cc80:	003fed06 	br	80cc38 <_fseek_r+0x29c>
  80cc84:	80800f17 	ldw	r2,60(r16)
  80cc88:	98a7c83a 	sub	r19,r19,r2
  80cc8c:	003fb406 	br	80cb60 <_fseek_r+0x1c4>
  80cc90:	80800f17 	ldw	r2,60(r16)
  80cc94:	81800417 	ldw	r6,16(r16)
  80cc98:	98a7c83a 	sub	r19,r19,r2
  80cc9c:	003fe606 	br	80cc38 <_fseek_r+0x29c>
  80cca0:	8100030b 	ldhu	r4,12(r16)
  80cca4:	003f6506 	br	80ca3c <_fseek_r+0xa0>
  80cca8:	80801317 	ldw	r2,76(r16)
  80ccac:	81000717 	ldw	r4,28(r16)
  80ccb0:	000d883a 	mov	r6,zero
  80ccb4:	0085c83a 	sub	r2,zero,r2
  80ccb8:	1566703a 	and	r19,r2,r21
  80ccbc:	980b883a 	mov	r5,r19
  80ccc0:	a03ee83a 	callr	r20
  80ccc4:	00ffffc4 	movi	r3,-1
  80ccc8:	10ff5e26 	beq	r2,r3,80ca44 <_fseek_r+0xa8>
  80cccc:	80800417 	ldw	r2,16(r16)
  80ccd0:	81400c17 	ldw	r5,48(r16)
  80ccd4:	80000115 	stw	zero,4(r16)
  80ccd8:	80800015 	stw	r2,0(r16)
  80ccdc:	28000526 	beq	r5,zero,80ccf4 <_fseek_r+0x358>
  80cce0:	80801004 	addi	r2,r16,64
  80cce4:	28800226 	beq	r5,r2,80ccf0 <_fseek_r+0x354>
  80cce8:	d1200117 	ldw	r4,-32764(gp)
  80ccec:	0811d740 	call	811d74 <_free_r>
  80ccf0:	80000c15 	stw	zero,48(r16)
  80ccf4:	8080030b 	ldhu	r2,12(r16)
  80ccf8:	ace3c83a 	sub	r17,r21,r19
  80ccfc:	10bff7cc 	andi	r2,r2,65503
  80cd00:	8080030d 	sth	r2,12(r16)
  80cd04:	883f6526 	beq	r17,zero,80ca9c <_fseek_r+0x100>
  80cd08:	8009883a 	mov	r4,r16
  80cd0c:	080d8c00 	call	80d8c0 <__srefill>
  80cd10:	103f4c1e 	bne	r2,zero,80ca44 <_fseek_r+0xa8>
  80cd14:	80c00117 	ldw	r3,4(r16)
  80cd18:	1c7f4a36 	bltu	r3,r17,80ca44 <_fseek_r+0xa8>
  80cd1c:	80800017 	ldw	r2,0(r16)
  80cd20:	1c47c83a 	sub	r3,r3,r17
  80cd24:	80c00115 	stw	r3,4(r16)
  80cd28:	1445883a 	add	r2,r2,r17
  80cd2c:	0007883a 	mov	r3,zero
  80cd30:	80800015 	stw	r2,0(r16)
  80cd34:	003f6006 	br	80cab8 <_fseek_r+0x11c>
  80cd38:	00ffffc4 	movi	r3,-1
  80cd3c:	003f5e06 	br	80cab8 <_fseek_r+0x11c>
  80cd40:	80800017 	ldw	r2,0(r16)
  80cd44:	81800417 	ldw	r6,16(r16)
  80cd48:	11a3c83a 	sub	r17,r2,r6
  80cd4c:	9c67c83a 	sub	r19,r19,r17
  80cd50:	89e3883a 	add	r17,r17,r7
  80cd54:	003f8a06 	br	80cb80 <_fseek_r+0x1e4>
  80cd58:	81000717 	ldw	r4,28(r16)
  80cd5c:	900d883a 	mov	r6,r18
  80cd60:	000b883a 	mov	r5,zero
  80cd64:	a03ee83a 	callr	r20
  80cd68:	1027883a 	mov	r19,r2
  80cd6c:	1007883a 	mov	r3,r2
  80cd70:	00bfffc4 	movi	r2,-1
  80cd74:	98bf5026 	beq	r19,r2,80cab8 <_fseek_r+0x11c>
  80cd78:	8100030b 	ldhu	r4,12(r16)
  80cd7c:	003fa606 	br	80cc18 <_fseek_r+0x27c>
  80cd80:	81000717 	ldw	r4,28(r16)
  80cd84:	000b883a 	mov	r5,zero
  80cd88:	01800044 	movi	r6,1
  80cd8c:	a03ee83a 	callr	r20
  80cd90:	1027883a 	mov	r19,r2
  80cd94:	00bfffc4 	movi	r2,-1
  80cd98:	98bf2a26 	beq	r19,r2,80ca44 <_fseek_r+0xa8>
  80cd9c:	8100030b 	ldhu	r4,12(r16)
  80cda0:	003f6b06 	br	80cb50 <_fseek_r+0x1b4>
  80cda4:	00ffffc4 	movi	r3,-1
  80cda8:	00800744 	movi	r2,29
  80cdac:	003f4106 	br	80cab4 <_fseek_r+0x118>

0080cdb0 <fseek>:
  80cdb0:	2013883a 	mov	r9,r4
  80cdb4:	d1200117 	ldw	r4,-32764(gp)
  80cdb8:	2807883a 	mov	r3,r5
  80cdbc:	300f883a 	mov	r7,r6
  80cdc0:	480b883a 	mov	r5,r9
  80cdc4:	180d883a 	mov	r6,r3
  80cdc8:	02002074 	movhi	r8,129
  80cdcc:	42326704 	addi	r8,r8,-13924
  80cdd0:	4000683a 	jmp	r8

0080cdd4 <_fstat_r>:
  80cdd4:	defffe04 	addi	sp,sp,-8
  80cdd8:	dc000015 	stw	r16,0(sp)
  80cddc:	2021883a 	mov	r16,r4
  80cde0:	2809883a 	mov	r4,r5
  80cde4:	300b883a 	mov	r5,r6
  80cde8:	dfc00115 	stw	ra,4(sp)
  80cdec:	d0202815 	stw	zero,-32608(gp)
  80cdf0:	08148dc0 	call	8148dc <fstat>
  80cdf4:	1007883a 	mov	r3,r2
  80cdf8:	00bfffc4 	movi	r2,-1
  80cdfc:	18800526 	beq	r3,r2,80ce14 <_fstat_r+0x40>
  80ce00:	1805883a 	mov	r2,r3
  80ce04:	dfc00117 	ldw	ra,4(sp)
  80ce08:	dc000017 	ldw	r16,0(sp)
  80ce0c:	dec00204 	addi	sp,sp,8
  80ce10:	f800283a 	ret
  80ce14:	d0a02817 	ldw	r2,-32608(gp)
  80ce18:	103ff926 	beq	r2,zero,80ce00 <_fstat_r+0x2c>
  80ce1c:	80800015 	stw	r2,0(r16)
  80ce20:	1805883a 	mov	r2,r3
  80ce24:	dfc00117 	ldw	ra,4(sp)
  80ce28:	dc000017 	ldw	r16,0(sp)
  80ce2c:	dec00204 	addi	sp,sp,8
  80ce30:	f800283a 	ret

0080ce34 <__smakebuf>:
  80ce34:	deffee04 	addi	sp,sp,-72
  80ce38:	dc001015 	stw	r16,64(sp)
  80ce3c:	dfc01115 	stw	ra,68(sp)
  80ce40:	dc400f15 	stw	r17,60(sp)
  80ce44:	20c0030b 	ldhu	r3,12(r4)
  80ce48:	2021883a 	mov	r16,r4
  80ce4c:	1880008c 	andi	r2,r3,2
  80ce50:	10000a26 	beq	r2,zero,80ce7c <__smakebuf+0x48>
  80ce54:	20c010c4 	addi	r3,r4,67
  80ce58:	00800044 	movi	r2,1
  80ce5c:	20800515 	stw	r2,20(r4)
  80ce60:	20c00415 	stw	r3,16(r4)
  80ce64:	20c00015 	stw	r3,0(r4)
  80ce68:	dfc01117 	ldw	ra,68(sp)
  80ce6c:	dc001017 	ldw	r16,64(sp)
  80ce70:	dc400f17 	ldw	r17,60(sp)
  80ce74:	dec01204 	addi	sp,sp,72
  80ce78:	f800283a 	ret
  80ce7c:	2140038f 	ldh	r5,14(r4)
  80ce80:	28001f16 	blt	r5,zero,80cf00 <__smakebuf+0xcc>
  80ce84:	d1200117 	ldw	r4,-32764(gp)
  80ce88:	d80d883a 	mov	r6,sp
  80ce8c:	080cdd40 	call	80cdd4 <_fstat_r>
  80ce90:	10001a16 	blt	r2,zero,80cefc <__smakebuf+0xc8>
  80ce94:	d8800117 	ldw	r2,4(sp)
  80ce98:	00e00014 	movui	r3,32768
  80ce9c:	04410004 	movi	r17,1024
  80cea0:	10bc000c 	andi	r2,r2,61440
  80cea4:	11080020 	cmpeqi	r4,r2,8192
  80cea8:	10c02c26 	beq	r2,r3,80cf5c <__smakebuf+0x128>
  80ceac:	8080030b 	ldhu	r2,12(r16)
  80ceb0:	10820014 	ori	r2,r2,2048
  80ceb4:	8080030d 	sth	r2,12(r16)
  80ceb8:	20001426 	beq	r4,zero,80cf0c <__smakebuf+0xd8>
  80cebc:	8100038f 	ldh	r4,14(r16)
  80cec0:	0814b9c0 	call	814b9c <isatty>
  80cec4:	10001126 	beq	r2,zero,80cf0c <__smakebuf+0xd8>
  80cec8:	8080030b 	ldhu	r2,12(r16)
  80cecc:	810010c4 	addi	r4,r16,67
  80ced0:	00c00044 	movi	r3,1
  80ced4:	10800094 	ori	r2,r2,2
  80ced8:	80c00515 	stw	r3,20(r16)
  80cedc:	8080030d 	sth	r2,12(r16)
  80cee0:	81000415 	stw	r4,16(r16)
  80cee4:	81000015 	stw	r4,0(r16)
  80cee8:	dfc01117 	ldw	ra,68(sp)
  80ceec:	dc001017 	ldw	r16,64(sp)
  80cef0:	dc400f17 	ldw	r17,60(sp)
  80cef4:	dec01204 	addi	sp,sp,72
  80cef8:	f800283a 	ret
  80cefc:	80c0030b 	ldhu	r3,12(r16)
  80cf00:	18820014 	ori	r2,r3,2048
  80cf04:	04410004 	movi	r17,1024
  80cf08:	8080030d 	sth	r2,12(r16)
  80cf0c:	d1200117 	ldw	r4,-32764(gp)
  80cf10:	01410004 	movi	r5,1024
  80cf14:	080cfa40 	call	80cfa4 <_malloc_r>
  80cf18:	100b883a 	mov	r5,r2
  80cf1c:	103fea26 	beq	r2,zero,80cec8 <__smakebuf+0x94>
  80cf20:	8080030b 	ldhu	r2,12(r16)
  80cf24:	d0e00117 	ldw	r3,-32764(gp)
  80cf28:	01002074 	movhi	r4,129
  80cf2c:	21066704 	addi	r4,r4,6556
  80cf30:	10802014 	ori	r2,r2,128
  80cf34:	19000f15 	stw	r4,60(r3)
  80cf38:	84400515 	stw	r17,20(r16)
  80cf3c:	8080030d 	sth	r2,12(r16)
  80cf40:	81400415 	stw	r5,16(r16)
  80cf44:	81400015 	stw	r5,0(r16)
  80cf48:	dfc01117 	ldw	ra,68(sp)
  80cf4c:	dc001017 	ldw	r16,64(sp)
  80cf50:	dc400f17 	ldw	r17,60(sp)
  80cf54:	dec01204 	addi	sp,sp,72
  80cf58:	f800283a 	ret
  80cf5c:	80c00a17 	ldw	r3,40(r16)
  80cf60:	00802074 	movhi	r2,129
  80cf64:	10b71004 	addi	r2,r2,-9152
  80cf68:	18bfd01e 	bne	r3,r2,80ceac <__smakebuf+0x78>
  80cf6c:	8080030b 	ldhu	r2,12(r16)
  80cf70:	84401315 	stw	r17,76(r16)
  80cf74:	1444b03a 	or	r2,r2,r17
  80cf78:	003fce06 	br	80ceb4 <__smakebuf+0x80>

0080cf7c <malloc>:
  80cf7c:	200b883a 	mov	r5,r4
  80cf80:	d1200117 	ldw	r4,-32764(gp)
  80cf84:	02002074 	movhi	r8,129
  80cf88:	4233e904 	addi	r8,r8,-12380
  80cf8c:	4000683a 	jmp	r8

0080cf90 <free>:
  80cf90:	200b883a 	mov	r5,r4
  80cf94:	d1200117 	ldw	r4,-32764(gp)
  80cf98:	02002074 	movhi	r8,129
  80cf9c:	42075d04 	addi	r8,r8,7540
  80cfa0:	4000683a 	jmp	r8

0080cfa4 <_malloc_r>:
  80cfa4:	defff504 	addi	sp,sp,-44
  80cfa8:	28c002c4 	addi	r3,r5,11
  80cfac:	00800584 	movi	r2,22
  80cfb0:	dc400715 	stw	r17,28(sp)
  80cfb4:	dc800615 	stw	r18,24(sp)
  80cfb8:	dfc00a15 	stw	ra,40(sp)
  80cfbc:	df000915 	stw	fp,36(sp)
  80cfc0:	dc000815 	stw	r16,32(sp)
  80cfc4:	dcc00515 	stw	r19,20(sp)
  80cfc8:	dd000415 	stw	r20,16(sp)
  80cfcc:	dd400315 	stw	r21,12(sp)
  80cfd0:	dd800215 	stw	r22,8(sp)
  80cfd4:	ddc00115 	stw	r23,4(sp)
  80cfd8:	2025883a 	mov	r18,r4
  80cfdc:	04400404 	movi	r17,16
  80cfe0:	10c0032e 	bgeu	r2,r3,80cff0 <_malloc_r+0x4c>
  80cfe4:	00bffe04 	movi	r2,-8
  80cfe8:	18a2703a 	and	r17,r3,r2
  80cfec:	88000116 	blt	r17,zero,80cff4 <_malloc_r+0x50>
  80cff0:	89400d2e 	bgeu	r17,r5,80d028 <_malloc_r+0x84>
  80cff4:	0005883a 	mov	r2,zero
  80cff8:	dfc00a17 	ldw	ra,40(sp)
  80cffc:	df000917 	ldw	fp,36(sp)
  80d000:	dc000817 	ldw	r16,32(sp)
  80d004:	dc400717 	ldw	r17,28(sp)
  80d008:	dc800617 	ldw	r18,24(sp)
  80d00c:	dcc00517 	ldw	r19,20(sp)
  80d010:	dd000417 	ldw	r20,16(sp)
  80d014:	dd400317 	ldw	r21,12(sp)
  80d018:	dd800217 	ldw	r22,8(sp)
  80d01c:	ddc00117 	ldw	r23,4(sp)
  80d020:	dec00b04 	addi	sp,sp,44
  80d024:	f800283a 	ret
  80d028:	9009883a 	mov	r4,r18
  80d02c:	0814e4c0 	call	814e4c <__malloc_lock>
  80d030:	00807dc4 	movi	r2,503
  80d034:	14401536 	bltu	r2,r17,80d08c <_malloc_r+0xe8>
  80d038:	034020b4 	movhi	r13,130
  80d03c:	6b699804 	addi	r13,r13,-22944
  80d040:	8b4d883a 	add	r6,r17,r13
  80d044:	34000317 	ldw	r16,12(r6)
  80d048:	8812d0fa 	srli	r9,r17,3
  80d04c:	81803e26 	beq	r16,r6,80d148 <_malloc_r+0x1a4>
  80d050:	80c00117 	ldw	r3,4(r16)
  80d054:	00bfff04 	movi	r2,-4
  80d058:	82000317 	ldw	r8,12(r16)
  80d05c:	1886703a 	and	r3,r3,r2
  80d060:	80cb883a 	add	r5,r16,r3
  80d064:	28800117 	ldw	r2,4(r5)
  80d068:	81c00217 	ldw	r7,8(r16)
  80d06c:	9009883a 	mov	r4,r18
  80d070:	10800054 	ori	r2,r2,1
  80d074:	41c00215 	stw	r7,8(r8)
  80d078:	28800115 	stw	r2,4(r5)
  80d07c:	3a000315 	stw	r8,12(r7)
  80d080:	0814e680 	call	814e68 <__malloc_unlock>
  80d084:	80800204 	addi	r2,r16,8
  80d088:	003fdb06 	br	80cff8 <_malloc_r+0x54>
  80d08c:	8806d27a 	srli	r3,r17,9
  80d090:	8812d0fa 	srli	r9,r17,3
  80d094:	18000926 	beq	r3,zero,80d0bc <_malloc_r+0x118>
  80d098:	00800104 	movi	r2,4
  80d09c:	10c02f2e 	bgeu	r2,r3,80d15c <_malloc_r+0x1b8>
  80d0a0:	00800504 	movi	r2,20
  80d0a4:	1a4016c4 	addi	r9,r3,91
  80d0a8:	10c0042e 	bgeu	r2,r3,80d0bc <_malloc_r+0x118>
  80d0ac:	00801504 	movi	r2,84
  80d0b0:	10c11536 	bltu	r2,r3,80d508 <_malloc_r+0x564>
  80d0b4:	8804d33a 	srli	r2,r17,12
  80d0b8:	12401b84 	addi	r9,r2,110
  80d0bc:	480490fa 	slli	r2,r9,3
  80d0c0:	034020b4 	movhi	r13,130
  80d0c4:	6b699804 	addi	r13,r13,-22944
  80d0c8:	134b883a 	add	r5,r2,r13
  80d0cc:	2c000317 	ldw	r16,12(r5)
  80d0d0:	81400926 	beq	r16,r5,80d0f8 <_malloc_r+0x154>
  80d0d4:	01ffff04 	movi	r7,-4
  80d0d8:	018003c4 	movi	r6,15
  80d0dc:	80800117 	ldw	r2,4(r16)
  80d0e0:	11c6703a 	and	r3,r2,r7
  80d0e4:	1c49c83a 	sub	r4,r3,r17
  80d0e8:	3100aa16 	blt	r6,r4,80d394 <_malloc_r+0x3f0>
  80d0ec:	2000690e 	bge	r4,zero,80d294 <_malloc_r+0x2f0>
  80d0f0:	84000317 	ldw	r16,12(r16)
  80d0f4:	817ff91e 	bne	r16,r5,80d0dc <_malloc_r+0x138>
  80d0f8:	4a400044 	addi	r9,r9,1
  80d0fc:	030020b4 	movhi	r12,130
  80d100:	63299a04 	addi	r12,r12,-22936
  80d104:	64000217 	ldw	r16,8(r12)
  80d108:	83002826 	beq	r16,r12,80d1ac <_malloc_r+0x208>
  80d10c:	80800117 	ldw	r2,4(r16)
  80d110:	00ffff04 	movi	r3,-4
  80d114:	10c6703a 	and	r3,r2,r3
  80d118:	1c49c83a 	sub	r4,r3,r17
  80d11c:	008003c4 	movi	r2,15
  80d120:	11006616 	blt	r2,r4,80d2bc <_malloc_r+0x318>
  80d124:	63000315 	stw	r12,12(r12)
  80d128:	63000215 	stw	r12,8(r12)
  80d12c:	20000e16 	blt	r4,zero,80d168 <_malloc_r+0x1c4>
  80d130:	80c7883a 	add	r3,r16,r3
  80d134:	18800117 	ldw	r2,4(r3)
  80d138:	9009883a 	mov	r4,r18
  80d13c:	10800054 	ori	r2,r2,1
  80d140:	18800115 	stw	r2,4(r3)
  80d144:	003fce06 	br	80d080 <_malloc_r+0xdc>
  80d148:	81800204 	addi	r6,r16,8
  80d14c:	34000317 	ldw	r16,12(r6)
  80d150:	81bfbf1e 	bne	r16,r6,80d050 <_malloc_r+0xac>
  80d154:	4a400084 	addi	r9,r9,2
  80d158:	003fe806 	br	80d0fc <_malloc_r+0x158>
  80d15c:	8804d1ba 	srli	r2,r17,6
  80d160:	12400e04 	addi	r9,r2,56
  80d164:	003fd506 	br	80d0bc <_malloc_r+0x118>
  80d168:	00807fc4 	movi	r2,511
  80d16c:	10c09436 	bltu	r2,r3,80d3c0 <_malloc_r+0x41c>
  80d170:	1808d0fa 	srli	r4,r3,3
  80d174:	61bffe04 	addi	r6,r12,-8
  80d178:	00800044 	movi	r2,1
  80d17c:	200a90fa 	slli	r5,r4,3
  80d180:	2007d0ba 	srai	r3,r4,2
  80d184:	31000117 	ldw	r4,4(r6)
  80d188:	2991883a 	add	r8,r5,r6
  80d18c:	41c00217 	ldw	r7,8(r8)
  80d190:	10c4983a 	sll	r2,r2,r3
  80d194:	82000315 	stw	r8,12(r16)
  80d198:	81c00215 	stw	r7,8(r16)
  80d19c:	2088b03a 	or	r4,r4,r2
  80d1a0:	3c000315 	stw	r16,12(r7)
  80d1a4:	31000115 	stw	r4,4(r6)
  80d1a8:	44000215 	stw	r16,8(r8)
  80d1ac:	4807883a 	mov	r3,r9
  80d1b0:	4800a616 	blt	r9,zero,80d44c <_malloc_r+0x4a8>
  80d1b4:	1807d0ba 	srai	r3,r3,2
  80d1b8:	034020b4 	movhi	r13,130
  80d1bc:	6b699804 	addi	r13,r13,-22944
  80d1c0:	00800044 	movi	r2,1
  80d1c4:	10ce983a 	sll	r7,r2,r3
  80d1c8:	69000117 	ldw	r4,4(r13)
  80d1cc:	21c04836 	bltu	r4,r7,80d2f0 <_malloc_r+0x34c>
  80d1d0:	21c4703a 	and	r2,r4,r7
  80d1d4:	10000a1e 	bne	r2,zero,80d200 <_malloc_r+0x25c>
  80d1d8:	39cf883a 	add	r7,r7,r7
  80d1dc:	00bfff04 	movi	r2,-4
  80d1e0:	4884703a 	and	r2,r9,r2
  80d1e4:	21c6703a 	and	r3,r4,r7
  80d1e8:	12400104 	addi	r9,r2,4
  80d1ec:	1800041e 	bne	r3,zero,80d200 <_malloc_r+0x25c>
  80d1f0:	39cf883a 	add	r7,r7,r7
  80d1f4:	4a400104 	addi	r9,r9,4
  80d1f8:	21c4703a 	and	r2,r4,r7
  80d1fc:	103ffc26 	beq	r2,zero,80d1f0 <_malloc_r+0x24c>
  80d200:	480490fa 	slli	r2,r9,3
  80d204:	4817883a 	mov	r11,r9
  80d208:	134d883a 	add	r6,r2,r13
  80d20c:	300b883a 	mov	r5,r6
  80d210:	2c000317 	ldw	r16,12(r5)
  80d214:	81400926 	beq	r16,r5,80d23c <_malloc_r+0x298>
  80d218:	02bfff04 	movi	r10,-4
  80d21c:	020003c4 	movi	r8,15
  80d220:	80800117 	ldw	r2,4(r16)
  80d224:	1286703a 	and	r3,r2,r10
  80d228:	1c49c83a 	sub	r4,r3,r17
  80d22c:	41008016 	blt	r8,r4,80d430 <_malloc_r+0x48c>
  80d230:	2000180e 	bge	r4,zero,80d294 <_malloc_r+0x2f0>
  80d234:	84000317 	ldw	r16,12(r16)
  80d238:	817ff91e 	bne	r16,r5,80d220 <_malloc_r+0x27c>
  80d23c:	4a400044 	addi	r9,r9,1
  80d240:	488000cc 	andi	r2,r9,3
  80d244:	29400204 	addi	r5,r5,8
  80d248:	103ff11e 	bne	r2,zero,80d210 <_malloc_r+0x26c>
  80d24c:	588000cc 	andi	r2,r11,3
  80d250:	31bffe04 	addi	r6,r6,-8
  80d254:	5affffc4 	addi	r11,r11,-1
  80d258:	1000e526 	beq	r2,zero,80d5f0 <_malloc_r+0x64c>
  80d25c:	30800217 	ldw	r2,8(r6)
  80d260:	11bffa26 	beq	r2,r6,80d24c <_malloc_r+0x2a8>
  80d264:	034020b4 	movhi	r13,130
  80d268:	6b699804 	addi	r13,r13,-22944
  80d26c:	39cf883a 	add	r7,r7,r7
  80d270:	68c00117 	ldw	r3,4(r13)
  80d274:	19c01e36 	bltu	r3,r7,80d2f0 <_malloc_r+0x34c>
  80d278:	3800031e 	bne	r7,zero,80d288 <_malloc_r+0x2e4>
  80d27c:	00001c06 	br	80d2f0 <_malloc_r+0x34c>
  80d280:	39cf883a 	add	r7,r7,r7
  80d284:	4a400104 	addi	r9,r9,4
  80d288:	19c4703a 	and	r2,r3,r7
  80d28c:	103ffc26 	beq	r2,zero,80d280 <_malloc_r+0x2dc>
  80d290:	003fdb06 	br	80d200 <_malloc_r+0x25c>
  80d294:	80c7883a 	add	r3,r16,r3
  80d298:	18800117 	ldw	r2,4(r3)
  80d29c:	82000317 	ldw	r8,12(r16)
  80d2a0:	81c00217 	ldw	r7,8(r16)
  80d2a4:	10800054 	ori	r2,r2,1
  80d2a8:	9009883a 	mov	r4,r18
  80d2ac:	18800115 	stw	r2,4(r3)
  80d2b0:	41c00215 	stw	r7,8(r8)
  80d2b4:	3a000315 	stw	r8,12(r7)
  80d2b8:	003f7106 	br	80d080 <_malloc_r+0xdc>
  80d2bc:	88800054 	ori	r2,r17,1
  80d2c0:	844b883a 	add	r5,r16,r17
  80d2c4:	80800115 	stw	r2,4(r16)
  80d2c8:	2905883a 	add	r2,r5,r4
  80d2cc:	20c00054 	ori	r3,r4,1
  80d2d0:	61400315 	stw	r5,12(r12)
  80d2d4:	61400215 	stw	r5,8(r12)
  80d2d8:	11000015 	stw	r4,0(r2)
  80d2dc:	9009883a 	mov	r4,r18
  80d2e0:	2b000215 	stw	r12,8(r5)
  80d2e4:	28c00115 	stw	r3,4(r5)
  80d2e8:	2b000315 	stw	r12,12(r5)
  80d2ec:	003f6406 	br	80d080 <_malloc_r+0xdc>
  80d2f0:	6d400217 	ldw	r21,8(r13)
  80d2f4:	00bfff04 	movi	r2,-4
  80d2f8:	a8c00117 	ldw	r3,4(r21)
  80d2fc:	18ac703a 	and	r22,r3,r2
  80d300:	b449c83a 	sub	r4,r22,r17
  80d304:	b4400236 	bltu	r22,r17,80d310 <_malloc_r+0x36c>
  80d308:	008003c4 	movi	r2,15
  80d30c:	11002316 	blt	r2,r4,80d39c <_malloc_r+0x3f8>
  80d310:	d0a00517 	ldw	r2,-32748(gp)
  80d314:	073fffc4 	movi	fp,-1
  80d318:	b02f883a 	mov	r23,r22
  80d31c:	8887883a 	add	r3,r17,r2
  80d320:	d0a00417 	ldw	r2,-32752(gp)
  80d324:	ada7883a 	add	r19,r21,r22
  80d328:	1d000404 	addi	r20,r3,16
  80d32c:	17000326 	beq	r2,fp,80d33c <_malloc_r+0x398>
  80d330:	18c403c4 	addi	r3,r3,4111
  80d334:	00bc0004 	movi	r2,-4096
  80d338:	18a8703a 	and	r20,r3,r2
  80d33c:	9009883a 	mov	r4,r18
  80d340:	a00b883a 	mov	r5,r20
  80d344:	db400015 	stw	r13,0(sp)
  80d348:	080da480 	call	80da48 <_sbrk_r>
  80d34c:	1021883a 	mov	r16,r2
  80d350:	db400017 	ldw	r13,0(sp)
  80d354:	17000426 	beq	r2,fp,80d368 <_malloc_r+0x3c4>
  80d358:	14c03e2e 	bgeu	r2,r19,80d454 <_malloc_r+0x4b0>
  80d35c:	008020b4 	movhi	r2,130
  80d360:	10a99804 	addi	r2,r2,-22944
  80d364:	a8803b26 	beq	r21,r2,80d454 <_malloc_r+0x4b0>
  80d368:	68800217 	ldw	r2,8(r13)
  80d36c:	013fff04 	movi	r4,-4
  80d370:	10c00117 	ldw	r3,4(r2)
  80d374:	1906703a 	and	r3,r3,r4
  80d378:	1c49c83a 	sub	r4,r3,r17
  80d37c:	1c400236 	bltu	r3,r17,80d388 <_malloc_r+0x3e4>
  80d380:	008003c4 	movi	r2,15
  80d384:	11000516 	blt	r2,r4,80d39c <_malloc_r+0x3f8>
  80d388:	9009883a 	mov	r4,r18
  80d38c:	0814e680 	call	814e68 <__malloc_unlock>
  80d390:	003f1806 	br	80cff4 <_malloc_r+0x50>
  80d394:	4a7fffc4 	addi	r9,r9,-1
  80d398:	003f5706 	br	80d0f8 <_malloc_r+0x154>
  80d39c:	6c000217 	ldw	r16,8(r13)
  80d3a0:	88800054 	ori	r2,r17,1
  80d3a4:	21000054 	ori	r4,r4,1
  80d3a8:	8447883a 	add	r3,r16,r17
  80d3ac:	80800115 	stw	r2,4(r16)
  80d3b0:	19000115 	stw	r4,4(r3)
  80d3b4:	9009883a 	mov	r4,r18
  80d3b8:	68c00215 	stw	r3,8(r13)
  80d3bc:	003f3006 	br	80d080 <_malloc_r+0xdc>
  80d3c0:	180ad27a 	srli	r5,r3,9
  80d3c4:	1808d0fa 	srli	r4,r3,3
  80d3c8:	28000426 	beq	r5,zero,80d3dc <_malloc_r+0x438>
  80d3cc:	00800104 	movi	r2,4
  80d3d0:	11405836 	bltu	r2,r5,80d534 <_malloc_r+0x590>
  80d3d4:	1804d1ba 	srli	r2,r3,6
  80d3d8:	11000e04 	addi	r4,r2,56
  80d3dc:	200490fa 	slli	r2,r4,3
  80d3e0:	014020b4 	movhi	r5,130
  80d3e4:	29699804 	addi	r5,r5,-22944
  80d3e8:	1351883a 	add	r8,r2,r13
  80d3ec:	41c00217 	ldw	r7,8(r8)
  80d3f0:	3a006d26 	beq	r7,r8,80d5a8 <_malloc_r+0x604>
  80d3f4:	38800117 	ldw	r2,4(r7)
  80d3f8:	013fff04 	movi	r4,-4
  80d3fc:	1104703a 	and	r2,r2,r4
  80d400:	1880052e 	bgeu	r3,r2,80d418 <_malloc_r+0x474>
  80d404:	39c00217 	ldw	r7,8(r7)
  80d408:	3a000326 	beq	r7,r8,80d418 <_malloc_r+0x474>
  80d40c:	38800117 	ldw	r2,4(r7)
  80d410:	1104703a 	and	r2,r2,r4
  80d414:	18bffb36 	bltu	r3,r2,80d404 <_malloc_r+0x460>
  80d418:	3a000317 	ldw	r8,12(r7)
  80d41c:	82000315 	stw	r8,12(r16)
  80d420:	81c00215 	stw	r7,8(r16)
  80d424:	3c000315 	stw	r16,12(r7)
  80d428:	44000215 	stw	r16,8(r8)
  80d42c:	003f5f06 	br	80d1ac <_malloc_r+0x208>
  80d430:	82000317 	ldw	r8,12(r16)
  80d434:	81c00217 	ldw	r7,8(r16)
  80d438:	88800054 	ori	r2,r17,1
  80d43c:	844b883a 	add	r5,r16,r17
  80d440:	41c00215 	stw	r7,8(r8)
  80d444:	3a000315 	stw	r8,12(r7)
  80d448:	003f9e06 	br	80d2c4 <_malloc_r+0x320>
  80d44c:	48c000c4 	addi	r3,r9,3
  80d450:	003f5806 	br	80d1b4 <_malloc_r+0x210>
  80d454:	070020b4 	movhi	fp,130
  80d458:	e7298e04 	addi	fp,fp,-22984
  80d45c:	e0800017 	ldw	r2,0(fp)
  80d460:	1505883a 	add	r2,r2,r20
  80d464:	e0800015 	stw	r2,0(fp)
  80d468:	84c05826 	beq	r16,r19,80d5cc <_malloc_r+0x628>
  80d46c:	d0e00417 	ldw	r3,-32752(gp)
  80d470:	00bfffc4 	movi	r2,-1
  80d474:	18805326 	beq	r3,r2,80d5c4 <_malloc_r+0x620>
  80d478:	e0800017 	ldw	r2,0(fp)
  80d47c:	84c7c83a 	sub	r3,r16,r19
  80d480:	10c5883a 	add	r2,r2,r3
  80d484:	e0800015 	stw	r2,0(fp)
  80d488:	80c001cc 	andi	r3,r16,7
  80d48c:	0027883a 	mov	r19,zero
  80d490:	18000326 	beq	r3,zero,80d4a0 <_malloc_r+0x4fc>
  80d494:	00800204 	movi	r2,8
  80d498:	10e7c83a 	sub	r19,r2,r3
  80d49c:	84e1883a 	add	r16,r16,r19
  80d4a0:	8505883a 	add	r2,r16,r20
  80d4a4:	1083ffcc 	andi	r2,r2,4095
  80d4a8:	00c40004 	movi	r3,4096
  80d4ac:	1887c83a 	sub	r3,r3,r2
  80d4b0:	98e7883a 	add	r19,r19,r3
  80d4b4:	9009883a 	mov	r4,r18
  80d4b8:	980b883a 	mov	r5,r19
  80d4bc:	db400015 	stw	r13,0(sp)
  80d4c0:	080da480 	call	80da48 <_sbrk_r>
  80d4c4:	1007883a 	mov	r3,r2
  80d4c8:	00bfffc4 	movi	r2,-1
  80d4cc:	db400017 	ldw	r13,0(sp)
  80d4d0:	18804e26 	beq	r3,r2,80d60c <_malloc_r+0x668>
  80d4d4:	e0800017 	ldw	r2,0(fp)
  80d4d8:	1c07c83a 	sub	r3,r3,r16
  80d4dc:	1cc9883a 	add	r4,r3,r19
  80d4e0:	14c5883a 	add	r2,r2,r19
  80d4e4:	e0800015 	stw	r2,0(fp)
  80d4e8:	6c000215 	stw	r16,8(r13)
  80d4ec:	20800054 	ori	r2,r4,1
  80d4f0:	ab404426 	beq	r21,r13,80d604 <_malloc_r+0x660>
  80d4f4:	014003c4 	movi	r5,15
  80d4f8:	2d801636 	bltu	r5,r22,80d554 <_malloc_r+0x5b0>
  80d4fc:	00800044 	movi	r2,1
  80d500:	80800115 	stw	r2,4(r16)
  80d504:	003f9806 	br	80d368 <_malloc_r+0x3c4>
  80d508:	00805504 	movi	r2,340
  80d50c:	10c00336 	bltu	r2,r3,80d51c <_malloc_r+0x578>
  80d510:	8804d3fa 	srli	r2,r17,15
  80d514:	12401dc4 	addi	r9,r2,119
  80d518:	003ee806 	br	80d0bc <_malloc_r+0x118>
  80d51c:	00815504 	movi	r2,1364
  80d520:	02401f84 	movi	r9,126
  80d524:	10fee536 	bltu	r2,r3,80d0bc <_malloc_r+0x118>
  80d528:	8804d4ba 	srli	r2,r17,18
  80d52c:	12401f04 	addi	r9,r2,124
  80d530:	003ee206 	br	80d0bc <_malloc_r+0x118>
  80d534:	00800504 	movi	r2,20
  80d538:	290016c4 	addi	r4,r5,91
  80d53c:	117fa72e 	bgeu	r2,r5,80d3dc <_malloc_r+0x438>
  80d540:	00801504 	movi	r2,84
  80d544:	11403a36 	bltu	r2,r5,80d630 <_malloc_r+0x68c>
  80d548:	1804d33a 	srli	r2,r3,12
  80d54c:	11001b84 	addi	r4,r2,110
  80d550:	003fa206 	br	80d3dc <_malloc_r+0x438>
  80d554:	80800115 	stw	r2,4(r16)
  80d558:	a8800117 	ldw	r2,4(r21)
  80d55c:	00fffe04 	movi	r3,-8
  80d560:	b13ffd04 	addi	r4,r22,-12
  80d564:	20ee703a 	and	r23,r4,r3
  80d568:	1080004c 	andi	r2,r2,1
  80d56c:	15c4b03a 	or	r2,r2,r23
  80d570:	a8800115 	stw	r2,4(r21)
  80d574:	adc7883a 	add	r3,r21,r23
  80d578:	00800144 	movi	r2,5
  80d57c:	18800215 	stw	r2,8(r3)
  80d580:	18800115 	stw	r2,4(r3)
  80d584:	2dc02436 	bltu	r5,r23,80d618 <_malloc_r+0x674>
  80d588:	e0c00017 	ldw	r3,0(fp)
  80d58c:	d0a00317 	ldw	r2,-32756(gp)
  80d590:	10c0012e 	bgeu	r2,r3,80d598 <_malloc_r+0x5f4>
  80d594:	d0e00315 	stw	r3,-32756(gp)
  80d598:	d0a00217 	ldw	r2,-32760(gp)
  80d59c:	10ff722e 	bgeu	r2,r3,80d368 <_malloc_r+0x3c4>
  80d5a0:	d0e00215 	stw	r3,-32760(gp)
  80d5a4:	003f7006 	br	80d368 <_malloc_r+0x3c4>
  80d5a8:	2005d0ba 	srai	r2,r4,2
  80d5ac:	00c00044 	movi	r3,1
  80d5b0:	29000117 	ldw	r4,4(r5)
  80d5b4:	1886983a 	sll	r3,r3,r2
  80d5b8:	20c8b03a 	or	r4,r4,r3
  80d5bc:	29000115 	stw	r4,4(r5)
  80d5c0:	003f9606 	br	80d41c <_malloc_r+0x478>
  80d5c4:	d4200415 	stw	r16,-32752(gp)
  80d5c8:	003faf06 	br	80d488 <_malloc_r+0x4e4>
  80d5cc:	8083ffcc 	andi	r2,r16,4095
  80d5d0:	103fa61e 	bne	r2,zero,80d46c <_malloc_r+0x4c8>
  80d5d4:	008020b4 	movhi	r2,130
  80d5d8:	10a99804 	addi	r2,r2,-22944
  80d5dc:	10c00217 	ldw	r3,8(r2)
  80d5e0:	a5c9883a 	add	r4,r20,r23
  80d5e4:	20800054 	ori	r2,r4,1
  80d5e8:	18800115 	stw	r2,4(r3)
  80d5ec:	003fe606 	br	80d588 <_malloc_r+0x5e4>
  80d5f0:	68800117 	ldw	r2,4(r13)
  80d5f4:	01c6303a 	nor	r3,zero,r7
  80d5f8:	10c4703a 	and	r2,r2,r3
  80d5fc:	68800115 	stw	r2,4(r13)
  80d600:	003f1806 	br	80d264 <_malloc_r+0x2c0>
  80d604:	80800115 	stw	r2,4(r16)
  80d608:	003fdf06 	br	80d588 <_malloc_r+0x5e4>
  80d60c:	0027883a 	mov	r19,zero
  80d610:	8007883a 	mov	r3,r16
  80d614:	003faf06 	br	80d4d4 <_malloc_r+0x530>
  80d618:	a9400204 	addi	r5,r21,8
  80d61c:	9009883a 	mov	r4,r18
  80d620:	db400015 	stw	r13,0(sp)
  80d624:	0811d740 	call	811d74 <_free_r>
  80d628:	db400017 	ldw	r13,0(sp)
  80d62c:	003fd606 	br	80d588 <_malloc_r+0x5e4>
  80d630:	00805504 	movi	r2,340
  80d634:	11400336 	bltu	r2,r5,80d644 <_malloc_r+0x6a0>
  80d638:	1804d3fa 	srli	r2,r3,15
  80d63c:	11001dc4 	addi	r4,r2,119
  80d640:	003f6606 	br	80d3dc <_malloc_r+0x438>
  80d644:	00815504 	movi	r2,1364
  80d648:	01001f84 	movi	r4,126
  80d64c:	117f6336 	bltu	r2,r5,80d3dc <_malloc_r+0x438>
  80d650:	1804d4ba 	srli	r2,r3,18
  80d654:	11001f04 	addi	r4,r2,124
  80d658:	003f6006 	br	80d3dc <_malloc_r+0x438>

0080d65c <memcpy>:
  80d65c:	020003c4 	movi	r8,15
  80d660:	2007883a 	mov	r3,r4
  80d664:	4180032e 	bgeu	r8,r6,80d674 <memcpy+0x18>
  80d668:	2904b03a 	or	r2,r5,r4
  80d66c:	108000cc 	andi	r2,r2,3
  80d670:	10000c26 	beq	r2,zero,80d6a4 <memcpy+0x48>
  80d674:	31bfffc4 	addi	r6,r6,-1
  80d678:	00bfffc4 	movi	r2,-1
  80d67c:	30800726 	beq	r6,r2,80d69c <memcpy+0x40>
  80d680:	100f883a 	mov	r7,r2
  80d684:	28800003 	ldbu	r2,0(r5)
  80d688:	31bfffc4 	addi	r6,r6,-1
  80d68c:	29400044 	addi	r5,r5,1
  80d690:	18800005 	stb	r2,0(r3)
  80d694:	18c00044 	addi	r3,r3,1
  80d698:	31fffa1e 	bne	r6,r7,80d684 <memcpy+0x28>
  80d69c:	2005883a 	mov	r2,r4
  80d6a0:	f800283a 	ret
  80d6a4:	200f883a 	mov	r7,r4
  80d6a8:	28800017 	ldw	r2,0(r5)
  80d6ac:	29400104 	addi	r5,r5,4
  80d6b0:	31bffc04 	addi	r6,r6,-16
  80d6b4:	38800015 	stw	r2,0(r7)
  80d6b8:	28c00017 	ldw	r3,0(r5)
  80d6bc:	39c00104 	addi	r7,r7,4
  80d6c0:	29400104 	addi	r5,r5,4
  80d6c4:	38c00015 	stw	r3,0(r7)
  80d6c8:	28800017 	ldw	r2,0(r5)
  80d6cc:	39c00104 	addi	r7,r7,4
  80d6d0:	29400104 	addi	r5,r5,4
  80d6d4:	38800015 	stw	r2,0(r7)
  80d6d8:	28c00017 	ldw	r3,0(r5)
  80d6dc:	39c00104 	addi	r7,r7,4
  80d6e0:	29400104 	addi	r5,r5,4
  80d6e4:	38c00015 	stw	r3,0(r7)
  80d6e8:	39c00104 	addi	r7,r7,4
  80d6ec:	41bfee36 	bltu	r8,r6,80d6a8 <memcpy+0x4c>
  80d6f0:	00c000c4 	movi	r3,3
  80d6f4:	1980062e 	bgeu	r3,r6,80d710 <memcpy+0xb4>
  80d6f8:	28800017 	ldw	r2,0(r5)
  80d6fc:	31bfff04 	addi	r6,r6,-4
  80d700:	29400104 	addi	r5,r5,4
  80d704:	38800015 	stw	r2,0(r7)
  80d708:	39c00104 	addi	r7,r7,4
  80d70c:	19bffa36 	bltu	r3,r6,80d6f8 <memcpy+0x9c>
  80d710:	3807883a 	mov	r3,r7
  80d714:	003fd706 	br	80d674 <memcpy+0x18>

0080d718 <memset>:
  80d718:	008000c4 	movi	r2,3
  80d71c:	29403fcc 	andi	r5,r5,255
  80d720:	2007883a 	mov	r3,r4
  80d724:	11801a2e 	bgeu	r2,r6,80d790 <memset+0x78>
  80d728:	2084703a 	and	r2,r4,r2
  80d72c:	1000181e 	bne	r2,zero,80d790 <memset+0x78>
  80d730:	2806923a 	slli	r3,r5,8
  80d734:	200f883a 	mov	r7,r4
  80d738:	1946b03a 	or	r3,r3,r5
  80d73c:	1804943a 	slli	r2,r3,16
  80d740:	1886b03a 	or	r3,r3,r2
  80d744:	008003c4 	movi	r2,15
  80d748:	11800a2e 	bgeu	r2,r6,80d774 <memset+0x5c>
  80d74c:	38c00015 	stw	r3,0(r7)
  80d750:	39c00104 	addi	r7,r7,4
  80d754:	38c00015 	stw	r3,0(r7)
  80d758:	39c00104 	addi	r7,r7,4
  80d75c:	38c00015 	stw	r3,0(r7)
  80d760:	39c00104 	addi	r7,r7,4
  80d764:	38c00015 	stw	r3,0(r7)
  80d768:	31bffc04 	addi	r6,r6,-16
  80d76c:	39c00104 	addi	r7,r7,4
  80d770:	11bff636 	bltu	r2,r6,80d74c <memset+0x34>
  80d774:	008000c4 	movi	r2,3
  80d778:	1180042e 	bgeu	r2,r6,80d78c <memset+0x74>
  80d77c:	38c00015 	stw	r3,0(r7)
  80d780:	31bfff04 	addi	r6,r6,-4
  80d784:	39c00104 	addi	r7,r7,4
  80d788:	11bffc36 	bltu	r2,r6,80d77c <memset+0x64>
  80d78c:	3807883a 	mov	r3,r7
  80d790:	31bfffc4 	addi	r6,r6,-1
  80d794:	00bfffc4 	movi	r2,-1
  80d798:	30800426 	beq	r6,r2,80d7ac <memset+0x94>
  80d79c:	19400005 	stb	r5,0(r3)
  80d7a0:	31bfffc4 	addi	r6,r6,-1
  80d7a4:	18c00044 	addi	r3,r3,1
  80d7a8:	30bffc1e 	bne	r6,r2,80d79c <memset+0x84>
  80d7ac:	2005883a 	mov	r2,r4
  80d7b0:	f800283a 	ret

0080d7b4 <_open_r>:
  80d7b4:	defffe04 	addi	sp,sp,-8
  80d7b8:	dc000015 	stw	r16,0(sp)
  80d7bc:	2021883a 	mov	r16,r4
  80d7c0:	2809883a 	mov	r4,r5
  80d7c4:	300b883a 	mov	r5,r6
  80d7c8:	380d883a 	mov	r6,r7
  80d7cc:	dfc00115 	stw	ra,4(sp)
  80d7d0:	d0202815 	stw	zero,-32608(gp)
  80d7d4:	0814f4c0 	call	814f4c <open>
  80d7d8:	1007883a 	mov	r3,r2
  80d7dc:	00bfffc4 	movi	r2,-1
  80d7e0:	18800526 	beq	r3,r2,80d7f8 <_open_r+0x44>
  80d7e4:	1805883a 	mov	r2,r3
  80d7e8:	dfc00117 	ldw	ra,4(sp)
  80d7ec:	dc000017 	ldw	r16,0(sp)
  80d7f0:	dec00204 	addi	sp,sp,8
  80d7f4:	f800283a 	ret
  80d7f8:	d0a02817 	ldw	r2,-32608(gp)
  80d7fc:	103ff926 	beq	r2,zero,80d7e4 <_open_r+0x30>
  80d800:	80800015 	stw	r2,0(r16)
  80d804:	1805883a 	mov	r2,r3
  80d808:	dfc00117 	ldw	ra,4(sp)
  80d80c:	dc000017 	ldw	r16,0(sp)
  80d810:	dec00204 	addi	sp,sp,8
  80d814:	f800283a 	ret

0080d818 <srand>:
  80d818:	d1600117 	ldw	r5,-32764(gp)
  80d81c:	0007883a 	mov	r3,zero
  80d820:	28c02a15 	stw	r3,168(r5)
  80d824:	29002915 	stw	r4,164(r5)
  80d828:	f800283a 	ret

0080d82c <rand>:
  80d82c:	defffe04 	addi	sp,sp,-8
  80d830:	dc000015 	stw	r16,0(sp)
  80d834:	d4200117 	ldw	r16,-32764(gp)
  80d838:	dfc00115 	stw	ra,4(sp)
  80d83c:	00932574 	movhi	r2,19605
  80d840:	109fcb44 	addi	r2,r2,32557
  80d844:	82002917 	ldw	r8,164(r16)
  80d848:	82402a17 	ldw	r9,168(r16)
  80d84c:	00d614b4 	movhi	r3,22610
  80d850:	18fd0b44 	addi	r3,r3,-3027
  80d854:	4009883a 	mov	r4,r8
  80d858:	180f883a 	mov	r7,r3
  80d85c:	100d883a 	mov	r6,r2
  80d860:	480b883a 	mov	r5,r9
  80d864:	080be740 	call	80be74 <__muldi3>
  80d868:	02000044 	movi	r8,1
  80d86c:	1209883a 	add	r4,r2,r8
  80d870:	2095803a 	cmpltu	r10,r4,r2
  80d874:	50d5883a 	add	r10,r10,r3
  80d878:	81002915 	stw	r4,164(r16)
  80d87c:	01200034 	movhi	r4,32768
  80d880:	213fffc4 	addi	r4,r4,-1
  80d884:	2284703a 	and	r2,r4,r10
  80d888:	82802a15 	stw	r10,168(r16)
  80d88c:	dfc00117 	ldw	ra,4(sp)
  80d890:	dc000017 	ldw	r16,0(sp)
  80d894:	dec00204 	addi	sp,sp,8
  80d898:	f800283a 	ret

0080d89c <lflush>:
  80d89c:	2080030b 	ldhu	r2,12(r4)
  80d8a0:	00c00244 	movi	r3,9
  80d8a4:	1080024c 	andi	r2,r2,9
  80d8a8:	10c00226 	beq	r2,r3,80d8b4 <lflush+0x18>
  80d8ac:	0005883a 	mov	r2,zero
  80d8b0:	f800283a 	ret
  80d8b4:	02002074 	movhi	r8,129
  80d8b8:	42061704 	addi	r8,r8,6236
  80d8bc:	4000683a 	jmp	r8

0080d8c0 <__srefill>:
  80d8c0:	d0e00117 	ldw	r3,-32764(gp)
  80d8c4:	defffe04 	addi	sp,sp,-8
  80d8c8:	dc000015 	stw	r16,0(sp)
  80d8cc:	dfc00115 	stw	ra,4(sp)
  80d8d0:	18800e17 	ldw	r2,56(r3)
  80d8d4:	2021883a 	mov	r16,r4
  80d8d8:	10003826 	beq	r2,zero,80d9bc <__srefill+0xfc>
  80d8dc:	8100030b 	ldhu	r4,12(r16)
  80d8e0:	20ffffcc 	andi	r3,r4,65535
  80d8e4:	1880080c 	andi	r2,r3,32
  80d8e8:	10004c1e 	bne	r2,zero,80da1c <__srefill+0x15c>
  80d8ec:	1880010c 	andi	r2,r3,4
  80d8f0:	10001f1e 	bne	r2,zero,80d970 <__srefill+0xb0>
  80d8f4:	1880040c 	andi	r2,r3,16
  80d8f8:	80000115 	stw	zero,4(r16)
  80d8fc:	017fffc4 	movi	r5,-1
  80d900:	10001626 	beq	r2,zero,80d95c <__srefill+0x9c>
  80d904:	1880020c 	andi	r2,r3,8
  80d908:	1000391e 	bne	r2,zero,80d9f0 <__srefill+0x130>
  80d90c:	20800114 	ori	r2,r4,4
  80d910:	8080030d 	sth	r2,12(r16)
  80d914:	80800417 	ldw	r2,16(r16)
  80d918:	10003026 	beq	r2,zero,80d9dc <__srefill+0x11c>
  80d91c:	8080030b 	ldhu	r2,12(r16)
  80d920:	108000cc 	andi	r2,r2,3
  80d924:	1000281e 	bne	r2,zero,80d9c8 <__srefill+0x108>
  80d928:	81400417 	ldw	r5,16(r16)
  80d92c:	80c00817 	ldw	r3,32(r16)
  80d930:	81000717 	ldw	r4,28(r16)
  80d934:	81800517 	ldw	r6,20(r16)
  80d938:	81400015 	stw	r5,0(r16)
  80d93c:	183ee83a 	callr	r3
  80d940:	1007883a 	mov	r3,r2
  80d944:	8080030b 	ldhu	r2,12(r16)
  80d948:	10b7ffcc 	andi	r2,r2,57343
  80d94c:	00c0360e 	bge	zero,r3,80da28 <__srefill+0x168>
  80d950:	8080030d 	sth	r2,12(r16)
  80d954:	80c00115 	stw	r3,4(r16)
  80d958:	000b883a 	mov	r5,zero
  80d95c:	2805883a 	mov	r2,r5
  80d960:	dfc00117 	ldw	ra,4(sp)
  80d964:	dc000017 	ldw	r16,0(sp)
  80d968:	dec00204 	addi	sp,sp,8
  80d96c:	f800283a 	ret
  80d970:	81400c17 	ldw	r5,48(r16)
  80d974:	28001c26 	beq	r5,zero,80d9e8 <__srefill+0x128>
  80d978:	80801004 	addi	r2,r16,64
  80d97c:	28800326 	beq	r5,r2,80d98c <__srefill+0xcc>
  80d980:	d1200117 	ldw	r4,-32764(gp)
  80d984:	80000115 	stw	zero,4(r16)
  80d988:	0811d740 	call	811d74 <_free_r>
  80d98c:	80800f17 	ldw	r2,60(r16)
  80d990:	80000c15 	stw	zero,48(r16)
  80d994:	80800115 	stw	r2,4(r16)
  80d998:	103fde26 	beq	r2,zero,80d914 <__srefill+0x54>
  80d99c:	80800e17 	ldw	r2,56(r16)
  80d9a0:	000b883a 	mov	r5,zero
  80d9a4:	80800015 	stw	r2,0(r16)
  80d9a8:	2805883a 	mov	r2,r5
  80d9ac:	dfc00117 	ldw	ra,4(sp)
  80d9b0:	dc000017 	ldw	r16,0(sp)
  80d9b4:	dec00204 	addi	sp,sp,8
  80d9b8:	f800283a 	ret
  80d9bc:	1809883a 	mov	r4,r3
  80d9c0:	08119c00 	call	8119c0 <__sinit>
  80d9c4:	003fc506 	br	80d8dc <__srefill+0x1c>
  80d9c8:	d1200117 	ldw	r4,-32764(gp)
  80d9cc:	01402074 	movhi	r5,129
  80d9d0:	29762704 	addi	r5,r5,-10084
  80d9d4:	08123b00 	call	8123b0 <_fwalk>
  80d9d8:	003fd306 	br	80d928 <__srefill+0x68>
  80d9dc:	8009883a 	mov	r4,r16
  80d9e0:	080ce340 	call	80ce34 <__smakebuf>
  80d9e4:	003fcd06 	br	80d91c <__srefill+0x5c>
  80d9e8:	80000115 	stw	zero,4(r16)
  80d9ec:	003fc906 	br	80d914 <__srefill+0x54>
  80d9f0:	8009883a 	mov	r4,r16
  80d9f4:	081185c0 	call	81185c <fflush>
  80d9f8:	017fffc4 	movi	r5,-1
  80d9fc:	103fd71e 	bne	r2,zero,80d95c <__srefill+0x9c>
  80da00:	8080030b 	ldhu	r2,12(r16)
  80da04:	80000215 	stw	zero,8(r16)
  80da08:	80000615 	stw	zero,24(r16)
  80da0c:	10bffdcc 	andi	r2,r2,65527
  80da10:	1009883a 	mov	r4,r2
  80da14:	8080030d 	sth	r2,12(r16)
  80da18:	003fbc06 	br	80d90c <__srefill+0x4c>
  80da1c:	017fffc4 	movi	r5,-1
  80da20:	80000115 	stw	zero,4(r16)
  80da24:	003fcd06 	br	80d95c <__srefill+0x9c>
  80da28:	1800051e 	bne	r3,zero,80da40 <__srefill+0x180>
  80da2c:	10800814 	ori	r2,r2,32
  80da30:	017fffc4 	movi	r5,-1
  80da34:	8080030d 	sth	r2,12(r16)
  80da38:	80000115 	stw	zero,4(r16)
  80da3c:	003fc706 	br	80d95c <__srefill+0x9c>
  80da40:	10801014 	ori	r2,r2,64
  80da44:	003ffa06 	br	80da30 <__srefill+0x170>

0080da48 <_sbrk_r>:
  80da48:	defffe04 	addi	sp,sp,-8
  80da4c:	dc000015 	stw	r16,0(sp)
  80da50:	2021883a 	mov	r16,r4
  80da54:	2809883a 	mov	r4,r5
  80da58:	dfc00115 	stw	ra,4(sp)
  80da5c:	d0202815 	stw	zero,-32608(gp)
  80da60:	08155400 	call	815540 <sbrk>
  80da64:	1007883a 	mov	r3,r2
  80da68:	00bfffc4 	movi	r2,-1
  80da6c:	18800526 	beq	r3,r2,80da84 <_sbrk_r+0x3c>
  80da70:	1805883a 	mov	r2,r3
  80da74:	dfc00117 	ldw	ra,4(sp)
  80da78:	dc000017 	ldw	r16,0(sp)
  80da7c:	dec00204 	addi	sp,sp,8
  80da80:	f800283a 	ret
  80da84:	d0a02817 	ldw	r2,-32608(gp)
  80da88:	103ff926 	beq	r2,zero,80da70 <_sbrk_r+0x28>
  80da8c:	80800015 	stw	r2,0(r16)
  80da90:	003ff706 	br	80da70 <_sbrk_r+0x28>

0080da94 <_sprintf_r>:
  80da94:	deffe704 	addi	sp,sp,-100
  80da98:	2813883a 	mov	r9,r5
  80da9c:	dfc01715 	stw	ra,92(sp)
  80daa0:	d9c01815 	stw	r7,96(sp)
  80daa4:	00808204 	movi	r2,520
  80daa8:	00e00034 	movhi	r3,32768
  80daac:	18ffffc4 	addi	r3,r3,-1
  80dab0:	d880030d 	sth	r2,12(sp)
  80dab4:	d80b883a 	mov	r5,sp
  80dab8:	d9c01804 	addi	r7,sp,96
  80dabc:	00bfffc4 	movi	r2,-1
  80dac0:	d8c00515 	stw	r3,20(sp)
  80dac4:	d8c00215 	stw	r3,8(sp)
  80dac8:	da400415 	stw	r9,16(sp)
  80dacc:	d880038d 	sth	r2,14(sp)
  80dad0:	da400015 	stw	r9,0(sp)
  80dad4:	080dd800 	call	80dd80 <___vfprintf_internal_r>
  80dad8:	d8c00017 	ldw	r3,0(sp)
  80dadc:	18000005 	stb	zero,0(r3)
  80dae0:	dfc01717 	ldw	ra,92(sp)
  80dae4:	dec01904 	addi	sp,sp,100
  80dae8:	f800283a 	ret

0080daec <sprintf>:
  80daec:	deffe604 	addi	sp,sp,-104
  80daf0:	2013883a 	mov	r9,r4
  80daf4:	dfc01715 	stw	ra,92(sp)
  80daf8:	d9801815 	stw	r6,96(sp)
  80dafc:	d9c01915 	stw	r7,100(sp)
  80db00:	d1200117 	ldw	r4,-32764(gp)
  80db04:	00808204 	movi	r2,520
  80db08:	00e00034 	movhi	r3,32768
  80db0c:	18ffffc4 	addi	r3,r3,-1
  80db10:	280d883a 	mov	r6,r5
  80db14:	d880030d 	sth	r2,12(sp)
  80db18:	d80b883a 	mov	r5,sp
  80db1c:	d9c01804 	addi	r7,sp,96
  80db20:	00bfffc4 	movi	r2,-1
  80db24:	d8c00515 	stw	r3,20(sp)
  80db28:	d8c00215 	stw	r3,8(sp)
  80db2c:	da400415 	stw	r9,16(sp)
  80db30:	d880038d 	sth	r2,14(sp)
  80db34:	da400015 	stw	r9,0(sp)
  80db38:	080dd800 	call	80dd80 <___vfprintf_internal_r>
  80db3c:	d8c00017 	ldw	r3,0(sp)
  80db40:	18000005 	stb	zero,0(r3)
  80db44:	dfc01717 	ldw	ra,92(sp)
  80db48:	dec01a04 	addi	sp,sp,104
  80db4c:	f800283a 	ret

0080db50 <__sread>:
  80db50:	defffe04 	addi	sp,sp,-8
  80db54:	dc000015 	stw	r16,0(sp)
  80db58:	dfc00115 	stw	ra,4(sp)
  80db5c:	2021883a 	mov	r16,r4
  80db60:	2807883a 	mov	r3,r5
  80db64:	d1200117 	ldw	r4,-32764(gp)
  80db68:	8140038f 	ldh	r5,14(r16)
  80db6c:	300f883a 	mov	r7,r6
  80db70:	180d883a 	mov	r6,r3
  80db74:	08136440 	call	813644 <_read_r>
  80db78:	1007883a 	mov	r3,r2
  80db7c:	10000816 	blt	r2,zero,80dba0 <__sread+0x50>
  80db80:	80801417 	ldw	r2,80(r16)
  80db84:	10c5883a 	add	r2,r2,r3
  80db88:	80801415 	stw	r2,80(r16)
  80db8c:	1805883a 	mov	r2,r3
  80db90:	dfc00117 	ldw	ra,4(sp)
  80db94:	dc000017 	ldw	r16,0(sp)
  80db98:	dec00204 	addi	sp,sp,8
  80db9c:	f800283a 	ret
  80dba0:	8080030b 	ldhu	r2,12(r16)
  80dba4:	10bbffcc 	andi	r2,r2,61439
  80dba8:	8080030d 	sth	r2,12(r16)
  80dbac:	1805883a 	mov	r2,r3
  80dbb0:	dfc00117 	ldw	ra,4(sp)
  80dbb4:	dc000017 	ldw	r16,0(sp)
  80dbb8:	dec00204 	addi	sp,sp,8
  80dbbc:	f800283a 	ret

0080dbc0 <__swrite>:
  80dbc0:	defffc04 	addi	sp,sp,-16
  80dbc4:	dc000215 	stw	r16,8(sp)
  80dbc8:	dc400115 	stw	r17,4(sp)
  80dbcc:	dc800015 	stw	r18,0(sp)
  80dbd0:	dfc00315 	stw	ra,12(sp)
  80dbd4:	20c0030b 	ldhu	r3,12(r4)
  80dbd8:	3025883a 	mov	r18,r6
  80dbdc:	2021883a 	mov	r16,r4
  80dbe0:	1880400c 	andi	r2,r3,256
  80dbe4:	01c00084 	movi	r7,2
  80dbe8:	2823883a 	mov	r17,r5
  80dbec:	000d883a 	mov	r6,zero
  80dbf0:	10000e1e 	bne	r2,zero,80dc2c <__swrite+0x6c>
  80dbf4:	8140038f 	ldh	r5,14(r16)
  80dbf8:	d1200117 	ldw	r4,-32764(gp)
  80dbfc:	18bbffcc 	andi	r2,r3,61439
  80dc00:	880d883a 	mov	r6,r17
  80dc04:	900f883a 	mov	r7,r18
  80dc08:	02002074 	movhi	r8,129
  80dc0c:	42002a04 	addi	r8,r8,168
  80dc10:	8080030d 	sth	r2,12(r16)
  80dc14:	dfc00317 	ldw	ra,12(sp)
  80dc18:	dc000217 	ldw	r16,8(sp)
  80dc1c:	dc400117 	ldw	r17,4(sp)
  80dc20:	dc800017 	ldw	r18,0(sp)
  80dc24:	dec00404 	addi	sp,sp,16
  80dc28:	4000683a 	jmp	r8
  80dc2c:	d1200117 	ldw	r4,-32764(gp)
  80dc30:	8140038f 	ldh	r5,14(r16)
  80dc34:	081254c0 	call	81254c <_lseek_r>
  80dc38:	80c0030b 	ldhu	r3,12(r16)
  80dc3c:	003fed06 	br	80dbf4 <__swrite+0x34>

0080dc40 <__sseek>:
  80dc40:	defffe04 	addi	sp,sp,-8
  80dc44:	dc000015 	stw	r16,0(sp)
  80dc48:	dfc00115 	stw	ra,4(sp)
  80dc4c:	2021883a 	mov	r16,r4
  80dc50:	2807883a 	mov	r3,r5
  80dc54:	d1200117 	ldw	r4,-32764(gp)
  80dc58:	8140038f 	ldh	r5,14(r16)
  80dc5c:	300f883a 	mov	r7,r6
  80dc60:	180d883a 	mov	r6,r3
  80dc64:	081254c0 	call	81254c <_lseek_r>
  80dc68:	1007883a 	mov	r3,r2
  80dc6c:	00bfffc4 	movi	r2,-1
  80dc70:	18800926 	beq	r3,r2,80dc98 <__sseek+0x58>
  80dc74:	8080030b 	ldhu	r2,12(r16)
  80dc78:	80c01415 	stw	r3,80(r16)
  80dc7c:	10840014 	ori	r2,r2,4096
  80dc80:	8080030d 	sth	r2,12(r16)
  80dc84:	1805883a 	mov	r2,r3
  80dc88:	dfc00117 	ldw	ra,4(sp)
  80dc8c:	dc000017 	ldw	r16,0(sp)
  80dc90:	dec00204 	addi	sp,sp,8
  80dc94:	f800283a 	ret
  80dc98:	8080030b 	ldhu	r2,12(r16)
  80dc9c:	10bbffcc 	andi	r2,r2,61439
  80dca0:	8080030d 	sth	r2,12(r16)
  80dca4:	1805883a 	mov	r2,r3
  80dca8:	dfc00117 	ldw	ra,4(sp)
  80dcac:	dc000017 	ldw	r16,0(sp)
  80dcb0:	dec00204 	addi	sp,sp,8
  80dcb4:	f800283a 	ret

0080dcb8 <__sclose>:
  80dcb8:	2140038f 	ldh	r5,14(r4)
  80dcbc:	d1200117 	ldw	r4,-32764(gp)
  80dcc0:	02002074 	movhi	r8,129
  80dcc4:	42008604 	addi	r8,r8,536
  80dcc8:	4000683a 	jmp	r8

0080dccc <strlen>:
  80dccc:	208000cc 	andi	r2,r4,3
  80dcd0:	200f883a 	mov	r7,r4
  80dcd4:	1000101e 	bne	r2,zero,80dd18 <strlen+0x4c>
  80dcd8:	20800017 	ldw	r2,0(r4)
  80dcdc:	01bfbff4 	movhi	r6,65279
  80dce0:	31bfbfc4 	addi	r6,r6,-257
  80dce4:	01602074 	movhi	r5,32897
  80dce8:	29602004 	addi	r5,r5,-32640
  80dcec:	00000206 	br	80dcf8 <strlen+0x2c>
  80dcf0:	21000104 	addi	r4,r4,4
  80dcf4:	20800017 	ldw	r2,0(r4)
  80dcf8:	0086303a 	nor	r3,zero,r2
  80dcfc:	1185883a 	add	r2,r2,r6
  80dd00:	10c4703a 	and	r2,r2,r3
  80dd04:	1144703a 	and	r2,r2,r5
  80dd08:	103ff926 	beq	r2,zero,80dcf0 <strlen+0x24>
  80dd0c:	20800007 	ldb	r2,0(r4)
  80dd10:	10000326 	beq	r2,zero,80dd20 <strlen+0x54>
  80dd14:	21000044 	addi	r4,r4,1
  80dd18:	20800007 	ldb	r2,0(r4)
  80dd1c:	103ffd1e 	bne	r2,zero,80dd14 <strlen+0x48>
  80dd20:	21c5c83a 	sub	r2,r4,r7
  80dd24:	f800283a 	ret

0080dd28 <__sprint>:
  80dd28:	defffe04 	addi	sp,sp,-8
  80dd2c:	dc000015 	stw	r16,0(sp)
  80dd30:	dfc00115 	stw	ra,4(sp)
  80dd34:	28800217 	ldw	r2,8(r5)
  80dd38:	2821883a 	mov	r16,r5
  80dd3c:	0007883a 	mov	r3,zero
  80dd40:	1000061e 	bne	r2,zero,80dd5c <__sprint+0x34>
  80dd44:	1805883a 	mov	r2,r3
  80dd48:	28000115 	stw	zero,4(r5)
  80dd4c:	dfc00117 	ldw	ra,4(sp)
  80dd50:	dc000017 	ldw	r16,0(sp)
  80dd54:	dec00204 	addi	sp,sp,8
  80dd58:	f800283a 	ret
  80dd5c:	081202c0 	call	81202c <__sfvwrite>
  80dd60:	1007883a 	mov	r3,r2
  80dd64:	1805883a 	mov	r2,r3
  80dd68:	80000115 	stw	zero,4(r16)
  80dd6c:	80000215 	stw	zero,8(r16)
  80dd70:	dfc00117 	ldw	ra,4(sp)
  80dd74:	dc000017 	ldw	r16,0(sp)
  80dd78:	dec00204 	addi	sp,sp,8
  80dd7c:	f800283a 	ret

0080dd80 <___vfprintf_internal_r>:
  80dd80:	defe4a04 	addi	sp,sp,-1752
  80dd84:	dc01b315 	stw	r16,1740(sp)
  80dd88:	d9419e15 	stw	r5,1656(sp)
  80dd8c:	d9019d15 	stw	r4,1652(sp)
  80dd90:	dfc1b515 	stw	ra,1748(sp)
  80dd94:	df01b415 	stw	fp,1744(sp)
  80dd98:	dc41b215 	stw	r17,1736(sp)
  80dd9c:	dc81b115 	stw	r18,1732(sp)
  80dda0:	dcc1b015 	stw	r19,1728(sp)
  80dda4:	dd01af15 	stw	r20,1724(sp)
  80dda8:	dd41ae15 	stw	r21,1720(sp)
  80ddac:	dd81ad15 	stw	r22,1716(sp)
  80ddb0:	ddc1ac15 	stw	r23,1712(sp)
  80ddb4:	3021883a 	mov	r16,r6
  80ddb8:	d9c19f15 	stw	r7,1660(sp)
  80ddbc:	081253c0 	call	81253c <localeconv>
  80ddc0:	d8c19e17 	ldw	r3,1656(sp)
  80ddc4:	10800017 	ldw	r2,0(r2)
  80ddc8:	000b883a 	mov	r5,zero
  80ddcc:	1900030b 	ldhu	r4,12(r3)
  80ddd0:	d881a315 	stw	r2,1676(sp)
  80ddd4:	d941a415 	stw	r5,1680(sp)
  80ddd8:	2080020c 	andi	r2,r4,8
  80dddc:	d941a515 	stw	r5,1684(sp)
  80dde0:	d801a615 	stw	zero,1688(sp)
  80dde4:	d801a915 	stw	zero,1700(sp)
  80dde8:	d801aa15 	stw	zero,1704(sp)
  80ddec:	10004226 	beq	r2,zero,80def8 <___vfprintf_internal_r+0x178>
  80ddf0:	18800417 	ldw	r2,16(r3)
  80ddf4:	10004026 	beq	r2,zero,80def8 <___vfprintf_internal_r+0x178>
  80ddf8:	20c0068c 	andi	r3,r4,26
  80ddfc:	00800284 	movi	r2,10
  80de00:	18804626 	beq	r3,r2,80df1c <___vfprintf_internal_r+0x19c>
  80de04:	dc800904 	addi	r18,sp,36
  80de08:	802d883a 	mov	r22,r16
  80de0c:	dc800615 	stw	r18,24(sp)
  80de10:	d8000815 	stw	zero,32(sp)
  80de14:	d8000715 	stw	zero,28(sp)
  80de18:	d801a115 	stw	zero,1668(sp)
  80de1c:	b1000003 	ldbu	r4,0(r22)
  80de20:	b027883a 	mov	r19,r22
  80de24:	20803fcc 	andi	r2,r4,255
  80de28:	1080201c 	xori	r2,r2,128
  80de2c:	10bfe004 	addi	r2,r2,-128
  80de30:	10000826 	beq	r2,zero,80de54 <___vfprintf_internal_r+0xd4>
  80de34:	00c00944 	movi	r3,37
  80de38:	10c00626 	beq	r2,r3,80de54 <___vfprintf_internal_r+0xd4>
  80de3c:	b5800044 	addi	r22,r22,1
  80de40:	b1000003 	ldbu	r4,0(r22)
  80de44:	20803fcc 	andi	r2,r4,255
  80de48:	1080201c 	xori	r2,r2,128
  80de4c:	10bfe004 	addi	r2,r2,-128
  80de50:	103ff91e 	bne	r2,zero,80de38 <___vfprintf_internal_r+0xb8>
  80de54:	b4e3c83a 	sub	r17,r22,r19
  80de58:	88000f26 	beq	r17,zero,80de98 <___vfprintf_internal_r+0x118>
  80de5c:	d8800817 	ldw	r2,32(sp)
  80de60:	d8c00717 	ldw	r3,28(sp)
  80de64:	94c00015 	stw	r19,0(r18)
  80de68:	1445883a 	add	r2,r2,r17
  80de6c:	18c00044 	addi	r3,r3,1
  80de70:	d8800815 	stw	r2,32(sp)
  80de74:	008001c4 	movi	r2,7
  80de78:	94400115 	stw	r17,4(r18)
  80de7c:	d8c00715 	stw	r3,28(sp)
  80de80:	94800204 	addi	r18,r18,8
  80de84:	10c05a16 	blt	r2,r3,80dff0 <___vfprintf_internal_r+0x270>
  80de88:	d8c1a117 	ldw	r3,1668(sp)
  80de8c:	b1000003 	ldbu	r4,0(r22)
  80de90:	1c47883a 	add	r3,r3,r17
  80de94:	d8c1a115 	stw	r3,1668(sp)
  80de98:	20803fcc 	andi	r2,r4,255
  80de9c:	1080201c 	xori	r2,r2,128
  80dea0:	10bfe004 	addi	r2,r2,-128
  80dea4:	10036826 	beq	r2,zero,80ec48 <___vfprintf_internal_r+0xec8>
  80dea8:	b5800044 	addi	r22,r22,1
  80deac:	b1000003 	ldbu	r4,0(r22)
  80deb0:	053fffc4 	movi	r20,-1
  80deb4:	d801a015 	stw	zero,1664(sp)
  80deb8:	d801a715 	stw	zero,1692(sp)
  80debc:	d801a215 	stw	zero,1672(sp)
  80dec0:	d8019c05 	stb	zero,1648(sp)
  80dec4:	27003fcc 	andi	fp,r4,255
  80dec8:	e700201c 	xori	fp,fp,128
  80decc:	e73fe004 	addi	fp,fp,-128
  80ded0:	b5800044 	addi	r22,r22,1
  80ded4:	e0fff804 	addi	r3,fp,-32
  80ded8:	00801604 	movi	r2,88
  80dedc:	10c19c36 	bltu	r2,r3,80e550 <___vfprintf_internal_r+0x7d0>
  80dee0:	180490ba 	slli	r2,r3,2
  80dee4:	00c020b4 	movhi	r3,130
  80dee8:	18e71504 	addi	r3,r3,-25516
  80deec:	10c5883a 	add	r2,r2,r3
  80def0:	11000017 	ldw	r4,0(r2)
  80def4:	2000683a 	jmp	r4
  80def8:	d9019e17 	ldw	r4,1656(sp)
  80defc:	081010c0 	call	81010c <__swsetup>
  80df00:	00ffffc4 	movi	r3,-1
  80df04:	10002d1e 	bne	r2,zero,80dfbc <___vfprintf_internal_r+0x23c>
  80df08:	d9c19e17 	ldw	r7,1656(sp)
  80df0c:	00800284 	movi	r2,10
  80df10:	3900030b 	ldhu	r4,12(r7)
  80df14:	20c0068c 	andi	r3,r4,26
  80df18:	18bfba1e 	bne	r3,r2,80de04 <___vfprintf_internal_r+0x84>
  80df1c:	d8819e17 	ldw	r2,1656(sp)
  80df20:	1280038b 	ldhu	r10,14(r2)
  80df24:	50bfffcc 	andi	r2,r10,65535
  80df28:	10a0001c 	xori	r2,r2,32768
  80df2c:	10a00004 	addi	r2,r2,-32768
  80df30:	103fb416 	blt	r2,zero,80de04 <___vfprintf_internal_r+0x84>
  80df34:	d8c19e17 	ldw	r3,1656(sp)
  80df38:	d9819f17 	ldw	r6,1660(sp)
  80df3c:	dc407104 	addi	r17,sp,452
  80df40:	1a000717 	ldw	r8,28(r3)
  80df44:	1a400917 	ldw	r9,36(r3)
  80df48:	20bfff4c 	andi	r2,r4,65533
  80df4c:	d8c08804 	addi	r3,sp,544
  80df50:	01c10004 	movi	r7,1024
  80df54:	800b883a 	mov	r5,r16
  80df58:	8809883a 	mov	r4,r17
  80df5c:	d880740d 	sth	r2,464(sp)
  80df60:	da80748d 	sth	r10,466(sp)
  80df64:	da007815 	stw	r8,480(sp)
  80df68:	da407a15 	stw	r9,488(sp)
  80df6c:	d8c07515 	stw	r3,468(sp)
  80df70:	d9c07615 	stw	r7,472(sp)
  80df74:	d8c07115 	stw	r3,452(sp)
  80df78:	d9c07315 	stw	r7,460(sp)
  80df7c:	d8007715 	stw	zero,476(sp)
  80df80:	080f9e40 	call	80f9e4 <__vfprintf_internal>
  80df84:	1021883a 	mov	r16,r2
  80df88:	10000416 	blt	r2,zero,80df9c <___vfprintf_internal_r+0x21c>
  80df8c:	8809883a 	mov	r4,r17
  80df90:	081185c0 	call	81185c <fflush>
  80df94:	10000126 	beq	r2,zero,80df9c <___vfprintf_internal_r+0x21c>
  80df98:	043fffc4 	movi	r16,-1
  80df9c:	d880740b 	ldhu	r2,464(sp)
  80dfa0:	1080100c 	andi	r2,r2,64
  80dfa4:	10000426 	beq	r2,zero,80dfb8 <___vfprintf_internal_r+0x238>
  80dfa8:	d9019e17 	ldw	r4,1656(sp)
  80dfac:	2080030b 	ldhu	r2,12(r4)
  80dfb0:	10801014 	ori	r2,r2,64
  80dfb4:	2080030d 	sth	r2,12(r4)
  80dfb8:	8007883a 	mov	r3,r16
  80dfbc:	1805883a 	mov	r2,r3
  80dfc0:	dfc1b517 	ldw	ra,1748(sp)
  80dfc4:	df01b417 	ldw	fp,1744(sp)
  80dfc8:	dc01b317 	ldw	r16,1740(sp)
  80dfcc:	dc41b217 	ldw	r17,1736(sp)
  80dfd0:	dc81b117 	ldw	r18,1732(sp)
  80dfd4:	dcc1b017 	ldw	r19,1728(sp)
  80dfd8:	dd01af17 	ldw	r20,1724(sp)
  80dfdc:	dd41ae17 	ldw	r21,1720(sp)
  80dfe0:	dd81ad17 	ldw	r22,1716(sp)
  80dfe4:	ddc1ac17 	ldw	r23,1712(sp)
  80dfe8:	dec1b604 	addi	sp,sp,1752
  80dfec:	f800283a 	ret
  80dff0:	d9019e17 	ldw	r4,1656(sp)
  80dff4:	d9c00404 	addi	r7,sp,16
  80dff8:	39400204 	addi	r5,r7,8
  80dffc:	080dd280 	call	80dd28 <__sprint>
  80e000:	1003191e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80e004:	d8800404 	addi	r2,sp,16
  80e008:	14800504 	addi	r18,r2,20
  80e00c:	003f9e06 	br	80de88 <___vfprintf_internal_r+0x108>
  80e010:	d901a017 	ldw	r4,1664(sp)
  80e014:	21000414 	ori	r4,r4,16
  80e018:	d901a015 	stw	r4,1664(sp)
  80e01c:	d941a017 	ldw	r5,1664(sp)
  80e020:	2880080c 	andi	r2,r5,32
  80e024:	10041326 	beq	r2,zero,80f074 <___vfprintf_internal_r+0x12f4>
  80e028:	d8819f17 	ldw	r2,1660(sp)
  80e02c:	00c00044 	movi	r3,1
  80e030:	14000017 	ldw	r16,0(r2)
  80e034:	14400117 	ldw	r17,4(r2)
  80e038:	11c00204 	addi	r7,r2,8
  80e03c:	d9c19f15 	stw	r7,1660(sp)
  80e040:	d8019c05 	stb	zero,1648(sp)
  80e044:	dd01a715 	stw	r20,1692(sp)
  80e048:	a0000416 	blt	r20,zero,80e05c <___vfprintf_internal_r+0x2dc>
  80e04c:	d941a017 	ldw	r5,1664(sp)
  80e050:	00bfdfc4 	movi	r2,-129
  80e054:	288a703a 	and	r5,r5,r2
  80e058:	d941a015 	stw	r5,1664(sp)
  80e05c:	d9c00404 	addi	r7,sp,16
  80e060:	8444b03a 	or	r2,r16,r17
  80e064:	3cc06c04 	addi	r19,r7,432
  80e068:	1000021e 	bne	r2,zero,80e074 <___vfprintf_internal_r+0x2f4>
  80e06c:	d881a717 	ldw	r2,1692(sp)
  80e070:	10035f26 	beq	r2,zero,80edf0 <___vfprintf_internal_r+0x1070>
  80e074:	18c03fcc 	andi	r3,r3,255
  80e078:	00800044 	movi	r2,1
  80e07c:	1880ec26 	beq	r3,r2,80e430 <___vfprintf_internal_r+0x6b0>
  80e080:	10c34a16 	blt	r2,r3,80edac <___vfprintf_internal_r+0x102c>
  80e084:	1800f626 	beq	r3,zero,80e460 <___vfprintf_internal_r+0x6e0>
  80e088:	04c020b4 	movhi	r19,130
  80e08c:	9ce76e04 	addi	r19,r19,-25160
  80e090:	9809883a 	mov	r4,r19
  80e094:	080dccc0 	call	80dccc <strlen>
  80e098:	102f883a 	mov	r23,r2
  80e09c:	d881a717 	ldw	r2,1692(sp)
  80e0a0:	ddc1a815 	stw	r23,1696(sp)
  80e0a4:	b880010e 	bge	r23,r2,80e0ac <___vfprintf_internal_r+0x32c>
  80e0a8:	d881a815 	stw	r2,1696(sp)
  80e0ac:	d8c19c03 	ldbu	r3,1648(sp)
  80e0b0:	18023726 	beq	r3,zero,80e990 <___vfprintf_internal_r+0xc10>
  80e0b4:	d901a817 	ldw	r4,1696(sp)
  80e0b8:	21000044 	addi	r4,r4,1
  80e0bc:	d901a815 	stw	r4,1696(sp)
  80e0c0:	d881a017 	ldw	r2,1664(sp)
  80e0c4:	1080210c 	andi	r2,r2,132
  80e0c8:	d881ab15 	stw	r2,1708(sp)
  80e0cc:	10002e1e 	bne	r2,zero,80e188 <___vfprintf_internal_r+0x408>
  80e0d0:	d941a217 	ldw	r5,1672(sp)
  80e0d4:	d901a817 	ldw	r4,1696(sp)
  80e0d8:	2921c83a 	sub	r16,r5,r4
  80e0dc:	04002a0e 	bge	zero,r16,80e188 <___vfprintf_internal_r+0x408>
  80e0e0:	04400404 	movi	r17,16
  80e0e4:	8c001a0e 	bge	r17,r16,80e150 <___vfprintf_internal_r+0x3d0>
  80e0e8:	882b883a 	mov	r21,r17
  80e0ec:	050001c4 	movi	r20,7
  80e0f0:	00000206 	br	80e0fc <___vfprintf_internal_r+0x37c>
  80e0f4:	843ffc04 	addi	r16,r16,-16
  80e0f8:	ac00150e 	bge	r21,r16,80e150 <___vfprintf_internal_r+0x3d0>
  80e0fc:	d8800817 	ldw	r2,32(sp)
  80e100:	d8c00717 	ldw	r3,28(sp)
  80e104:	01c020b4 	movhi	r7,130
  80e108:	39e70d04 	addi	r7,r7,-25548
  80e10c:	10800404 	addi	r2,r2,16
  80e110:	18c00044 	addi	r3,r3,1
  80e114:	91c00015 	stw	r7,0(r18)
  80e118:	94400115 	stw	r17,4(r18)
  80e11c:	d8800815 	stw	r2,32(sp)
  80e120:	d8c00715 	stw	r3,28(sp)
  80e124:	94800204 	addi	r18,r18,8
  80e128:	a0fff20e 	bge	r20,r3,80e0f4 <___vfprintf_internal_r+0x374>
  80e12c:	d9019e17 	ldw	r4,1656(sp)
  80e130:	d8800404 	addi	r2,sp,16
  80e134:	11400204 	addi	r5,r2,8
  80e138:	080dd280 	call	80dd28 <__sprint>
  80e13c:	1002ca1e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80e140:	d8c00404 	addi	r3,sp,16
  80e144:	843ffc04 	addi	r16,r16,-16
  80e148:	1c800504 	addi	r18,r3,20
  80e14c:	ac3feb16 	blt	r21,r16,80e0fc <___vfprintf_internal_r+0x37c>
  80e150:	d8800817 	ldw	r2,32(sp)
  80e154:	d8c00717 	ldw	r3,28(sp)
  80e158:	010020b4 	movhi	r4,130
  80e15c:	21270d04 	addi	r4,r4,-25548
  80e160:	1405883a 	add	r2,r2,r16
  80e164:	18c00044 	addi	r3,r3,1
  80e168:	d8800815 	stw	r2,32(sp)
  80e16c:	008001c4 	movi	r2,7
  80e170:	91000015 	stw	r4,0(r18)
  80e174:	94000115 	stw	r16,4(r18)
  80e178:	d8c00715 	stw	r3,28(sp)
  80e17c:	94800204 	addi	r18,r18,8
  80e180:	10c37716 	blt	r2,r3,80ef60 <___vfprintf_internal_r+0x11e0>
  80e184:	d8c19c03 	ldbu	r3,1648(sp)
  80e188:	18803fcc 	andi	r2,r3,255
  80e18c:	1080201c 	xori	r2,r2,128
  80e190:	10bfe004 	addi	r2,r2,-128
  80e194:	10020526 	beq	r2,zero,80e9ac <___vfprintf_internal_r+0xc2c>
  80e198:	d9000817 	ldw	r4,32(sp)
  80e19c:	d9400717 	ldw	r5,28(sp)
  80e1a0:	d8819c04 	addi	r2,sp,1648
  80e1a4:	90800015 	stw	r2,0(r18)
  80e1a8:	21000044 	addi	r4,r4,1
  80e1ac:	29400044 	addi	r5,r5,1
  80e1b0:	00c00044 	movi	r3,1
  80e1b4:	008001c4 	movi	r2,7
  80e1b8:	90c00115 	stw	r3,4(r18)
  80e1bc:	d9000815 	stw	r4,32(sp)
  80e1c0:	94800204 	addi	r18,r18,8
  80e1c4:	d9400715 	stw	r5,28(sp)
  80e1c8:	11431216 	blt	r2,r5,80ee14 <___vfprintf_internal_r+0x1094>
  80e1cc:	d8c1ab17 	ldw	r3,1708(sp)
  80e1d0:	00802004 	movi	r2,128
  80e1d4:	18821226 	beq	r3,r2,80ea20 <___vfprintf_internal_r+0xca0>
  80e1d8:	d8c1a717 	ldw	r3,1692(sp)
  80e1dc:	1de1c83a 	sub	r16,r3,r23
  80e1e0:	0400300e 	bge	zero,r16,80e2a4 <___vfprintf_internal_r+0x524>
  80e1e4:	04400404 	movi	r17,16
  80e1e8:	8c001a0e 	bge	r17,r16,80e254 <___vfprintf_internal_r+0x4d4>
  80e1ec:	882b883a 	mov	r21,r17
  80e1f0:	050001c4 	movi	r20,7
  80e1f4:	00000206 	br	80e200 <___vfprintf_internal_r+0x480>
  80e1f8:	843ffc04 	addi	r16,r16,-16
  80e1fc:	ac00150e 	bge	r21,r16,80e254 <___vfprintf_internal_r+0x4d4>
  80e200:	d8800817 	ldw	r2,32(sp)
  80e204:	d8c00717 	ldw	r3,28(sp)
  80e208:	010020b4 	movhi	r4,130
  80e20c:	21271104 	addi	r4,r4,-25532
  80e210:	10800404 	addi	r2,r2,16
  80e214:	18c00044 	addi	r3,r3,1
  80e218:	91000015 	stw	r4,0(r18)
  80e21c:	94400115 	stw	r17,4(r18)
  80e220:	d8800815 	stw	r2,32(sp)
  80e224:	d8c00715 	stw	r3,28(sp)
  80e228:	94800204 	addi	r18,r18,8
  80e22c:	a0fff20e 	bge	r20,r3,80e1f8 <___vfprintf_internal_r+0x478>
  80e230:	d9019e17 	ldw	r4,1656(sp)
  80e234:	d9c00404 	addi	r7,sp,16
  80e238:	39400204 	addi	r5,r7,8
  80e23c:	080dd280 	call	80dd28 <__sprint>
  80e240:	1002891e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80e244:	d8800404 	addi	r2,sp,16
  80e248:	843ffc04 	addi	r16,r16,-16
  80e24c:	14800504 	addi	r18,r2,20
  80e250:	ac3feb16 	blt	r21,r16,80e200 <___vfprintf_internal_r+0x480>
  80e254:	d8800817 	ldw	r2,32(sp)
  80e258:	d8c00717 	ldw	r3,28(sp)
  80e25c:	010020b4 	movhi	r4,130
  80e260:	21271104 	addi	r4,r4,-25532
  80e264:	1405883a 	add	r2,r2,r16
  80e268:	18c00044 	addi	r3,r3,1
  80e26c:	d8800815 	stw	r2,32(sp)
  80e270:	008001c4 	movi	r2,7
  80e274:	91000015 	stw	r4,0(r18)
  80e278:	94000115 	stw	r16,4(r18)
  80e27c:	d8c00715 	stw	r3,28(sp)
  80e280:	94800204 	addi	r18,r18,8
  80e284:	10c0070e 	bge	r2,r3,80e2a4 <___vfprintf_internal_r+0x524>
  80e288:	d9019e17 	ldw	r4,1656(sp)
  80e28c:	d9c00404 	addi	r7,sp,16
  80e290:	39400204 	addi	r5,r7,8
  80e294:	080dd280 	call	80dd28 <__sprint>
  80e298:	1002731e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80e29c:	d8800404 	addi	r2,sp,16
  80e2a0:	14800504 	addi	r18,r2,20
  80e2a4:	d8c1a017 	ldw	r3,1664(sp)
  80e2a8:	1880400c 	andi	r2,r3,256
  80e2ac:	1002111e 	bne	r2,zero,80eaf4 <___vfprintf_internal_r+0xd74>
  80e2b0:	d8800817 	ldw	r2,32(sp)
  80e2b4:	d8c00717 	ldw	r3,28(sp)
  80e2b8:	94c00015 	stw	r19,0(r18)
  80e2bc:	15c5883a 	add	r2,r2,r23
  80e2c0:	18c00044 	addi	r3,r3,1
  80e2c4:	d8800815 	stw	r2,32(sp)
  80e2c8:	008001c4 	movi	r2,7
  80e2cc:	95c00115 	stw	r23,4(r18)
  80e2d0:	d8c00715 	stw	r3,28(sp)
  80e2d4:	94800204 	addi	r18,r18,8
  80e2d8:	10c25816 	blt	r2,r3,80ec3c <___vfprintf_internal_r+0xebc>
  80e2dc:	d8c1a017 	ldw	r3,1664(sp)
  80e2e0:	1880010c 	andi	r2,r3,4
  80e2e4:	10003126 	beq	r2,zero,80e3ac <___vfprintf_internal_r+0x62c>
  80e2e8:	d941a217 	ldw	r5,1672(sp)
  80e2ec:	d901a817 	ldw	r4,1696(sp)
  80e2f0:	2921c83a 	sub	r16,r5,r4
  80e2f4:	04002d0e 	bge	zero,r16,80e3ac <___vfprintf_internal_r+0x62c>
  80e2f8:	04400404 	movi	r17,16
  80e2fc:	8c001a0e 	bge	r17,r16,80e368 <___vfprintf_internal_r+0x5e8>
  80e300:	8829883a 	mov	r20,r17
  80e304:	04c001c4 	movi	r19,7
  80e308:	00000206 	br	80e314 <___vfprintf_internal_r+0x594>
  80e30c:	843ffc04 	addi	r16,r16,-16
  80e310:	a400150e 	bge	r20,r16,80e368 <___vfprintf_internal_r+0x5e8>
  80e314:	d8800817 	ldw	r2,32(sp)
  80e318:	d8c00717 	ldw	r3,28(sp)
  80e31c:	01c020b4 	movhi	r7,130
  80e320:	39e70d04 	addi	r7,r7,-25548
  80e324:	10800404 	addi	r2,r2,16
  80e328:	18c00044 	addi	r3,r3,1
  80e32c:	91c00015 	stw	r7,0(r18)
  80e330:	94400115 	stw	r17,4(r18)
  80e334:	d8800815 	stw	r2,32(sp)
  80e338:	d8c00715 	stw	r3,28(sp)
  80e33c:	94800204 	addi	r18,r18,8
  80e340:	98fff20e 	bge	r19,r3,80e30c <___vfprintf_internal_r+0x58c>
  80e344:	d9019e17 	ldw	r4,1656(sp)
  80e348:	d8800404 	addi	r2,sp,16
  80e34c:	11400204 	addi	r5,r2,8
  80e350:	080dd280 	call	80dd28 <__sprint>
  80e354:	1002441e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80e358:	d8c00404 	addi	r3,sp,16
  80e35c:	843ffc04 	addi	r16,r16,-16
  80e360:	1c800504 	addi	r18,r3,20
  80e364:	a43feb16 	blt	r20,r16,80e314 <___vfprintf_internal_r+0x594>
  80e368:	d8800817 	ldw	r2,32(sp)
  80e36c:	d8c00717 	ldw	r3,28(sp)
  80e370:	010020b4 	movhi	r4,130
  80e374:	21270d04 	addi	r4,r4,-25548
  80e378:	1405883a 	add	r2,r2,r16
  80e37c:	18c00044 	addi	r3,r3,1
  80e380:	d8800815 	stw	r2,32(sp)
  80e384:	008001c4 	movi	r2,7
  80e388:	91000015 	stw	r4,0(r18)
  80e38c:	94000115 	stw	r16,4(r18)
  80e390:	d8c00715 	stw	r3,28(sp)
  80e394:	10c0050e 	bge	r2,r3,80e3ac <___vfprintf_internal_r+0x62c>
  80e398:	d9019e17 	ldw	r4,1656(sp)
  80e39c:	d9c00404 	addi	r7,sp,16
  80e3a0:	39400204 	addi	r5,r7,8
  80e3a4:	080dd280 	call	80dd28 <__sprint>
  80e3a8:	10022f1e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80e3ac:	d881a817 	ldw	r2,1696(sp)
  80e3b0:	d8c1a217 	ldw	r3,1672(sp)
  80e3b4:	10c0010e 	bge	r2,r3,80e3bc <___vfprintf_internal_r+0x63c>
  80e3b8:	1805883a 	mov	r2,r3
  80e3bc:	d901a117 	ldw	r4,1668(sp)
  80e3c0:	2089883a 	add	r4,r4,r2
  80e3c4:	d8800817 	ldw	r2,32(sp)
  80e3c8:	d901a115 	stw	r4,1668(sp)
  80e3cc:	1002311e 	bne	r2,zero,80ec94 <___vfprintf_internal_r+0xf14>
  80e3d0:	d8c1aa17 	ldw	r3,1704(sp)
  80e3d4:	d8800404 	addi	r2,sp,16
  80e3d8:	d8000715 	stw	zero,28(sp)
  80e3dc:	14800504 	addi	r18,r2,20
  80e3e0:	183e8e26 	beq	r3,zero,80de1c <___vfprintf_internal_r+0x9c>
  80e3e4:	1809883a 	mov	r4,r3
  80e3e8:	080cf900 	call	80cf90 <free>
  80e3ec:	d801aa15 	stw	zero,1704(sp)
  80e3f0:	003e8a06 	br	80de1c <___vfprintf_internal_r+0x9c>
  80e3f4:	8009883a 	mov	r4,r16
  80e3f8:	880b883a 	mov	r5,r17
  80e3fc:	01800284 	movi	r6,10
  80e400:	000f883a 	mov	r7,zero
  80e404:	08142540 	call	814254 <__umoddi3>
  80e408:	11000c04 	addi	r4,r2,48
  80e40c:	9cffffc4 	addi	r19,r19,-1
  80e410:	99000005 	stb	r4,0(r19)
  80e414:	880b883a 	mov	r5,r17
  80e418:	8009883a 	mov	r4,r16
  80e41c:	01800284 	movi	r6,10
  80e420:	000f883a 	mov	r7,zero
  80e424:	0813cf40 	call	813cf4 <__udivdi3>
  80e428:	1021883a 	mov	r16,r2
  80e42c:	1823883a 	mov	r17,r3
  80e430:	88800068 	cmpgeui	r2,r17,1
  80e434:	103fef1e 	bne	r2,zero,80e3f4 <___vfprintf_internal_r+0x674>
  80e438:	8800021e 	bne	r17,zero,80e444 <___vfprintf_internal_r+0x6c4>
  80e43c:	00800244 	movi	r2,9
  80e440:	143fec36 	bltu	r2,r16,80e3f4 <___vfprintf_internal_r+0x674>
  80e444:	9cffffc4 	addi	r19,r19,-1
  80e448:	80800c04 	addi	r2,r16,48
  80e44c:	98800005 	stb	r2,0(r19)
  80e450:	d9400404 	addi	r5,sp,16
  80e454:	2cc5c83a 	sub	r2,r5,r19
  80e458:	15c06c04 	addi	r23,r2,432
  80e45c:	003f0f06 	br	80e09c <___vfprintf_internal_r+0x31c>
  80e460:	8008d0fa 	srli	r4,r16,3
  80e464:	880a977a 	slli	r5,r17,29
  80e468:	8806d0fa 	srli	r3,r17,3
  80e46c:	818001cc 	andi	r6,r16,7
  80e470:	2904b03a 	or	r2,r5,r4
  80e474:	9cffffc4 	addi	r19,r19,-1
  80e478:	31800c04 	addi	r6,r6,48
  80e47c:	10c8b03a 	or	r4,r2,r3
  80e480:	99800005 	stb	r6,0(r19)
  80e484:	1021883a 	mov	r16,r2
  80e488:	1823883a 	mov	r17,r3
  80e48c:	203ff41e 	bne	r4,zero,80e460 <___vfprintf_internal_r+0x6e0>
  80e490:	d8c1a017 	ldw	r3,1664(sp)
  80e494:	1880004c 	andi	r2,r3,1
  80e498:	103fed26 	beq	r2,zero,80e450 <___vfprintf_internal_r+0x6d0>
  80e49c:	00800c04 	movi	r2,48
  80e4a0:	30bfeb26 	beq	r6,r2,80e450 <___vfprintf_internal_r+0x6d0>
  80e4a4:	9cffffc4 	addi	r19,r19,-1
  80e4a8:	003fe806 	br	80e44c <___vfprintf_internal_r+0x6cc>
  80e4ac:	d881a017 	ldw	r2,1664(sp)
  80e4b0:	10800414 	ori	r2,r2,16
  80e4b4:	d881a015 	stw	r2,1664(sp)
  80e4b8:	d8c1a017 	ldw	r3,1664(sp)
  80e4bc:	1880080c 	andi	r2,r3,32
  80e4c0:	1002f626 	beq	r2,zero,80f09c <___vfprintf_internal_r+0x131c>
  80e4c4:	d8819f17 	ldw	r2,1660(sp)
  80e4c8:	0007883a 	mov	r3,zero
  80e4cc:	14000017 	ldw	r16,0(r2)
  80e4d0:	14400117 	ldw	r17,4(r2)
  80e4d4:	11000204 	addi	r4,r2,8
  80e4d8:	d9019f15 	stw	r4,1660(sp)
  80e4dc:	003ed806 	br	80e040 <___vfprintf_internal_r+0x2c0>
  80e4e0:	d9c1a017 	ldw	r7,1664(sp)
  80e4e4:	39c00414 	ori	r7,r7,16
  80e4e8:	d9c1a015 	stw	r7,1664(sp)
  80e4ec:	d8c1a017 	ldw	r3,1664(sp)
  80e4f0:	1880080c 	andi	r2,r3,32
  80e4f4:	1002d426 	beq	r2,zero,80f048 <___vfprintf_internal_r+0x12c8>
  80e4f8:	d8819f17 	ldw	r2,1660(sp)
  80e4fc:	14400117 	ldw	r17,4(r2)
  80e500:	11000204 	addi	r4,r2,8
  80e504:	14000017 	ldw	r16,0(r2)
  80e508:	d9019f15 	stw	r4,1660(sp)
  80e50c:	88011216 	blt	r17,zero,80e958 <___vfprintf_internal_r+0xbd8>
  80e510:	00c00044 	movi	r3,1
  80e514:	003ecb06 	br	80e044 <___vfprintf_internal_r+0x2c4>
  80e518:	d8819f17 	ldw	r2,1660(sp)
  80e51c:	d9c19f17 	ldw	r7,1660(sp)
  80e520:	10800017 	ldw	r2,0(r2)
  80e524:	39c00104 	addi	r7,r7,4
  80e528:	d9c19f15 	stw	r7,1660(sp)
  80e52c:	d881a215 	stw	r2,1672(sp)
  80e530:	1001070e 	bge	r2,zero,80e950 <___vfprintf_internal_r+0xbd0>
  80e534:	0085c83a 	sub	r2,zero,r2
  80e538:	d881a215 	stw	r2,1672(sp)
  80e53c:	d881a017 	ldw	r2,1664(sp)
  80e540:	b1000003 	ldbu	r4,0(r22)
  80e544:	10800114 	ori	r2,r2,4
  80e548:	d881a015 	stw	r2,1664(sp)
  80e54c:	003e5d06 	br	80dec4 <___vfprintf_internal_r+0x144>
  80e550:	e001bd26 	beq	fp,zero,80ec48 <___vfprintf_internal_r+0xec8>
  80e554:	d9c00404 	addi	r7,sp,16
  80e558:	3cc01504 	addi	r19,r7,84
  80e55c:	9f000005 	stb	fp,0(r19)
  80e560:	05c00044 	movi	r23,1
  80e564:	d8019c05 	stb	zero,1648(sp)
  80e568:	003ecc06 	br	80e09c <___vfprintf_internal_r+0x31c>
  80e56c:	d8819f17 	ldw	r2,1660(sp)
  80e570:	14c00017 	ldw	r19,0(r2)
  80e574:	11400104 	addi	r5,r2,4
  80e578:	d8019c05 	stb	zero,1648(sp)
  80e57c:	d9419f15 	stw	r5,1660(sp)
  80e580:	9803d626 	beq	r19,zero,80f4dc <___vfprintf_internal_r+0x175c>
  80e584:	008014c4 	movi	r2,83
  80e588:	e0800326 	beq	fp,r2,80e598 <___vfprintf_internal_r+0x818>
  80e58c:	d9c1a017 	ldw	r7,1664(sp)
  80e590:	3880040c 	andi	r2,r7,16
  80e594:	10035326 	beq	r2,zero,80f2e4 <___vfprintf_internal_r+0x1564>
  80e598:	d9019904 	addi	r4,sp,1636
  80e59c:	000b883a 	mov	r5,zero
  80e5a0:	01800204 	movi	r6,8
  80e5a4:	dcc19b15 	stw	r19,1644(sp)
  80e5a8:	0023883a 	mov	r17,zero
  80e5ac:	002f883a 	mov	r23,zero
  80e5b0:	080d7180 	call	80d718 <memset>
  80e5b4:	a004c116 	blt	r20,zero,80f8bc <___vfprintf_internal_r+0x1b3c>
  80e5b8:	057fffc4 	movi	r21,-1
  80e5bc:	880490ba 	slli	r2,r17,2
  80e5c0:	d8c19b17 	ldw	r3,1644(sp)
  80e5c4:	10c5883a 	add	r2,r2,r3
  80e5c8:	11800017 	ldw	r6,0(r2)
  80e5cc:	30000b26 	beq	r6,zero,80e5fc <___vfprintf_internal_r+0x87c>
  80e5d0:	d9019d17 	ldw	r4,1652(sp)
  80e5d4:	d8800404 	addi	r2,sp,16
  80e5d8:	11401504 	addi	r5,r2,84
  80e5dc:	d9c19904 	addi	r7,sp,1636
  80e5e0:	080fa500 	call	80fa50 <_wcrtomb_r>
  80e5e4:	1541a026 	beq	r2,r21,80ec68 <___vfprintf_internal_r+0xee8>
  80e5e8:	15c5883a 	add	r2,r2,r23
  80e5ec:	a0800316 	blt	r20,r2,80e5fc <___vfprintf_internal_r+0x87c>
  80e5f0:	102f883a 	mov	r23,r2
  80e5f4:	8c400044 	addi	r17,r17,1
  80e5f8:	153ff01e 	bne	r2,r20,80e5bc <___vfprintf_internal_r+0x83c>
  80e5fc:	b83ea726 	beq	r23,zero,80e09c <___vfprintf_internal_r+0x31c>
  80e600:	d9019d17 	ldw	r4,1652(sp)
  80e604:	b9400044 	addi	r5,r23,1
  80e608:	080cfa40 	call	80cfa4 <_malloc_r>
  80e60c:	d881aa15 	stw	r2,1704(sp)
  80e610:	10019526 	beq	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80e614:	d9019904 	addi	r4,sp,1636
  80e618:	000b883a 	mov	r5,zero
  80e61c:	01800204 	movi	r6,8
  80e620:	080d7180 	call	80d718 <memset>
  80e624:	d9019d17 	ldw	r4,1652(sp)
  80e628:	d941aa17 	ldw	r5,1704(sp)
  80e62c:	d8819904 	addi	r2,sp,1636
  80e630:	b80f883a 	mov	r7,r23
  80e634:	d9819b04 	addi	r6,sp,1644
  80e638:	d8800015 	stw	r2,0(sp)
  80e63c:	080fad80 	call	80fad8 <_wcsrtombs_r>
  80e640:	15c1891e 	bne	r2,r23,80ec68 <___vfprintf_internal_r+0xee8>
  80e644:	d8c1aa17 	ldw	r3,1704(sp)
  80e648:	1dc5883a 	add	r2,r3,r23
  80e64c:	1827883a 	mov	r19,r3
  80e650:	10000005 	stb	zero,0(r2)
  80e654:	003e9106 	br	80e09c <___vfprintf_internal_r+0x31c>
  80e658:	d8c1a017 	ldw	r3,1664(sp)
  80e65c:	1880080c 	andi	r2,r3,32
  80e660:	1002fa26 	beq	r2,zero,80f24c <___vfprintf_internal_r+0x14cc>
  80e664:	d8819f17 	ldw	r2,1660(sp)
  80e668:	d8c1a117 	ldw	r3,1668(sp)
  80e66c:	11400017 	ldw	r5,0(r2)
  80e670:	1809d7fa 	srai	r4,r3,31
  80e674:	11c00104 	addi	r7,r2,4
  80e678:	d9c19f15 	stw	r7,1660(sp)
  80e67c:	29000115 	stw	r4,4(r5)
  80e680:	28c00015 	stw	r3,0(r5)
  80e684:	003de506 	br	80de1c <___vfprintf_internal_r+0x9c>
  80e688:	b7000007 	ldb	fp,0(r22)
  80e68c:	00800a84 	movi	r2,42
  80e690:	b5800044 	addi	r22,r22,1
  80e694:	e084cb26 	beq	fp,r2,80f9c4 <___vfprintf_internal_r+0x1c44>
  80e698:	e0bff404 	addi	r2,fp,-48
  80e69c:	00c00244 	movi	r3,9
  80e6a0:	0021883a 	mov	r16,zero
  80e6a4:	18800736 	bltu	r3,r2,80e6c4 <___vfprintf_internal_r+0x944>
  80e6a8:	808002a4 	muli	r2,r16,10
  80e6ac:	1705883a 	add	r2,r2,fp
  80e6b0:	b7000007 	ldb	fp,0(r22)
  80e6b4:	143ff404 	addi	r16,r2,-48
  80e6b8:	b5800044 	addi	r22,r22,1
  80e6bc:	e0bff404 	addi	r2,fp,-48
  80e6c0:	18bff92e 	bgeu	r3,r2,80e6a8 <___vfprintf_internal_r+0x928>
  80e6c4:	00bfffc4 	movi	r2,-1
  80e6c8:	8029883a 	mov	r20,r16
  80e6cc:	80be010e 	bge	r16,r2,80ded4 <___vfprintf_internal_r+0x154>
  80e6d0:	1029883a 	mov	r20,r2
  80e6d4:	003dff06 	br	80ded4 <___vfprintf_internal_r+0x154>
  80e6d8:	b1000003 	ldbu	r4,0(r22)
  80e6dc:	00801b04 	movi	r2,108
  80e6e0:	20c03fcc 	andi	r3,r4,255
  80e6e4:	18c0201c 	xori	r3,r3,128
  80e6e8:	18ffe004 	addi	r3,r3,-128
  80e6ec:	18835226 	beq	r3,r2,80f438 <___vfprintf_internal_r+0x16b8>
  80e6f0:	d941a017 	ldw	r5,1664(sp)
  80e6f4:	29400414 	ori	r5,r5,16
  80e6f8:	d941a015 	stw	r5,1664(sp)
  80e6fc:	003df106 	br	80dec4 <___vfprintf_internal_r+0x144>
  80e700:	b1000003 	ldbu	r4,0(r22)
  80e704:	00800ac4 	movi	r2,43
  80e708:	d8819c05 	stb	r2,1648(sp)
  80e70c:	003ded06 	br	80dec4 <___vfprintf_internal_r+0x144>
  80e710:	d9c1a017 	ldw	r7,1664(sp)
  80e714:	b1000003 	ldbu	r4,0(r22)
  80e718:	39c00814 	ori	r7,r7,32
  80e71c:	d9c1a015 	stw	r7,1664(sp)
  80e720:	003de806 	br	80dec4 <___vfprintf_internal_r+0x144>
  80e724:	d8819f17 	ldw	r2,1660(sp)
  80e728:	010020b4 	movhi	r4,130
  80e72c:	21277504 	addi	r4,r4,-25132
  80e730:	0023883a 	mov	r17,zero
  80e734:	11c00104 	addi	r7,r2,4
  80e738:	14000017 	ldw	r16,0(r2)
  80e73c:	d881a017 	ldw	r2,1664(sp)
  80e740:	00c00084 	movi	r3,2
  80e744:	07001e04 	movi	fp,120
  80e748:	10800094 	ori	r2,r2,2
  80e74c:	d9c19f15 	stw	r7,1660(sp)
  80e750:	d881a015 	stw	r2,1664(sp)
  80e754:	d901a915 	stw	r4,1700(sp)
  80e758:	003e3906 	br	80e040 <___vfprintf_internal_r+0x2c0>
  80e75c:	d941a017 	ldw	r5,1664(sp)
  80e760:	010020b4 	movhi	r4,130
  80e764:	21277504 	addi	r4,r4,-25132
  80e768:	d901a915 	stw	r4,1700(sp)
  80e76c:	2880080c 	andi	r2,r5,32
  80e770:	10003326 	beq	r2,zero,80e840 <___vfprintf_internal_r+0xac0>
  80e774:	d8819f17 	ldw	r2,1660(sp)
  80e778:	14000017 	ldw	r16,0(r2)
  80e77c:	14400117 	ldw	r17,4(r2)
  80e780:	11c00204 	addi	r7,r2,8
  80e784:	d9c19f15 	stw	r7,1660(sp)
  80e788:	d8c1a017 	ldw	r3,1664(sp)
  80e78c:	1880004c 	andi	r2,r3,1
  80e790:	00c00084 	movi	r3,2
  80e794:	103e2a26 	beq	r2,zero,80e040 <___vfprintf_internal_r+0x2c0>
  80e798:	8444b03a 	or	r2,r16,r17
  80e79c:	103e2826 	beq	r2,zero,80e040 <___vfprintf_internal_r+0x2c0>
  80e7a0:	d901a017 	ldw	r4,1664(sp)
  80e7a4:	21000094 	ori	r4,r4,2
  80e7a8:	d901a015 	stw	r4,1664(sp)
  80e7ac:	003e2406 	br	80e040 <___vfprintf_internal_r+0x2c0>
  80e7b0:	d941a017 	ldw	r5,1664(sp)
  80e7b4:	b1000003 	ldbu	r4,0(r22)
  80e7b8:	29400054 	ori	r5,r5,1
  80e7bc:	d941a015 	stw	r5,1664(sp)
  80e7c0:	003dc006 	br	80dec4 <___vfprintf_internal_r+0x144>
  80e7c4:	d8800404 	addi	r2,sp,16
  80e7c8:	14c01504 	addi	r19,r2,84
  80e7cc:	008010c4 	movi	r2,67
  80e7d0:	e0800326 	beq	fp,r2,80e7e0 <___vfprintf_internal_r+0xa60>
  80e7d4:	d8c1a017 	ldw	r3,1664(sp)
  80e7d8:	1880040c 	andi	r2,r3,16
  80e7dc:	1002b626 	beq	r2,zero,80f2b8 <___vfprintf_internal_r+0x1538>
  80e7e0:	d9019204 	addi	r4,sp,1608
  80e7e4:	000b883a 	mov	r5,zero
  80e7e8:	01800204 	movi	r6,8
  80e7ec:	080d7180 	call	80d718 <memset>
  80e7f0:	d8c19f17 	ldw	r3,1660(sp)
  80e7f4:	d9019d17 	ldw	r4,1652(sp)
  80e7f8:	980b883a 	mov	r5,r19
  80e7fc:	19800017 	ldw	r6,0(r3)
  80e800:	d9c19204 	addi	r7,sp,1608
  80e804:	080fa500 	call	80fa50 <_wcrtomb_r>
  80e808:	d9019f17 	ldw	r4,1660(sp)
  80e80c:	102f883a 	mov	r23,r2
  80e810:	00bfffc4 	movi	r2,-1
  80e814:	21000104 	addi	r4,r4,4
  80e818:	d9019f15 	stw	r4,1660(sp)
  80e81c:	b8811226 	beq	r23,r2,80ec68 <___vfprintf_internal_r+0xee8>
  80e820:	d8019c05 	stb	zero,1648(sp)
  80e824:	003e1d06 	br	80e09c <___vfprintf_internal_r+0x31c>
  80e828:	d941a017 	ldw	r5,1664(sp)
  80e82c:	00c020b4 	movhi	r3,130
  80e830:	18e77a04 	addi	r3,r3,-25112
  80e834:	d8c1a915 	stw	r3,1700(sp)
  80e838:	2880080c 	andi	r2,r5,32
  80e83c:	103fcd1e 	bne	r2,zero,80e774 <___vfprintf_internal_r+0x9f4>
  80e840:	d8c1a017 	ldw	r3,1664(sp)
  80e844:	1880040c 	andi	r2,r3,16
  80e848:	10027726 	beq	r2,zero,80f228 <___vfprintf_internal_r+0x14a8>
  80e84c:	d8819f17 	ldw	r2,1660(sp)
  80e850:	0023883a 	mov	r17,zero
  80e854:	14000017 	ldw	r16,0(r2)
  80e858:	11000104 	addi	r4,r2,4
  80e85c:	d9019f15 	stw	r4,1660(sp)
  80e860:	003fc906 	br	80e788 <___vfprintf_internal_r+0xa08>
  80e864:	d881a017 	ldw	r2,1664(sp)
  80e868:	b1000003 	ldbu	r4,0(r22)
  80e86c:	10801014 	ori	r2,r2,64
  80e870:	d881a015 	stw	r2,1664(sp)
  80e874:	003d9306 	br	80dec4 <___vfprintf_internal_r+0x144>
  80e878:	00bfffc4 	movi	r2,-1
  80e87c:	a082f426 	beq	r20,r2,80f450 <___vfprintf_internal_r+0x16d0>
  80e880:	008019c4 	movi	r2,103
  80e884:	e0829426 	beq	fp,r2,80f2d8 <___vfprintf_internal_r+0x1558>
  80e888:	008011c4 	movi	r2,71
  80e88c:	e0829226 	beq	fp,r2,80f2d8 <___vfprintf_internal_r+0x1558>
  80e890:	d9019f17 	ldw	r4,1660(sp)
  80e894:	20800017 	ldw	r2,0(r4)
  80e898:	20c00117 	ldw	r3,4(r4)
  80e89c:	21400204 	addi	r5,r4,8
  80e8a0:	d881a415 	stw	r2,1680(sp)
  80e8a4:	d8c1a515 	stw	r3,1684(sp)
  80e8a8:	d9419f15 	stw	r5,1660(sp)
  80e8ac:	d901a417 	ldw	r4,1680(sp)
  80e8b0:	d941a517 	ldw	r5,1684(sp)
  80e8b4:	0813bf80 	call	813bf8 <isinf>
  80e8b8:	1002d726 	beq	r2,zero,80f418 <___vfprintf_internal_r+0x1698>
  80e8bc:	d901a417 	ldw	r4,1680(sp)
  80e8c0:	d941a517 	ldw	r5,1684(sp)
  80e8c4:	000d883a 	mov	r6,zero
  80e8c8:	000f883a 	mov	r7,zero
  80e8cc:	080ba9c0 	call	80ba9c <__ltdf2>
  80e8d0:	10002a16 	blt	r2,zero,80e97c <___vfprintf_internal_r+0xbfc>
  80e8d4:	04c020b4 	movhi	r19,130
  80e8d8:	9ce77f04 	addi	r19,r19,-25092
  80e8dc:	05c000c4 	movi	r23,3
  80e8e0:	003dee06 	br	80e09c <___vfprintf_internal_r+0x31c>
  80e8e4:	d9c1a017 	ldw	r7,1664(sp)
  80e8e8:	b1000003 	ldbu	r4,0(r22)
  80e8ec:	39c00214 	ori	r7,r7,8
  80e8f0:	d9c1a015 	stw	r7,1664(sp)
  80e8f4:	003d7306 	br	80dec4 <___vfprintf_internal_r+0x144>
  80e8f8:	d8819c07 	ldb	r2,1648(sp)
  80e8fc:	1000141e 	bne	r2,zero,80e950 <___vfprintf_internal_r+0xbd0>
  80e900:	b1000003 	ldbu	r4,0(r22)
  80e904:	00800804 	movi	r2,32
  80e908:	d8819c05 	stb	r2,1648(sp)
  80e90c:	003d6d06 	br	80dec4 <___vfprintf_internal_r+0x144>
  80e910:	0021883a 	mov	r16,zero
  80e914:	00c00244 	movi	r3,9
  80e918:	808002a4 	muli	r2,r16,10
  80e91c:	1705883a 	add	r2,r2,fp
  80e920:	b7000007 	ldb	fp,0(r22)
  80e924:	143ff404 	addi	r16,r2,-48
  80e928:	b5800044 	addi	r22,r22,1
  80e92c:	e0bff404 	addi	r2,fp,-48
  80e930:	18bff92e 	bgeu	r3,r2,80e918 <___vfprintf_internal_r+0xb98>
  80e934:	dc01a215 	stw	r16,1672(sp)
  80e938:	003d6606 	br	80ded4 <___vfprintf_internal_r+0x154>
  80e93c:	d941a017 	ldw	r5,1664(sp)
  80e940:	b1000003 	ldbu	r4,0(r22)
  80e944:	29402014 	ori	r5,r5,128
  80e948:	d941a015 	stw	r5,1664(sp)
  80e94c:	003d5d06 	br	80dec4 <___vfprintf_internal_r+0x144>
  80e950:	b1000003 	ldbu	r4,0(r22)
  80e954:	003d5b06 	br	80dec4 <___vfprintf_internal_r+0x144>
  80e958:	880b883a 	mov	r5,r17
  80e95c:	8009883a 	mov	r4,r16
  80e960:	080bf040 	call	80bf04 <__negdi2>
  80e964:	1021883a 	mov	r16,r2
  80e968:	1823883a 	mov	r17,r3
  80e96c:	00800b44 	movi	r2,45
  80e970:	00c00044 	movi	r3,1
  80e974:	d8819c05 	stb	r2,1648(sp)
  80e978:	003db206 	br	80e044 <___vfprintf_internal_r+0x2c4>
  80e97c:	00800b44 	movi	r2,45
  80e980:	04c020b4 	movhi	r19,130
  80e984:	9ce77f04 	addi	r19,r19,-25092
  80e988:	d8819c05 	stb	r2,1648(sp)
  80e98c:	003fd306 	br	80e8dc <___vfprintf_internal_r+0xb5c>
  80e990:	d941a017 	ldw	r5,1664(sp)
  80e994:	2880008c 	andi	r2,r5,2
  80e998:	103dc926 	beq	r2,zero,80e0c0 <___vfprintf_internal_r+0x340>
  80e99c:	d9c1a817 	ldw	r7,1696(sp)
  80e9a0:	39c00084 	addi	r7,r7,2
  80e9a4:	d9c1a815 	stw	r7,1696(sp)
  80e9a8:	003dc506 	br	80e0c0 <___vfprintf_internal_r+0x340>
  80e9ac:	d941a017 	ldw	r5,1664(sp)
  80e9b0:	2880008c 	andi	r2,r5,2
  80e9b4:	103e0526 	beq	r2,zero,80e1cc <___vfprintf_internal_r+0x44c>
  80e9b8:	d9000817 	ldw	r4,32(sp)
  80e9bc:	d9400717 	ldw	r5,28(sp)
  80e9c0:	00800c04 	movi	r2,48
  80e9c4:	d8807005 	stb	r2,448(sp)
  80e9c8:	df007045 	stb	fp,449(sp)
  80e9cc:	00800084 	movi	r2,2
  80e9d0:	d9c00404 	addi	r7,sp,16
  80e9d4:	90800115 	stw	r2,4(r18)
  80e9d8:	21000084 	addi	r4,r4,2
  80e9dc:	29400044 	addi	r5,r5,1
  80e9e0:	38c06c04 	addi	r3,r7,432
  80e9e4:	008001c4 	movi	r2,7
  80e9e8:	90c00015 	stw	r3,0(r18)
  80e9ec:	d9000815 	stw	r4,32(sp)
  80e9f0:	94800204 	addi	r18,r18,8
  80e9f4:	d9400715 	stw	r5,28(sp)
  80e9f8:	117df40e 	bge	r2,r5,80e1cc <___vfprintf_internal_r+0x44c>
  80e9fc:	d9019e17 	ldw	r4,1656(sp)
  80ea00:	39400204 	addi	r5,r7,8
  80ea04:	080dd280 	call	80dd28 <__sprint>
  80ea08:	1000971e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80ea0c:	d8c1ab17 	ldw	r3,1708(sp)
  80ea10:	d8800404 	addi	r2,sp,16
  80ea14:	14800504 	addi	r18,r2,20
  80ea18:	00802004 	movi	r2,128
  80ea1c:	18bdee1e 	bne	r3,r2,80e1d8 <___vfprintf_internal_r+0x458>
  80ea20:	d941a217 	ldw	r5,1672(sp)
  80ea24:	d901a817 	ldw	r4,1696(sp)
  80ea28:	2921c83a 	sub	r16,r5,r4
  80ea2c:	043dea0e 	bge	zero,r16,80e1d8 <___vfprintf_internal_r+0x458>
  80ea30:	04400404 	movi	r17,16
  80ea34:	8c001a0e 	bge	r17,r16,80eaa0 <___vfprintf_internal_r+0xd20>
  80ea38:	882b883a 	mov	r21,r17
  80ea3c:	050001c4 	movi	r20,7
  80ea40:	00000206 	br	80ea4c <___vfprintf_internal_r+0xccc>
  80ea44:	843ffc04 	addi	r16,r16,-16
  80ea48:	ac00150e 	bge	r21,r16,80eaa0 <___vfprintf_internal_r+0xd20>
  80ea4c:	d8800817 	ldw	r2,32(sp)
  80ea50:	d8c00717 	ldw	r3,28(sp)
  80ea54:	01c020b4 	movhi	r7,130
  80ea58:	39e71104 	addi	r7,r7,-25532
  80ea5c:	10800404 	addi	r2,r2,16
  80ea60:	18c00044 	addi	r3,r3,1
  80ea64:	91c00015 	stw	r7,0(r18)
  80ea68:	94400115 	stw	r17,4(r18)
  80ea6c:	d8800815 	stw	r2,32(sp)
  80ea70:	d8c00715 	stw	r3,28(sp)
  80ea74:	94800204 	addi	r18,r18,8
  80ea78:	a0fff20e 	bge	r20,r3,80ea44 <___vfprintf_internal_r+0xcc4>
  80ea7c:	d9019e17 	ldw	r4,1656(sp)
  80ea80:	d8800404 	addi	r2,sp,16
  80ea84:	11400204 	addi	r5,r2,8
  80ea88:	080dd280 	call	80dd28 <__sprint>
  80ea8c:	1000761e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80ea90:	d8c00404 	addi	r3,sp,16
  80ea94:	843ffc04 	addi	r16,r16,-16
  80ea98:	1c800504 	addi	r18,r3,20
  80ea9c:	ac3feb16 	blt	r21,r16,80ea4c <___vfprintf_internal_r+0xccc>
  80eaa0:	d8800817 	ldw	r2,32(sp)
  80eaa4:	d8c00717 	ldw	r3,28(sp)
  80eaa8:	010020b4 	movhi	r4,130
  80eaac:	21271104 	addi	r4,r4,-25532
  80eab0:	1405883a 	add	r2,r2,r16
  80eab4:	18c00044 	addi	r3,r3,1
  80eab8:	d8800815 	stw	r2,32(sp)
  80eabc:	008001c4 	movi	r2,7
  80eac0:	91000015 	stw	r4,0(r18)
  80eac4:	94000115 	stw	r16,4(r18)
  80eac8:	d8c00715 	stw	r3,28(sp)
  80eacc:	94800204 	addi	r18,r18,8
  80ead0:	10fdc10e 	bge	r2,r3,80e1d8 <___vfprintf_internal_r+0x458>
  80ead4:	d9019e17 	ldw	r4,1656(sp)
  80ead8:	d9c00404 	addi	r7,sp,16
  80eadc:	39400204 	addi	r5,r7,8
  80eae0:	080dd280 	call	80dd28 <__sprint>
  80eae4:	1000601e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80eae8:	d8800404 	addi	r2,sp,16
  80eaec:	14800504 	addi	r18,r2,20
  80eaf0:	003db906 	br	80e1d8 <___vfprintf_internal_r+0x458>
  80eaf4:	00801944 	movi	r2,101
  80eaf8:	17006c0e 	bge	r2,fp,80ecac <___vfprintf_internal_r+0xf2c>
  80eafc:	d901a417 	ldw	r4,1680(sp)
  80eb00:	d941a517 	ldw	r5,1684(sp)
  80eb04:	000d883a 	mov	r6,zero
  80eb08:	000f883a 	mov	r7,zero
  80eb0c:	080b86c0 	call	80b86c <__eqdf2>
  80eb10:	1000c81e 	bne	r2,zero,80ee34 <___vfprintf_internal_r+0x10b4>
  80eb14:	d8800817 	ldw	r2,32(sp)
  80eb18:	d9000717 	ldw	r4,28(sp)
  80eb1c:	04400044 	movi	r17,1
  80eb20:	10800044 	addi	r2,r2,1
  80eb24:	21000044 	addi	r4,r4,1
  80eb28:	00c020b4 	movhi	r3,130
  80eb2c:	18e78004 	addi	r3,r3,-25088
  80eb30:	04c001c4 	movi	r19,7
  80eb34:	90c00015 	stw	r3,0(r18)
  80eb38:	94400115 	stw	r17,4(r18)
  80eb3c:	d8800815 	stw	r2,32(sp)
  80eb40:	d9000715 	stw	r4,28(sp)
  80eb44:	94800204 	addi	r18,r18,8
  80eb48:	9901d316 	blt	r19,r4,80f298 <___vfprintf_internal_r+0x1518>
  80eb4c:	dc019617 	ldw	r16,1624(sp)
  80eb50:	d8819517 	ldw	r2,1620(sp)
  80eb54:	14000316 	blt	r2,r16,80eb64 <___vfprintf_internal_r+0xde4>
  80eb58:	d941a017 	ldw	r5,1664(sp)
  80eb5c:	2880004c 	andi	r2,r5,1
  80eb60:	103dde26 	beq	r2,zero,80e2dc <___vfprintf_internal_r+0x55c>
  80eb64:	d8800817 	ldw	r2,32(sp)
  80eb68:	d8c00717 	ldw	r3,28(sp)
  80eb6c:	d9c1a317 	ldw	r7,1676(sp)
  80eb70:	10800044 	addi	r2,r2,1
  80eb74:	18c00044 	addi	r3,r3,1
  80eb78:	94400115 	stw	r17,4(r18)
  80eb7c:	91c00015 	stw	r7,0(r18)
  80eb80:	d8800815 	stw	r2,32(sp)
  80eb84:	d8c00715 	stw	r3,28(sp)
  80eb88:	94800204 	addi	r18,r18,8
  80eb8c:	98c1e016 	blt	r19,r3,80f310 <___vfprintf_internal_r+0x1590>
  80eb90:	843fffc4 	addi	r16,r16,-1
  80eb94:	043dd10e 	bge	zero,r16,80e2dc <___vfprintf_internal_r+0x55c>
  80eb98:	04400404 	movi	r17,16
  80eb9c:	8c001a0e 	bge	r17,r16,80ec08 <___vfprintf_internal_r+0xe88>
  80eba0:	9829883a 	mov	r20,r19
  80eba4:	8827883a 	mov	r19,r17
  80eba8:	00000206 	br	80ebb4 <___vfprintf_internal_r+0xe34>
  80ebac:	843ffc04 	addi	r16,r16,-16
  80ebb0:	9c00150e 	bge	r19,r16,80ec08 <___vfprintf_internal_r+0xe88>
  80ebb4:	d8800817 	ldw	r2,32(sp)
  80ebb8:	d8c00717 	ldw	r3,28(sp)
  80ebbc:	010020b4 	movhi	r4,130
  80ebc0:	21271104 	addi	r4,r4,-25532
  80ebc4:	10800404 	addi	r2,r2,16
  80ebc8:	18c00044 	addi	r3,r3,1
  80ebcc:	91000015 	stw	r4,0(r18)
  80ebd0:	94400115 	stw	r17,4(r18)
  80ebd4:	d8800815 	stw	r2,32(sp)
  80ebd8:	d8c00715 	stw	r3,28(sp)
  80ebdc:	94800204 	addi	r18,r18,8
  80ebe0:	a0fff20e 	bge	r20,r3,80ebac <___vfprintf_internal_r+0xe2c>
  80ebe4:	d9019e17 	ldw	r4,1656(sp)
  80ebe8:	d9c00404 	addi	r7,sp,16
  80ebec:	39400204 	addi	r5,r7,8
  80ebf0:	080dd280 	call	80dd28 <__sprint>
  80ebf4:	10001c1e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80ebf8:	d8800404 	addi	r2,sp,16
  80ebfc:	843ffc04 	addi	r16,r16,-16
  80ec00:	14800504 	addi	r18,r2,20
  80ec04:	9c3feb16 	blt	r19,r16,80ebb4 <___vfprintf_internal_r+0xe34>
  80ec08:	d8800817 	ldw	r2,32(sp)
  80ec0c:	d8c00717 	ldw	r3,28(sp)
  80ec10:	010020b4 	movhi	r4,130
  80ec14:	21271104 	addi	r4,r4,-25532
  80ec18:	1405883a 	add	r2,r2,r16
  80ec1c:	18c00044 	addi	r3,r3,1
  80ec20:	d8800815 	stw	r2,32(sp)
  80ec24:	008001c4 	movi	r2,7
  80ec28:	91000015 	stw	r4,0(r18)
  80ec2c:	94000115 	stw	r16,4(r18)
  80ec30:	d8c00715 	stw	r3,28(sp)
  80ec34:	94800204 	addi	r18,r18,8
  80ec38:	10fda80e 	bge	r2,r3,80e2dc <___vfprintf_internal_r+0x55c>
  80ec3c:	d9019e17 	ldw	r4,1656(sp)
  80ec40:	d9c00404 	addi	r7,sp,16
  80ec44:	00005306 	br	80ed94 <___vfprintf_internal_r+0x1014>
  80ec48:	d8800817 	ldw	r2,32(sp)
  80ec4c:	10000526 	beq	r2,zero,80ec64 <___vfprintf_internal_r+0xee4>
  80ec50:	d9000404 	addi	r4,sp,16
  80ec54:	21400204 	addi	r5,r4,8
  80ec58:	d9019e17 	ldw	r4,1656(sp)
  80ec5c:	080dd280 	call	80dd28 <__sprint>
  80ec60:	1000011e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80ec64:	d8000715 	stw	zero,28(sp)
  80ec68:	d941aa17 	ldw	r5,1704(sp)
  80ec6c:	28000226 	beq	r5,zero,80ec78 <___vfprintf_internal_r+0xef8>
  80ec70:	2809883a 	mov	r4,r5
  80ec74:	080cf900 	call	80cf90 <free>
  80ec78:	d9c19e17 	ldw	r7,1656(sp)
  80ec7c:	00ffffc4 	movi	r3,-1
  80ec80:	3880030b 	ldhu	r2,12(r7)
  80ec84:	1080100c 	andi	r2,r2,64
  80ec88:	103ccc1e 	bne	r2,zero,80dfbc <___vfprintf_internal_r+0x23c>
  80ec8c:	d8c1a117 	ldw	r3,1668(sp)
  80ec90:	003cca06 	br	80dfbc <___vfprintf_internal_r+0x23c>
  80ec94:	d9019e17 	ldw	r4,1656(sp)
  80ec98:	d9c00404 	addi	r7,sp,16
  80ec9c:	39400204 	addi	r5,r7,8
  80eca0:	080dd280 	call	80dd28 <__sprint>
  80eca4:	103dca26 	beq	r2,zero,80e3d0 <___vfprintf_internal_r+0x650>
  80eca8:	003fef06 	br	80ec68 <___vfprintf_internal_r+0xee8>
  80ecac:	dc019617 	ldw	r16,1624(sp)
  80ecb0:	01000044 	movi	r4,1
  80ecb4:	24000316 	blt	r4,r16,80ecc4 <___vfprintf_internal_r+0xf44>
  80ecb8:	d941a017 	ldw	r5,1664(sp)
  80ecbc:	2904703a 	and	r2,r5,r4
  80ecc0:	10010026 	beq	r2,zero,80f0c4 <___vfprintf_internal_r+0x1344>
  80ecc4:	98800003 	ldbu	r2,0(r19)
  80ecc8:	d9000817 	ldw	r4,32(sp)
  80eccc:	d9400717 	ldw	r5,28(sp)
  80ecd0:	00c00b84 	movi	r3,46
  80ecd4:	d9c00404 	addi	r7,sp,16
  80ecd8:	d8807005 	stb	r2,448(sp)
  80ecdc:	d8c07045 	stb	r3,449(sp)
  80ece0:	21000084 	addi	r4,r4,2
  80ece4:	29400044 	addi	r5,r5,1
  80ece8:	38c06c04 	addi	r3,r7,432
  80ecec:	00800084 	movi	r2,2
  80ecf0:	050001c4 	movi	r20,7
  80ecf4:	90c00015 	stw	r3,0(r18)
  80ecf8:	90800115 	stw	r2,4(r18)
  80ecfc:	d9000815 	stw	r4,32(sp)
  80ed00:	9cc00044 	addi	r19,r19,1
  80ed04:	94800204 	addi	r18,r18,8
  80ed08:	d9400715 	stw	r5,28(sp)
  80ed0c:	04400404 	movi	r17,16
  80ed10:	a140ff16 	blt	r20,r5,80f110 <___vfprintf_internal_r+0x1390>
  80ed14:	d901a417 	ldw	r4,1680(sp)
  80ed18:	d941a517 	ldw	r5,1684(sp)
  80ed1c:	000d883a 	mov	r6,zero
  80ed20:	000f883a 	mov	r7,zero
  80ed24:	080b8f80 	call	80b8f8 <__nedf2>
  80ed28:	10009626 	beq	r2,zero,80ef84 <___vfprintf_internal_r+0x1204>
  80ed2c:	d8c00817 	ldw	r3,32(sp)
  80ed30:	d9000717 	ldw	r4,28(sp)
  80ed34:	80bfffc4 	addi	r2,r16,-1
  80ed38:	1c07883a 	add	r3,r3,r16
  80ed3c:	18ffffc4 	addi	r3,r3,-1
  80ed40:	21000044 	addi	r4,r4,1
  80ed44:	94c00015 	stw	r19,0(r18)
  80ed48:	90800115 	stw	r2,4(r18)
  80ed4c:	d8c00815 	stw	r3,32(sp)
  80ed50:	94800204 	addi	r18,r18,8
  80ed54:	d9000715 	stw	r4,28(sp)
  80ed58:	a100e516 	blt	r20,r4,80f0f0 <___vfprintf_internal_r+0x1370>
  80ed5c:	d8800817 	ldw	r2,32(sp)
  80ed60:	d941a617 	ldw	r5,1688(sp)
  80ed64:	d8c00717 	ldw	r3,28(sp)
  80ed68:	d9c00404 	addi	r7,sp,16
  80ed6c:	1145883a 	add	r2,r2,r5
  80ed70:	18c00044 	addi	r3,r3,1
  80ed74:	d8800815 	stw	r2,32(sp)
  80ed78:	008001c4 	movi	r2,7
  80ed7c:	91c00015 	stw	r7,0(r18)
  80ed80:	91400115 	stw	r5,4(r18)
  80ed84:	d8c00715 	stw	r3,28(sp)
  80ed88:	94800204 	addi	r18,r18,8
  80ed8c:	10fd530e 	bge	r2,r3,80e2dc <___vfprintf_internal_r+0x55c>
  80ed90:	d9019e17 	ldw	r4,1656(sp)
  80ed94:	39400204 	addi	r5,r7,8
  80ed98:	080dd280 	call	80dd28 <__sprint>
  80ed9c:	103fb21e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80eda0:	d8800404 	addi	r2,sp,16
  80eda4:	14800504 	addi	r18,r2,20
  80eda8:	003d4c06 	br	80e2dc <___vfprintf_internal_r+0x55c>
  80edac:	00800084 	movi	r2,2
  80edb0:	18bcb51e 	bne	r3,r2,80e088 <___vfprintf_internal_r+0x308>
  80edb4:	d9c1a917 	ldw	r7,1700(sp)
  80edb8:	800ad13a 	srli	r5,r16,4
  80edbc:	880c973a 	slli	r6,r17,28
  80edc0:	810003cc 	andi	r4,r16,15
  80edc4:	21c9883a 	add	r4,r4,r7
  80edc8:	8806d13a 	srli	r3,r17,4
  80edcc:	3144b03a 	or	r2,r6,r5
  80edd0:	21400003 	ldbu	r5,0(r4)
  80edd4:	9cffffc4 	addi	r19,r19,-1
  80edd8:	10c8b03a 	or	r4,r2,r3
  80eddc:	1021883a 	mov	r16,r2
  80ede0:	1823883a 	mov	r17,r3
  80ede4:	99400005 	stb	r5,0(r19)
  80ede8:	203ff21e 	bne	r4,zero,80edb4 <___vfprintf_internal_r+0x1034>
  80edec:	003d9806 	br	80e450 <___vfprintf_internal_r+0x6d0>
  80edf0:	18803fcc 	andi	r2,r3,255
  80edf4:	103d961e 	bne	r2,zero,80e450 <___vfprintf_internal_r+0x6d0>
  80edf8:	d8c1a017 	ldw	r3,1664(sp)
  80edfc:	1880004c 	andi	r2,r3,1
  80ee00:	103d9326 	beq	r2,zero,80e450 <___vfprintf_internal_r+0x6d0>
  80ee04:	d9000404 	addi	r4,sp,16
  80ee08:	24c06bc4 	addi	r19,r4,431
  80ee0c:	00800c04 	movi	r2,48
  80ee10:	003d8e06 	br	80e44c <___vfprintf_internal_r+0x6cc>
  80ee14:	d9019e17 	ldw	r4,1656(sp)
  80ee18:	d8c00404 	addi	r3,sp,16
  80ee1c:	19400204 	addi	r5,r3,8
  80ee20:	080dd280 	call	80dd28 <__sprint>
  80ee24:	103f901e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80ee28:	d9000404 	addi	r4,sp,16
  80ee2c:	24800504 	addi	r18,r4,20
  80ee30:	003ce606 	br	80e1cc <___vfprintf_internal_r+0x44c>
  80ee34:	d9819517 	ldw	r6,1620(sp)
  80ee38:	01813e0e 	bge	zero,r6,80f334 <___vfprintf_internal_r+0x15b4>
  80ee3c:	dc019617 	ldw	r16,1624(sp)
  80ee40:	3400bb16 	blt	r6,r16,80f130 <___vfprintf_internal_r+0x13b0>
  80ee44:	d8800817 	ldw	r2,32(sp)
  80ee48:	d8c00717 	ldw	r3,28(sp)
  80ee4c:	050001c4 	movi	r20,7
  80ee50:	1405883a 	add	r2,r2,r16
  80ee54:	18c00044 	addi	r3,r3,1
  80ee58:	94c00015 	stw	r19,0(r18)
  80ee5c:	94000115 	stw	r16,4(r18)
  80ee60:	d8800815 	stw	r2,32(sp)
  80ee64:	d8c00715 	stw	r3,28(sp)
  80ee68:	94800204 	addi	r18,r18,8
  80ee6c:	a0c19f16 	blt	r20,r3,80f4ec <___vfprintf_internal_r+0x176c>
  80ee70:	3421c83a 	sub	r16,r6,r16
  80ee74:	0400280e 	bge	zero,r16,80ef18 <___vfprintf_internal_r+0x1198>
  80ee78:	04400404 	movi	r17,16
  80ee7c:	8c00190e 	bge	r17,r16,80eee4 <___vfprintf_internal_r+0x1164>
  80ee80:	8827883a 	mov	r19,r17
  80ee84:	00000206 	br	80ee90 <___vfprintf_internal_r+0x1110>
  80ee88:	843ffc04 	addi	r16,r16,-16
  80ee8c:	9c00150e 	bge	r19,r16,80eee4 <___vfprintf_internal_r+0x1164>
  80ee90:	00c020b4 	movhi	r3,130
  80ee94:	18e71104 	addi	r3,r3,-25532
  80ee98:	90c00015 	stw	r3,0(r18)
  80ee9c:	d8800817 	ldw	r2,32(sp)
  80eea0:	d8c00717 	ldw	r3,28(sp)
  80eea4:	94400115 	stw	r17,4(r18)
  80eea8:	10800404 	addi	r2,r2,16
  80eeac:	18c00044 	addi	r3,r3,1
  80eeb0:	d8800815 	stw	r2,32(sp)
  80eeb4:	d8c00715 	stw	r3,28(sp)
  80eeb8:	94800204 	addi	r18,r18,8
  80eebc:	a0fff20e 	bge	r20,r3,80ee88 <___vfprintf_internal_r+0x1108>
  80eec0:	d9019e17 	ldw	r4,1656(sp)
  80eec4:	d9c00404 	addi	r7,sp,16
  80eec8:	39400204 	addi	r5,r7,8
  80eecc:	080dd280 	call	80dd28 <__sprint>
  80eed0:	103f651e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80eed4:	d8800404 	addi	r2,sp,16
  80eed8:	843ffc04 	addi	r16,r16,-16
  80eedc:	14800504 	addi	r18,r2,20
  80eee0:	9c3feb16 	blt	r19,r16,80ee90 <___vfprintf_internal_r+0x1110>
  80eee4:	d8800817 	ldw	r2,32(sp)
  80eee8:	d8c00717 	ldw	r3,28(sp)
  80eeec:	010020b4 	movhi	r4,130
  80eef0:	21271104 	addi	r4,r4,-25532
  80eef4:	1405883a 	add	r2,r2,r16
  80eef8:	18c00044 	addi	r3,r3,1
  80eefc:	d8800815 	stw	r2,32(sp)
  80ef00:	008001c4 	movi	r2,7
  80ef04:	91000015 	stw	r4,0(r18)
  80ef08:	94000115 	stw	r16,4(r18)
  80ef0c:	d8c00715 	stw	r3,28(sp)
  80ef10:	94800204 	addi	r18,r18,8
  80ef14:	10c1f316 	blt	r2,r3,80f6e4 <___vfprintf_internal_r+0x1964>
  80ef18:	d8c1a017 	ldw	r3,1664(sp)
  80ef1c:	1880004c 	andi	r2,r3,1
  80ef20:	103cee26 	beq	r2,zero,80e2dc <___vfprintf_internal_r+0x55c>
  80ef24:	d9000817 	ldw	r4,32(sp)
  80ef28:	d9400717 	ldw	r5,28(sp)
  80ef2c:	00800044 	movi	r2,1
  80ef30:	90800115 	stw	r2,4(r18)
  80ef34:	21000044 	addi	r4,r4,1
  80ef38:	29400044 	addi	r5,r5,1
  80ef3c:	00c020b4 	movhi	r3,130
  80ef40:	18e78104 	addi	r3,r3,-25084
  80ef44:	008001c4 	movi	r2,7
  80ef48:	90c00015 	stw	r3,0(r18)
  80ef4c:	d9000815 	stw	r4,32(sp)
  80ef50:	94800204 	addi	r18,r18,8
  80ef54:	d9400715 	stw	r5,28(sp)
  80ef58:	117ce00e 	bge	r2,r5,80e2dc <___vfprintf_internal_r+0x55c>
  80ef5c:	003f3706 	br	80ec3c <___vfprintf_internal_r+0xebc>
  80ef60:	d9019e17 	ldw	r4,1656(sp)
  80ef64:	d9c00404 	addi	r7,sp,16
  80ef68:	39400204 	addi	r5,r7,8
  80ef6c:	080dd280 	call	80dd28 <__sprint>
  80ef70:	103f3d1e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80ef74:	d8c19c03 	ldbu	r3,1648(sp)
  80ef78:	d8800404 	addi	r2,sp,16
  80ef7c:	14800504 	addi	r18,r2,20
  80ef80:	003c8106 	br	80e188 <___vfprintf_internal_r+0x408>
  80ef84:	843fffc4 	addi	r16,r16,-1
  80ef88:	043f740e 	bge	zero,r16,80ed5c <___vfprintf_internal_r+0xfdc>
  80ef8c:	8c00190e 	bge	r17,r16,80eff4 <___vfprintf_internal_r+0x1274>
  80ef90:	a027883a 	mov	r19,r20
  80ef94:	00000206 	br	80efa0 <___vfprintf_internal_r+0x1220>
  80ef98:	843ffc04 	addi	r16,r16,-16
  80ef9c:	8c00150e 	bge	r17,r16,80eff4 <___vfprintf_internal_r+0x1274>
  80efa0:	d8800817 	ldw	r2,32(sp)
  80efa4:	d8c00717 	ldw	r3,28(sp)
  80efa8:	014020b4 	movhi	r5,130
  80efac:	29671104 	addi	r5,r5,-25532
  80efb0:	10800404 	addi	r2,r2,16
  80efb4:	18c00044 	addi	r3,r3,1
  80efb8:	91400015 	stw	r5,0(r18)
  80efbc:	94400115 	stw	r17,4(r18)
  80efc0:	d8800815 	stw	r2,32(sp)
  80efc4:	d8c00715 	stw	r3,28(sp)
  80efc8:	94800204 	addi	r18,r18,8
  80efcc:	98fff20e 	bge	r19,r3,80ef98 <___vfprintf_internal_r+0x1218>
  80efd0:	d9019e17 	ldw	r4,1656(sp)
  80efd4:	d9c00404 	addi	r7,sp,16
  80efd8:	39400204 	addi	r5,r7,8
  80efdc:	080dd280 	call	80dd28 <__sprint>
  80efe0:	103f211e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80efe4:	d8800404 	addi	r2,sp,16
  80efe8:	843ffc04 	addi	r16,r16,-16
  80efec:	14800504 	addi	r18,r2,20
  80eff0:	8c3feb16 	blt	r17,r16,80efa0 <___vfprintf_internal_r+0x1220>
  80eff4:	d8800817 	ldw	r2,32(sp)
  80eff8:	d8c00717 	ldw	r3,28(sp)
  80effc:	010020b4 	movhi	r4,130
  80f000:	21271104 	addi	r4,r4,-25532
  80f004:	1405883a 	add	r2,r2,r16
  80f008:	18c00044 	addi	r3,r3,1
  80f00c:	d8800815 	stw	r2,32(sp)
  80f010:	008001c4 	movi	r2,7
  80f014:	91000015 	stw	r4,0(r18)
  80f018:	94000115 	stw	r16,4(r18)
  80f01c:	d8c00715 	stw	r3,28(sp)
  80f020:	94800204 	addi	r18,r18,8
  80f024:	10ff4d0e 	bge	r2,r3,80ed5c <___vfprintf_internal_r+0xfdc>
  80f028:	d9019e17 	ldw	r4,1656(sp)
  80f02c:	d9c00404 	addi	r7,sp,16
  80f030:	39400204 	addi	r5,r7,8
  80f034:	080dd280 	call	80dd28 <__sprint>
  80f038:	103f0b1e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f03c:	d8800404 	addi	r2,sp,16
  80f040:	14800504 	addi	r18,r2,20
  80f044:	003f4506 	br	80ed5c <___vfprintf_internal_r+0xfdc>
  80f048:	d941a017 	ldw	r5,1664(sp)
  80f04c:	2880040c 	andi	r2,r5,16
  80f050:	10006426 	beq	r2,zero,80f1e4 <___vfprintf_internal_r+0x1464>
  80f054:	d8819f17 	ldw	r2,1660(sp)
  80f058:	10c00017 	ldw	r3,0(r2)
  80f05c:	11c00104 	addi	r7,r2,4
  80f060:	d9c19f15 	stw	r7,1660(sp)
  80f064:	1823d7fa 	srai	r17,r3,31
  80f068:	1821883a 	mov	r16,r3
  80f06c:	883d280e 	bge	r17,zero,80e510 <___vfprintf_internal_r+0x790>
  80f070:	003e3906 	br	80e958 <___vfprintf_internal_r+0xbd8>
  80f074:	d8c1a017 	ldw	r3,1664(sp)
  80f078:	1880040c 	andi	r2,r3,16
  80f07c:	10007d26 	beq	r2,zero,80f274 <___vfprintf_internal_r+0x14f4>
  80f080:	d8819f17 	ldw	r2,1660(sp)
  80f084:	0023883a 	mov	r17,zero
  80f088:	14000017 	ldw	r16,0(r2)
  80f08c:	11000104 	addi	r4,r2,4
  80f090:	d9019f15 	stw	r4,1660(sp)
  80f094:	00c00044 	movi	r3,1
  80f098:	003be906 	br	80e040 <___vfprintf_internal_r+0x2c0>
  80f09c:	d941a017 	ldw	r5,1664(sp)
  80f0a0:	2880040c 	andi	r2,r5,16
  80f0a4:	10005726 	beq	r2,zero,80f204 <___vfprintf_internal_r+0x1484>
  80f0a8:	d8819f17 	ldw	r2,1660(sp)
  80f0ac:	0023883a 	mov	r17,zero
  80f0b0:	14000017 	ldw	r16,0(r2)
  80f0b4:	11c00104 	addi	r7,r2,4
  80f0b8:	d9c19f15 	stw	r7,1660(sp)
  80f0bc:	0007883a 	mov	r3,zero
  80f0c0:	003bdf06 	br	80e040 <___vfprintf_internal_r+0x2c0>
  80f0c4:	d8800817 	ldw	r2,32(sp)
  80f0c8:	d8c00717 	ldw	r3,28(sp)
  80f0cc:	94c00015 	stw	r19,0(r18)
  80f0d0:	10800044 	addi	r2,r2,1
  80f0d4:	18c00044 	addi	r3,r3,1
  80f0d8:	d8800815 	stw	r2,32(sp)
  80f0dc:	008001c4 	movi	r2,7
  80f0e0:	91000115 	stw	r4,4(r18)
  80f0e4:	d8c00715 	stw	r3,28(sp)
  80f0e8:	94800204 	addi	r18,r18,8
  80f0ec:	10ff1b0e 	bge	r2,r3,80ed5c <___vfprintf_internal_r+0xfdc>
  80f0f0:	d9019e17 	ldw	r4,1656(sp)
  80f0f4:	d8c00404 	addi	r3,sp,16
  80f0f8:	19400204 	addi	r5,r3,8
  80f0fc:	080dd280 	call	80dd28 <__sprint>
  80f100:	103ed91e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f104:	d9000404 	addi	r4,sp,16
  80f108:	24800504 	addi	r18,r4,20
  80f10c:	003f1306 	br	80ed5c <___vfprintf_internal_r+0xfdc>
  80f110:	d9019e17 	ldw	r4,1656(sp)
  80f114:	39400204 	addi	r5,r7,8
  80f118:	080dd280 	call	80dd28 <__sprint>
  80f11c:	103ed21e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f120:	dc019617 	ldw	r16,1624(sp)
  80f124:	dc45883a 	add	r2,sp,r17
  80f128:	14800504 	addi	r18,r2,20
  80f12c:	003ef906 	br	80ed14 <___vfprintf_internal_r+0xf94>
  80f130:	d8800817 	ldw	r2,32(sp)
  80f134:	d8c00717 	ldw	r3,28(sp)
  80f138:	040001c4 	movi	r16,7
  80f13c:	1185883a 	add	r2,r2,r6
  80f140:	18c00044 	addi	r3,r3,1
  80f144:	94c00015 	stw	r19,0(r18)
  80f148:	91800115 	stw	r6,4(r18)
  80f14c:	d8800815 	stw	r2,32(sp)
  80f150:	d8c00715 	stw	r3,28(sp)
  80f154:	94800204 	addi	r18,r18,8
  80f158:	80c0f716 	blt	r16,r3,80f538 <___vfprintf_internal_r+0x17b8>
  80f15c:	d9000817 	ldw	r4,32(sp)
  80f160:	d9400717 	ldw	r5,28(sp)
  80f164:	008020b4 	movhi	r2,130
  80f168:	10a78104 	addi	r2,r2,-25084
  80f16c:	21000044 	addi	r4,r4,1
  80f170:	29400044 	addi	r5,r5,1
  80f174:	00c00044 	movi	r3,1
  80f178:	90800015 	stw	r2,0(r18)
  80f17c:	90c00115 	stw	r3,4(r18)
  80f180:	d9000815 	stw	r4,32(sp)
  80f184:	99a7883a 	add	r19,r19,r6
  80f188:	94800204 	addi	r18,r18,8
  80f18c:	d9400715 	stw	r5,28(sp)
  80f190:	8140e016 	blt	r16,r5,80f514 <___vfprintf_internal_r+0x1794>
  80f194:	d8819617 	ldw	r2,1624(sp)
  80f198:	d8c00817 	ldw	r3,32(sp)
  80f19c:	d9000717 	ldw	r4,28(sp)
  80f1a0:	1185c83a 	sub	r2,r2,r6
  80f1a4:	1887883a 	add	r3,r3,r2
  80f1a8:	21000044 	addi	r4,r4,1
  80f1ac:	94c00015 	stw	r19,0(r18)
  80f1b0:	90800115 	stw	r2,4(r18)
  80f1b4:	d8c00815 	stw	r3,32(sp)
  80f1b8:	d9000715 	stw	r4,28(sp)
  80f1bc:	94800204 	addi	r18,r18,8
  80f1c0:	813c460e 	bge	r16,r4,80e2dc <___vfprintf_internal_r+0x55c>
  80f1c4:	d9019e17 	ldw	r4,1656(sp)
  80f1c8:	d8c00404 	addi	r3,sp,16
  80f1cc:	19400204 	addi	r5,r3,8
  80f1d0:	080dd280 	call	80dd28 <__sprint>
  80f1d4:	103ea41e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f1d8:	d9000404 	addi	r4,sp,16
  80f1dc:	24800504 	addi	r18,r4,20
  80f1e0:	003c3e06 	br	80e2dc <___vfprintf_internal_r+0x55c>
  80f1e4:	d8c1a017 	ldw	r3,1664(sp)
  80f1e8:	1880100c 	andi	r2,r3,64
  80f1ec:	1000a026 	beq	r2,zero,80f470 <___vfprintf_internal_r+0x16f0>
  80f1f0:	d8819f17 	ldw	r2,1660(sp)
  80f1f4:	10c0000f 	ldh	r3,0(r2)
  80f1f8:	11000104 	addi	r4,r2,4
  80f1fc:	d9019f15 	stw	r4,1660(sp)
  80f200:	003f9806 	br	80f064 <___vfprintf_internal_r+0x12e4>
  80f204:	d8c1a017 	ldw	r3,1664(sp)
  80f208:	1880100c 	andi	r2,r3,64
  80f20c:	1000ad26 	beq	r2,zero,80f4c4 <___vfprintf_internal_r+0x1744>
  80f210:	d8819f17 	ldw	r2,1660(sp)
  80f214:	0023883a 	mov	r17,zero
  80f218:	1400000b 	ldhu	r16,0(r2)
  80f21c:	11000104 	addi	r4,r2,4
  80f220:	d9019f15 	stw	r4,1660(sp)
  80f224:	003fa506 	br	80f0bc <___vfprintf_internal_r+0x133c>
  80f228:	d941a017 	ldw	r5,1664(sp)
  80f22c:	2880100c 	andi	r2,r5,64
  80f230:	10008926 	beq	r2,zero,80f458 <___vfprintf_internal_r+0x16d8>
  80f234:	d8819f17 	ldw	r2,1660(sp)
  80f238:	0023883a 	mov	r17,zero
  80f23c:	1400000b 	ldhu	r16,0(r2)
  80f240:	11c00104 	addi	r7,r2,4
  80f244:	d9c19f15 	stw	r7,1660(sp)
  80f248:	003d4f06 	br	80e788 <___vfprintf_internal_r+0xa08>
  80f24c:	d8c1a017 	ldw	r3,1664(sp)
  80f250:	1880040c 	andi	r2,r3,16
  80f254:	10008b26 	beq	r2,zero,80f484 <___vfprintf_internal_r+0x1704>
  80f258:	d8819f17 	ldw	r2,1660(sp)
  80f25c:	d941a117 	ldw	r5,1668(sp)
  80f260:	10c00017 	ldw	r3,0(r2)
  80f264:	11000104 	addi	r4,r2,4
  80f268:	d9019f15 	stw	r4,1660(sp)
  80f26c:	19400015 	stw	r5,0(r3)
  80f270:	003aea06 	br	80de1c <___vfprintf_internal_r+0x9c>
  80f274:	d941a017 	ldw	r5,1664(sp)
  80f278:	2880100c 	andi	r2,r5,64
  80f27c:	10008b26 	beq	r2,zero,80f4ac <___vfprintf_internal_r+0x172c>
  80f280:	d8819f17 	ldw	r2,1660(sp)
  80f284:	0023883a 	mov	r17,zero
  80f288:	1400000b 	ldhu	r16,0(r2)
  80f28c:	11c00104 	addi	r7,r2,4
  80f290:	d9c19f15 	stw	r7,1660(sp)
  80f294:	003f7f06 	br	80f094 <___vfprintf_internal_r+0x1314>
  80f298:	d9019e17 	ldw	r4,1656(sp)
  80f29c:	d8c00404 	addi	r3,sp,16
  80f2a0:	19400204 	addi	r5,r3,8
  80f2a4:	080dd280 	call	80dd28 <__sprint>
  80f2a8:	103e6f1e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f2ac:	d9000404 	addi	r4,sp,16
  80f2b0:	24800504 	addi	r18,r4,20
  80f2b4:	003e2506 	br	80eb4c <___vfprintf_internal_r+0xdcc>
  80f2b8:	d8819f17 	ldw	r2,1660(sp)
  80f2bc:	05c00044 	movi	r23,1
  80f2c0:	10c00017 	ldw	r3,0(r2)
  80f2c4:	11400104 	addi	r5,r2,4
  80f2c8:	d9419f15 	stw	r5,1660(sp)
  80f2cc:	98c00005 	stb	r3,0(r19)
  80f2d0:	d8019c05 	stb	zero,1648(sp)
  80f2d4:	003b7106 	br	80e09c <___vfprintf_internal_r+0x31c>
  80f2d8:	a03d6d1e 	bne	r20,zero,80e890 <___vfprintf_internal_r+0xb10>
  80f2dc:	05000044 	movi	r20,1
  80f2e0:	003d6b06 	br	80e890 <___vfprintf_internal_r+0xb10>
  80f2e4:	a03b6a16 	blt	r20,zero,80e090 <___vfprintf_internal_r+0x310>
  80f2e8:	9809883a 	mov	r4,r19
  80f2ec:	000b883a 	mov	r5,zero
  80f2f0:	a00d883a 	mov	r6,r20
  80f2f4:	08125b00 	call	8125b0 <memchr>
  80f2f8:	a02f883a 	mov	r23,r20
  80f2fc:	103b6726 	beq	r2,zero,80e09c <___vfprintf_internal_r+0x31c>
  80f300:	14efc83a 	sub	r23,r2,r19
  80f304:	a5fb650e 	bge	r20,r23,80e09c <___vfprintf_internal_r+0x31c>
  80f308:	a02f883a 	mov	r23,r20
  80f30c:	003b6306 	br	80e09c <___vfprintf_internal_r+0x31c>
  80f310:	d9019e17 	ldw	r4,1656(sp)
  80f314:	d8800404 	addi	r2,sp,16
  80f318:	11400204 	addi	r5,r2,8
  80f31c:	080dd280 	call	80dd28 <__sprint>
  80f320:	103e511e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f324:	dc019617 	ldw	r16,1624(sp)
  80f328:	d8c00404 	addi	r3,sp,16
  80f32c:	1c800504 	addi	r18,r3,20
  80f330:	003e1706 	br	80eb90 <___vfprintf_internal_r+0xe10>
  80f334:	d8800817 	ldw	r2,32(sp)
  80f338:	d9000717 	ldw	r4,28(sp)
  80f33c:	04000044 	movi	r16,1
  80f340:	10800044 	addi	r2,r2,1
  80f344:	21000044 	addi	r4,r4,1
  80f348:	00c020b4 	movhi	r3,130
  80f34c:	18e78004 	addi	r3,r3,-25088
  80f350:	050001c4 	movi	r20,7
  80f354:	90c00015 	stw	r3,0(r18)
  80f358:	94000115 	stw	r16,4(r18)
  80f35c:	d8800815 	stw	r2,32(sp)
  80f360:	d9000715 	stw	r4,28(sp)
  80f364:	94800204 	addi	r18,r18,8
  80f368:	a100ed16 	blt	r20,r4,80f720 <___vfprintf_internal_r+0x19a0>
  80f36c:	3000021e 	bne	r6,zero,80f378 <___vfprintf_internal_r+0x15f8>
  80f370:	d8819617 	ldw	r2,1624(sp)
  80f374:	103bd926 	beq	r2,zero,80e2dc <___vfprintf_internal_r+0x55c>
  80f378:	d8800817 	ldw	r2,32(sp)
  80f37c:	d8c00717 	ldw	r3,28(sp)
  80f380:	d941a317 	ldw	r5,1676(sp)
  80f384:	10800044 	addi	r2,r2,1
  80f388:	18c00044 	addi	r3,r3,1
  80f38c:	94000115 	stw	r16,4(r18)
  80f390:	91400015 	stw	r5,0(r18)
  80f394:	d8800815 	stw	r2,32(sp)
  80f398:	d8c00715 	stw	r3,28(sp)
  80f39c:	94800204 	addi	r18,r18,8
  80f3a0:	a0c13316 	blt	r20,r3,80f870 <___vfprintf_internal_r+0x1af0>
  80f3a4:	01a1c83a 	sub	r16,zero,r6
  80f3a8:	0400f30e 	bge	zero,r16,80f778 <___vfprintf_internal_r+0x19f8>
  80f3ac:	04400404 	movi	r17,16
  80f3b0:	8c00e40e 	bge	r17,r16,80f744 <___vfprintf_internal_r+0x19c4>
  80f3b4:	a02b883a 	mov	r21,r20
  80f3b8:	8829883a 	mov	r20,r17
  80f3bc:	00000206 	br	80f3c8 <___vfprintf_internal_r+0x1648>
  80f3c0:	843ffc04 	addi	r16,r16,-16
  80f3c4:	a400df0e 	bge	r20,r16,80f744 <___vfprintf_internal_r+0x19c4>
  80f3c8:	00c020b4 	movhi	r3,130
  80f3cc:	18e71104 	addi	r3,r3,-25532
  80f3d0:	90c00015 	stw	r3,0(r18)
  80f3d4:	d8800817 	ldw	r2,32(sp)
  80f3d8:	d8c00717 	ldw	r3,28(sp)
  80f3dc:	94400115 	stw	r17,4(r18)
  80f3e0:	10800404 	addi	r2,r2,16
  80f3e4:	18c00044 	addi	r3,r3,1
  80f3e8:	d8800815 	stw	r2,32(sp)
  80f3ec:	d8c00715 	stw	r3,28(sp)
  80f3f0:	94800204 	addi	r18,r18,8
  80f3f4:	a8fff20e 	bge	r21,r3,80f3c0 <___vfprintf_internal_r+0x1640>
  80f3f8:	d9019e17 	ldw	r4,1656(sp)
  80f3fc:	d9c00404 	addi	r7,sp,16
  80f400:	39400204 	addi	r5,r7,8
  80f404:	080dd280 	call	80dd28 <__sprint>
  80f408:	103e171e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f40c:	d8800404 	addi	r2,sp,16
  80f410:	14800504 	addi	r18,r2,20
  80f414:	003fea06 	br	80f3c0 <___vfprintf_internal_r+0x1640>
  80f418:	d901a417 	ldw	r4,1680(sp)
  80f41c:	d941a517 	ldw	r5,1684(sp)
  80f420:	080a1500 	call	80a150 <isnan>
  80f424:	10004d26 	beq	r2,zero,80f55c <___vfprintf_internal_r+0x17dc>
  80f428:	04c020b4 	movhi	r19,130
  80f42c:	9ce78204 	addi	r19,r19,-25080
  80f430:	05c000c4 	movi	r23,3
  80f434:	003b1906 	br	80e09c <___vfprintf_internal_r+0x31c>
  80f438:	d8c1a017 	ldw	r3,1664(sp)
  80f43c:	b5800044 	addi	r22,r22,1
  80f440:	b1000003 	ldbu	r4,0(r22)
  80f444:	18c00814 	ori	r3,r3,32
  80f448:	d8c1a015 	stw	r3,1664(sp)
  80f44c:	003a9d06 	br	80dec4 <___vfprintf_internal_r+0x144>
  80f450:	05000184 	movi	r20,6
  80f454:	003d0e06 	br	80e890 <___vfprintf_internal_r+0xb10>
  80f458:	d8819f17 	ldw	r2,1660(sp)
  80f45c:	0023883a 	mov	r17,zero
  80f460:	14000017 	ldw	r16,0(r2)
  80f464:	10800104 	addi	r2,r2,4
  80f468:	d8819f15 	stw	r2,1660(sp)
  80f46c:	003cc606 	br	80e788 <___vfprintf_internal_r+0xa08>
  80f470:	d8819f17 	ldw	r2,1660(sp)
  80f474:	10c00017 	ldw	r3,0(r2)
  80f478:	11400104 	addi	r5,r2,4
  80f47c:	d9419f15 	stw	r5,1660(sp)
  80f480:	003ef806 	br	80f064 <___vfprintf_internal_r+0x12e4>
  80f484:	d9c1a017 	ldw	r7,1664(sp)
  80f488:	3880100c 	andi	r2,r7,64
  80f48c:	10009d26 	beq	r2,zero,80f704 <___vfprintf_internal_r+0x1984>
  80f490:	d8819f17 	ldw	r2,1660(sp)
  80f494:	d901a117 	ldw	r4,1668(sp)
  80f498:	10c00017 	ldw	r3,0(r2)
  80f49c:	10800104 	addi	r2,r2,4
  80f4a0:	d8819f15 	stw	r2,1660(sp)
  80f4a4:	1900000d 	sth	r4,0(r3)
  80f4a8:	003a5c06 	br	80de1c <___vfprintf_internal_r+0x9c>
  80f4ac:	d8819f17 	ldw	r2,1660(sp)
  80f4b0:	0023883a 	mov	r17,zero
  80f4b4:	14000017 	ldw	r16,0(r2)
  80f4b8:	10800104 	addi	r2,r2,4
  80f4bc:	d8819f15 	stw	r2,1660(sp)
  80f4c0:	003ef406 	br	80f094 <___vfprintf_internal_r+0x1314>
  80f4c4:	d8819f17 	ldw	r2,1660(sp)
  80f4c8:	0023883a 	mov	r17,zero
  80f4cc:	14000017 	ldw	r16,0(r2)
  80f4d0:	11400104 	addi	r5,r2,4
  80f4d4:	d9419f15 	stw	r5,1660(sp)
  80f4d8:	003ef806 	br	80f0bc <___vfprintf_internal_r+0x133c>
  80f4dc:	04c020b4 	movhi	r19,130
  80f4e0:	9ce78304 	addi	r19,r19,-25076
  80f4e4:	05c00184 	movi	r23,6
  80f4e8:	003aec06 	br	80e09c <___vfprintf_internal_r+0x31c>
  80f4ec:	d9019e17 	ldw	r4,1656(sp)
  80f4f0:	d9c00404 	addi	r7,sp,16
  80f4f4:	39400204 	addi	r5,r7,8
  80f4f8:	080dd280 	call	80dd28 <__sprint>
  80f4fc:	103dda1e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f500:	d9819517 	ldw	r6,1620(sp)
  80f504:	dc019617 	ldw	r16,1624(sp)
  80f508:	d8800404 	addi	r2,sp,16
  80f50c:	14800504 	addi	r18,r2,20
  80f510:	003e5706 	br	80ee70 <___vfprintf_internal_r+0x10f0>
  80f514:	d9019e17 	ldw	r4,1656(sp)
  80f518:	d9c00404 	addi	r7,sp,16
  80f51c:	39400204 	addi	r5,r7,8
  80f520:	080dd280 	call	80dd28 <__sprint>
  80f524:	103dd01e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f528:	d9819517 	ldw	r6,1620(sp)
  80f52c:	d8800404 	addi	r2,sp,16
  80f530:	14800504 	addi	r18,r2,20
  80f534:	003f1706 	br	80f194 <___vfprintf_internal_r+0x1414>
  80f538:	d9019e17 	ldw	r4,1656(sp)
  80f53c:	d8c00404 	addi	r3,sp,16
  80f540:	19400204 	addi	r5,r3,8
  80f544:	080dd280 	call	80dd28 <__sprint>
  80f548:	103dc71e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f54c:	d9819517 	ldw	r6,1620(sp)
  80f550:	d9000404 	addi	r4,sp,16
  80f554:	24800504 	addi	r18,r4,20
  80f558:	003f0006 	br	80f15c <___vfprintf_internal_r+0x13dc>
  80f55c:	d881a417 	ldw	r2,1680(sp)
  80f560:	d8c1a017 	ldw	r3,1664(sp)
  80f564:	d901a517 	ldw	r4,1684(sp)
  80f568:	1021883a 	mov	r16,r2
  80f56c:	18c04014 	ori	r3,r3,256
  80f570:	00801984 	movi	r2,102
  80f574:	d8c1a015 	stw	r3,1664(sp)
  80f578:	2023883a 	mov	r17,r4
  80f57c:	a02f883a 	mov	r23,r20
  80f580:	d9819404 	addi	r6,sp,1616
  80f584:	01c000c4 	movi	r7,3
  80f588:	e0800526 	beq	fp,r2,80f5a0 <___vfprintf_internal_r+0x1820>
  80f58c:	00801944 	movi	r2,101
  80f590:	e0808626 	beq	fp,r2,80f7ac <___vfprintf_internal_r+0x1a2c>
  80f594:	00801144 	movi	r2,69
  80f598:	e0808426 	beq	fp,r2,80f7ac <___vfprintf_internal_r+0x1a2c>
  80f59c:	01c00084 	movi	r7,2
  80f5a0:	8800e316 	blt	r17,zero,80f930 <___vfprintf_internal_r+0x1bb0>
  80f5a4:	30000005 	stb	zero,0(r6)
  80f5a8:	d9019d17 	ldw	r4,1652(sp)
  80f5ac:	d8819704 	addi	r2,sp,1628
  80f5b0:	d8800215 	stw	r2,8(sp)
  80f5b4:	d8c19804 	addi	r3,sp,1632
  80f5b8:	d8819504 	addi	r2,sp,1620
  80f5bc:	800b883a 	mov	r5,r16
  80f5c0:	880d883a 	mov	r6,r17
  80f5c4:	d8c00315 	stw	r3,12(sp)
  80f5c8:	ddc00015 	stw	r23,0(sp)
  80f5cc:	d8800115 	stw	r2,4(sp)
  80f5d0:	08104700 	call	810470 <_dtoa_r>
  80f5d4:	102b883a 	mov	r21,r2
  80f5d8:	008019c4 	movi	r2,103
  80f5dc:	e0808d26 	beq	fp,r2,80f814 <___vfprintf_internal_r+0x1a94>
  80f5e0:	008011c4 	movi	r2,71
  80f5e4:	e0808b26 	beq	fp,r2,80f814 <___vfprintf_internal_r+0x1a94>
  80f5e8:	00801984 	movi	r2,102
  80f5ec:	ade7883a 	add	r19,r21,r23
  80f5f0:	e080be26 	beq	fp,r2,80f8ec <___vfprintf_internal_r+0x1b6c>
  80f5f4:	000d883a 	mov	r6,zero
  80f5f8:	000f883a 	mov	r7,zero
  80f5fc:	880b883a 	mov	r5,r17
  80f600:	8009883a 	mov	r4,r16
  80f604:	080b86c0 	call	80b86c <__eqdf2>
  80f608:	1000a21e 	bne	r2,zero,80f894 <___vfprintf_internal_r+0x1b14>
  80f60c:	9805883a 	mov	r2,r19
  80f610:	dcc19815 	stw	r19,1632(sp)
  80f614:	14c0052e 	bgeu	r2,r19,80f62c <___vfprintf_internal_r+0x18ac>
  80f618:	00c00c04 	movi	r3,48
  80f61c:	10c00005 	stb	r3,0(r2)
  80f620:	10800044 	addi	r2,r2,1
  80f624:	d8819815 	stw	r2,1632(sp)
  80f628:	14fffc36 	bltu	r2,r19,80f61c <___vfprintf_internal_r+0x189c>
  80f62c:	1545c83a 	sub	r2,r2,r21
  80f630:	00c019c4 	movi	r3,103
  80f634:	d8819615 	stw	r2,1624(sp)
  80f638:	a827883a 	mov	r19,r21
  80f63c:	e0c06c26 	beq	fp,r3,80f7f0 <___vfprintf_internal_r+0x1a70>
  80f640:	008011c4 	movi	r2,71
  80f644:	e0806a26 	beq	fp,r2,80f7f0 <___vfprintf_internal_r+0x1a70>
  80f648:	d9819517 	ldw	r6,1620(sp)
  80f64c:	00801944 	movi	r2,101
  80f650:	17005916 	blt	r2,fp,80f7b8 <___vfprintf_internal_r+0x1a38>
  80f654:	31bfffc4 	addi	r6,r6,-1
  80f658:	d9819515 	stw	r6,1620(sp)
  80f65c:	df000405 	stb	fp,16(sp)
  80f660:	3023883a 	mov	r17,r6
  80f664:	dd000444 	addi	r20,sp,17
  80f668:	3000cb16 	blt	r6,zero,80f998 <___vfprintf_internal_r+0x1c18>
  80f66c:	00800ac4 	movi	r2,43
  80f670:	a0800005 	stb	r2,0(r20)
  80f674:	d9000404 	addi	r4,sp,16
  80f678:	00800244 	movi	r2,9
  80f67c:	dd000484 	addi	r20,sp,18
  80f680:	24018e04 	addi	r16,r4,1592
  80f684:	1440680e 	bge	r2,r17,80f828 <___vfprintf_internal_r+0x1aa8>
  80f688:	102b883a 	mov	r21,r2
  80f68c:	8809883a 	mov	r4,r17
  80f690:	01400284 	movi	r5,10
  80f694:	080be080 	call	80be08 <__modsi3>
  80f698:	10800c04 	addi	r2,r2,48
  80f69c:	843fffc4 	addi	r16,r16,-1
  80f6a0:	8809883a 	mov	r4,r17
  80f6a4:	01400284 	movi	r5,10
  80f6a8:	80800005 	stb	r2,0(r16)
  80f6ac:	080bdb80 	call	80bdb8 <__divsi3>
  80f6b0:	1023883a 	mov	r17,r2
  80f6b4:	a8bff516 	blt	r21,r2,80f68c <___vfprintf_internal_r+0x190c>
  80f6b8:	843fffc4 	addi	r16,r16,-1
  80f6bc:	10800c04 	addi	r2,r2,48
  80f6c0:	d9c00404 	addi	r7,sp,16
  80f6c4:	39418e04 	addi	r5,r7,1592
  80f6c8:	80800005 	stb	r2,0(r16)
  80f6cc:	81405c2e 	bgeu	r16,r5,80f840 <___vfprintf_internal_r+0x1ac0>
  80f6d0:	80800003 	ldbu	r2,0(r16)
  80f6d4:	84000044 	addi	r16,r16,1
  80f6d8:	a0800005 	stb	r2,0(r20)
  80f6dc:	a5000044 	addi	r20,r20,1
  80f6e0:	003ffa06 	br	80f6cc <___vfprintf_internal_r+0x194c>
  80f6e4:	d9019e17 	ldw	r4,1656(sp)
  80f6e8:	d9c00404 	addi	r7,sp,16
  80f6ec:	39400204 	addi	r5,r7,8
  80f6f0:	080dd280 	call	80dd28 <__sprint>
  80f6f4:	103d5c1e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f6f8:	d8800404 	addi	r2,sp,16
  80f6fc:	14800504 	addi	r18,r2,20
  80f700:	003e0506 	br	80ef18 <___vfprintf_internal_r+0x1198>
  80f704:	d8819f17 	ldw	r2,1660(sp)
  80f708:	d9c1a117 	ldw	r7,1668(sp)
  80f70c:	10c00017 	ldw	r3,0(r2)
  80f710:	11400104 	addi	r5,r2,4
  80f714:	d9419f15 	stw	r5,1660(sp)
  80f718:	19c00015 	stw	r7,0(r3)
  80f71c:	0039bf06 	br	80de1c <___vfprintf_internal_r+0x9c>
  80f720:	d9019e17 	ldw	r4,1656(sp)
  80f724:	d8c00404 	addi	r3,sp,16
  80f728:	19400204 	addi	r5,r3,8
  80f72c:	080dd280 	call	80dd28 <__sprint>
  80f730:	103d4d1e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f734:	d9819517 	ldw	r6,1620(sp)
  80f738:	d9000404 	addi	r4,sp,16
  80f73c:	24800504 	addi	r18,r4,20
  80f740:	003f0a06 	br	80f36c <___vfprintf_internal_r+0x15ec>
  80f744:	d8800817 	ldw	r2,32(sp)
  80f748:	d8c00717 	ldw	r3,28(sp)
  80f74c:	010020b4 	movhi	r4,130
  80f750:	21271104 	addi	r4,r4,-25532
  80f754:	1405883a 	add	r2,r2,r16
  80f758:	18c00044 	addi	r3,r3,1
  80f75c:	d8800815 	stw	r2,32(sp)
  80f760:	008001c4 	movi	r2,7
  80f764:	91000015 	stw	r4,0(r18)
  80f768:	94000115 	stw	r16,4(r18)
  80f76c:	d8c00715 	stw	r3,28(sp)
  80f770:	94800204 	addi	r18,r18,8
  80f774:	10c04916 	blt	r2,r3,80f89c <___vfprintf_internal_r+0x1b1c>
  80f778:	d9019617 	ldw	r4,1624(sp)
  80f77c:	d8800817 	ldw	r2,32(sp)
  80f780:	d8c00717 	ldw	r3,28(sp)
  80f784:	94c00015 	stw	r19,0(r18)
  80f788:	1105883a 	add	r2,r2,r4
  80f78c:	18c00044 	addi	r3,r3,1
  80f790:	d8800815 	stw	r2,32(sp)
  80f794:	008001c4 	movi	r2,7
  80f798:	91000115 	stw	r4,4(r18)
  80f79c:	d8c00715 	stw	r3,28(sp)
  80f7a0:	94800204 	addi	r18,r18,8
  80f7a4:	10facd0e 	bge	r2,r3,80e2dc <___vfprintf_internal_r+0x55c>
  80f7a8:	003e8606 	br	80f1c4 <___vfprintf_internal_r+0x1444>
  80f7ac:	a5c00044 	addi	r23,r20,1
  80f7b0:	01c00084 	movi	r7,2
  80f7b4:	003f7a06 	br	80f5a0 <___vfprintf_internal_r+0x1820>
  80f7b8:	00801984 	movi	r2,102
  80f7bc:	e0806d26 	beq	fp,r2,80f974 <___vfprintf_internal_r+0x1bf4>
  80f7c0:	d8819617 	ldw	r2,1624(sp)
  80f7c4:	30806416 	blt	r6,r2,80f958 <___vfprintf_internal_r+0x1bd8>
  80f7c8:	d9c1a017 	ldw	r7,1664(sp)
  80f7cc:	302f883a 	mov	r23,r6
  80f7d0:	3880004c 	andi	r2,r7,1
  80f7d4:	10000126 	beq	r2,zero,80f7dc <___vfprintf_internal_r+0x1a5c>
  80f7d8:	35c00044 	addi	r23,r6,1
  80f7dc:	d8819407 	ldb	r2,1616(sp)
  80f7e0:	103a2e26 	beq	r2,zero,80e09c <___vfprintf_internal_r+0x31c>
  80f7e4:	00800b44 	movi	r2,45
  80f7e8:	d8819c05 	stb	r2,1648(sp)
  80f7ec:	003a2b06 	br	80e09c <___vfprintf_internal_r+0x31c>
  80f7f0:	d9819517 	ldw	r6,1620(sp)
  80f7f4:	00bfff04 	movi	r2,-4
  80f7f8:	1180010e 	bge	r2,r6,80f800 <___vfprintf_internal_r+0x1a80>
  80f7fc:	a1805b0e 	bge	r20,r6,80f96c <___vfprintf_internal_r+0x1bec>
  80f800:	00801944 	movi	r2,101
  80f804:	e0c00126 	beq	fp,r3,80f80c <___vfprintf_internal_r+0x1a8c>
  80f808:	00801144 	movi	r2,69
  80f80c:	1039883a 	mov	fp,r2
  80f810:	003f8e06 	br	80f64c <___vfprintf_internal_r+0x18cc>
  80f814:	d8c1a017 	ldw	r3,1664(sp)
  80f818:	1880004c 	andi	r2,r3,1
  80f81c:	103f721e 	bne	r2,zero,80f5e8 <___vfprintf_internal_r+0x1868>
  80f820:	d8819817 	ldw	r2,1632(sp)
  80f824:	003f8106 	br	80f62c <___vfprintf_internal_r+0x18ac>
  80f828:	00800c04 	movi	r2,48
  80f82c:	a0800005 	stb	r2,0(r20)
  80f830:	88c00c04 	addi	r3,r17,48
  80f834:	a5000044 	addi	r20,r20,1
  80f838:	a0c00005 	stb	r3,0(r20)
  80f83c:	a5000044 	addi	r20,r20,1
  80f840:	d8c19617 	ldw	r3,1624(sp)
  80f844:	d8800404 	addi	r2,sp,16
  80f848:	a085c83a 	sub	r2,r20,r2
  80f84c:	d881a615 	stw	r2,1688(sp)
  80f850:	10ef883a 	add	r23,r2,r3
  80f854:	00800044 	movi	r2,1
  80f858:	10c00316 	blt	r2,r3,80f868 <___vfprintf_internal_r+0x1ae8>
  80f85c:	d8c1a017 	ldw	r3,1664(sp)
  80f860:	1884703a 	and	r2,r3,r2
  80f864:	103fdd26 	beq	r2,zero,80f7dc <___vfprintf_internal_r+0x1a5c>
  80f868:	bdc00044 	addi	r23,r23,1
  80f86c:	003fdb06 	br	80f7dc <___vfprintf_internal_r+0x1a5c>
  80f870:	d9019e17 	ldw	r4,1656(sp)
  80f874:	d9c00404 	addi	r7,sp,16
  80f878:	39400204 	addi	r5,r7,8
  80f87c:	080dd280 	call	80dd28 <__sprint>
  80f880:	103cf91e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f884:	d9819517 	ldw	r6,1620(sp)
  80f888:	d8800404 	addi	r2,sp,16
  80f88c:	14800504 	addi	r18,r2,20
  80f890:	003ec406 	br	80f3a4 <___vfprintf_internal_r+0x1624>
  80f894:	d8819817 	ldw	r2,1632(sp)
  80f898:	003f5e06 	br	80f614 <___vfprintf_internal_r+0x1894>
  80f89c:	d9019e17 	ldw	r4,1656(sp)
  80f8a0:	d9c00404 	addi	r7,sp,16
  80f8a4:	39400204 	addi	r5,r7,8
  80f8a8:	080dd280 	call	80dd28 <__sprint>
  80f8ac:	103cee1e 	bne	r2,zero,80ec68 <___vfprintf_internal_r+0xee8>
  80f8b0:	d8800404 	addi	r2,sp,16
  80f8b4:	14800504 	addi	r18,r2,20
  80f8b8:	003faf06 	br	80f778 <___vfprintf_internal_r+0x19f8>
  80f8bc:	d9019d17 	ldw	r4,1652(sp)
  80f8c0:	d8819904 	addi	r2,sp,1636
  80f8c4:	000b883a 	mov	r5,zero
  80f8c8:	d9819b04 	addi	r6,sp,1644
  80f8cc:	000f883a 	mov	r7,zero
  80f8d0:	d8800015 	stw	r2,0(sp)
  80f8d4:	080fad80 	call	80fad8 <_wcsrtombs_r>
  80f8d8:	102f883a 	mov	r23,r2
  80f8dc:	00bfffc4 	movi	r2,-1
  80f8e0:	b8bce126 	beq	r23,r2,80ec68 <___vfprintf_internal_r+0xee8>
  80f8e4:	dcc19b15 	stw	r19,1644(sp)
  80f8e8:	003b4406 	br	80e5fc <___vfprintf_internal_r+0x87c>
  80f8ec:	a8c00007 	ldb	r3,0(r21)
  80f8f0:	00800c04 	movi	r2,48
  80f8f4:	18800326 	beq	r3,r2,80f904 <___vfprintf_internal_r+0x1b84>
  80f8f8:	d8819517 	ldw	r2,1620(sp)
  80f8fc:	98a7883a 	add	r19,r19,r2
  80f900:	003f3c06 	br	80f5f4 <___vfprintf_internal_r+0x1874>
  80f904:	000d883a 	mov	r6,zero
  80f908:	000f883a 	mov	r7,zero
  80f90c:	8009883a 	mov	r4,r16
  80f910:	880b883a 	mov	r5,r17
  80f914:	080b8f80 	call	80b8f8 <__nedf2>
  80f918:	103ff726 	beq	r2,zero,80f8f8 <___vfprintf_internal_r+0x1b78>
  80f91c:	00800044 	movi	r2,1
  80f920:	15c5c83a 	sub	r2,r2,r23
  80f924:	98a7883a 	add	r19,r19,r2
  80f928:	d8819515 	stw	r2,1620(sp)
  80f92c:	003f3106 	br	80f5f4 <___vfprintf_internal_r+0x1874>
  80f930:	0005883a 	mov	r2,zero
  80f934:	00e00034 	movhi	r3,32768
  80f938:	18c00004 	addi	r3,r3,0
  80f93c:	1408f03a 	xor	r4,r2,r16
  80f940:	88caf03a 	xor	r5,r17,r3
  80f944:	00800b44 	movi	r2,45
  80f948:	2021883a 	mov	r16,r4
  80f94c:	2823883a 	mov	r17,r5
  80f950:	30800005 	stb	r2,0(r6)
  80f954:	003f1406 	br	80f5a8 <___vfprintf_internal_r+0x1828>
  80f958:	15c00044 	addi	r23,r2,1
  80f95c:	01bf9f16 	blt	zero,r6,80f7dc <___vfprintf_internal_r+0x1a5c>
  80f960:	1185c83a 	sub	r2,r2,r6
  80f964:	15c00084 	addi	r23,r2,2
  80f968:	003f9c06 	br	80f7dc <___vfprintf_internal_r+0x1a5c>
  80f96c:	1839883a 	mov	fp,r3
  80f970:	003f3606 	br	80f64c <___vfprintf_internal_r+0x18cc>
  80f974:	01800c0e 	bge	zero,r6,80f9a8 <___vfprintf_internal_r+0x1c28>
  80f978:	302f883a 	mov	r23,r6
  80f97c:	a000031e 	bne	r20,zero,80f98c <___vfprintf_internal_r+0x1c0c>
  80f980:	d901a017 	ldw	r4,1664(sp)
  80f984:	2080004c 	andi	r2,r4,1
  80f988:	103f9426 	beq	r2,zero,80f7dc <___vfprintf_internal_r+0x1a5c>
  80f98c:	a185883a 	add	r2,r20,r6
  80f990:	15c00044 	addi	r23,r2,1
  80f994:	003f9106 	br	80f7dc <___vfprintf_internal_r+0x1a5c>
  80f998:	00800b44 	movi	r2,45
  80f99c:	01a3c83a 	sub	r17,zero,r6
  80f9a0:	a0800005 	stb	r2,0(r20)
  80f9a4:	003f3306 	br	80f674 <___vfprintf_internal_r+0x18f4>
  80f9a8:	a000041e 	bne	r20,zero,80f9bc <___vfprintf_internal_r+0x1c3c>
  80f9ac:	d941a017 	ldw	r5,1664(sp)
  80f9b0:	05c00044 	movi	r23,1
  80f9b4:	2880004c 	andi	r2,r5,1
  80f9b8:	103f8826 	beq	r2,zero,80f7dc <___vfprintf_internal_r+0x1a5c>
  80f9bc:	a5c00084 	addi	r23,r20,2
  80f9c0:	003f8606 	br	80f7dc <___vfprintf_internal_r+0x1a5c>
  80f9c4:	d8819f17 	ldw	r2,1660(sp)
  80f9c8:	15000017 	ldw	r20,0(r2)
  80f9cc:	10c00104 	addi	r3,r2,4
  80f9d0:	d8c19f15 	stw	r3,1660(sp)
  80f9d4:	a03bde0e 	bge	r20,zero,80e950 <___vfprintf_internal_r+0xbd0>
  80f9d8:	b1000003 	ldbu	r4,0(r22)
  80f9dc:	053fffc4 	movi	r20,-1
  80f9e0:	00393806 	br	80dec4 <___vfprintf_internal_r+0x144>

0080f9e4 <__vfprintf_internal>:
  80f9e4:	d0e00117 	ldw	r3,-32764(gp)
  80f9e8:	defffc04 	addi	sp,sp,-16
  80f9ec:	dc000215 	stw	r16,8(sp)
  80f9f0:	dc400115 	stw	r17,4(sp)
  80f9f4:	dc800015 	stw	r18,0(sp)
  80f9f8:	dfc00315 	stw	ra,12(sp)
  80f9fc:	18800e17 	ldw	r2,56(r3)
  80fa00:	2023883a 	mov	r17,r4
  80fa04:	2825883a 	mov	r18,r5
  80fa08:	1809883a 	mov	r4,r3
  80fa0c:	3021883a 	mov	r16,r6
  80fa10:	10000c26 	beq	r2,zero,80fa44 <__vfprintf_internal+0x60>
  80fa14:	1809883a 	mov	r4,r3
  80fa18:	880b883a 	mov	r5,r17
  80fa1c:	900d883a 	mov	r6,r18
  80fa20:	800f883a 	mov	r7,r16
  80fa24:	02002074 	movhi	r8,129
  80fa28:	42376004 	addi	r8,r8,-8832
  80fa2c:	dfc00317 	ldw	ra,12(sp)
  80fa30:	dc000217 	ldw	r16,8(sp)
  80fa34:	dc400117 	ldw	r17,4(sp)
  80fa38:	dc800017 	ldw	r18,0(sp)
  80fa3c:	dec00404 	addi	sp,sp,16
  80fa40:	4000683a 	jmp	r8
  80fa44:	08119c00 	call	8119c0 <__sinit>
  80fa48:	d0e00117 	ldw	r3,-32764(gp)
  80fa4c:	003ff106 	br	80fa14 <__vfprintf_internal+0x30>

0080fa50 <_wcrtomb_r>:
  80fa50:	defffa04 	addi	sp,sp,-24
  80fa54:	dc000415 	stw	r16,16(sp)
  80fa58:	dc400315 	stw	r17,12(sp)
  80fa5c:	dfc00515 	stw	ra,20(sp)
  80fa60:	2023883a 	mov	r17,r4
  80fa64:	3821883a 	mov	r16,r7
  80fa68:	28000b26 	beq	r5,zero,80fa98 <_wcrtomb_r+0x48>
  80fa6c:	080fc540 	call	80fc54 <_wctomb_r>
  80fa70:	1007883a 	mov	r3,r2
  80fa74:	1009883a 	mov	r4,r2
  80fa78:	00bfffc4 	movi	r2,-1
  80fa7c:	18800926 	beq	r3,r2,80faa4 <_wcrtomb_r+0x54>
  80fa80:	2005883a 	mov	r2,r4
  80fa84:	dfc00517 	ldw	ra,20(sp)
  80fa88:	dc000417 	ldw	r16,16(sp)
  80fa8c:	dc400317 	ldw	r17,12(sp)
  80fa90:	dec00604 	addi	sp,sp,24
  80fa94:	f800283a 	ret
  80fa98:	d80b883a 	mov	r5,sp
  80fa9c:	000d883a 	mov	r6,zero
  80faa0:	003ff206 	br	80fa6c <_wcrtomb_r+0x1c>
  80faa4:	80000015 	stw	zero,0(r16)
  80faa8:	00802284 	movi	r2,138
  80faac:	88800015 	stw	r2,0(r17)
  80fab0:	003ff306 	br	80fa80 <_wcrtomb_r+0x30>

0080fab4 <wcrtomb>:
  80fab4:	2013883a 	mov	r9,r4
  80fab8:	d1200117 	ldw	r4,-32764(gp)
  80fabc:	2807883a 	mov	r3,r5
  80fac0:	300f883a 	mov	r7,r6
  80fac4:	480b883a 	mov	r5,r9
  80fac8:	180d883a 	mov	r6,r3
  80facc:	02002074 	movhi	r8,129
  80fad0:	423e9404 	addi	r8,r8,-1456
  80fad4:	4000683a 	jmp	r8

0080fad8 <_wcsrtombs_r>:
  80fad8:	defff204 	addi	sp,sp,-56
  80fadc:	dc000b15 	stw	r16,44(sp)
  80fae0:	dc800915 	stw	r18,36(sp)
  80fae4:	dd000715 	stw	r20,28(sp)
  80fae8:	ddc00415 	stw	r23,16(sp)
  80faec:	dfc00d15 	stw	ra,52(sp)
  80faf0:	df000c15 	stw	fp,48(sp)
  80faf4:	dc400a15 	stw	r17,40(sp)
  80faf8:	dcc00815 	stw	r19,32(sp)
  80fafc:	dd400615 	stw	r21,24(sp)
  80fb00:	dd800515 	stw	r22,20(sp)
  80fb04:	2821883a 	mov	r16,r5
  80fb08:	d9000315 	stw	r4,12(sp)
  80fb0c:	302f883a 	mov	r23,r6
  80fb10:	3825883a 	mov	r18,r7
  80fb14:	dd000e17 	ldw	r20,56(sp)
  80fb18:	28002f26 	beq	r5,zero,80fbd8 <_wcsrtombs_r+0x100>
  80fb1c:	002b883a 	mov	r21,zero
  80fb20:	bc400017 	ldw	r17,0(r23)
  80fb24:	04801f2e 	bgeu	zero,r18,80fba4 <_wcsrtombs_r+0xcc>
  80fb28:	8039003a 	cmpeq	fp,r16,zero
  80fb2c:	89800017 	ldw	r6,0(r17)
  80fb30:	d9000317 	ldw	r4,12(sp)
  80fb34:	d80b883a 	mov	r5,sp
  80fb38:	a00f883a 	mov	r7,r20
  80fb3c:	a5800017 	ldw	r22,0(r20)
  80fb40:	a4c00117 	ldw	r19,4(r20)
  80fb44:	080fa500 	call	80fa50 <_wcrtomb_r>
  80fb48:	100b883a 	mov	r5,r2
  80fb4c:	00bfffc4 	movi	r2,-1
  80fb50:	28802626 	beq	r5,r2,80fbec <_wcsrtombs_r+0x114>
  80fb54:	9145c83a 	sub	r2,r18,r5
  80fb58:	15402136 	bltu	r2,r21,80fbe0 <_wcsrtombs_r+0x108>
  80fb5c:	2c80202e 	bgeu	r5,r18,80fbe0 <_wcsrtombs_r+0x108>
  80fb60:	a96b883a 	add	r21,r21,r5
  80fb64:	e0000b1e 	bne	fp,zero,80fb94 <_wcsrtombs_r+0xbc>
  80fb68:	0009883a 	mov	r4,zero
  80fb6c:	0140060e 	bge	zero,r5,80fb88 <_wcsrtombs_r+0xb0>
  80fb70:	d905883a 	add	r2,sp,r4
  80fb74:	10c00003 	ldbu	r3,0(r2)
  80fb78:	21000044 	addi	r4,r4,1
  80fb7c:	80c00005 	stb	r3,0(r16)
  80fb80:	84000044 	addi	r16,r16,1
  80fb84:	217ffa16 	blt	r4,r5,80fb70 <_wcsrtombs_r+0x98>
  80fb88:	b8800017 	ldw	r2,0(r23)
  80fb8c:	10800104 	addi	r2,r2,4
  80fb90:	b8800015 	stw	r2,0(r23)
  80fb94:	88800017 	ldw	r2,0(r17)
  80fb98:	8c400104 	addi	r17,r17,4
  80fb9c:	10001926 	beq	r2,zero,80fc04 <_wcsrtombs_r+0x12c>
  80fba0:	acbfe236 	bltu	r21,r18,80fb2c <_wcsrtombs_r+0x54>
  80fba4:	a805883a 	mov	r2,r21
  80fba8:	dfc00d17 	ldw	ra,52(sp)
  80fbac:	df000c17 	ldw	fp,48(sp)
  80fbb0:	dc000b17 	ldw	r16,44(sp)
  80fbb4:	dc400a17 	ldw	r17,40(sp)
  80fbb8:	dc800917 	ldw	r18,36(sp)
  80fbbc:	dcc00817 	ldw	r19,32(sp)
  80fbc0:	dd000717 	ldw	r20,28(sp)
  80fbc4:	dd400617 	ldw	r21,24(sp)
  80fbc8:	dd800517 	ldw	r22,20(sp)
  80fbcc:	ddc00417 	ldw	r23,16(sp)
  80fbd0:	dec00e04 	addi	sp,sp,56
  80fbd4:	f800283a 	ret
  80fbd8:	04bfffc4 	movi	r18,-1
  80fbdc:	003fcf06 	br	80fb1c <_wcsrtombs_r+0x44>
  80fbe0:	a4c00115 	stw	r19,4(r20)
  80fbe4:	a5800015 	stw	r22,0(r20)
  80fbe8:	003fee06 	br	80fba4 <_wcsrtombs_r+0xcc>
  80fbec:	d8c00317 	ldw	r3,12(sp)
  80fbf0:	00802284 	movi	r2,138
  80fbf4:	18800015 	stw	r2,0(r3)
  80fbf8:	2805883a 	mov	r2,r5
  80fbfc:	a0000015 	stw	zero,0(r20)
  80fc00:	003fe906 	br	80fba8 <_wcsrtombs_r+0xd0>
  80fc04:	e000011e 	bne	fp,zero,80fc0c <_wcsrtombs_r+0x134>
  80fc08:	b8000015 	stw	zero,0(r23)
  80fc0c:	a8bfffc4 	addi	r2,r21,-1
  80fc10:	a0000015 	stw	zero,0(r20)
  80fc14:	003fe406 	br	80fba8 <_wcsrtombs_r+0xd0>

0080fc18 <wcsrtombs>:
  80fc18:	d0e00117 	ldw	r3,-32764(gp)
  80fc1c:	defffe04 	addi	sp,sp,-8
  80fc20:	2013883a 	mov	r9,r4
  80fc24:	2817883a 	mov	r11,r5
  80fc28:	301b883a 	mov	r13,r6
  80fc2c:	d9c00015 	stw	r7,0(sp)
  80fc30:	1809883a 	mov	r4,r3
  80fc34:	480b883a 	mov	r5,r9
  80fc38:	580d883a 	mov	r6,r11
  80fc3c:	680f883a 	mov	r7,r13
  80fc40:	dfc00115 	stw	ra,4(sp)
  80fc44:	080fad80 	call	80fad8 <_wcsrtombs_r>
  80fc48:	dfc00117 	ldw	ra,4(sp)
  80fc4c:	dec00204 	addi	sp,sp,8
  80fc50:	f800283a 	ret

0080fc54 <_wctomb_r>:
  80fc54:	defffb04 	addi	sp,sp,-20
  80fc58:	010020b4 	movhi	r4,130
  80fc5c:	212a9a04 	addi	r4,r4,-21912
  80fc60:	dc000315 	stw	r16,12(sp)
  80fc64:	dc400215 	stw	r17,8(sp)
  80fc68:	dc800115 	stw	r18,4(sp)
  80fc6c:	dcc00015 	stw	r19,0(sp)
  80fc70:	2821883a 	mov	r16,r5
  80fc74:	dfc00415 	stw	ra,16(sp)
  80fc78:	3023883a 	mov	r17,r6
  80fc7c:	3827883a 	mov	r19,r7
  80fc80:	04800044 	movi	r18,1
  80fc84:	080dccc0 	call	80dccc <strlen>
  80fc88:	8006c03a 	cmpne	r3,r16,zero
  80fc8c:	90800c36 	bltu	r18,r2,80fcc0 <_wctomb_r+0x6c>
  80fc90:	0011883a 	mov	r8,zero
  80fc94:	18000226 	beq	r3,zero,80fca0 <_wctomb_r+0x4c>
  80fc98:	84400005 	stb	r17,0(r16)
  80fc9c:	02000044 	movi	r8,1
  80fca0:	4005883a 	mov	r2,r8
  80fca4:	dfc00417 	ldw	ra,16(sp)
  80fca8:	dc000317 	ldw	r16,12(sp)
  80fcac:	dc400217 	ldw	r17,8(sp)
  80fcb0:	dc800117 	ldw	r18,4(sp)
  80fcb4:	dcc00017 	ldw	r19,0(sp)
  80fcb8:	dec00504 	addi	sp,sp,20
  80fcbc:	f800283a 	ret
  80fcc0:	010020b4 	movhi	r4,130
  80fcc4:	212a9a04 	addi	r4,r4,-21912
  80fcc8:	014020b4 	movhi	r5,130
  80fccc:	29678504 	addi	r5,r5,-25068
  80fcd0:	0813c3c0 	call	813c3c <strcmp>
  80fcd4:	10003a1e 	bne	r2,zero,80fdc0 <_wctomb_r+0x16c>
  80fcd8:	0011883a 	mov	r8,zero
  80fcdc:	803ff026 	beq	r16,zero,80fca0 <_wctomb_r+0x4c>
  80fce0:	00801fc4 	movi	r2,127
  80fce4:	9011883a 	mov	r8,r18
  80fce8:	1440630e 	bge	r2,r17,80fe78 <_wctomb_r+0x224>
  80fcec:	88ffe004 	addi	r3,r17,-128
  80fcf0:	0081dfc4 	movi	r2,1919
  80fcf4:	027fe004 	movi	r9,-128
  80fcf8:	10c0b42e 	bgeu	r2,r3,80ffcc <_wctomb_r+0x378>
  80fcfc:	88fe0004 	addi	r3,r17,-2048
  80fd00:	00bdffd4 	movui	r2,63487
  80fd04:	10c05e2e 	bgeu	r2,r3,80fe80 <_wctomb_r+0x22c>
  80fd08:	00bffff4 	movhi	r2,65535
  80fd0c:	10800004 	addi	r2,r2,0
  80fd10:	8885883a 	add	r2,r17,r2
  80fd14:	00c007f4 	movhi	r3,31
  80fd18:	18ffffc4 	addi	r3,r3,-1
  80fd1c:	1880b52e 	bgeu	r3,r2,80fff4 <_wctomb_r+0x3a0>
  80fd20:	00bff834 	movhi	r2,65504
  80fd24:	10800004 	addi	r2,r2,0
  80fd28:	8885883a 	add	r2,r17,r2
  80fd2c:	00c0f834 	movhi	r3,992
  80fd30:	18ffffc4 	addi	r3,r3,-1
  80fd34:	1880c32e 	bgeu	r3,r2,810044 <_wctomb_r+0x3f0>
  80fd38:	00810034 	movhi	r2,1024
  80fd3c:	10bfffc4 	addi	r2,r2,-1
  80fd40:	023fffc4 	movi	r8,-1
  80fd44:	147fd60e 	bge	r2,r17,80fca0 <_wctomb_r+0x4c>
  80fd48:	88d0002c 	andhi	r3,r17,16384
  80fd4c:	1807d7ba 	srai	r3,r3,30
  80fd50:	890fc02c 	andhi	r4,r17,16128
  80fd54:	2009d63a 	srai	r4,r4,24
  80fd58:	89403f2c 	andhi	r5,r17,252
  80fd5c:	00bfff04 	movi	r2,-4
  80fd60:	280bd4ba 	srai	r5,r5,18
  80fd64:	880cd33a 	srli	r6,r17,12
  80fd68:	1886b03a 	or	r3,r3,r2
  80fd6c:	89c3f00c 	andi	r7,r17,4032
  80fd70:	80c00005 	stb	r3,0(r16)
  80fd74:	2248b03a 	or	r4,r4,r9
  80fd78:	84000044 	addi	r16,r16,1
  80fd7c:	380fd1ba 	srai	r7,r7,6
  80fd80:	81000005 	stb	r4,0(r16)
  80fd84:	2a4ab03a 	or	r5,r5,r9
  80fd88:	84000044 	addi	r16,r16,1
  80fd8c:	31800fcc 	andi	r6,r6,63
  80fd90:	81400005 	stb	r5,0(r16)
  80fd94:	324cb03a 	or	r6,r6,r9
  80fd98:	84000044 	addi	r16,r16,1
  80fd9c:	88800fcc 	andi	r2,r17,63
  80fda0:	81800005 	stb	r6,0(r16)
  80fda4:	1244b03a 	or	r2,r2,r9
  80fda8:	84000044 	addi	r16,r16,1
  80fdac:	3a4eb03a 	or	r7,r7,r9
  80fdb0:	02000184 	movi	r8,6
  80fdb4:	80800045 	stb	r2,1(r16)
  80fdb8:	81c00005 	stb	r7,0(r16)
  80fdbc:	003fb806 	br	80fca0 <_wctomb_r+0x4c>
  80fdc0:	010020b4 	movhi	r4,130
  80fdc4:	212a9a04 	addi	r4,r4,-21912
  80fdc8:	014020b4 	movhi	r5,130
  80fdcc:	29678704 	addi	r5,r5,-25060
  80fdd0:	0813c3c0 	call	813c3c <strcmp>
  80fdd4:	10003f1e 	bne	r2,zero,80fed4 <_wctomb_r+0x280>
  80fdd8:	8006c03a 	cmpne	r3,r16,zero
  80fddc:	8809d23a 	srai	r4,r17,8
  80fde0:	0011883a 	mov	r8,zero
  80fde4:	183fae26 	beq	r3,zero,80fca0 <_wctomb_r+0x4c>
  80fde8:	20803fcc 	andi	r2,r4,255
  80fdec:	103fa826 	beq	r2,zero,80fc90 <_wctomb_r+0x3c>
  80fdf0:	20801fc4 	addi	r2,r4,127
  80fdf4:	10803fcc 	andi	r2,r2,255
  80fdf8:	00c00784 	movi	r3,30
  80fdfc:	1880042e 	bgeu	r3,r2,80fe10 <_wctomb_r+0x1bc>
  80fe00:	20800804 	addi	r2,r4,32
  80fe04:	10803fcc 	andi	r2,r2,255
  80fe08:	00c003c4 	movi	r3,15
  80fe0c:	18804436 	bltu	r3,r2,80ff20 <_wctomb_r+0x2cc>
  80fe10:	88bff004 	addi	r2,r17,-64
  80fe14:	10803fcc 	andi	r2,r2,255
  80fe18:	00c00f84 	movi	r3,62
  80fe1c:	1880042e 	bgeu	r3,r2,80fe30 <_wctomb_r+0x1dc>
  80fe20:	88bfe004 	addi	r2,r17,-128
  80fe24:	10803fcc 	andi	r2,r2,255
  80fe28:	00c01f04 	movi	r3,124
  80fe2c:	18803c36 	bltu	r3,r2,80ff20 <_wctomb_r+0x2cc>
  80fe30:	02000084 	movi	r8,2
  80fe34:	84400045 	stb	r17,1(r16)
  80fe38:	81000005 	stb	r4,0(r16)
  80fe3c:	003f9806 	br	80fca0 <_wctomb_r+0x4c>
  80fe40:	98800017 	ldw	r2,0(r19)
  80fe44:	10000b26 	beq	r2,zero,80fe74 <_wctomb_r+0x220>
  80fe48:	98000015 	stw	zero,0(r19)
  80fe4c:	008006c4 	movi	r2,27
  80fe50:	80800005 	stb	r2,0(r16)
  80fe54:	84000044 	addi	r16,r16,1
  80fe58:	00800a04 	movi	r2,40
  80fe5c:	80800005 	stb	r2,0(r16)
  80fe60:	84000044 	addi	r16,r16,1
  80fe64:	00801084 	movi	r2,66
  80fe68:	80800005 	stb	r2,0(r16)
  80fe6c:	010000c4 	movi	r4,3
  80fe70:	84000044 	addi	r16,r16,1
  80fe74:	22000044 	addi	r8,r4,1
  80fe78:	84400005 	stb	r17,0(r16)
  80fe7c:	003f8806 	br	80fca0 <_wctomb_r+0x4c>
  80fe80:	00bffff4 	movhi	r2,65535
  80fe84:	108a0004 	addi	r2,r2,10240
  80fe88:	8885883a 	add	r2,r17,r2
  80fe8c:	00c1ffc4 	movi	r3,2047
  80fe90:	023fffc4 	movi	r8,-1
  80fe94:	18bf822e 	bgeu	r3,r2,80fca0 <_wctomb_r+0x4c>
  80fe98:	88fc000c 	andi	r3,r17,61440
  80fe9c:	1807d33a 	srai	r3,r3,12
  80fea0:	8943f00c 	andi	r5,r17,4032
  80fea4:	280bd1ba 	srai	r5,r5,6
  80fea8:	00bff804 	movi	r2,-32
  80feac:	1886b03a 	or	r3,r3,r2
  80feb0:	89000fcc 	andi	r4,r17,63
  80feb4:	80c00005 	stb	r3,0(r16)
  80feb8:	2248b03a 	or	r4,r4,r9
  80febc:	84000044 	addi	r16,r16,1
  80fec0:	2a4ab03a 	or	r5,r5,r9
  80fec4:	020000c4 	movi	r8,3
  80fec8:	81000045 	stb	r4,1(r16)
  80fecc:	81400005 	stb	r5,0(r16)
  80fed0:	003f7306 	br	80fca0 <_wctomb_r+0x4c>
  80fed4:	010020b4 	movhi	r4,130
  80fed8:	212a9a04 	addi	r4,r4,-21912
  80fedc:	014020b4 	movhi	r5,130
  80fee0:	29678904 	addi	r5,r5,-25052
  80fee4:	0813c3c0 	call	813c3c <strcmp>
  80fee8:	1000131e 	bne	r2,zero,80ff38 <_wctomb_r+0x2e4>
  80feec:	8006c03a 	cmpne	r3,r16,zero
  80fef0:	880bd23a 	srai	r5,r17,8
  80fef4:	0011883a 	mov	r8,zero
  80fef8:	183f6926 	beq	r3,zero,80fca0 <_wctomb_r+0x4c>
  80fefc:	28803fcc 	andi	r2,r5,255
  80ff00:	103f6326 	beq	r2,zero,80fc90 <_wctomb_r+0x3c>
  80ff04:	01802804 	movi	r6,160
  80ff08:	3080052e 	bgeu	r6,r2,80ff20 <_wctomb_r+0x2cc>
  80ff0c:	00c03fc4 	movi	r3,255
  80ff10:	10c00326 	beq	r2,r3,80ff20 <_wctomb_r+0x2cc>
  80ff14:	88803fcc 	andi	r2,r17,255
  80ff18:	3080012e 	bgeu	r6,r2,80ff20 <_wctomb_r+0x2cc>
  80ff1c:	10c0021e 	bne	r2,r3,80ff28 <_wctomb_r+0x2d4>
  80ff20:	023fffc4 	movi	r8,-1
  80ff24:	003f5e06 	br	80fca0 <_wctomb_r+0x4c>
  80ff28:	02000084 	movi	r8,2
  80ff2c:	84400045 	stb	r17,1(r16)
  80ff30:	81400005 	stb	r5,0(r16)
  80ff34:	003f5a06 	br	80fca0 <_wctomb_r+0x4c>
  80ff38:	010020b4 	movhi	r4,130
  80ff3c:	212a9a04 	addi	r4,r4,-21912
  80ff40:	014020b4 	movhi	r5,130
  80ff44:	29678b04 	addi	r5,r5,-25044
  80ff48:	0813c3c0 	call	813c3c <strcmp>
  80ff4c:	8006c03a 	cmpne	r3,r16,zero
  80ff50:	103f4f1e 	bne	r2,zero,80fc90 <_wctomb_r+0x3c>
  80ff54:	8807d23a 	srai	r3,r17,8
  80ff58:	0009883a 	mov	r4,zero
  80ff5c:	9011883a 	mov	r8,r18
  80ff60:	803f4f26 	beq	r16,zero,80fca0 <_wctomb_r+0x4c>
  80ff64:	18803fcc 	andi	r2,r3,255
  80ff68:	103fb526 	beq	r2,zero,80fe40 <_wctomb_r+0x1ec>
  80ff6c:	18bff7c4 	addi	r2,r3,-33
  80ff70:	10803fcc 	andi	r2,r2,255
  80ff74:	01401744 	movi	r5,93
  80ff78:	28bfe936 	bltu	r5,r2,80ff20 <_wctomb_r+0x2cc>
  80ff7c:	88bff7c4 	addi	r2,r17,-33
  80ff80:	10803fcc 	andi	r2,r2,255
  80ff84:	28bfe636 	bltu	r5,r2,80ff20 <_wctomb_r+0x2cc>
  80ff88:	98800017 	ldw	r2,0(r19)
  80ff8c:	10000b1e 	bne	r2,zero,80ffbc <_wctomb_r+0x368>
  80ff90:	9c800015 	stw	r18,0(r19)
  80ff94:	008006c4 	movi	r2,27
  80ff98:	80800005 	stb	r2,0(r16)
  80ff9c:	84000044 	addi	r16,r16,1
  80ffa0:	00800904 	movi	r2,36
  80ffa4:	80800005 	stb	r2,0(r16)
  80ffa8:	84000044 	addi	r16,r16,1
  80ffac:	00801084 	movi	r2,66
  80ffb0:	80800005 	stb	r2,0(r16)
  80ffb4:	010000c4 	movi	r4,3
  80ffb8:	84000044 	addi	r16,r16,1
  80ffbc:	22000084 	addi	r8,r4,2
  80ffc0:	84400045 	stb	r17,1(r16)
  80ffc4:	80c00005 	stb	r3,0(r16)
  80ffc8:	003f3506 	br	80fca0 <_wctomb_r+0x4c>
  80ffcc:	8901f00c 	andi	r4,r17,1984
  80ffd0:	2009d1ba 	srai	r4,r4,6
  80ffd4:	88c00fcc 	andi	r3,r17,63
  80ffd8:	00bff004 	movi	r2,-64
  80ffdc:	2088b03a 	or	r4,r4,r2
  80ffe0:	1a46b03a 	or	r3,r3,r9
  80ffe4:	02000084 	movi	r8,2
  80ffe8:	80c00045 	stb	r3,1(r16)
  80ffec:	81000005 	stb	r4,0(r16)
  80fff0:	003f2b06 	br	80fca0 <_wctomb_r+0x4c>
  80fff4:	88c0072c 	andhi	r3,r17,28
  80fff8:	1807d4ba 	srai	r3,r3,18
  80fffc:	8808d33a 	srli	r4,r17,12
  810000:	8943f00c 	andi	r5,r17,4032
  810004:	00bffc04 	movi	r2,-16
  810008:	280bd1ba 	srai	r5,r5,6
  81000c:	1886b03a 	or	r3,r3,r2
  810010:	21000fcc 	andi	r4,r4,63
  810014:	80c00005 	stb	r3,0(r16)
  810018:	2248b03a 	or	r4,r4,r9
  81001c:	84000044 	addi	r16,r16,1
  810020:	88800fcc 	andi	r2,r17,63
  810024:	81000005 	stb	r4,0(r16)
  810028:	1244b03a 	or	r2,r2,r9
  81002c:	84000044 	addi	r16,r16,1
  810030:	2a4ab03a 	or	r5,r5,r9
  810034:	02000104 	movi	r8,4
  810038:	80800045 	stb	r2,1(r16)
  81003c:	81400005 	stb	r5,0(r16)
  810040:	003f1706 	br	80fca0 <_wctomb_r+0x4c>
  810044:	88c0c02c 	andhi	r3,r17,768
  810048:	1807d63a 	srai	r3,r3,24
  81004c:	89003f2c 	andhi	r4,r17,252
  810050:	2009d4ba 	srai	r4,r4,18
  810054:	880ad33a 	srli	r5,r17,12
  810058:	00bffe04 	movi	r2,-8
  81005c:	8983f00c 	andi	r6,r17,4032
  810060:	1886b03a 	or	r3,r3,r2
  810064:	300dd1ba 	srai	r6,r6,6
  810068:	80c00005 	stb	r3,0(r16)
  81006c:	2248b03a 	or	r4,r4,r9
  810070:	84000044 	addi	r16,r16,1
  810074:	29400fcc 	andi	r5,r5,63
  810078:	81000005 	stb	r4,0(r16)
  81007c:	2a4ab03a 	or	r5,r5,r9
  810080:	84000044 	addi	r16,r16,1
  810084:	88800fcc 	andi	r2,r17,63
  810088:	81400005 	stb	r5,0(r16)
  81008c:	1244b03a 	or	r2,r2,r9
  810090:	84000044 	addi	r16,r16,1
  810094:	324cb03a 	or	r6,r6,r9
  810098:	02000144 	movi	r8,5
  81009c:	80800045 	stb	r2,1(r16)
  8100a0:	81800005 	stb	r6,0(r16)
  8100a4:	003efe06 	br	80fca0 <_wctomb_r+0x4c>

008100a8 <_write_r>:
  8100a8:	defffe04 	addi	sp,sp,-8
  8100ac:	dc000015 	stw	r16,0(sp)
  8100b0:	2021883a 	mov	r16,r4
  8100b4:	2809883a 	mov	r4,r5
  8100b8:	300b883a 	mov	r5,r6
  8100bc:	380d883a 	mov	r6,r7
  8100c0:	dfc00115 	stw	ra,4(sp)
  8100c4:	d0202815 	stw	zero,-32608(gp)
  8100c8:	081562c0 	call	81562c <write>
  8100cc:	1007883a 	mov	r3,r2
  8100d0:	00bfffc4 	movi	r2,-1
  8100d4:	18800526 	beq	r3,r2,8100ec <_write_r+0x44>
  8100d8:	1805883a 	mov	r2,r3
  8100dc:	dfc00117 	ldw	ra,4(sp)
  8100e0:	dc000017 	ldw	r16,0(sp)
  8100e4:	dec00204 	addi	sp,sp,8
  8100e8:	f800283a 	ret
  8100ec:	d0a02817 	ldw	r2,-32608(gp)
  8100f0:	103ff926 	beq	r2,zero,8100d8 <_write_r+0x30>
  8100f4:	80800015 	stw	r2,0(r16)
  8100f8:	1805883a 	mov	r2,r3
  8100fc:	dfc00117 	ldw	ra,4(sp)
  810100:	dc000017 	ldw	r16,0(sp)
  810104:	dec00204 	addi	sp,sp,8
  810108:	f800283a 	ret

0081010c <__swsetup>:
  81010c:	d0e00117 	ldw	r3,-32764(gp)
  810110:	defffe04 	addi	sp,sp,-8
  810114:	dc000015 	stw	r16,0(sp)
  810118:	dfc00115 	stw	ra,4(sp)
  81011c:	18800e17 	ldw	r2,56(r3)
  810120:	2021883a 	mov	r16,r4
  810124:	10003526 	beq	r2,zero,8101fc <__swsetup+0xf0>
  810128:	8180030b 	ldhu	r6,12(r16)
  81012c:	30ffffcc 	andi	r3,r6,65535
  810130:	1880020c 	andi	r2,r3,8
  810134:	1000251e 	bne	r2,zero,8101cc <__swsetup+0xc0>
  810138:	1880040c 	andi	r2,r3,16
  81013c:	013fffc4 	movi	r4,-1
  810140:	10001d26 	beq	r2,zero,8101b8 <__swsetup+0xac>
  810144:	1880010c 	andi	r2,r3,4
  810148:	10002f26 	beq	r2,zero,810208 <__swsetup+0xfc>
  81014c:	81400c17 	ldw	r5,48(r16)
  810150:	28000626 	beq	r5,zero,81016c <__swsetup+0x60>
  810154:	80801004 	addi	r2,r16,64
  810158:	28800326 	beq	r5,r2,810168 <__swsetup+0x5c>
  81015c:	d1200117 	ldw	r4,-32764(gp)
  810160:	0811d740 	call	811d74 <_free_r>
  810164:	8180030b 	ldhu	r6,12(r16)
  810168:	80000c15 	stw	zero,48(r16)
  81016c:	00bff6c4 	movi	r2,-37
  810170:	3084703a 	and	r2,r6,r2
  810174:	80c00417 	ldw	r3,16(r16)
  810178:	100d883a 	mov	r6,r2
  81017c:	8080030d 	sth	r2,12(r16)
  810180:	30800214 	ori	r2,r6,8
  810184:	80000115 	stw	zero,4(r16)
  810188:	80c00015 	stw	r3,0(r16)
  81018c:	8080030d 	sth	r2,12(r16)
  810190:	18001026 	beq	r3,zero,8101d4 <__swsetup+0xc8>
  810194:	80c0030b 	ldhu	r3,12(r16)
  810198:	1880004c 	andi	r2,r3,1
  81019c:	1000121e 	bne	r2,zero,8101e8 <__swsetup+0xdc>
  8101a0:	1880008c 	andi	r2,r3,2
  8101a4:	0007883a 	mov	r3,zero
  8101a8:	1000011e 	bne	r2,zero,8101b0 <__swsetup+0xa4>
  8101ac:	80c00517 	ldw	r3,20(r16)
  8101b0:	80c00215 	stw	r3,8(r16)
  8101b4:	0009883a 	mov	r4,zero
  8101b8:	2005883a 	mov	r2,r4
  8101bc:	dfc00117 	ldw	ra,4(sp)
  8101c0:	dc000017 	ldw	r16,0(sp)
  8101c4:	dec00204 	addi	sp,sp,8
  8101c8:	f800283a 	ret
  8101cc:	80c00417 	ldw	r3,16(r16)
  8101d0:	183ff01e 	bne	r3,zero,810194 <__swsetup+0x88>
  8101d4:	8009883a 	mov	r4,r16
  8101d8:	080ce340 	call	80ce34 <__smakebuf>
  8101dc:	80c0030b 	ldhu	r3,12(r16)
  8101e0:	1880004c 	andi	r2,r3,1
  8101e4:	103fee26 	beq	r2,zero,8101a0 <__swsetup+0x94>
  8101e8:	80800517 	ldw	r2,20(r16)
  8101ec:	80000215 	stw	zero,8(r16)
  8101f0:	0085c83a 	sub	r2,zero,r2
  8101f4:	80800615 	stw	r2,24(r16)
  8101f8:	003fee06 	br	8101b4 <__swsetup+0xa8>
  8101fc:	1809883a 	mov	r4,r3
  810200:	08119c00 	call	8119c0 <__sinit>
  810204:	003fc806 	br	810128 <__swsetup+0x1c>
  810208:	80c00417 	ldw	r3,16(r16)
  81020c:	30800214 	ori	r2,r6,8
  810210:	8080030d 	sth	r2,12(r16)
  810214:	003fde06 	br	810190 <__swsetup+0x84>

00810218 <_close_r>:
  810218:	defffe04 	addi	sp,sp,-8
  81021c:	dc000015 	stw	r16,0(sp)
  810220:	2021883a 	mov	r16,r4
  810224:	2809883a 	mov	r4,r5
  810228:	dfc00115 	stw	ra,4(sp)
  81022c:	d0202815 	stw	zero,-32608(gp)
  810230:	08147700 	call	814770 <close>
  810234:	1007883a 	mov	r3,r2
  810238:	00bfffc4 	movi	r2,-1
  81023c:	18800526 	beq	r3,r2,810254 <_close_r+0x3c>
  810240:	1805883a 	mov	r2,r3
  810244:	dfc00117 	ldw	ra,4(sp)
  810248:	dc000017 	ldw	r16,0(sp)
  81024c:	dec00204 	addi	sp,sp,8
  810250:	f800283a 	ret
  810254:	d0a02817 	ldw	r2,-32608(gp)
  810258:	103ff926 	beq	r2,zero,810240 <_close_r+0x28>
  81025c:	80800015 	stw	r2,0(r16)
  810260:	1805883a 	mov	r2,r3
  810264:	dfc00117 	ldw	ra,4(sp)
  810268:	dc000017 	ldw	r16,0(sp)
  81026c:	dec00204 	addi	sp,sp,8
  810270:	f800283a 	ret

00810274 <quorem>:
  810274:	defff504 	addi	sp,sp,-44
  810278:	dd800215 	stw	r22,8(sp)
  81027c:	ddc00115 	stw	r23,4(sp)
  810280:	dfc00a15 	stw	ra,40(sp)
  810284:	df000915 	stw	fp,36(sp)
  810288:	dc000815 	stw	r16,32(sp)
  81028c:	dc400715 	stw	r17,28(sp)
  810290:	dc800615 	stw	r18,24(sp)
  810294:	dcc00515 	stw	r19,20(sp)
  810298:	dd000415 	stw	r20,16(sp)
  81029c:	dd400315 	stw	r21,12(sp)
  8102a0:	2cc00417 	ldw	r19,16(r5)
  8102a4:	20800417 	ldw	r2,16(r4)
  8102a8:	202f883a 	mov	r23,r4
  8102ac:	282d883a 	mov	r22,r5
  8102b0:	0007883a 	mov	r3,zero
  8102b4:	14c03c16 	blt	r2,r19,8103a8 <quorem+0x134>
  8102b8:	9cffffc4 	addi	r19,r19,-1
  8102bc:	980490ba 	slli	r2,r19,2
  8102c0:	2c000504 	addi	r16,r5,20
  8102c4:	25400504 	addi	r21,r4,20
  8102c8:	1563883a 	add	r17,r2,r21
  8102cc:	1425883a 	add	r18,r2,r16
  8102d0:	91400017 	ldw	r5,0(r18)
  8102d4:	8f000017 	ldw	fp,0(r17)
  8102d8:	dc000015 	stw	r16,0(sp)
  8102dc:	29400044 	addi	r5,r5,1
  8102e0:	e009883a 	mov	r4,fp
  8102e4:	080be540 	call	80be54 <__udivsi3>
  8102e8:	1029883a 	mov	r20,r2
  8102ec:	a811883a 	mov	r8,r21
  8102f0:	10003a1e 	bne	r2,zero,8103dc <quorem+0x168>
  8102f4:	b00b883a 	mov	r5,r22
  8102f8:	b809883a 	mov	r4,r23
  8102fc:	0812fd80 	call	812fd8 <__mcmp>
  810300:	10002816 	blt	r2,zero,8103a4 <quorem+0x130>
  810304:	dc000017 	ldw	r16,0(sp)
  810308:	a5000044 	addi	r20,r20,1
  81030c:	0013883a 	mov	r9,zero
  810310:	000d883a 	mov	r6,zero
  810314:	a811883a 	mov	r8,r21
  810318:	81000017 	ldw	r4,0(r16)
  81031c:	40c00017 	ldw	r3,0(r8)
  810320:	84000104 	addi	r16,r16,4
  810324:	20bfffcc 	andi	r2,r4,65535
  810328:	118d883a 	add	r6,r2,r6
  81032c:	317fffcc 	andi	r5,r6,65535
  810330:	18bfffcc 	andi	r2,r3,65535
  810334:	300cd43a 	srli	r6,r6,16
  810338:	2008d43a 	srli	r4,r4,16
  81033c:	1145c83a 	sub	r2,r2,r5
  810340:	124f883a 	add	r7,r2,r9
  810344:	1806d43a 	srli	r3,r3,16
  810348:	2189883a 	add	r4,r4,r6
  81034c:	3813d43a 	srai	r9,r7,16
  810350:	20bfffcc 	andi	r2,r4,65535
  810354:	1887c83a 	sub	r3,r3,r2
  810358:	1a47883a 	add	r3,r3,r9
  81035c:	40c0008d 	sth	r3,2(r8)
  810360:	41c0000d 	sth	r7,0(r8)
  810364:	200cd43a 	srli	r6,r4,16
  810368:	42000104 	addi	r8,r8,4
  81036c:	1813d43a 	srai	r9,r3,16
  810370:	943fe92e 	bgeu	r18,r16,810318 <quorem+0xa4>
  810374:	980490ba 	slli	r2,r19,2
  810378:	1563883a 	add	r17,r2,r21
  81037c:	88c00017 	ldw	r3,0(r17)
  810380:	8c7fff04 	addi	r17,r17,-4
  810384:	1800071e 	bne	r3,zero,8103a4 <quorem+0x130>
  810388:	ac40052e 	bgeu	r21,r17,8103a0 <quorem+0x12c>
  81038c:	88800017 	ldw	r2,0(r17)
  810390:	1000031e 	bne	r2,zero,8103a0 <quorem+0x12c>
  810394:	8c7fff04 	addi	r17,r17,-4
  810398:	9cffffc4 	addi	r19,r19,-1
  81039c:	003ffa06 	br	810388 <quorem+0x114>
  8103a0:	bcc00415 	stw	r19,16(r23)
  8103a4:	a007883a 	mov	r3,r20
  8103a8:	1805883a 	mov	r2,r3
  8103ac:	dfc00a17 	ldw	ra,40(sp)
  8103b0:	df000917 	ldw	fp,36(sp)
  8103b4:	dc000817 	ldw	r16,32(sp)
  8103b8:	dc400717 	ldw	r17,28(sp)
  8103bc:	dc800617 	ldw	r18,24(sp)
  8103c0:	dcc00517 	ldw	r19,20(sp)
  8103c4:	dd000417 	ldw	r20,16(sp)
  8103c8:	dd400317 	ldw	r21,12(sp)
  8103cc:	dd800217 	ldw	r22,8(sp)
  8103d0:	ddc00117 	ldw	r23,4(sp)
  8103d4:	dec00b04 	addi	sp,sp,44
  8103d8:	f800283a 	ret
  8103dc:	0013883a 	mov	r9,zero
  8103e0:	000d883a 	mov	r6,zero
  8103e4:	81000017 	ldw	r4,0(r16)
  8103e8:	41400017 	ldw	r5,0(r8)
  8103ec:	84000104 	addi	r16,r16,4
  8103f0:	20bfffcc 	andi	r2,r4,65535
  8103f4:	1505383a 	mul	r2,r2,r20
  8103f8:	2008d43a 	srli	r4,r4,16
  8103fc:	28ffffcc 	andi	r3,r5,65535
  810400:	118d883a 	add	r6,r2,r6
  810404:	30bfffcc 	andi	r2,r6,65535
  810408:	2509383a 	mul	r4,r4,r20
  81040c:	300cd43a 	srli	r6,r6,16
  810410:	1887c83a 	sub	r3,r3,r2
  810414:	1a4f883a 	add	r7,r3,r9
  810418:	280ad43a 	srli	r5,r5,16
  81041c:	2189883a 	add	r4,r4,r6
  810420:	3813d43a 	srai	r9,r7,16
  810424:	20bfffcc 	andi	r2,r4,65535
  810428:	288bc83a 	sub	r5,r5,r2
  81042c:	2a47883a 	add	r3,r5,r9
  810430:	40c0008d 	sth	r3,2(r8)
  810434:	41c0000d 	sth	r7,0(r8)
  810438:	200cd43a 	srli	r6,r4,16
  81043c:	42000104 	addi	r8,r8,4
  810440:	1813d43a 	srai	r9,r3,16
  810444:	943fe72e 	bgeu	r18,r16,8103e4 <quorem+0x170>
  810448:	8c7fff04 	addi	r17,r17,-4
  81044c:	e03fa91e 	bne	fp,zero,8102f4 <quorem+0x80>
  810450:	ac40052e 	bgeu	r21,r17,810468 <quorem+0x1f4>
  810454:	88800017 	ldw	r2,0(r17)
  810458:	1000031e 	bne	r2,zero,810468 <quorem+0x1f4>
  81045c:	8c7fff04 	addi	r17,r17,-4
  810460:	9cffffc4 	addi	r19,r19,-1
  810464:	003ffa06 	br	810450 <quorem+0x1dc>
  810468:	bcc00415 	stw	r19,16(r23)
  81046c:	003fa106 	br	8102f4 <quorem+0x80>

00810470 <_dtoa_r>:
  810470:	deffdd04 	addi	sp,sp,-140
  810474:	df002115 	stw	fp,132(sp)
  810478:	dc002015 	stw	r16,128(sp)
  81047c:	dc801e15 	stw	r18,120(sp)
  810480:	dcc01d15 	stw	r19,116(sp)
  810484:	dfc02215 	stw	ra,136(sp)
  810488:	dc401f15 	stw	r17,124(sp)
  81048c:	dd001c15 	stw	r20,112(sp)
  810490:	dd401b15 	stw	r21,108(sp)
  810494:	dd801a15 	stw	r22,104(sp)
  810498:	ddc01915 	stw	r23,100(sp)
  81049c:	22001017 	ldw	r8,64(r4)
  8104a0:	2039883a 	mov	fp,r4
  8104a4:	2825883a 	mov	r18,r5
  8104a8:	d9c00315 	stw	r7,12(sp)
  8104ac:	3027883a 	mov	r19,r6
  8104b0:	dc002517 	ldw	r16,148(sp)
  8104b4:	d8001515 	stw	zero,84(sp)
  8104b8:	4000241e 	bne	r8,zero,81054c <_dtoa_r+0xdc>
  8104bc:	98002d16 	blt	r19,zero,810574 <_dtoa_r+0x104>
  8104c0:	98dffc2c 	andhi	r3,r19,32752
  8104c4:	009ffc34 	movhi	r2,32752
  8104c8:	10800004 	addi	r2,r2,0
  8104cc:	80000015 	stw	zero,0(r16)
  8104d0:	18803126 	beq	r3,r2,810598 <_dtoa_r+0x128>
  8104d4:	000d883a 	mov	r6,zero
  8104d8:	000f883a 	mov	r7,zero
  8104dc:	9009883a 	mov	r4,r18
  8104e0:	980b883a 	mov	r5,r19
  8104e4:	080b86c0 	call	80b86c <__eqdf2>
  8104e8:	10003c1e 	bne	r2,zero,8105dc <_dtoa_r+0x16c>
  8104ec:	d8c02417 	ldw	r3,144(sp)
  8104f0:	00800044 	movi	r2,1
  8104f4:	010020b4 	movhi	r4,130
  8104f8:	21278004 	addi	r4,r4,-25088
  8104fc:	18800015 	stw	r2,0(r3)
  810500:	d8802617 	ldw	r2,152(sp)
  810504:	d9001715 	stw	r4,92(sp)
  810508:	10000326 	beq	r2,zero,810518 <_dtoa_r+0xa8>
  81050c:	d8c02617 	ldw	r3,152(sp)
  810510:	20800044 	addi	r2,r4,1
  810514:	18800015 	stw	r2,0(r3)
  810518:	d8801717 	ldw	r2,92(sp)
  81051c:	dfc02217 	ldw	ra,136(sp)
  810520:	df002117 	ldw	fp,132(sp)
  810524:	dc002017 	ldw	r16,128(sp)
  810528:	dc401f17 	ldw	r17,124(sp)
  81052c:	dc801e17 	ldw	r18,120(sp)
  810530:	dcc01d17 	ldw	r19,116(sp)
  810534:	dd001c17 	ldw	r20,112(sp)
  810538:	dd401b17 	ldw	r21,108(sp)
  81053c:	dd801a17 	ldw	r22,104(sp)
  810540:	ddc01917 	ldw	r23,100(sp)
  810544:	dec02304 	addi	sp,sp,140
  810548:	f800283a 	ret
  81054c:	20801117 	ldw	r2,68(r4)
  810550:	400b883a 	mov	r5,r8
  810554:	40800115 	stw	r2,4(r8)
  810558:	20c01117 	ldw	r3,68(r4)
  81055c:	00800044 	movi	r2,1
  810560:	10c4983a 	sll	r2,r2,r3
  810564:	40800215 	stw	r2,8(r8)
  810568:	08128340 	call	812834 <_Bfree>
  81056c:	e0001015 	stw	zero,64(fp)
  810570:	983fd30e 	bge	r19,zero,8104c0 <_dtoa_r+0x50>
  810574:	00a00034 	movhi	r2,32768
  810578:	10bfffc4 	addi	r2,r2,-1
  81057c:	14e6703a 	and	r19,r2,r19
  810580:	00c00044 	movi	r3,1
  810584:	80c00015 	stw	r3,0(r16)
  810588:	009ffc34 	movhi	r2,32752
  81058c:	10800004 	addi	r2,r2,0
  810590:	98dffc2c 	andhi	r3,r19,32752
  810594:	18bfcf1e 	bne	r3,r2,8104d4 <_dtoa_r+0x64>
  810598:	d8c02417 	ldw	r3,144(sp)
  81059c:	0089c3c4 	movi	r2,9999
  8105a0:	18800015 	stw	r2,0(r3)
  8105a4:	9000a226 	beq	r18,zero,810830 <_dtoa_r+0x3c0>
  8105a8:	008020b4 	movhi	r2,130
  8105ac:	10a78204 	addi	r2,r2,-25080
  8105b0:	d8801715 	stw	r2,92(sp)
  8105b4:	d8c02617 	ldw	r3,152(sp)
  8105b8:	183fd726 	beq	r3,zero,810518 <_dtoa_r+0xa8>
  8105bc:	d9001717 	ldw	r4,92(sp)
  8105c0:	208000c7 	ldb	r2,3(r4)
  8105c4:	20c00204 	addi	r3,r4,8
  8105c8:	1000011e 	bne	r2,zero,8105d0 <_dtoa_r+0x160>
  8105cc:	20c000c4 	addi	r3,r4,3
  8105d0:	d8802617 	ldw	r2,152(sp)
  8105d4:	10c00015 	stw	r3,0(r2)
  8105d8:	003fcf06 	br	810518 <_dtoa_r+0xa8>
  8105dc:	d8800104 	addi	r2,sp,4
  8105e0:	e009883a 	mov	r4,fp
  8105e4:	900b883a 	mov	r5,r18
  8105e8:	980d883a 	mov	r6,r19
  8105ec:	d9c00204 	addi	r7,sp,8
  8105f0:	d8800015 	stw	r2,0(sp)
  8105f4:	081336c0 	call	81336c <_d2b>
  8105f8:	d8801415 	stw	r2,80(sp)
  8105fc:	9804d53a 	srli	r2,r19,20
  810600:	1581ffcc 	andi	r22,r2,2047
  810604:	b000921e 	bne	r22,zero,810850 <_dtoa_r+0x3e0>
  810608:	ddc00117 	ldw	r23,4(sp)
  81060c:	d8800217 	ldw	r2,8(sp)
  810610:	00c00804 	movi	r3,32
  810614:	b885883a 	add	r2,r23,r2
  810618:	15810c84 	addi	r22,r2,1074
  81061c:	1d81ba0e 	bge	r3,r22,810d08 <_dtoa_r+0x898>
  810620:	00c01004 	movi	r3,64
  810624:	1d87c83a 	sub	r3,r3,r22
  810628:	10810484 	addi	r2,r2,1042
  81062c:	98c6983a 	sll	r3,r19,r3
  810630:	9084d83a 	srl	r2,r18,r2
  810634:	18a0b03a 	or	r16,r3,r2
  810638:	8009883a 	mov	r4,r16
  81063c:	080bb280 	call	80bb28 <__floatsidf>
  810640:	1011883a 	mov	r8,r2
  810644:	1813883a 	mov	r9,r3
  810648:	8003bc16 	blt	r16,zero,81153c <_dtoa_r+0x10cc>
  81064c:	00bf8434 	movhi	r2,65040
  810650:	10800004 	addi	r2,r2,0
  810654:	1247883a 	add	r3,r2,r9
  810658:	01000044 	movi	r4,1
  81065c:	da000f15 	stw	r8,60(sp)
  810660:	d8c01015 	stw	r3,64(sp)
  810664:	b5bef344 	addi	r22,r22,-1075
  810668:	d9001315 	stw	r4,76(sp)
  81066c:	d9401017 	ldw	r5,64(sp)
  810670:	d9000f17 	ldw	r4,60(sp)
  810674:	0005883a 	mov	r2,zero
  810678:	00cffe34 	movhi	r3,16376
  81067c:	18c00004 	addi	r3,r3,0
  810680:	180f883a 	mov	r7,r3
  810684:	100d883a 	mov	r6,r2
  810688:	080b1a40 	call	80b1a4 <__subdf3>
  81068c:	0218dbf4 	movhi	r8,25455
  810690:	4210d844 	addi	r8,r8,17249
  810694:	024ff4f4 	movhi	r9,16339
  810698:	4a61e9c4 	addi	r9,r9,-30809
  81069c:	480f883a 	mov	r7,r9
  8106a0:	400d883a 	mov	r6,r8
  8106a4:	180b883a 	mov	r5,r3
  8106a8:	1009883a 	mov	r4,r2
  8106ac:	080b21c0 	call	80b21c <__muldf3>
  8106b0:	0222d874 	movhi	r8,35681
  8106b4:	42322cc4 	addi	r8,r8,-14157
  8106b8:	024ff1f4 	movhi	r9,16327
  8106bc:	4a628a04 	addi	r9,r9,-30168
  8106c0:	480f883a 	mov	r7,r9
  8106c4:	400d883a 	mov	r6,r8
  8106c8:	180b883a 	mov	r5,r3
  8106cc:	1009883a 	mov	r4,r2
  8106d0:	080b1380 	call	80b138 <__adddf3>
  8106d4:	b009883a 	mov	r4,r22
  8106d8:	1021883a 	mov	r16,r2
  8106dc:	1823883a 	mov	r17,r3
  8106e0:	080bb280 	call	80bb28 <__floatsidf>
  8106e4:	021427f4 	movhi	r8,20639
  8106e8:	421e7ec4 	addi	r8,r8,31227
  8106ec:	024ff4f4 	movhi	r9,16339
  8106f0:	4a5104c4 	addi	r9,r9,17427
  8106f4:	480f883a 	mov	r7,r9
  8106f8:	400d883a 	mov	r6,r8
  8106fc:	180b883a 	mov	r5,r3
  810700:	1009883a 	mov	r4,r2
  810704:	080b21c0 	call	80b21c <__muldf3>
  810708:	180f883a 	mov	r7,r3
  81070c:	880b883a 	mov	r5,r17
  810710:	100d883a 	mov	r6,r2
  810714:	8009883a 	mov	r4,r16
  810718:	080b1380 	call	80b138 <__adddf3>
  81071c:	1009883a 	mov	r4,r2
  810720:	180b883a 	mov	r5,r3
  810724:	1021883a 	mov	r16,r2
  810728:	1823883a 	mov	r17,r3
  81072c:	080bbf80 	call	80bbf8 <__fixdfsi>
  810730:	000d883a 	mov	r6,zero
  810734:	000f883a 	mov	r7,zero
  810738:	8009883a 	mov	r4,r16
  81073c:	880b883a 	mov	r5,r17
  810740:	d8800915 	stw	r2,36(sp)
  810744:	080ba9c0 	call	80ba9c <__ltdf2>
  810748:	1002ea16 	blt	r2,zero,8112f4 <_dtoa_r+0xe84>
  81074c:	d9000917 	ldw	r4,36(sp)
  810750:	00c00044 	movi	r3,1
  810754:	00800584 	movi	r2,22
  810758:	d8c00b15 	stw	r3,44(sp)
  81075c:	11001036 	bltu	r2,r4,8107a0 <_dtoa_r+0x330>
  810760:	200490fa 	slli	r2,r4,3
  810764:	00c020b4 	movhi	r3,130
  810768:	18e7b904 	addi	r3,r3,-24860
  81076c:	900d883a 	mov	r6,r18
  810770:	10c5883a 	add	r2,r2,r3
  810774:	12000017 	ldw	r8,0(r2)
  810778:	12400117 	ldw	r9,4(r2)
  81077c:	980f883a 	mov	r7,r19
  810780:	4009883a 	mov	r4,r8
  810784:	480b883a 	mov	r5,r9
  810788:	080b9840 	call	80b984 <__gtdf2>
  81078c:	0080030e 	bge	zero,r2,81079c <_dtoa_r+0x32c>
  810790:	d8800917 	ldw	r2,36(sp)
  810794:	10bfffc4 	addi	r2,r2,-1
  810798:	d8800915 	stw	r2,36(sp)
  81079c:	d8000b15 	stw	zero,44(sp)
  8107a0:	bd85c83a 	sub	r2,r23,r22
  8107a4:	147fffc4 	addi	r17,r2,-1
  8107a8:	8802ce16 	blt	r17,zero,8112e4 <_dtoa_r+0xe74>
  8107ac:	dc400d15 	stw	r17,52(sp)
  8107b0:	d8000415 	stw	zero,16(sp)
  8107b4:	d8c00917 	ldw	r3,36(sp)
  8107b8:	1802c216 	blt	r3,zero,8112c4 <_dtoa_r+0xe54>
  8107bc:	d9000d17 	ldw	r4,52(sp)
  8107c0:	d8000515 	stw	zero,20(sp)
  8107c4:	d8c00e15 	stw	r3,56(sp)
  8107c8:	20c9883a 	add	r4,r4,r3
  8107cc:	d9000d15 	stw	r4,52(sp)
  8107d0:	d8c00317 	ldw	r3,12(sp)
  8107d4:	00800244 	movi	r2,9
  8107d8:	10c0012e 	bgeu	r2,r3,8107e0 <_dtoa_r+0x370>
  8107dc:	d8000315 	stw	zero,12(sp)
  8107e0:	d9000317 	ldw	r4,12(sp)
  8107e4:	00800144 	movi	r2,5
  8107e8:	04000044 	movi	r16,1
  8107ec:	1100030e 	bge	r2,r4,8107fc <_dtoa_r+0x38c>
  8107f0:	213fff04 	addi	r4,r4,-4
  8107f4:	d9000315 	stw	r4,12(sp)
  8107f8:	0021883a 	mov	r16,zero
  8107fc:	00ffffc4 	movi	r3,-1
  810800:	d8c00615 	stw	r3,24(sp)
  810804:	d8c00815 	stw	r3,32(sp)
  810808:	d8c00317 	ldw	r3,12(sp)
  81080c:	01000044 	movi	r4,1
  810810:	d9000c15 	stw	r4,48(sp)
  810814:	10c02136 	bltu	r2,r3,81089c <_dtoa_r+0x42c>
  810818:	180490ba 	slli	r2,r3,2
  81081c:	00c020b4 	movhi	r3,130
  810820:	18e79004 	addi	r3,r3,-25024
  810824:	10c5883a 	add	r2,r2,r3
  810828:	11000017 	ldw	r4,0(r2)
  81082c:	2000683a 	jmp	r4
  810830:	00800434 	movhi	r2,16
  810834:	10bfffc4 	addi	r2,r2,-1
  810838:	010020b4 	movhi	r4,130
  81083c:	21278d04 	addi	r4,r4,-25036
  810840:	9884703a 	and	r2,r19,r2
  810844:	d9001715 	stw	r4,92(sp)
  810848:	103f5a26 	beq	r2,zero,8105b4 <_dtoa_r+0x144>
  81084c:	003f5606 	br	8105a8 <_dtoa_r+0x138>
  810850:	00800434 	movhi	r2,16
  810854:	10bfffc4 	addi	r2,r2,-1
  810858:	ddc00117 	ldw	r23,4(sp)
  81085c:	14c6703a 	and	r3,r2,r19
  810860:	190ffc34 	orhi	r4,r3,16368
  810864:	b5bf0044 	addi	r22,r22,-1023
  810868:	dc800f15 	stw	r18,60(sp)
  81086c:	d9001015 	stw	r4,64(sp)
  810870:	d8001315 	stw	zero,76(sp)
  810874:	003f7d06 	br	81066c <_dtoa_r+0x1fc>
  810878:	d8000c15 	stw	zero,48(sp)
  81087c:	d8c02317 	ldw	r3,140(sp)
  810880:	d9000917 	ldw	r4,36(sp)
  810884:	1905883a 	add	r2,r3,r4
  810888:	15800044 	addi	r22,r2,1
  81088c:	d8800815 	stw	r2,32(sp)
  810890:	dd800615 	stw	r22,24(sp)
  810894:	05800116 	blt	zero,r22,81089c <_dtoa_r+0x42c>
  810898:	05800044 	movi	r22,1
  81089c:	00800604 	movi	r2,24
  8108a0:	e0001115 	stw	zero,68(fp)
  8108a4:	04400104 	movi	r17,4
  8108a8:	b0800636 	bltu	r22,r2,8108c4 <_dtoa_r+0x454>
  8108ac:	0007883a 	mov	r3,zero
  8108b0:	8c63883a 	add	r17,r17,r17
  8108b4:	18c00044 	addi	r3,r3,1
  8108b8:	88800504 	addi	r2,r17,20
  8108bc:	b0bffc2e 	bgeu	r22,r2,8108b0 <_dtoa_r+0x440>
  8108c0:	e0c01115 	stw	r3,68(fp)
  8108c4:	e1401117 	ldw	r5,68(fp)
  8108c8:	e009883a 	mov	r4,fp
  8108cc:	08127840 	call	812784 <_Balloc>
  8108d0:	d8c00617 	ldw	r3,24(sp)
  8108d4:	d8801815 	stw	r2,96(sp)
  8108d8:	e0801015 	stw	r2,64(fp)
  8108dc:	d8801715 	stw	r2,92(sp)
  8108e0:	00800384 	movi	r2,14
  8108e4:	10c0a836 	bltu	r2,r3,810b88 <_dtoa_r+0x718>
  8108e8:	8000a726 	beq	r16,zero,810b88 <_dtoa_r+0x718>
  8108ec:	d8c00917 	ldw	r3,36(sp)
  8108f0:	d9000617 	ldw	r4,24(sp)
  8108f4:	dc800f15 	stw	r18,60(sp)
  8108f8:	dcc01015 	stw	r19,64(sp)
  8108fc:	d8c00a15 	stw	r3,40(sp)
  810900:	d9000715 	stw	r4,28(sp)
  810904:	05800084 	movi	r22,2
  810908:	00c1230e 	bge	zero,r3,810d98 <_dtoa_r+0x928>
  81090c:	188003cc 	andi	r2,r3,15
  810910:	1823d13a 	srai	r17,r3,4
  810914:	100490fa 	slli	r2,r2,3
  810918:	00c020b4 	movhi	r3,130
  81091c:	18e7b904 	addi	r3,r3,-24860
  810920:	10c5883a 	add	r2,r2,r3
  810924:	88c0040c 	andi	r3,r17,16
  810928:	15000017 	ldw	r20,0(r2)
  81092c:	15400117 	ldw	r21,4(r2)
  810930:	18000d26 	beq	r3,zero,810968 <_dtoa_r+0x4f8>
  810934:	018020b4 	movhi	r6,130
  810938:	31a7af04 	addi	r6,r6,-24900
  81093c:	30c00917 	ldw	r3,36(r6)
  810940:	30800817 	ldw	r2,32(r6)
  810944:	980b883a 	mov	r5,r19
  810948:	9009883a 	mov	r4,r18
  81094c:	180f883a 	mov	r7,r3
  810950:	100d883a 	mov	r6,r2
  810954:	080b61c0 	call	80b61c <__divdf3>
  810958:	8c4003cc 	andi	r17,r17,15
  81095c:	058000c4 	movi	r22,3
  810960:	1025883a 	mov	r18,r2
  810964:	1827883a 	mov	r19,r3
  810968:	88001126 	beq	r17,zero,8109b0 <_dtoa_r+0x540>
  81096c:	040020b4 	movhi	r16,130
  810970:	8427af04 	addi	r16,r16,-24900
  810974:	8880004c 	andi	r2,r17,1
  810978:	10000a26 	beq	r2,zero,8109a4 <_dtoa_r+0x534>
  81097c:	80800017 	ldw	r2,0(r16)
  810980:	80c00117 	ldw	r3,4(r16)
  810984:	a80b883a 	mov	r5,r21
  810988:	a009883a 	mov	r4,r20
  81098c:	180f883a 	mov	r7,r3
  810990:	100d883a 	mov	r6,r2
  810994:	080b21c0 	call	80b21c <__muldf3>
  810998:	b5800044 	addi	r22,r22,1
  81099c:	1029883a 	mov	r20,r2
  8109a0:	182b883a 	mov	r21,r3
  8109a4:	8823d07a 	srai	r17,r17,1
  8109a8:	84000204 	addi	r16,r16,8
  8109ac:	883ff11e 	bne	r17,zero,810974 <_dtoa_r+0x504>
  8109b0:	980b883a 	mov	r5,r19
  8109b4:	9009883a 	mov	r4,r18
  8109b8:	a80f883a 	mov	r7,r21
  8109bc:	a00d883a 	mov	r6,r20
  8109c0:	080b61c0 	call	80b61c <__divdf3>
  8109c4:	1025883a 	mov	r18,r2
  8109c8:	1827883a 	mov	r19,r3
  8109cc:	d8c00b17 	ldw	r3,44(sp)
  8109d0:	18000926 	beq	r3,zero,8109f8 <_dtoa_r+0x588>
  8109d4:	0005883a 	mov	r2,zero
  8109d8:	00cffc34 	movhi	r3,16368
  8109dc:	18c00004 	addi	r3,r3,0
  8109e0:	180f883a 	mov	r7,r3
  8109e4:	9009883a 	mov	r4,r18
  8109e8:	980b883a 	mov	r5,r19
  8109ec:	100d883a 	mov	r6,r2
  8109f0:	080ba9c0 	call	80ba9c <__ltdf2>
  8109f4:	10037816 	blt	r2,zero,8117d8 <_dtoa_r+0x1368>
  8109f8:	b009883a 	mov	r4,r22
  8109fc:	080bb280 	call	80bb28 <__floatsidf>
  810a00:	180b883a 	mov	r5,r3
  810a04:	1009883a 	mov	r4,r2
  810a08:	900d883a 	mov	r6,r18
  810a0c:	980f883a 	mov	r7,r19
  810a10:	080b21c0 	call	80b21c <__muldf3>
  810a14:	0011883a 	mov	r8,zero
  810a18:	02500734 	movhi	r9,16412
  810a1c:	4a400004 	addi	r9,r9,0
  810a20:	180b883a 	mov	r5,r3
  810a24:	480f883a 	mov	r7,r9
  810a28:	1009883a 	mov	r4,r2
  810a2c:	400d883a 	mov	r6,r8
  810a30:	080b1380 	call	80b138 <__adddf3>
  810a34:	d8801115 	stw	r2,68(sp)
  810a38:	00bf3034 	movhi	r2,64704
  810a3c:	10800004 	addi	r2,r2,0
  810a40:	18a9883a 	add	r20,r3,r2
  810a44:	d8800617 	ldw	r2,24(sp)
  810a48:	dd001215 	stw	r20,72(sp)
  810a4c:	10024e1e 	bne	r2,zero,811388 <_dtoa_r+0xf18>
  810a50:	00d00534 	movhi	r3,16404
  810a54:	18c00004 	addi	r3,r3,0
  810a58:	980b883a 	mov	r5,r19
  810a5c:	180f883a 	mov	r7,r3
  810a60:	9009883a 	mov	r4,r18
  810a64:	100d883a 	mov	r6,r2
  810a68:	080b1a40 	call	80b1a4 <__subdf3>
  810a6c:	d9801117 	ldw	r6,68(sp)
  810a70:	a00f883a 	mov	r7,r20
  810a74:	1009883a 	mov	r4,r2
  810a78:	180b883a 	mov	r5,r3
  810a7c:	1021883a 	mov	r16,r2
  810a80:	1823883a 	mov	r17,r3
  810a84:	d8001615 	stw	zero,88(sp)
  810a88:	002f883a 	mov	r23,zero
  810a8c:	080b9840 	call	80b984 <__gtdf2>
  810a90:	0080260e 	bge	zero,r2,810b2c <_dtoa_r+0x6bc>
  810a94:	d8800917 	ldw	r2,36(sp)
  810a98:	d8c01817 	ldw	r3,96(sp)
  810a9c:	d9001817 	ldw	r4,96(sp)
  810aa0:	10800044 	addi	r2,r2,1
  810aa4:	18c00044 	addi	r3,r3,1
  810aa8:	d8800915 	stw	r2,36(sp)
  810aac:	d8c01715 	stw	r3,92(sp)
  810ab0:	00800c44 	movi	r2,49
  810ab4:	20800005 	stb	r2,0(r4)
  810ab8:	e009883a 	mov	r4,fp
  810abc:	b80b883a 	mov	r5,r23
  810ac0:	08128340 	call	812834 <_Bfree>
  810ac4:	d9001617 	ldw	r4,88(sp)
  810ac8:	20000926 	beq	r4,zero,810af0 <_dtoa_r+0x680>
  810acc:	d8801517 	ldw	r2,84(sp)
  810ad0:	10000426 	beq	r2,zero,810ae4 <_dtoa_r+0x674>
  810ad4:	11000326 	beq	r2,r4,810ae4 <_dtoa_r+0x674>
  810ad8:	100b883a 	mov	r5,r2
  810adc:	e009883a 	mov	r4,fp
  810ae0:	08128340 	call	812834 <_Bfree>
  810ae4:	d9401617 	ldw	r5,88(sp)
  810ae8:	e009883a 	mov	r4,fp
  810aec:	08128340 	call	812834 <_Bfree>
  810af0:	d9401417 	ldw	r5,80(sp)
  810af4:	e009883a 	mov	r4,fp
  810af8:	08128340 	call	812834 <_Bfree>
  810afc:	d8c01717 	ldw	r3,92(sp)
  810b00:	18000005 	stb	zero,0(r3)
  810b04:	d9000917 	ldw	r4,36(sp)
  810b08:	d8c02417 	ldw	r3,144(sp)
  810b0c:	20800044 	addi	r2,r4,1
  810b10:	d9002617 	ldw	r4,152(sp)
  810b14:	18800015 	stw	r2,0(r3)
  810b18:	20000226 	beq	r4,zero,810b24 <_dtoa_r+0x6b4>
  810b1c:	d8801717 	ldw	r2,92(sp)
  810b20:	20800015 	stw	r2,0(r4)
  810b24:	d8801817 	ldw	r2,96(sp)
  810b28:	003e7c06 	br	81051c <_dtoa_r+0xac>
  810b2c:	d9001117 	ldw	r4,68(sp)
  810b30:	000d883a 	mov	r6,zero
  810b34:	01e00034 	movhi	r7,32768
  810b38:	39c00004 	addi	r7,r7,0
  810b3c:	2184f03a 	xor	r2,r4,r6
  810b40:	d9001217 	ldw	r4,72(sp)
  810b44:	800d883a 	mov	r6,r16
  810b48:	21c6f03a 	xor	r3,r4,r7
  810b4c:	180b883a 	mov	r5,r3
  810b50:	1009883a 	mov	r4,r2
  810b54:	880f883a 	mov	r7,r17
  810b58:	080b9840 	call	80b984 <__gtdf2>
  810b5c:	00808a16 	blt	zero,r2,810d88 <_dtoa_r+0x918>
  810b60:	d9000f17 	ldw	r4,60(sp)
  810b64:	d8801017 	ldw	r2,64(sp)
  810b68:	d8c00a17 	ldw	r3,40(sp)
  810b6c:	2025883a 	mov	r18,r4
  810b70:	1027883a 	mov	r19,r2
  810b74:	d9000717 	ldw	r4,28(sp)
  810b78:	d8801817 	ldw	r2,96(sp)
  810b7c:	d8c00915 	stw	r3,36(sp)
  810b80:	d9000615 	stw	r4,24(sp)
  810b84:	d8801715 	stw	r2,92(sp)
  810b88:	d8c00217 	ldw	r3,8(sp)
  810b8c:	1800a716 	blt	r3,zero,810e2c <_dtoa_r+0x9bc>
  810b90:	d9000917 	ldw	r4,36(sp)
  810b94:	00800384 	movi	r2,14
  810b98:	1100a416 	blt	r2,r4,810e2c <_dtoa_r+0x9bc>
  810b9c:	200490fa 	slli	r2,r4,3
  810ba0:	00c020b4 	movhi	r3,130
  810ba4:	18e7b904 	addi	r3,r3,-24860
  810ba8:	10c5883a 	add	r2,r2,r3
  810bac:	15000017 	ldw	r20,0(r2)
  810bb0:	15400117 	ldw	r21,4(r2)
  810bb4:	d8802317 	ldw	r2,140(sp)
  810bb8:	10006016 	blt	r2,zero,810d3c <_dtoa_r+0x8cc>
  810bbc:	05800044 	movi	r22,1
  810bc0:	00001106 	br	810c08 <_dtoa_r+0x798>
  810bc4:	0005883a 	mov	r2,zero
  810bc8:	00d00934 	movhi	r3,16420
  810bcc:	18c00004 	addi	r3,r3,0
  810bd0:	400d883a 	mov	r6,r8
  810bd4:	180b883a 	mov	r5,r3
  810bd8:	480f883a 	mov	r7,r9
  810bdc:	1009883a 	mov	r4,r2
  810be0:	080b21c0 	call	80b21c <__muldf3>
  810be4:	180b883a 	mov	r5,r3
  810be8:	000d883a 	mov	r6,zero
  810bec:	000f883a 	mov	r7,zero
  810bf0:	1009883a 	mov	r4,r2
  810bf4:	1025883a 	mov	r18,r2
  810bf8:	1827883a 	mov	r19,r3
  810bfc:	080b86c0 	call	80b86c <__eqdf2>
  810c00:	103fbb26 	beq	r2,zero,810af0 <_dtoa_r+0x680>
  810c04:	b5800044 	addi	r22,r22,1
  810c08:	a00d883a 	mov	r6,r20
  810c0c:	a80f883a 	mov	r7,r21
  810c10:	9009883a 	mov	r4,r18
  810c14:	980b883a 	mov	r5,r19
  810c18:	080b61c0 	call	80b61c <__divdf3>
  810c1c:	180b883a 	mov	r5,r3
  810c20:	1009883a 	mov	r4,r2
  810c24:	080bbf80 	call	80bbf8 <__fixdfsi>
  810c28:	1009883a 	mov	r4,r2
  810c2c:	102f883a 	mov	r23,r2
  810c30:	080bb280 	call	80bb28 <__floatsidf>
  810c34:	180b883a 	mov	r5,r3
  810c38:	1009883a 	mov	r4,r2
  810c3c:	a00d883a 	mov	r6,r20
  810c40:	a80f883a 	mov	r7,r21
  810c44:	080b21c0 	call	80b21c <__muldf3>
  810c48:	180f883a 	mov	r7,r3
  810c4c:	9009883a 	mov	r4,r18
  810c50:	980b883a 	mov	r5,r19
  810c54:	100d883a 	mov	r6,r2
  810c58:	080b1a40 	call	80b1a4 <__subdf3>
  810c5c:	d9001717 	ldw	r4,92(sp)
  810c60:	1011883a 	mov	r8,r2
  810c64:	b8800c04 	addi	r2,r23,48
  810c68:	20800005 	stb	r2,0(r4)
  810c6c:	d8800617 	ldw	r2,24(sp)
  810c70:	21000044 	addi	r4,r4,1
  810c74:	1813883a 	mov	r9,r3
  810c78:	d9001715 	stw	r4,92(sp)
  810c7c:	b0bfd11e 	bne	r22,r2,810bc4 <_dtoa_r+0x754>
  810c80:	4009883a 	mov	r4,r8
  810c84:	180b883a 	mov	r5,r3
  810c88:	400d883a 	mov	r6,r8
  810c8c:	180f883a 	mov	r7,r3
  810c90:	080b1380 	call	80b138 <__adddf3>
  810c94:	100d883a 	mov	r6,r2
  810c98:	a009883a 	mov	r4,r20
  810c9c:	a80b883a 	mov	r5,r21
  810ca0:	180f883a 	mov	r7,r3
  810ca4:	1021883a 	mov	r16,r2
  810ca8:	1823883a 	mov	r17,r3
  810cac:	080ba9c0 	call	80ba9c <__ltdf2>
  810cb0:	10000816 	blt	r2,zero,810cd4 <_dtoa_r+0x864>
  810cb4:	a80b883a 	mov	r5,r21
  810cb8:	800d883a 	mov	r6,r16
  810cbc:	880f883a 	mov	r7,r17
  810cc0:	a009883a 	mov	r4,r20
  810cc4:	080b86c0 	call	80b86c <__eqdf2>
  810cc8:	103f891e 	bne	r2,zero,810af0 <_dtoa_r+0x680>
  810ccc:	b880004c 	andi	r2,r23,1
  810cd0:	103f8726 	beq	r2,zero,810af0 <_dtoa_r+0x680>
  810cd4:	d8c01717 	ldw	r3,92(sp)
  810cd8:	00800e44 	movi	r2,57
  810cdc:	18ffffc4 	addi	r3,r3,-1
  810ce0:	d8c01715 	stw	r3,92(sp)
  810ce4:	18c00007 	ldb	r3,0(r3)
  810ce8:	1882341e 	bne	r3,r2,8115bc <_dtoa_r+0x114c>
  810cec:	d9001717 	ldw	r4,92(sp)
  810cf0:	d8801817 	ldw	r2,96(sp)
  810cf4:	20822b26 	beq	r4,r2,8115a4 <_dtoa_r+0x1134>
  810cf8:	213fffc4 	addi	r4,r4,-1
  810cfc:	d9001715 	stw	r4,92(sp)
  810d00:	20800007 	ldb	r2,0(r4)
  810d04:	003ff806 	br	810ce8 <_dtoa_r+0x878>
  810d08:	1d85c83a 	sub	r2,r3,r22
  810d0c:	90a0983a 	sll	r16,r18,r2
  810d10:	003e4906 	br	810638 <_dtoa_r+0x1c8>
  810d14:	d8000c15 	stw	zero,48(sp)
  810d18:	d9002317 	ldw	r4,140(sp)
  810d1c:	0102a70e 	bge	zero,r4,8117bc <_dtoa_r+0x134c>
  810d20:	dd802317 	ldw	r22,140(sp)
  810d24:	dd800815 	stw	r22,32(sp)
  810d28:	dd800615 	stw	r22,24(sp)
  810d2c:	003edb06 	br	81089c <_dtoa_r+0x42c>
  810d30:	05800484 	movi	r22,18
  810d34:	d8002315 	stw	zero,140(sp)
  810d38:	003ed806 	br	81089c <_dtoa_r+0x42c>
  810d3c:	d8c00617 	ldw	r3,24(sp)
  810d40:	00ff9e16 	blt	zero,r3,810bbc <_dtoa_r+0x74c>
  810d44:	d8001615 	stw	zero,88(sp)
  810d48:	002f883a 	mov	r23,zero
  810d4c:	18000e16 	blt	r3,zero,810d88 <_dtoa_r+0x918>
  810d50:	0005883a 	mov	r2,zero
  810d54:	00d00534 	movhi	r3,16404
  810d58:	18c00004 	addi	r3,r3,0
  810d5c:	a80b883a 	mov	r5,r21
  810d60:	180f883a 	mov	r7,r3
  810d64:	a009883a 	mov	r4,r20
  810d68:	100d883a 	mov	r6,r2
  810d6c:	080b21c0 	call	80b21c <__muldf3>
  810d70:	180b883a 	mov	r5,r3
  810d74:	980f883a 	mov	r7,r19
  810d78:	1009883a 	mov	r4,r2
  810d7c:	900d883a 	mov	r6,r18
  810d80:	080ba100 	call	80ba10 <__gedf2>
  810d84:	103f4316 	blt	r2,zero,810a94 <_dtoa_r+0x624>
  810d88:	d9002317 	ldw	r4,140(sp)
  810d8c:	0108303a 	nor	r4,zero,r4
  810d90:	d9000915 	stw	r4,36(sp)
  810d94:	003f4806 	br	810ab8 <_dtoa_r+0x648>
  810d98:	d8800917 	ldw	r2,36(sp)
  810d9c:	00a9c83a 	sub	r20,zero,r2
  810da0:	a03f0a26 	beq	r20,zero,8109cc <_dtoa_r+0x55c>
  810da4:	a14003cc 	andi	r5,r20,15
  810da8:	280a90fa 	slli	r5,r5,3
  810dac:	010020b4 	movhi	r4,130
  810db0:	2127b904 	addi	r4,r4,-24860
  810db4:	a023d13a 	srai	r17,r20,4
  810db8:	290b883a 	add	r5,r5,r4
  810dbc:	28800017 	ldw	r2,0(r5)
  810dc0:	28c00117 	ldw	r3,4(r5)
  810dc4:	980f883a 	mov	r7,r19
  810dc8:	900d883a 	mov	r6,r18
  810dcc:	180b883a 	mov	r5,r3
  810dd0:	1009883a 	mov	r4,r2
  810dd4:	080b21c0 	call	80b21c <__muldf3>
  810dd8:	1025883a 	mov	r18,r2
  810ddc:	1827883a 	mov	r19,r3
  810de0:	883efa26 	beq	r17,zero,8109cc <_dtoa_r+0x55c>
  810de4:	040020b4 	movhi	r16,130
  810de8:	8427af04 	addi	r16,r16,-24900
  810dec:	8880004c 	andi	r2,r17,1
  810df0:	10000a26 	beq	r2,zero,810e1c <_dtoa_r+0x9ac>
  810df4:	80800017 	ldw	r2,0(r16)
  810df8:	80c00117 	ldw	r3,4(r16)
  810dfc:	980f883a 	mov	r7,r19
  810e00:	900d883a 	mov	r6,r18
  810e04:	180b883a 	mov	r5,r3
  810e08:	1009883a 	mov	r4,r2
  810e0c:	080b21c0 	call	80b21c <__muldf3>
  810e10:	b5800044 	addi	r22,r22,1
  810e14:	1025883a 	mov	r18,r2
  810e18:	1827883a 	mov	r19,r3
  810e1c:	8823d07a 	srai	r17,r17,1
  810e20:	84000204 	addi	r16,r16,8
  810e24:	883ff11e 	bne	r17,zero,810dec <_dtoa_r+0x97c>
  810e28:	003ee806 	br	8109cc <_dtoa_r+0x55c>
  810e2c:	d9000c17 	ldw	r4,48(sp)
  810e30:	dd000417 	ldw	r20,16(sp)
  810e34:	dc000517 	ldw	r16,20(sp)
  810e38:	202b003a 	cmpeq	r21,r4,zero
  810e3c:	d8001515 	stw	zero,84(sp)
  810e40:	d8001615 	stw	zero,88(sp)
  810e44:	a800131e 	bne	r21,zero,810e94 <_dtoa_r+0xa24>
  810e48:	d9000317 	ldw	r4,12(sp)
  810e4c:	00800044 	movi	r2,1
  810e50:	1101a216 	blt	r2,r4,8114dc <_dtoa_r+0x106c>
  810e54:	d8801317 	ldw	r2,76(sp)
  810e58:	1d810cc4 	addi	r22,r3,1075
  810e5c:	1000031e 	bne	r2,zero,810e6c <_dtoa_r+0x9fc>
  810e60:	d8800117 	ldw	r2,4(sp)
  810e64:	00c00d84 	movi	r3,54
  810e68:	18adc83a 	sub	r22,r3,r2
  810e6c:	e009883a 	mov	r4,fp
  810e70:	01400044 	movi	r5,1
  810e74:	0812b640 	call	812b64 <_i2b>
  810e78:	d8801615 	stw	r2,88(sp)
  810e7c:	d9000d17 	ldw	r4,52(sp)
  810e80:	d8800417 	ldw	r2,16(sp)
  810e84:	2589883a 	add	r4,r4,r22
  810e88:	1585883a 	add	r2,r2,r22
  810e8c:	d9000d15 	stw	r4,52(sp)
  810e90:	d8800415 	stw	r2,16(sp)
  810e94:	05000c0e 	bge	zero,r20,810ec8 <_dtoa_r+0xa58>
  810e98:	d8c00d17 	ldw	r3,52(sp)
  810e9c:	00c00a0e 	bge	zero,r3,810ec8 <_dtoa_r+0xa58>
  810ea0:	182d883a 	mov	r22,r3
  810ea4:	a0c0010e 	bge	r20,r3,810eac <_dtoa_r+0xa3c>
  810ea8:	a02d883a 	mov	r22,r20
  810eac:	d9000d17 	ldw	r4,52(sp)
  810eb0:	d8800417 	ldw	r2,16(sp)
  810eb4:	a5a9c83a 	sub	r20,r20,r22
  810eb8:	2589c83a 	sub	r4,r4,r22
  810ebc:	1585c83a 	sub	r2,r2,r22
  810ec0:	d9000d15 	stw	r4,52(sp)
  810ec4:	d8800415 	stw	r2,16(sp)
  810ec8:	d8c00517 	ldw	r3,20(sp)
  810ecc:	00c0130e 	bge	zero,r3,810f1c <_dtoa_r+0xaac>
  810ed0:	a801941e 	bne	r21,zero,811524 <_dtoa_r+0x10b4>
  810ed4:	04000e0e 	bge	zero,r16,810f10 <_dtoa_r+0xaa0>
  810ed8:	d9401617 	ldw	r5,88(sp)
  810edc:	e009883a 	mov	r4,fp
  810ee0:	800d883a 	mov	r6,r16
  810ee4:	0812d740 	call	812d74 <_pow5mult>
  810ee8:	d9801417 	ldw	r6,80(sp)
  810eec:	e009883a 	mov	r4,fp
  810ef0:	100b883a 	mov	r5,r2
  810ef4:	d8801615 	stw	r2,88(sp)
  810ef8:	0812ba00 	call	812ba0 <_multiply>
  810efc:	d9401417 	ldw	r5,80(sp)
  810f00:	1023883a 	mov	r17,r2
  810f04:	e009883a 	mov	r4,fp
  810f08:	08128340 	call	812834 <_Bfree>
  810f0c:	dc401415 	stw	r17,80(sp)
  810f10:	d9000517 	ldw	r4,20(sp)
  810f14:	2423c83a 	sub	r17,r4,r16
  810f18:	8801af1e 	bne	r17,zero,8115d8 <_dtoa_r+0x1168>
  810f1c:	04000044 	movi	r16,1
  810f20:	e009883a 	mov	r4,fp
  810f24:	800b883a 	mov	r5,r16
  810f28:	0812b640 	call	812b64 <_i2b>
  810f2c:	102f883a 	mov	r23,r2
  810f30:	d8800e17 	ldw	r2,56(sp)
  810f34:	0080050e 	bge	zero,r2,810f4c <_dtoa_r+0xadc>
  810f38:	b80b883a 	mov	r5,r23
  810f3c:	e009883a 	mov	r4,fp
  810f40:	100d883a 	mov	r6,r2
  810f44:	0812d740 	call	812d74 <_pow5mult>
  810f48:	102f883a 	mov	r23,r2
  810f4c:	d8c00317 	ldw	r3,12(sp)
  810f50:	0023883a 	mov	r17,zero
  810f54:	80c00e16 	blt	r16,r3,810f90 <_dtoa_r+0xb20>
  810f58:	90000d1e 	bne	r18,zero,810f90 <_dtoa_r+0xb20>
  810f5c:	00800434 	movhi	r2,16
  810f60:	10bfffc4 	addi	r2,r2,-1
  810f64:	9884703a 	and	r2,r19,r2
  810f68:	1000091e 	bne	r2,zero,810f90 <_dtoa_r+0xb20>
  810f6c:	989ffc2c 	andhi	r2,r19,32752
  810f70:	10000726 	beq	r2,zero,810f90 <_dtoa_r+0xb20>
  810f74:	d9000417 	ldw	r4,16(sp)
  810f78:	d8800d17 	ldw	r2,52(sp)
  810f7c:	8023883a 	mov	r17,r16
  810f80:	21000044 	addi	r4,r4,1
  810f84:	10800044 	addi	r2,r2,1
  810f88:	d9000415 	stw	r4,16(sp)
  810f8c:	d8800d15 	stw	r2,52(sp)
  810f90:	d8c00e17 	ldw	r3,56(sp)
  810f94:	1800f41e 	bne	r3,zero,811368 <_dtoa_r+0xef8>
  810f98:	d8c00d17 	ldw	r3,52(sp)
  810f9c:	18800044 	addi	r2,r3,1
  810fa0:	158007cc 	andi	r22,r2,31
  810fa4:	b0000226 	beq	r22,zero,810fb0 <_dtoa_r+0xb40>
  810fa8:	00800804 	movi	r2,32
  810fac:	15adc83a 	sub	r22,r2,r22
  810fb0:	00800104 	movi	r2,4
  810fb4:	1580b20e 	bge	r2,r22,811280 <_dtoa_r+0xe10>
  810fb8:	d9000d17 	ldw	r4,52(sp)
  810fbc:	d8800417 	ldw	r2,16(sp)
  810fc0:	b5bfff04 	addi	r22,r22,-4
  810fc4:	2589883a 	add	r4,r4,r22
  810fc8:	1585883a 	add	r2,r2,r22
  810fcc:	d9000d15 	stw	r4,52(sp)
  810fd0:	d8800415 	stw	r2,16(sp)
  810fd4:	a5a9883a 	add	r20,r20,r22
  810fd8:	d8800417 	ldw	r2,16(sp)
  810fdc:	0080050e 	bge	zero,r2,810ff4 <_dtoa_r+0xb84>
  810fe0:	d9401417 	ldw	r5,80(sp)
  810fe4:	100d883a 	mov	r6,r2
  810fe8:	e009883a 	mov	r4,fp
  810fec:	0812ea00 	call	812ea0 <_lshift>
  810ff0:	d8801415 	stw	r2,80(sp)
  810ff4:	d8c00d17 	ldw	r3,52(sp)
  810ff8:	00c0050e 	bge	zero,r3,811010 <_dtoa_r+0xba0>
  810ffc:	b80b883a 	mov	r5,r23
  811000:	180d883a 	mov	r6,r3
  811004:	e009883a 	mov	r4,fp
  811008:	0812ea00 	call	812ea0 <_lshift>
  81100c:	102f883a 	mov	r23,r2
  811010:	d9000b17 	ldw	r4,44(sp)
  811014:	2000c31e 	bne	r4,zero,811324 <_dtoa_r+0xeb4>
  811018:	d9000617 	ldw	r4,24(sp)
  81101c:	0101520e 	bge	zero,r4,811568 <_dtoa_r+0x10f8>
  811020:	05800044 	movi	r22,1
  811024:	a8004d1e 	bne	r21,zero,81115c <_dtoa_r+0xcec>
  811028:	0500050e 	bge	zero,r20,811040 <_dtoa_r+0xbd0>
  81102c:	d9401617 	ldw	r5,88(sp)
  811030:	a00d883a 	mov	r6,r20
  811034:	e009883a 	mov	r4,fp
  811038:	0812ea00 	call	812ea0 <_lshift>
  81103c:	d8801615 	stw	r2,88(sp)
  811040:	d8801617 	ldw	r2,88(sp)
  811044:	d8801515 	stw	r2,84(sp)
  811048:	8801661e 	bne	r17,zero,8115e4 <_dtoa_r+0x1174>
  81104c:	94c0004c 	andi	r19,r18,1
  811050:	05800044 	movi	r22,1
  811054:	05400e44 	movi	r21,57
  811058:	d9001417 	ldw	r4,80(sp)
  81105c:	b80b883a 	mov	r5,r23
  811060:	05000044 	movi	r20,1
  811064:	08102740 	call	810274 <quorem>
  811068:	d9001417 	ldw	r4,80(sp)
  81106c:	d9401517 	ldw	r5,84(sp)
  811070:	14800c04 	addi	r18,r2,48
  811074:	0812fd80 	call	812fd8 <__mcmp>
  811078:	d9801617 	ldw	r6,88(sp)
  81107c:	e009883a 	mov	r4,fp
  811080:	b80b883a 	mov	r5,r23
  811084:	1023883a 	mov	r17,r2
  811088:	081303c0 	call	81303c <__mdiff>
  81108c:	1021883a 	mov	r16,r2
  811090:	10800317 	ldw	r2,12(r2)
  811094:	10006c26 	beq	r2,zero,811248 <_dtoa_r+0xdd8>
  811098:	800b883a 	mov	r5,r16
  81109c:	e009883a 	mov	r4,fp
  8110a0:	08128340 	call	812834 <_Bfree>
  8110a4:	a000031e 	bne	r20,zero,8110b4 <_dtoa_r+0xc44>
  8110a8:	d9000317 	ldw	r4,12(sp)
  8110ac:	2000011e 	bne	r4,zero,8110b4 <_dtoa_r+0xc44>
  8110b0:	98005d26 	beq	r19,zero,811228 <_dtoa_r+0xdb8>
  8110b4:	88004a16 	blt	r17,zero,8111e0 <_dtoa_r+0xd70>
  8110b8:	8800031e 	bne	r17,zero,8110c8 <_dtoa_r+0xc58>
  8110bc:	d8c00317 	ldw	r3,12(sp)
  8110c0:	1800011e 	bne	r3,zero,8110c8 <_dtoa_r+0xc58>
  8110c4:	98004626 	beq	r19,zero,8111e0 <_dtoa_r+0xd70>
  8110c8:	0501a916 	blt	zero,r20,811770 <_dtoa_r+0x1300>
  8110cc:	d9001717 	ldw	r4,92(sp)
  8110d0:	24800005 	stb	r18,0(r4)
  8110d4:	d8800617 	ldw	r2,24(sp)
  8110d8:	21000044 	addi	r4,r4,1
  8110dc:	d9001715 	stw	r4,92(sp)
  8110e0:	b0802926 	beq	r22,r2,811188 <_dtoa_r+0xd18>
  8110e4:	d9401417 	ldw	r5,80(sp)
  8110e8:	e009883a 	mov	r4,fp
  8110ec:	01800284 	movi	r6,10
  8110f0:	000f883a 	mov	r7,zero
  8110f4:	08128580 	call	812858 <_multadd>
  8110f8:	d8c01517 	ldw	r3,84(sp)
  8110fc:	d9001617 	ldw	r4,88(sp)
  811100:	d8801415 	stw	r2,80(sp)
  811104:	19005526 	beq	r3,r4,81125c <_dtoa_r+0xdec>
  811108:	d9401517 	ldw	r5,84(sp)
  81110c:	e009883a 	mov	r4,fp
  811110:	01800284 	movi	r6,10
  811114:	000f883a 	mov	r7,zero
  811118:	08128580 	call	812858 <_multadd>
  81111c:	d9401617 	ldw	r5,88(sp)
  811120:	e009883a 	mov	r4,fp
  811124:	01800284 	movi	r6,10
  811128:	000f883a 	mov	r7,zero
  81112c:	d8801515 	stw	r2,84(sp)
  811130:	b5800044 	addi	r22,r22,1
  811134:	08128580 	call	812858 <_multadd>
  811138:	d8801615 	stw	r2,88(sp)
  81113c:	003fc606 	br	811058 <_dtoa_r+0xbe8>
  811140:	d9401417 	ldw	r5,80(sp)
  811144:	e009883a 	mov	r4,fp
  811148:	01800284 	movi	r6,10
  81114c:	000f883a 	mov	r7,zero
  811150:	08128580 	call	812858 <_multadd>
  811154:	d8801415 	stw	r2,80(sp)
  811158:	b5800044 	addi	r22,r22,1
  81115c:	d9001417 	ldw	r4,80(sp)
  811160:	b80b883a 	mov	r5,r23
  811164:	08102740 	call	810274 <quorem>
  811168:	14800c04 	addi	r18,r2,48
  81116c:	d8801717 	ldw	r2,92(sp)
  811170:	14800005 	stb	r18,0(r2)
  811174:	d8801717 	ldw	r2,92(sp)
  811178:	d8c00617 	ldw	r3,24(sp)
  81117c:	10800044 	addi	r2,r2,1
  811180:	d8801715 	stw	r2,92(sp)
  811184:	b0ffee16 	blt	r22,r3,811140 <_dtoa_r+0xcd0>
  811188:	d9401417 	ldw	r5,80(sp)
  81118c:	e009883a 	mov	r4,fp
  811190:	01800044 	movi	r6,1
  811194:	0812ea00 	call	812ea0 <_lshift>
  811198:	1009883a 	mov	r4,r2
  81119c:	b80b883a 	mov	r5,r23
  8111a0:	d8801415 	stw	r2,80(sp)
  8111a4:	0812fd80 	call	812fd8 <__mcmp>
  8111a8:	0081770e 	bge	zero,r2,811788 <_dtoa_r+0x1318>
  8111ac:	d9001717 	ldw	r4,92(sp)
  8111b0:	00800e44 	movi	r2,57
  8111b4:	213fffc4 	addi	r4,r4,-1
  8111b8:	d9001715 	stw	r4,92(sp)
  8111bc:	20c00007 	ldb	r3,0(r4)
  8111c0:	1880391e 	bne	r3,r2,8112a8 <_dtoa_r+0xe38>
  8111c4:	d8801717 	ldw	r2,92(sp)
  8111c8:	d9001817 	ldw	r4,96(sp)
  8111cc:	113e3126 	beq	r2,r4,810a94 <_dtoa_r+0x624>
  8111d0:	10bfffc4 	addi	r2,r2,-1
  8111d4:	d8801715 	stw	r2,92(sp)
  8111d8:	10800007 	ldb	r2,0(r2)
  8111dc:	003ff806 	br	8111c0 <_dtoa_r+0xd50>
  8111e0:	05000c0e 	bge	zero,r20,811214 <_dtoa_r+0xda4>
  8111e4:	d9401417 	ldw	r5,80(sp)
  8111e8:	e009883a 	mov	r4,fp
  8111ec:	01800044 	movi	r6,1
  8111f0:	0812ea00 	call	812ea0 <_lshift>
  8111f4:	1009883a 	mov	r4,r2
  8111f8:	b80b883a 	mov	r5,r23
  8111fc:	d8801415 	stw	r2,80(sp)
  811200:	0812fd80 	call	812fd8 <__mcmp>
  811204:	00818a0e 	bge	zero,r2,811830 <_dtoa_r+0x13c0>
  811208:	94800044 	addi	r18,r18,1
  81120c:	00800e84 	movi	r2,58
  811210:	90815826 	beq	r18,r2,811774 <_dtoa_r+0x1304>
  811214:	d9001717 	ldw	r4,92(sp)
  811218:	24800005 	stb	r18,0(r4)
  81121c:	21000044 	addi	r4,r4,1
  811220:	d9001715 	stw	r4,92(sp)
  811224:	003e2406 	br	810ab8 <_dtoa_r+0x648>
  811228:	95415226 	beq	r18,r21,811774 <_dtoa_r+0x1304>
  81122c:	0440010e 	bge	zero,r17,811234 <_dtoa_r+0xdc4>
  811230:	94800044 	addi	r18,r18,1
  811234:	d8801717 	ldw	r2,92(sp)
  811238:	14800005 	stb	r18,0(r2)
  81123c:	10800044 	addi	r2,r2,1
  811240:	d8801715 	stw	r2,92(sp)
  811244:	003e1c06 	br	810ab8 <_dtoa_r+0x648>
  811248:	d9001417 	ldw	r4,80(sp)
  81124c:	800b883a 	mov	r5,r16
  811250:	0812fd80 	call	812fd8 <__mcmp>
  811254:	1029883a 	mov	r20,r2
  811258:	003f8f06 	br	811098 <_dtoa_r+0xc28>
  81125c:	200b883a 	mov	r5,r4
  811260:	01800284 	movi	r6,10
  811264:	e009883a 	mov	r4,fp
  811268:	000f883a 	mov	r7,zero
  81126c:	08128580 	call	812858 <_multadd>
  811270:	b5800044 	addi	r22,r22,1
  811274:	d8801615 	stw	r2,88(sp)
  811278:	d8801515 	stw	r2,84(sp)
  81127c:	003f7606 	br	811058 <_dtoa_r+0xbe8>
  811280:	008000c4 	movi	r2,3
  811284:	15bf5416 	blt	r2,r22,810fd8 <_dtoa_r+0xb68>
  811288:	d8c00d17 	ldw	r3,52(sp)
  81128c:	d9000417 	ldw	r4,16(sp)
  811290:	b5800704 	addi	r22,r22,28
  811294:	1d87883a 	add	r3,r3,r22
  811298:	2589883a 	add	r4,r4,r22
  81129c:	d8c00d15 	stw	r3,52(sp)
  8112a0:	d9000415 	stw	r4,16(sp)
  8112a4:	003f4b06 	br	810fd4 <_dtoa_r+0xb64>
  8112a8:	d8c01717 	ldw	r3,92(sp)
  8112ac:	18800003 	ldbu	r2,0(r3)
  8112b0:	19000044 	addi	r4,r3,1
  8112b4:	d9001715 	stw	r4,92(sp)
  8112b8:	10800044 	addi	r2,r2,1
  8112bc:	18800005 	stb	r2,0(r3)
  8112c0:	003dfd06 	br	810ab8 <_dtoa_r+0x648>
  8112c4:	d8800417 	ldw	r2,16(sp)
  8112c8:	d8c00917 	ldw	r3,36(sp)
  8112cc:	d8000e15 	stw	zero,56(sp)
  8112d0:	10c5c83a 	sub	r2,r2,r3
  8112d4:	00c9c83a 	sub	r4,zero,r3
  8112d8:	d8800415 	stw	r2,16(sp)
  8112dc:	d9000515 	stw	r4,20(sp)
  8112e0:	003d3b06 	br	8107d0 <_dtoa_r+0x360>
  8112e4:	0463c83a 	sub	r17,zero,r17
  8112e8:	dc400415 	stw	r17,16(sp)
  8112ec:	d8000d15 	stw	zero,52(sp)
  8112f0:	003d3006 	br	8107b4 <_dtoa_r+0x344>
  8112f4:	d9000917 	ldw	r4,36(sp)
  8112f8:	080bb280 	call	80bb28 <__floatsidf>
  8112fc:	180b883a 	mov	r5,r3
  811300:	800d883a 	mov	r6,r16
  811304:	880f883a 	mov	r7,r17
  811308:	1009883a 	mov	r4,r2
  81130c:	080b8f80 	call	80b8f8 <__nedf2>
  811310:	103d0e26 	beq	r2,zero,81074c <_dtoa_r+0x2dc>
  811314:	d8800917 	ldw	r2,36(sp)
  811318:	10bfffc4 	addi	r2,r2,-1
  81131c:	d8800915 	stw	r2,36(sp)
  811320:	003d0a06 	br	81074c <_dtoa_r+0x2dc>
  811324:	d9001417 	ldw	r4,80(sp)
  811328:	b80b883a 	mov	r5,r23
  81132c:	0812fd80 	call	812fd8 <__mcmp>
  811330:	103f390e 	bge	r2,zero,811018 <_dtoa_r+0xba8>
  811334:	d9401417 	ldw	r5,80(sp)
  811338:	e009883a 	mov	r4,fp
  81133c:	01800284 	movi	r6,10
  811340:	000f883a 	mov	r7,zero
  811344:	08128580 	call	812858 <_multadd>
  811348:	d8801415 	stw	r2,80(sp)
  81134c:	d8800917 	ldw	r2,36(sp)
  811350:	10bfffc4 	addi	r2,r2,-1
  811354:	d8800915 	stw	r2,36(sp)
  811358:	a8013926 	beq	r21,zero,811840 <_dtoa_r+0x13d0>
  81135c:	d8c00817 	ldw	r3,32(sp)
  811360:	d8c00615 	stw	r3,24(sp)
  811364:	003f2c06 	br	811018 <_dtoa_r+0xba8>
  811368:	b8800417 	ldw	r2,16(r23)
  81136c:	100490ba 	slli	r2,r2,2
  811370:	15c5883a 	add	r2,r2,r23
  811374:	11000417 	ldw	r4,16(r2)
  811378:	0812a4c0 	call	812a4c <_hi0bits>
  81137c:	d9000d17 	ldw	r4,52(sp)
  811380:	2085c83a 	sub	r2,r4,r2
  811384:	003f0606 	br	810fa0 <_dtoa_r+0xb30>
  811388:	d8800c17 	ldw	r2,48(sp)
  81138c:	1000a626 	beq	r2,zero,811628 <_dtoa_r+0x11b8>
  811390:	d8c00617 	ldw	r3,24(sp)
  811394:	010020b4 	movhi	r4,130
  811398:	2127b704 	addi	r4,r4,-24868
  81139c:	0005883a 	mov	r2,zero
  8113a0:	180c90fa 	slli	r6,r3,3
  8113a4:	00cff834 	movhi	r3,16352
  8113a8:	18c00004 	addi	r3,r3,0
  8113ac:	180b883a 	mov	r5,r3
  8113b0:	310d883a 	add	r6,r6,r4
  8113b4:	32400117 	ldw	r9,4(r6)
  8113b8:	32000017 	ldw	r8,0(r6)
  8113bc:	1009883a 	mov	r4,r2
  8113c0:	480f883a 	mov	r7,r9
  8113c4:	400d883a 	mov	r6,r8
  8113c8:	080b61c0 	call	80b61c <__divdf3>
  8113cc:	d9801117 	ldw	r6,68(sp)
  8113d0:	180b883a 	mov	r5,r3
  8113d4:	a00f883a 	mov	r7,r20
  8113d8:	1009883a 	mov	r4,r2
  8113dc:	080b1a40 	call	80b1a4 <__subdf3>
  8113e0:	002d883a 	mov	r22,zero
  8113e4:	d8801115 	stw	r2,68(sp)
  8113e8:	d8c01215 	stw	r3,72(sp)
  8113ec:	00001106 	br	811434 <_dtoa_r+0xfc4>
  8113f0:	d9c01217 	ldw	r7,72(sp)
  8113f4:	d9801117 	ldw	r6,68(sp)
  8113f8:	04500934 	movhi	r17,16420
  8113fc:	8c400004 	addi	r17,r17,0
  811400:	0021883a 	mov	r16,zero
  811404:	8009883a 	mov	r4,r16
  811408:	880b883a 	mov	r5,r17
  81140c:	080b21c0 	call	80b21c <__muldf3>
  811410:	0009883a 	mov	r4,zero
  811414:	880b883a 	mov	r5,r17
  811418:	a00d883a 	mov	r6,r20
  81141c:	a80f883a 	mov	r7,r21
  811420:	d8801115 	stw	r2,68(sp)
  811424:	d8c01215 	stw	r3,72(sp)
  811428:	080b21c0 	call	80b21c <__muldf3>
  81142c:	1025883a 	mov	r18,r2
  811430:	1827883a 	mov	r19,r3
  811434:	980b883a 	mov	r5,r19
  811438:	9009883a 	mov	r4,r18
  81143c:	080bbf80 	call	80bbf8 <__fixdfsi>
  811440:	1009883a 	mov	r4,r2
  811444:	102f883a 	mov	r23,r2
  811448:	080bb280 	call	80bb28 <__floatsidf>
  81144c:	980b883a 	mov	r5,r19
  811450:	180f883a 	mov	r7,r3
  811454:	9009883a 	mov	r4,r18
  811458:	100d883a 	mov	r6,r2
  81145c:	080b1a40 	call	80b1a4 <__subdf3>
  811460:	182b883a 	mov	r21,r3
  811464:	d8c01717 	ldw	r3,92(sp)
  811468:	1029883a 	mov	r20,r2
  81146c:	b8800c04 	addi	r2,r23,48
  811470:	18800005 	stb	r2,0(r3)
  811474:	d9801117 	ldw	r6,68(sp)
  811478:	d9c01217 	ldw	r7,72(sp)
  81147c:	18c00044 	addi	r3,r3,1
  811480:	a009883a 	mov	r4,r20
  811484:	a80b883a 	mov	r5,r21
  811488:	d8c01715 	stw	r3,92(sp)
  81148c:	080ba9c0 	call	80ba9c <__ltdf2>
  811490:	103d9716 	blt	r2,zero,810af0 <_dtoa_r+0x680>
  811494:	0005883a 	mov	r2,zero
  811498:	00cffc34 	movhi	r3,16368
  81149c:	18c00004 	addi	r3,r3,0
  8114a0:	180b883a 	mov	r5,r3
  8114a4:	1009883a 	mov	r4,r2
  8114a8:	a00d883a 	mov	r6,r20
  8114ac:	a80f883a 	mov	r7,r21
  8114b0:	080b1a40 	call	80b1a4 <__subdf3>
  8114b4:	d9801117 	ldw	r6,68(sp)
  8114b8:	d9c01217 	ldw	r7,72(sp)
  8114bc:	180b883a 	mov	r5,r3
  8114c0:	1009883a 	mov	r4,r2
  8114c4:	080ba9c0 	call	80ba9c <__ltdf2>
  8114c8:	103e0216 	blt	r2,zero,810cd4 <_dtoa_r+0x864>
  8114cc:	d9000617 	ldw	r4,24(sp)
  8114d0:	b5800044 	addi	r22,r22,1
  8114d4:	b13fc616 	blt	r22,r4,8113f0 <_dtoa_r+0xf80>
  8114d8:	003da106 	br	810b60 <_dtoa_r+0x6f0>
  8114dc:	d8c00617 	ldw	r3,24(sp)
  8114e0:	d9000517 	ldw	r4,20(sp)
  8114e4:	1c7fffc4 	addi	r17,r3,-1
  8114e8:	2461c83a 	sub	r16,r4,r17
  8114ec:	2440070e 	bge	r4,r17,81150c <_dtoa_r+0x109c>
  8114f0:	d8800e17 	ldw	r2,56(sp)
  8114f4:	8923c83a 	sub	r17,r17,r4
  8114f8:	2449883a 	add	r4,r4,r17
  8114fc:	1445883a 	add	r2,r2,r17
  811500:	d9000515 	stw	r4,20(sp)
  811504:	d8800e15 	stw	r2,56(sp)
  811508:	0021883a 	mov	r16,zero
  81150c:	dd800617 	ldw	r22,24(sp)
  811510:	b03e560e 	bge	r22,zero,810e6c <_dtoa_r+0x9fc>
  811514:	d8c00417 	ldw	r3,16(sp)
  811518:	1da9c83a 	sub	r20,r3,r22
  81151c:	002d883a 	mov	r22,zero
  811520:	003e5206 	br	810e6c <_dtoa_r+0x9fc>
  811524:	d9401417 	ldw	r5,80(sp)
  811528:	d9800517 	ldw	r6,20(sp)
  81152c:	e009883a 	mov	r4,fp
  811530:	0812d740 	call	812d74 <_pow5mult>
  811534:	d8801415 	stw	r2,80(sp)
  811538:	003e7806 	br	810f1c <_dtoa_r+0xaac>
  81153c:	0005883a 	mov	r2,zero
  811540:	00d07c34 	movhi	r3,16880
  811544:	18c00004 	addi	r3,r3,0
  811548:	480b883a 	mov	r5,r9
  81154c:	4009883a 	mov	r4,r8
  811550:	180f883a 	mov	r7,r3
  811554:	100d883a 	mov	r6,r2
  811558:	080b1380 	call	80b138 <__adddf3>
  81155c:	1011883a 	mov	r8,r2
  811560:	1813883a 	mov	r9,r3
  811564:	003c3906 	br	81064c <_dtoa_r+0x1dc>
  811568:	d8c00317 	ldw	r3,12(sp)
  81156c:	00800084 	movi	r2,2
  811570:	10feab0e 	bge	r2,r3,811020 <_dtoa_r+0xbb0>
  811574:	203e0416 	blt	r4,zero,810d88 <_dtoa_r+0x918>
  811578:	b80b883a 	mov	r5,r23
  81157c:	e009883a 	mov	r4,fp
  811580:	01800144 	movi	r6,5
  811584:	000f883a 	mov	r7,zero
  811588:	08128580 	call	812858 <_multadd>
  81158c:	d9001417 	ldw	r4,80(sp)
  811590:	100b883a 	mov	r5,r2
  811594:	102f883a 	mov	r23,r2
  811598:	0812fd80 	call	812fd8 <__mcmp>
  81159c:	00bd3d16 	blt	zero,r2,810a94 <_dtoa_r+0x624>
  8115a0:	003df906 	br	810d88 <_dtoa_r+0x918>
  8115a4:	d8800917 	ldw	r2,36(sp)
  8115a8:	d8c01817 	ldw	r3,96(sp)
  8115ac:	10800044 	addi	r2,r2,1
  8115b0:	d8800915 	stw	r2,36(sp)
  8115b4:	00800c04 	movi	r2,48
  8115b8:	18800005 	stb	r2,0(r3)
  8115bc:	d8c01717 	ldw	r3,92(sp)
  8115c0:	18800003 	ldbu	r2,0(r3)
  8115c4:	19000044 	addi	r4,r3,1
  8115c8:	d9001715 	stw	r4,92(sp)
  8115cc:	10800044 	addi	r2,r2,1
  8115d0:	18800005 	stb	r2,0(r3)
  8115d4:	003d4606 	br	810af0 <_dtoa_r+0x680>
  8115d8:	d9401417 	ldw	r5,80(sp)
  8115dc:	880d883a 	mov	r6,r17
  8115e0:	003fd206 	br	81152c <_dtoa_r+0x10bc>
  8115e4:	11400117 	ldw	r5,4(r2)
  8115e8:	e009883a 	mov	r4,fp
  8115ec:	08127840 	call	812784 <_Balloc>
  8115f0:	d8c01517 	ldw	r3,84(sp)
  8115f4:	11000304 	addi	r4,r2,12
  8115f8:	d8801615 	stw	r2,88(sp)
  8115fc:	19800417 	ldw	r6,16(r3)
  811600:	19400304 	addi	r5,r3,12
  811604:	300c90ba 	slli	r6,r6,2
  811608:	31800204 	addi	r6,r6,8
  81160c:	080d65c0 	call	80d65c <memcpy>
  811610:	d9401617 	ldw	r5,88(sp)
  811614:	e009883a 	mov	r4,fp
  811618:	01800044 	movi	r6,1
  81161c:	0812ea00 	call	812ea0 <_lshift>
  811620:	d8801615 	stw	r2,88(sp)
  811624:	003e8906 	br	81104c <_dtoa_r+0xbdc>
  811628:	d8c00617 	ldw	r3,24(sp)
  81162c:	010020b4 	movhi	r4,130
  811630:	2127b704 	addi	r4,r4,-24868
  811634:	d9801117 	ldw	r6,68(sp)
  811638:	180a90fa 	slli	r5,r3,3
  81163c:	a00f883a 	mov	r7,r20
  811640:	05800044 	movi	r22,1
  811644:	290b883a 	add	r5,r5,r4
  811648:	28800017 	ldw	r2,0(r5)
  81164c:	28c00117 	ldw	r3,4(r5)
  811650:	1009883a 	mov	r4,r2
  811654:	180b883a 	mov	r5,r3
  811658:	080b21c0 	call	80b21c <__muldf3>
  81165c:	d8801115 	stw	r2,68(sp)
  811660:	d8c01215 	stw	r3,72(sp)
  811664:	00000b06 	br	811694 <_dtoa_r+0x1224>
  811668:	0005883a 	mov	r2,zero
  81166c:	00d00934 	movhi	r3,16420
  811670:	18c00004 	addi	r3,r3,0
  811674:	800d883a 	mov	r6,r16
  811678:	180b883a 	mov	r5,r3
  81167c:	880f883a 	mov	r7,r17
  811680:	1009883a 	mov	r4,r2
  811684:	080b21c0 	call	80b21c <__muldf3>
  811688:	1025883a 	mov	r18,r2
  81168c:	b5800044 	addi	r22,r22,1
  811690:	1827883a 	mov	r19,r3
  811694:	980b883a 	mov	r5,r19
  811698:	9009883a 	mov	r4,r18
  81169c:	080bbf80 	call	80bbf8 <__fixdfsi>
  8116a0:	1009883a 	mov	r4,r2
  8116a4:	102f883a 	mov	r23,r2
  8116a8:	080bb280 	call	80bb28 <__floatsidf>
  8116ac:	980b883a 	mov	r5,r19
  8116b0:	9009883a 	mov	r4,r18
  8116b4:	180f883a 	mov	r7,r3
  8116b8:	100d883a 	mov	r6,r2
  8116bc:	080b1a40 	call	80b1a4 <__subdf3>
  8116c0:	1823883a 	mov	r17,r3
  8116c4:	d8c01717 	ldw	r3,92(sp)
  8116c8:	1021883a 	mov	r16,r2
  8116cc:	b8800c04 	addi	r2,r23,48
  8116d0:	18800005 	stb	r2,0(r3)
  8116d4:	d9000617 	ldw	r4,24(sp)
  8116d8:	18c00044 	addi	r3,r3,1
  8116dc:	d8c01715 	stw	r3,92(sp)
  8116e0:	b13fe11e 	bne	r22,r4,811668 <_dtoa_r+0x11f8>
  8116e4:	d9801117 	ldw	r6,68(sp)
  8116e8:	d9c01217 	ldw	r7,72(sp)
  8116ec:	0029883a 	mov	r20,zero
  8116f0:	054ff834 	movhi	r21,16352
  8116f4:	ad400004 	addi	r21,r21,0
  8116f8:	a009883a 	mov	r4,r20
  8116fc:	a80b883a 	mov	r5,r21
  811700:	080b1380 	call	80b138 <__adddf3>
  811704:	180b883a 	mov	r5,r3
  811708:	1009883a 	mov	r4,r2
  81170c:	800d883a 	mov	r6,r16
  811710:	880f883a 	mov	r7,r17
  811714:	080ba9c0 	call	80ba9c <__ltdf2>
  811718:	103d6e16 	blt	r2,zero,810cd4 <_dtoa_r+0x864>
  81171c:	d9c01217 	ldw	r7,72(sp)
  811720:	d9801117 	ldw	r6,68(sp)
  811724:	0009883a 	mov	r4,zero
  811728:	a80b883a 	mov	r5,r21
  81172c:	080b1a40 	call	80b1a4 <__subdf3>
  811730:	180b883a 	mov	r5,r3
  811734:	800d883a 	mov	r6,r16
  811738:	880f883a 	mov	r7,r17
  81173c:	1009883a 	mov	r4,r2
  811740:	080b9840 	call	80b984 <__gtdf2>
  811744:	00bd060e 	bge	zero,r2,810b60 <_dtoa_r+0x6f0>
  811748:	00c00c04 	movi	r3,48
  81174c:	d8801717 	ldw	r2,92(sp)
  811750:	10bfffc4 	addi	r2,r2,-1
  811754:	d8801715 	stw	r2,92(sp)
  811758:	10800007 	ldb	r2,0(r2)
  81175c:	10fffb26 	beq	r2,r3,81174c <_dtoa_r+0x12dc>
  811760:	d8c01717 	ldw	r3,92(sp)
  811764:	18c00044 	addi	r3,r3,1
  811768:	d8c01715 	stw	r3,92(sp)
  81176c:	003ce006 	br	810af0 <_dtoa_r+0x680>
  811770:	9540151e 	bne	r18,r21,8117c8 <_dtoa_r+0x1358>
  811774:	d8801717 	ldw	r2,92(sp)
  811778:	15400005 	stb	r21,0(r2)
  81177c:	10800044 	addi	r2,r2,1
  811780:	d8801715 	stw	r2,92(sp)
  811784:	003e8906 	br	8111ac <_dtoa_r+0xd3c>
  811788:	1000021e 	bne	r2,zero,811794 <_dtoa_r+0x1324>
  81178c:	9080004c 	andi	r2,r18,1
  811790:	103e861e 	bne	r2,zero,8111ac <_dtoa_r+0xd3c>
  811794:	00c00c04 	movi	r3,48
  811798:	d8801717 	ldw	r2,92(sp)
  81179c:	10bfffc4 	addi	r2,r2,-1
  8117a0:	d8801715 	stw	r2,92(sp)
  8117a4:	10800007 	ldb	r2,0(r2)
  8117a8:	10fffb26 	beq	r2,r3,811798 <_dtoa_r+0x1328>
  8117ac:	d8c01717 	ldw	r3,92(sp)
  8117b0:	18c00044 	addi	r3,r3,1
  8117b4:	d8c01715 	stw	r3,92(sp)
  8117b8:	003cbf06 	br	810ab8 <_dtoa_r+0x648>
  8117bc:	00800044 	movi	r2,1
  8117c0:	d8802315 	stw	r2,140(sp)
  8117c4:	003d5606 	br	810d20 <_dtoa_r+0x8b0>
  8117c8:	d8c01717 	ldw	r3,92(sp)
  8117cc:	90800044 	addi	r2,r18,1
  8117d0:	18800005 	stb	r2,0(r3)
  8117d4:	003ff606 	br	8117b0 <_dtoa_r+0x1340>
  8117d8:	d9000617 	ldw	r4,24(sp)
  8117dc:	013c860e 	bge	zero,r4,8109f8 <_dtoa_r+0x588>
  8117e0:	d8800817 	ldw	r2,32(sp)
  8117e4:	00bcde0e 	bge	zero,r2,810b60 <_dtoa_r+0x6f0>
  8117e8:	0005883a 	mov	r2,zero
  8117ec:	00d00934 	movhi	r3,16420
  8117f0:	18c00004 	addi	r3,r3,0
  8117f4:	980f883a 	mov	r7,r19
  8117f8:	180b883a 	mov	r5,r3
  8117fc:	900d883a 	mov	r6,r18
  811800:	1009883a 	mov	r4,r2
  811804:	080b21c0 	call	80b21c <__muldf3>
  811808:	180b883a 	mov	r5,r3
  81180c:	d8c00917 	ldw	r3,36(sp)
  811810:	d9000817 	ldw	r4,32(sp)
  811814:	1025883a 	mov	r18,r2
  811818:	18ffffc4 	addi	r3,r3,-1
  81181c:	2827883a 	mov	r19,r5
  811820:	b5800044 	addi	r22,r22,1
  811824:	d8c00915 	stw	r3,36(sp)
  811828:	d9000615 	stw	r4,24(sp)
  81182c:	003c7206 	br	8109f8 <_dtoa_r+0x588>
  811830:	103e781e 	bne	r2,zero,811214 <_dtoa_r+0xda4>
  811834:	9080004c 	andi	r2,r18,1
  811838:	103e7626 	beq	r2,zero,811214 <_dtoa_r+0xda4>
  81183c:	003e7206 	br	811208 <_dtoa_r+0xd98>
  811840:	d9401617 	ldw	r5,88(sp)
  811844:	e009883a 	mov	r4,fp
  811848:	01800284 	movi	r6,10
  81184c:	000f883a 	mov	r7,zero
  811850:	08128580 	call	812858 <_multadd>
  811854:	d8801615 	stw	r2,88(sp)
  811858:	003ec006 	br	81135c <_dtoa_r+0xeec>

0081185c <fflush>:
  81185c:	defffc04 	addi	sp,sp,-16
  811860:	dc400115 	stw	r17,4(sp)
  811864:	dfc00315 	stw	ra,12(sp)
  811868:	dc000215 	stw	r16,8(sp)
  81186c:	dc800015 	stw	r18,0(sp)
  811870:	2023883a 	mov	r17,r4
  811874:	20002826 	beq	r4,zero,811918 <fflush+0xbc>
  811878:	d1200117 	ldw	r4,-32764(gp)
  81187c:	20800e17 	ldw	r2,56(r4)
  811880:	10002326 	beq	r2,zero,811910 <fflush+0xb4>
  811884:	88c0030f 	ldh	r3,12(r17)
  811888:	1880020c 	andi	r2,r3,8
  81188c:	10001826 	beq	r2,zero,8118f0 <fflush+0x94>
  811890:	8c800417 	ldw	r18,16(r17)
  811894:	90001626 	beq	r18,zero,8118f0 <fflush+0x94>
  811898:	88800017 	ldw	r2,0(r17)
  81189c:	18c000cc 	andi	r3,r3,3
  8118a0:	8c800015 	stw	r18,0(r17)
  8118a4:	14a1c83a 	sub	r16,r2,r18
  8118a8:	0005883a 	mov	r2,zero
  8118ac:	1800011e 	bne	r3,zero,8118b4 <fflush+0x58>
  8118b0:	88800517 	ldw	r2,20(r17)
  8118b4:	88800215 	stw	r2,8(r17)
  8118b8:	04000d0e 	bge	zero,r16,8118f0 <fflush+0x94>
  8118bc:	88c00917 	ldw	r3,36(r17)
  8118c0:	89000717 	ldw	r4,28(r17)
  8118c4:	900b883a 	mov	r5,r18
  8118c8:	800d883a 	mov	r6,r16
  8118cc:	183ee83a 	callr	r3
  8118d0:	80a1c83a 	sub	r16,r16,r2
  8118d4:	90a5883a 	add	r18,r18,r2
  8118d8:	00bff716 	blt	zero,r2,8118b8 <fflush+0x5c>
  8118dc:	8880030b 	ldhu	r2,12(r17)
  8118e0:	00ffffc4 	movi	r3,-1
  8118e4:	10801014 	ori	r2,r2,64
  8118e8:	8880030d 	sth	r2,12(r17)
  8118ec:	00000106 	br	8118f4 <fflush+0x98>
  8118f0:	0007883a 	mov	r3,zero
  8118f4:	1805883a 	mov	r2,r3
  8118f8:	dfc00317 	ldw	ra,12(sp)
  8118fc:	dc000217 	ldw	r16,8(sp)
  811900:	dc400117 	ldw	r17,4(sp)
  811904:	dc800017 	ldw	r18,0(sp)
  811908:	dec00404 	addi	sp,sp,16
  81190c:	f800283a 	ret
  811910:	08119c00 	call	8119c0 <__sinit>
  811914:	003fdb06 	br	811884 <fflush+0x28>
  811918:	d1200117 	ldw	r4,-32764(gp)
  81191c:	01402074 	movhi	r5,129
  811920:	29461704 	addi	r5,r5,6236
  811924:	02002074 	movhi	r8,129
  811928:	4208ec04 	addi	r8,r8,9136
  81192c:	dfc00317 	ldw	ra,12(sp)
  811930:	dc000217 	ldw	r16,8(sp)
  811934:	dc400117 	ldw	r17,4(sp)
  811938:	dc800017 	ldw	r18,0(sp)
  81193c:	dec00404 	addi	sp,sp,16
  811940:	4000683a 	jmp	r8

00811944 <std>:
  811944:	00802074 	movhi	r2,129
  811948:	10b72e04 	addi	r2,r2,-9032
  81194c:	20800b15 	stw	r2,44(r4)
  811950:	00802074 	movhi	r2,129
  811954:	10b6f004 	addi	r2,r2,-9280
  811958:	20800915 	stw	r2,36(r4)
  81195c:	00c02074 	movhi	r3,129
  811960:	18f6d404 	addi	r3,r3,-9392
  811964:	00802074 	movhi	r2,129
  811968:	10b71004 	addi	r2,r2,-9152
  81196c:	2140030d 	sth	r5,12(r4)
  811970:	2180038d 	sth	r6,14(r4)
  811974:	20c00815 	stw	r3,32(r4)
  811978:	20800a15 	stw	r2,40(r4)
  81197c:	20000015 	stw	zero,0(r4)
  811980:	20000115 	stw	zero,4(r4)
  811984:	20000215 	stw	zero,8(r4)
  811988:	20000415 	stw	zero,16(r4)
  81198c:	20000515 	stw	zero,20(r4)
  811990:	20000615 	stw	zero,24(r4)
  811994:	21000715 	stw	r4,28(r4)
  811998:	f800283a 	ret

0081199c <_cleanup_r>:
  81199c:	01402074 	movhi	r5,129
  8119a0:	29461704 	addi	r5,r5,6236
  8119a4:	02002074 	movhi	r8,129
  8119a8:	4208ec04 	addi	r8,r8,9136
  8119ac:	4000683a 	jmp	r8

008119b0 <_cleanup>:
  8119b0:	d1200117 	ldw	r4,-32764(gp)
  8119b4:	02002074 	movhi	r8,129
  8119b8:	42066704 	addi	r8,r8,6556
  8119bc:	4000683a 	jmp	r8

008119c0 <__sinit>:
  8119c0:	defffc04 	addi	sp,sp,-16
  8119c4:	dfc00315 	stw	ra,12(sp)
  8119c8:	dc400215 	stw	r17,8(sp)
  8119cc:	dcc00115 	stw	r19,4(sp)
  8119d0:	dd400015 	stw	r21,0(sp)
  8119d4:	2023883a 	mov	r17,r4
  8119d8:	21000117 	ldw	r4,4(r4)
  8119dc:	00802074 	movhi	r2,129
  8119e0:	10866704 	addi	r2,r2,6556
  8119e4:	00c000c4 	movi	r3,3
  8119e8:	05400044 	movi	r21,1
  8119ec:	89409a04 	addi	r5,r17,616
  8119f0:	88800f15 	stw	r2,60(r17)
  8119f4:	88c09815 	stw	r3,608(r17)
  8119f8:	89409915 	stw	r5,612(r17)
  8119fc:	880f883a 	mov	r7,r17
  811a00:	8d400e15 	stw	r21,56(r17)
  811a04:	88009715 	stw	zero,604(r17)
  811a08:	01400104 	movi	r5,4
  811a0c:	000d883a 	mov	r6,zero
  811a10:	08119440 	call	811944 <std>
  811a14:	89000217 	ldw	r4,8(r17)
  811a18:	04c00284 	movi	r19,10
  811a1c:	a80d883a 	mov	r6,r21
  811a20:	980b883a 	mov	r5,r19
  811a24:	880f883a 	mov	r7,r17
  811a28:	08119440 	call	811944 <std>
  811a2c:	89000317 	ldw	r4,12(r17)
  811a30:	980b883a 	mov	r5,r19
  811a34:	880f883a 	mov	r7,r17
  811a38:	01800084 	movi	r6,2
  811a3c:	02002074 	movhi	r8,129
  811a40:	42065104 	addi	r8,r8,6468
  811a44:	dfc00317 	ldw	ra,12(sp)
  811a48:	dc400217 	ldw	r17,8(sp)
  811a4c:	dcc00117 	ldw	r19,4(sp)
  811a50:	dd400017 	ldw	r21,0(sp)
  811a54:	dec00404 	addi	sp,sp,16
  811a58:	4000683a 	jmp	r8

00811a5c <__sfmoreglue>:
  811a5c:	defffc04 	addi	sp,sp,-16
  811a60:	dc400115 	stw	r17,4(sp)
  811a64:	2c401724 	muli	r17,r5,92
  811a68:	dc800015 	stw	r18,0(sp)
  811a6c:	2825883a 	mov	r18,r5
  811a70:	89400304 	addi	r5,r17,12
  811a74:	dc000215 	stw	r16,8(sp)
  811a78:	dfc00315 	stw	ra,12(sp)
  811a7c:	080cfa40 	call	80cfa4 <_malloc_r>
  811a80:	10c00304 	addi	r3,r2,12
  811a84:	1021883a 	mov	r16,r2
  811a88:	1809883a 	mov	r4,r3
  811a8c:	880d883a 	mov	r6,r17
  811a90:	000b883a 	mov	r5,zero
  811a94:	0005883a 	mov	r2,zero
  811a98:	80000526 	beq	r16,zero,811ab0 <__sfmoreglue+0x54>
  811a9c:	84800115 	stw	r18,4(r16)
  811aa0:	80000015 	stw	zero,0(r16)
  811aa4:	80c00215 	stw	r3,8(r16)
  811aa8:	080d7180 	call	80d718 <memset>
  811aac:	8005883a 	mov	r2,r16
  811ab0:	dfc00317 	ldw	ra,12(sp)
  811ab4:	dc000217 	ldw	r16,8(sp)
  811ab8:	dc400117 	ldw	r17,4(sp)
  811abc:	dc800017 	ldw	r18,0(sp)
  811ac0:	dec00404 	addi	sp,sp,16
  811ac4:	f800283a 	ret

00811ac8 <__sfp>:
  811ac8:	d0e00117 	ldw	r3,-32764(gp)
  811acc:	defffd04 	addi	sp,sp,-12
  811ad0:	dc400015 	stw	r17,0(sp)
  811ad4:	dfc00215 	stw	ra,8(sp)
  811ad8:	dc000115 	stw	r16,4(sp)
  811adc:	18800e17 	ldw	r2,56(r3)
  811ae0:	2023883a 	mov	r17,r4
  811ae4:	10000e26 	beq	r2,zero,811b20 <__sfp+0x58>
  811ae8:	1c009704 	addi	r16,r3,604
  811aec:	80c00117 	ldw	r3,4(r16)
  811af0:	81000217 	ldw	r4,8(r16)
  811af4:	18ffffc4 	addi	r3,r3,-1
  811af8:	18000516 	blt	r3,zero,811b10 <__sfp+0x48>
  811afc:	2080030f 	ldh	r2,12(r4)
  811b00:	18ffffc4 	addi	r3,r3,-1
  811b04:	10001326 	beq	r2,zero,811b54 <__sfp+0x8c>
  811b08:	21001704 	addi	r4,r4,92
  811b0c:	183ffb0e 	bge	r3,zero,811afc <__sfp+0x34>
  811b10:	80800017 	ldw	r2,0(r16)
  811b14:	10000626 	beq	r2,zero,811b30 <__sfp+0x68>
  811b18:	1021883a 	mov	r16,r2
  811b1c:	003ff306 	br	811aec <__sfp+0x24>
  811b20:	1809883a 	mov	r4,r3
  811b24:	08119c00 	call	8119c0 <__sinit>
  811b28:	d0e00117 	ldw	r3,-32764(gp)
  811b2c:	003fee06 	br	811ae8 <__sfp+0x20>
  811b30:	8809883a 	mov	r4,r17
  811b34:	01400104 	movi	r5,4
  811b38:	0811a5c0 	call	811a5c <__sfmoreglue>
  811b3c:	80800015 	stw	r2,0(r16)
  811b40:	103ff51e 	bne	r2,zero,811b18 <__sfp+0x50>
  811b44:	00800304 	movi	r2,12
  811b48:	0007883a 	mov	r3,zero
  811b4c:	88800015 	stw	r2,0(r17)
  811b50:	00000f06 	br	811b90 <__sfp+0xc8>
  811b54:	00ffffc4 	movi	r3,-1
  811b58:	00800044 	movi	r2,1
  811b5c:	20c0038d 	sth	r3,14(r4)
  811b60:	2080030d 	sth	r2,12(r4)
  811b64:	20000015 	stw	zero,0(r4)
  811b68:	20000215 	stw	zero,8(r4)
  811b6c:	20000115 	stw	zero,4(r4)
  811b70:	20000415 	stw	zero,16(r4)
  811b74:	20000515 	stw	zero,20(r4)
  811b78:	20000615 	stw	zero,24(r4)
  811b7c:	20000c15 	stw	zero,48(r4)
  811b80:	20000d15 	stw	zero,52(r4)
  811b84:	20001115 	stw	zero,68(r4)
  811b88:	20001215 	stw	zero,72(r4)
  811b8c:	2007883a 	mov	r3,r4
  811b90:	1805883a 	mov	r2,r3
  811b94:	dfc00217 	ldw	ra,8(sp)
  811b98:	dc000117 	ldw	r16,4(sp)
  811b9c:	dc400017 	ldw	r17,0(sp)
  811ba0:	dec00304 	addi	sp,sp,12
  811ba4:	f800283a 	ret

00811ba8 <__sflags>:
  811ba8:	28c00007 	ldb	r3,0(r5)
  811bac:	00801c84 	movi	r2,114
  811bb0:	18801426 	beq	r3,r2,811c04 <__sflags+0x5c>
  811bb4:	10c0070e 	bge	r2,r3,811bd4 <__sflags+0x2c>
  811bb8:	00801dc4 	movi	r2,119
  811bbc:	18802026 	beq	r3,r2,811c40 <__sflags+0x98>
  811bc0:	0007883a 	mov	r3,zero
  811bc4:	00800584 	movi	r2,22
  811bc8:	20800015 	stw	r2,0(r4)
  811bcc:	1805883a 	mov	r2,r3
  811bd0:	f800283a 	ret
  811bd4:	00801844 	movi	r2,97
  811bd8:	18bff91e 	bne	r3,r2,811bc0 <__sflags+0x18>
  811bdc:	28800047 	ldb	r2,1(r5)
  811be0:	02004204 	movi	r8,264
  811be4:	01c00044 	movi	r7,1
  811be8:	01008204 	movi	r4,520
  811bec:	10000a1e 	bne	r2,zero,811c18 <__sflags+0x70>
  811bf0:	3904b03a 	or	r2,r7,r4
  811bf4:	30800015 	stw	r2,0(r6)
  811bf8:	4007883a 	mov	r3,r8
  811bfc:	1805883a 	mov	r2,r3
  811c00:	f800283a 	ret
  811c04:	02000104 	movi	r8,4
  811c08:	000f883a 	mov	r7,zero
  811c0c:	0009883a 	mov	r4,zero
  811c10:	28800047 	ldb	r2,1(r5)
  811c14:	103ff626 	beq	r2,zero,811bf0 <__sflags+0x48>
  811c18:	00c00ac4 	movi	r3,43
  811c1c:	10c00226 	beq	r2,r3,811c28 <__sflags+0x80>
  811c20:	28800087 	ldb	r2,2(r5)
  811c24:	10fff21e 	bne	r2,r3,811bf0 <__sflags+0x48>
  811c28:	02000404 	movi	r8,16
  811c2c:	01c00084 	movi	r7,2
  811c30:	3904b03a 	or	r2,r7,r4
  811c34:	4007883a 	mov	r3,r8
  811c38:	30800015 	stw	r2,0(r6)
  811c3c:	003fef06 	br	811bfc <__sflags+0x54>
  811c40:	02000204 	movi	r8,8
  811c44:	01c00044 	movi	r7,1
  811c48:	01018004 	movi	r4,1536
  811c4c:	003ff006 	br	811c10 <__sflags+0x68>

00811c50 <_malloc_trim_r>:
  811c50:	defffb04 	addi	sp,sp,-20
  811c54:	dcc00015 	stw	r19,0(sp)
  811c58:	04c020b4 	movhi	r19,130
  811c5c:	9ce99804 	addi	r19,r19,-22944
  811c60:	dc000315 	stw	r16,12(sp)
  811c64:	dc400215 	stw	r17,8(sp)
  811c68:	dc800115 	stw	r18,4(sp)
  811c6c:	2823883a 	mov	r17,r5
  811c70:	2021883a 	mov	r16,r4
  811c74:	dfc00415 	stw	ra,16(sp)
  811c78:	0814e4c0 	call	814e4c <__malloc_lock>
  811c7c:	98800217 	ldw	r2,8(r19)
  811c80:	8009883a 	mov	r4,r16
  811c84:	000b883a 	mov	r5,zero
  811c88:	10c00117 	ldw	r3,4(r2)
  811c8c:	00bfff04 	movi	r2,-4
  811c90:	18a4703a 	and	r18,r3,r2
  811c94:	9463c83a 	sub	r17,r18,r17
  811c98:	8c43fbc4 	addi	r17,r17,4079
  811c9c:	8822d33a 	srli	r17,r17,12
  811ca0:	00840004 	movi	r2,4096
  811ca4:	8c7fffc4 	addi	r17,r17,-1
  811ca8:	8822933a 	slli	r17,r17,12
  811cac:	88800616 	blt	r17,r2,811cc8 <_malloc_trim_r+0x78>
  811cb0:	080da480 	call	80da48 <_sbrk_r>
  811cb4:	98c00217 	ldw	r3,8(r19)
  811cb8:	8009883a 	mov	r4,r16
  811cbc:	044bc83a 	sub	r5,zero,r17
  811cc0:	1c87883a 	add	r3,r3,r18
  811cc4:	18800926 	beq	r3,r2,811cec <_malloc_trim_r+0x9c>
  811cc8:	0814e680 	call	814e68 <__malloc_unlock>
  811ccc:	0005883a 	mov	r2,zero
  811cd0:	dfc00417 	ldw	ra,16(sp)
  811cd4:	dc000317 	ldw	r16,12(sp)
  811cd8:	dc400217 	ldw	r17,8(sp)
  811cdc:	dc800117 	ldw	r18,4(sp)
  811ce0:	dcc00017 	ldw	r19,0(sp)
  811ce4:	dec00504 	addi	sp,sp,20
  811ce8:	f800283a 	ret
  811cec:	8009883a 	mov	r4,r16
  811cf0:	080da480 	call	80da48 <_sbrk_r>
  811cf4:	944dc83a 	sub	r6,r18,r17
  811cf8:	00ffffc4 	movi	r3,-1
  811cfc:	8009883a 	mov	r4,r16
  811d00:	000b883a 	mov	r5,zero
  811d04:	01c020b4 	movhi	r7,130
  811d08:	39e98e04 	addi	r7,r7,-22984
  811d0c:	31800054 	ori	r6,r6,1
  811d10:	10c00926 	beq	r2,r3,811d38 <_malloc_trim_r+0xe8>
  811d14:	38800017 	ldw	r2,0(r7)
  811d18:	98c00217 	ldw	r3,8(r19)
  811d1c:	8009883a 	mov	r4,r16
  811d20:	1445c83a 	sub	r2,r2,r17
  811d24:	38800015 	stw	r2,0(r7)
  811d28:	19800115 	stw	r6,4(r3)
  811d2c:	0814e680 	call	814e68 <__malloc_unlock>
  811d30:	00800044 	movi	r2,1
  811d34:	003fe606 	br	811cd0 <_malloc_trim_r+0x80>
  811d38:	080da480 	call	80da48 <_sbrk_r>
  811d3c:	99400217 	ldw	r5,8(r19)
  811d40:	100d883a 	mov	r6,r2
  811d44:	8009883a 	mov	r4,r16
  811d48:	1165c83a 	sub	r18,r2,r5
  811d4c:	008003c4 	movi	r2,15
  811d50:	90c00054 	ori	r3,r18,1
  811d54:	14bfdc0e 	bge	r2,r18,811cc8 <_malloc_trim_r+0x78>
  811d58:	28c00115 	stw	r3,4(r5)
  811d5c:	d0e00417 	ldw	r3,-32752(gp)
  811d60:	008020b4 	movhi	r2,130
  811d64:	10a98e04 	addi	r2,r2,-22984
  811d68:	30c7c83a 	sub	r3,r6,r3
  811d6c:	10c00015 	stw	r3,0(r2)
  811d70:	003fd506 	br	811cc8 <_malloc_trim_r+0x78>

00811d74 <_free_r>:
  811d74:	defffd04 	addi	sp,sp,-12
  811d78:	dc000115 	stw	r16,4(sp)
  811d7c:	dc400015 	stw	r17,0(sp)
  811d80:	dfc00215 	stw	ra,8(sp)
  811d84:	2821883a 	mov	r16,r5
  811d88:	2023883a 	mov	r17,r4
  811d8c:	28003226 	beq	r5,zero,811e58 <_free_r+0xe4>
  811d90:	0814e4c0 	call	814e4c <__malloc_lock>
  811d94:	82bffe04 	addi	r10,r16,-8
  811d98:	51400117 	ldw	r5,4(r10)
  811d9c:	00bfff84 	movi	r2,-2
  811da0:	030020b4 	movhi	r12,130
  811da4:	63299804 	addi	r12,r12,-22944
  811da8:	2892703a 	and	r9,r5,r2
  811dac:	524d883a 	add	r6,r10,r9
  811db0:	30c00117 	ldw	r3,4(r6)
  811db4:	61000217 	ldw	r4,8(r12)
  811db8:	00bfff04 	movi	r2,-4
  811dbc:	1896703a 	and	r11,r3,r2
  811dc0:	21804e26 	beq	r4,r6,811efc <_free_r+0x188>
  811dc4:	2880004c 	andi	r2,r5,1
  811dc8:	32c00115 	stw	r11,4(r6)
  811dcc:	000b883a 	mov	r5,zero
  811dd0:	1000091e 	bne	r2,zero,811df8 <_free_r+0x84>
  811dd4:	50c00017 	ldw	r3,0(r10)
  811dd8:	60800204 	addi	r2,r12,8
  811ddc:	50d5c83a 	sub	r10,r10,r3
  811de0:	51000217 	ldw	r4,8(r10)
  811de4:	48d3883a 	add	r9,r9,r3
  811de8:	20807426 	beq	r4,r2,811fbc <_free_r+0x248>
  811dec:	52000317 	ldw	r8,12(r10)
  811df0:	41000215 	stw	r4,8(r8)
  811df4:	22000315 	stw	r8,12(r4)
  811df8:	32c7883a 	add	r3,r6,r11
  811dfc:	18800117 	ldw	r2,4(r3)
  811e00:	2808c03a 	cmpne	r4,r5,zero
  811e04:	1080004c 	andi	r2,r2,1
  811e08:	1000061e 	bne	r2,zero,811e24 <_free_r+0xb0>
  811e0c:	4ad3883a 	add	r9,r9,r11
  811e10:	20001626 	beq	r4,zero,811e6c <_free_r+0xf8>
  811e14:	30c00217 	ldw	r3,8(r6)
  811e18:	32000317 	ldw	r8,12(r6)
  811e1c:	40c00215 	stw	r3,8(r8)
  811e20:	1a000315 	stw	r8,12(r3)
  811e24:	48800054 	ori	r2,r9,1
  811e28:	5247883a 	add	r3,r10,r9
  811e2c:	50800115 	stw	r2,4(r10)
  811e30:	1a400015 	stw	r9,0(r3)
  811e34:	20001726 	beq	r4,zero,811e94 <_free_r+0x120>
  811e38:	8809883a 	mov	r4,r17
  811e3c:	02002074 	movhi	r8,129
  811e40:	42139a04 	addi	r8,r8,20072
  811e44:	dfc00217 	ldw	ra,8(sp)
  811e48:	dc000117 	ldw	r16,4(sp)
  811e4c:	dc400017 	ldw	r17,0(sp)
  811e50:	dec00304 	addi	sp,sp,12
  811e54:	4000683a 	jmp	r8
  811e58:	dfc00217 	ldw	ra,8(sp)
  811e5c:	dc000117 	ldw	r16,4(sp)
  811e60:	dc400017 	ldw	r17,0(sp)
  811e64:	dec00304 	addi	sp,sp,12
  811e68:	f800283a 	ret
  811e6c:	30c00217 	ldw	r3,8(r6)
  811e70:	008020b4 	movhi	r2,130
  811e74:	10a99a04 	addi	r2,r2,-22936
  811e78:	18bfe71e 	bne	r3,r2,811e18 <_free_r+0xa4>
  811e7c:	1a800315 	stw	r10,12(r3)
  811e80:	1a800215 	stw	r10,8(r3)
  811e84:	01000044 	movi	r4,1
  811e88:	50c00215 	stw	r3,8(r10)
  811e8c:	50c00315 	stw	r3,12(r10)
  811e90:	003fe406 	br	811e24 <_free_r+0xb0>
  811e94:	00807fc4 	movi	r2,511
  811e98:	12402b36 	bltu	r2,r9,811f48 <_free_r+0x1d4>
  811e9c:	4806d0fa 	srli	r3,r9,3
  811ea0:	018020b4 	movhi	r6,130
  811ea4:	31a99804 	addi	r6,r6,-22944
  811ea8:	00800044 	movi	r2,1
  811eac:	180890fa 	slli	r4,r3,3
  811eb0:	1807d0ba 	srai	r3,r3,2
  811eb4:	31400117 	ldw	r5,4(r6)
  811eb8:	2191883a 	add	r8,r4,r6
  811ebc:	41c00217 	ldw	r7,8(r8)
  811ec0:	10c4983a 	sll	r2,r2,r3
  811ec4:	52000315 	stw	r8,12(r10)
  811ec8:	51c00215 	stw	r7,8(r10)
  811ecc:	288ab03a 	or	r5,r5,r2
  811ed0:	3a800315 	stw	r10,12(r7)
  811ed4:	31400115 	stw	r5,4(r6)
  811ed8:	42800215 	stw	r10,8(r8)
  811edc:	8809883a 	mov	r4,r17
  811ee0:	02002074 	movhi	r8,129
  811ee4:	42139a04 	addi	r8,r8,20072
  811ee8:	dfc00217 	ldw	ra,8(sp)
  811eec:	dc000117 	ldw	r16,4(sp)
  811ef0:	dc400017 	ldw	r17,0(sp)
  811ef4:	dec00304 	addi	sp,sp,12
  811ef8:	4000683a 	jmp	r8
  811efc:	2880004c 	andi	r2,r5,1
  811f00:	4ad3883a 	add	r9,r9,r11
  811f04:	1000071e 	bne	r2,zero,811f24 <_free_r+0x1b0>
  811f08:	50c00017 	ldw	r3,0(r10)
  811f0c:	50d5c83a 	sub	r10,r10,r3
  811f10:	52000317 	ldw	r8,12(r10)
  811f14:	51c00217 	ldw	r7,8(r10)
  811f18:	48d3883a 	add	r9,r9,r3
  811f1c:	41c00215 	stw	r7,8(r8)
  811f20:	3a000315 	stw	r8,12(r7)
  811f24:	d0a00617 	ldw	r2,-32744(gp)
  811f28:	48c00054 	ori	r3,r9,1
  811f2c:	62800215 	stw	r10,8(r12)
  811f30:	50c00115 	stw	r3,4(r10)
  811f34:	48bfc036 	bltu	r9,r2,811e38 <_free_r+0xc4>
  811f38:	d1600517 	ldw	r5,-32748(gp)
  811f3c:	8809883a 	mov	r4,r17
  811f40:	0811c500 	call	811c50 <_malloc_trim_r>
  811f44:	003fbc06 	br	811e38 <_free_r+0xc4>
  811f48:	4808d27a 	srli	r4,r9,9
  811f4c:	4806d0fa 	srli	r3,r9,3
  811f50:	2000151e 	bne	r4,zero,811fa8 <_free_r+0x234>
  811f54:	180490fa 	slli	r2,r3,3
  811f58:	014020b4 	movhi	r5,130
  811f5c:	29699804 	addi	r5,r5,-22944
  811f60:	1311883a 	add	r8,r2,r12
  811f64:	41c00217 	ldw	r7,8(r8)
  811f68:	3a001e26 	beq	r7,r8,811fe4 <_free_r+0x270>
  811f6c:	38800117 	ldw	r2,4(r7)
  811f70:	00ffff04 	movi	r3,-4
  811f74:	10c4703a 	and	r2,r2,r3
  811f78:	4880052e 	bgeu	r9,r2,811f90 <_free_r+0x21c>
  811f7c:	39c00217 	ldw	r7,8(r7)
  811f80:	3a000326 	beq	r7,r8,811f90 <_free_r+0x21c>
  811f84:	38800117 	ldw	r2,4(r7)
  811f88:	10c4703a 	and	r2,r2,r3
  811f8c:	48bffb36 	bltu	r9,r2,811f7c <_free_r+0x208>
  811f90:	3a000317 	ldw	r8,12(r7)
  811f94:	52000315 	stw	r8,12(r10)
  811f98:	51c00215 	stw	r7,8(r10)
  811f9c:	3a800315 	stw	r10,12(r7)
  811fa0:	42800215 	stw	r10,8(r8)
  811fa4:	003fcd06 	br	811edc <_free_r+0x168>
  811fa8:	00800104 	movi	r2,4
  811fac:	11000536 	bltu	r2,r4,811fc4 <_free_r+0x250>
  811fb0:	4804d1ba 	srli	r2,r9,6
  811fb4:	10c00e04 	addi	r3,r2,56
  811fb8:	003fe606 	br	811f54 <_free_r+0x1e0>
  811fbc:	01400044 	movi	r5,1
  811fc0:	003f8d06 	br	811df8 <_free_r+0x84>
  811fc4:	00800504 	movi	r2,20
  811fc8:	20c016c4 	addi	r3,r4,91
  811fcc:	113fe12e 	bgeu	r2,r4,811f54 <_free_r+0x1e0>
  811fd0:	00801504 	movi	r2,84
  811fd4:	11000a36 	bltu	r2,r4,812000 <_free_r+0x28c>
  811fd8:	4804d33a 	srli	r2,r9,12
  811fdc:	10c01b84 	addi	r3,r2,110
  811fe0:	003fdc06 	br	811f54 <_free_r+0x1e0>
  811fe4:	1805d0ba 	srai	r2,r3,2
  811fe8:	00c00044 	movi	r3,1
  811fec:	29000117 	ldw	r4,4(r5)
  811ff0:	1886983a 	sll	r3,r3,r2
  811ff4:	20c8b03a 	or	r4,r4,r3
  811ff8:	29000115 	stw	r4,4(r5)
  811ffc:	003fe506 	br	811f94 <_free_r+0x220>
  812000:	00805504 	movi	r2,340
  812004:	11000336 	bltu	r2,r4,812014 <_free_r+0x2a0>
  812008:	4804d3fa 	srli	r2,r9,15
  81200c:	10c01dc4 	addi	r3,r2,119
  812010:	003fd006 	br	811f54 <_free_r+0x1e0>
  812014:	00815504 	movi	r2,1364
  812018:	00c01f84 	movi	r3,126
  81201c:	113fcd36 	bltu	r2,r4,811f54 <_free_r+0x1e0>
  812020:	4804d4ba 	srli	r2,r9,18
  812024:	10c01f04 	addi	r3,r2,124
  812028:	003fca06 	br	811f54 <_free_r+0x1e0>

0081202c <__sfvwrite>:
  81202c:	defff704 	addi	sp,sp,-36
  812030:	dd000315 	stw	r20,12(sp)
  812034:	dd400215 	stw	r21,8(sp)
  812038:	dfc00815 	stw	ra,32(sp)
  81203c:	dc000715 	stw	r16,28(sp)
  812040:	dc400615 	stw	r17,24(sp)
  812044:	dc800515 	stw	r18,20(sp)
  812048:	dcc00415 	stw	r19,16(sp)
  81204c:	dd800115 	stw	r22,4(sp)
  812050:	ddc00015 	stw	r23,0(sp)
  812054:	2c000217 	ldw	r16,8(r5)
  812058:	282b883a 	mov	r21,r5
  81205c:	2029883a 	mov	r20,r4
  812060:	0007883a 	mov	r3,zero
  812064:	80002426 	beq	r16,zero,8120f8 <__sfvwrite+0xcc>
  812068:	20c0030b 	ldhu	r3,12(r4)
  81206c:	1880020c 	andi	r2,r3,8
  812070:	10000226 	beq	r2,zero,81207c <__sfvwrite+0x50>
  812074:	20800417 	ldw	r2,16(r4)
  812078:	1000041e 	bne	r2,zero,81208c <__sfvwrite+0x60>
  81207c:	081010c0 	call	81010c <__swsetup>
  812080:	00ffffc4 	movi	r3,-1
  812084:	10001c1e 	bne	r2,zero,8120f8 <__sfvwrite+0xcc>
  812088:	a0c0030b 	ldhu	r3,12(r20)
  81208c:	193fffcc 	andi	r4,r3,65535
  812090:	2080008c 	andi	r2,r4,2
  812094:	ac800017 	ldw	r18,0(r21)
  812098:	0021883a 	mov	r16,zero
  81209c:	10002226 	beq	r2,zero,812128 <__sfvwrite+0xfc>
  8120a0:	8000041e 	bne	r16,zero,8120b4 <__sfvwrite+0x88>
  8120a4:	94000117 	ldw	r16,4(r18)
  8120a8:	94c00017 	ldw	r19,0(r18)
  8120ac:	94800204 	addi	r18,r18,8
  8120b0:	803ffc26 	beq	r16,zero,8120a4 <__sfvwrite+0x78>
  8120b4:	00810004 	movi	r2,1024
  8120b8:	a1000717 	ldw	r4,28(r20)
  8120bc:	800d883a 	mov	r6,r16
  8120c0:	1400012e 	bgeu	r2,r16,8120c8 <__sfvwrite+0x9c>
  8120c4:	100d883a 	mov	r6,r2
  8120c8:	a0c00917 	ldw	r3,36(r20)
  8120cc:	980b883a 	mov	r5,r19
  8120d0:	183ee83a 	callr	r3
  8120d4:	1023883a 	mov	r17,r2
  8120d8:	00806b0e 	bge	zero,r2,812288 <__sfvwrite+0x25c>
  8120dc:	a8800217 	ldw	r2,8(r21)
  8120e0:	9c67883a 	add	r19,r19,r17
  8120e4:	8461c83a 	sub	r16,r16,r17
  8120e8:	1445c83a 	sub	r2,r2,r17
  8120ec:	a8800215 	stw	r2,8(r21)
  8120f0:	103feb1e 	bne	r2,zero,8120a0 <__sfvwrite+0x74>
  8120f4:	0007883a 	mov	r3,zero
  8120f8:	1805883a 	mov	r2,r3
  8120fc:	dfc00817 	ldw	ra,32(sp)
  812100:	dc000717 	ldw	r16,28(sp)
  812104:	dc400617 	ldw	r17,24(sp)
  812108:	dc800517 	ldw	r18,20(sp)
  81210c:	dcc00417 	ldw	r19,16(sp)
  812110:	dd000317 	ldw	r20,12(sp)
  812114:	dd400217 	ldw	r21,8(sp)
  812118:	dd800117 	ldw	r22,4(sp)
  81211c:	ddc00017 	ldw	r23,0(sp)
  812120:	dec00904 	addi	sp,sp,36
  812124:	f800283a 	ret
  812128:	2080004c 	andi	r2,r4,1
  81212c:	002f883a 	mov	r23,zero
  812130:	1000461e 	bne	r2,zero,81224c <__sfvwrite+0x220>
  812134:	8000041e 	bne	r16,zero,812148 <__sfvwrite+0x11c>
  812138:	94000117 	ldw	r16,4(r18)
  81213c:	94c00017 	ldw	r19,0(r18)
  812140:	94800204 	addi	r18,r18,8
  812144:	803ffc26 	beq	r16,zero,812138 <__sfvwrite+0x10c>
  812148:	18ffffcc 	andi	r3,r3,65535
  81214c:	1880800c 	andi	r2,r3,512
  812150:	a4400217 	ldw	r17,8(r20)
  812154:	10006226 	beq	r2,zero,8122e0 <__sfvwrite+0x2b4>
  812158:	8c00022e 	bgeu	r17,r16,812164 <__sfvwrite+0x138>
  81215c:	1880200c 	andi	r2,r3,128
  812160:	10004e1e 	bne	r2,zero,81229c <__sfvwrite+0x270>
  812164:	8440012e 	bgeu	r16,r17,81216c <__sfvwrite+0x140>
  812168:	8023883a 	mov	r17,r16
  81216c:	a1000017 	ldw	r4,0(r20)
  812170:	880d883a 	mov	r6,r17
  812174:	980b883a 	mov	r5,r19
  812178:	081267c0 	call	81267c <memmove>
  81217c:	a0c00217 	ldw	r3,8(r20)
  812180:	a0800017 	ldw	r2,0(r20)
  812184:	1c47c83a 	sub	r3,r3,r17
  812188:	1445883a 	add	r2,r2,r17
  81218c:	8023883a 	mov	r17,r16
  812190:	a0c00215 	stw	r3,8(r20)
  812194:	a0800015 	stw	r2,0(r20)
  812198:	a8800217 	ldw	r2,8(r21)
  81219c:	9c67883a 	add	r19,r19,r17
  8121a0:	8461c83a 	sub	r16,r16,r17
  8121a4:	1445c83a 	sub	r2,r2,r17
  8121a8:	a8800215 	stw	r2,8(r21)
  8121ac:	103fd126 	beq	r2,zero,8120f4 <__sfvwrite+0xc8>
  8121b0:	a0c0030b 	ldhu	r3,12(r20)
  8121b4:	003fdf06 	br	812134 <__sfvwrite+0x108>
  8121b8:	b804c03a 	cmpne	r2,r23,zero
  8121bc:	1000091e 	bne	r2,zero,8121e4 <__sfvwrite+0x1b8>
  8121c0:	9809883a 	mov	r4,r19
  8121c4:	01400284 	movi	r5,10
  8121c8:	800d883a 	mov	r6,r16
  8121cc:	08125b00 	call	8125b0 <memchr>
  8121d0:	85800044 	addi	r22,r16,1
  8121d4:	10000226 	beq	r2,zero,8121e0 <__sfvwrite+0x1b4>
  8121d8:	14c5c83a 	sub	r2,r2,r19
  8121dc:	15800044 	addi	r22,r2,1
  8121e0:	05c00044 	movi	r23,1
  8121e4:	b00b883a 	mov	r5,r22
  8121e8:	8580012e 	bgeu	r16,r22,8121f0 <__sfvwrite+0x1c4>
  8121ec:	800b883a 	mov	r5,r16
  8121f0:	a0c00217 	ldw	r3,8(r20)
  8121f4:	a1c00517 	ldw	r7,20(r20)
  8121f8:	a1000017 	ldw	r4,0(r20)
  8121fc:	a0800417 	ldw	r2,16(r20)
  812200:	19e3883a 	add	r17,r3,r7
  812204:	1100012e 	bgeu	r2,r4,81220c <__sfvwrite+0x1e0>
  812208:	89401616 	blt	r17,r5,812264 <__sfvwrite+0x238>
  81220c:	29c04c16 	blt	r5,r7,812340 <__sfvwrite+0x314>
  812210:	a0c00917 	ldw	r3,36(r20)
  812214:	a1000717 	ldw	r4,28(r20)
  812218:	380d883a 	mov	r6,r7
  81221c:	980b883a 	mov	r5,r19
  812220:	183ee83a 	callr	r3
  812224:	1023883a 	mov	r17,r2
  812228:	0080170e 	bge	zero,r2,812288 <__sfvwrite+0x25c>
  81222c:	b46dc83a 	sub	r22,r22,r17
  812230:	b0005026 	beq	r22,zero,812374 <__sfvwrite+0x348>
  812234:	a8800217 	ldw	r2,8(r21)
  812238:	9c67883a 	add	r19,r19,r17
  81223c:	8461c83a 	sub	r16,r16,r17
  812240:	1445c83a 	sub	r2,r2,r17
  812244:	a8800215 	stw	r2,8(r21)
  812248:	103faa26 	beq	r2,zero,8120f4 <__sfvwrite+0xc8>
  81224c:	803fda1e 	bne	r16,zero,8121b8 <__sfvwrite+0x18c>
  812250:	94000117 	ldw	r16,4(r18)
  812254:	94c00017 	ldw	r19,0(r18)
  812258:	94800204 	addi	r18,r18,8
  81225c:	803ffc26 	beq	r16,zero,812250 <__sfvwrite+0x224>
  812260:	003fd706 	br	8121c0 <__sfvwrite+0x194>
  812264:	980b883a 	mov	r5,r19
  812268:	880d883a 	mov	r6,r17
  81226c:	081267c0 	call	81267c <memmove>
  812270:	a0c00017 	ldw	r3,0(r20)
  812274:	a009883a 	mov	r4,r20
  812278:	1c47883a 	add	r3,r3,r17
  81227c:	a0c00015 	stw	r3,0(r20)
  812280:	081185c0 	call	81185c <fflush>
  812284:	103fe926 	beq	r2,zero,81222c <__sfvwrite+0x200>
  812288:	a080030b 	ldhu	r2,12(r20)
  81228c:	00ffffc4 	movi	r3,-1
  812290:	10801014 	ori	r2,r2,64
  812294:	a080030d 	sth	r2,12(r20)
  812298:	003f9706 	br	8120f8 <__sfvwrite+0xcc>
  81229c:	a0800417 	ldw	r2,16(r20)
  8122a0:	a0c00017 	ldw	r3,0(r20)
  8122a4:	d1200117 	ldw	r4,-32764(gp)
  8122a8:	100b883a 	mov	r5,r2
  8122ac:	18a3c83a 	sub	r17,r3,r2
  8122b0:	8c2d883a 	add	r22,r17,r16
  8122b4:	b00d883a 	mov	r6,r22
  8122b8:	08136a80 	call	8136a8 <_realloc_r>
  8122bc:	1009883a 	mov	r4,r2
  8122c0:	103ff126 	beq	r2,zero,812288 <__sfvwrite+0x25c>
  8122c4:	1445883a 	add	r2,r2,r17
  8122c8:	8023883a 	mov	r17,r16
  8122cc:	a0800015 	stw	r2,0(r20)
  8122d0:	a5800515 	stw	r22,20(r20)
  8122d4:	a1000415 	stw	r4,16(r20)
  8122d8:	a4000215 	stw	r16,8(r20)
  8122dc:	003fa106 	br	812164 <__sfvwrite+0x138>
  8122e0:	a1000017 	ldw	r4,0(r20)
  8122e4:	a0800417 	ldw	r2,16(r20)
  8122e8:	1100012e 	bgeu	r2,r4,8122f0 <__sfvwrite+0x2c4>
  8122ec:	8c002636 	bltu	r17,r16,812388 <__sfvwrite+0x35c>
  8122f0:	a4400517 	ldw	r17,20(r20)
  8122f4:	84400836 	bltu	r16,r17,812318 <__sfvwrite+0x2ec>
  8122f8:	a0c00917 	ldw	r3,36(r20)
  8122fc:	a1000717 	ldw	r4,28(r20)
  812300:	880d883a 	mov	r6,r17
  812304:	980b883a 	mov	r5,r19
  812308:	183ee83a 	callr	r3
  81230c:	1023883a 	mov	r17,r2
  812310:	00bfa116 	blt	zero,r2,812198 <__sfvwrite+0x16c>
  812314:	003fdc06 	br	812288 <__sfvwrite+0x25c>
  812318:	a1000017 	ldw	r4,0(r20)
  81231c:	980b883a 	mov	r5,r19
  812320:	800d883a 	mov	r6,r16
  812324:	081267c0 	call	81267c <memmove>
  812328:	a0c00217 	ldw	r3,8(r20)
  81232c:	a0800017 	ldw	r2,0(r20)
  812330:	8023883a 	mov	r17,r16
  812334:	1c07c83a 	sub	r3,r3,r16
  812338:	1405883a 	add	r2,r2,r16
  81233c:	003f9406 	br	812190 <__sfvwrite+0x164>
  812340:	a1000017 	ldw	r4,0(r20)
  812344:	2823883a 	mov	r17,r5
  812348:	880d883a 	mov	r6,r17
  81234c:	980b883a 	mov	r5,r19
  812350:	081267c0 	call	81267c <memmove>
  812354:	a0c00217 	ldw	r3,8(r20)
  812358:	a0800017 	ldw	r2,0(r20)
  81235c:	b46dc83a 	sub	r22,r22,r17
  812360:	1c47c83a 	sub	r3,r3,r17
  812364:	1445883a 	add	r2,r2,r17
  812368:	a0c00215 	stw	r3,8(r20)
  81236c:	a0800015 	stw	r2,0(r20)
  812370:	b03fb01e 	bne	r22,zero,812234 <__sfvwrite+0x208>
  812374:	a009883a 	mov	r4,r20
  812378:	081185c0 	call	81185c <fflush>
  81237c:	103fc21e 	bne	r2,zero,812288 <__sfvwrite+0x25c>
  812380:	002f883a 	mov	r23,zero
  812384:	003fab06 	br	812234 <__sfvwrite+0x208>
  812388:	980b883a 	mov	r5,r19
  81238c:	880d883a 	mov	r6,r17
  812390:	081267c0 	call	81267c <memmove>
  812394:	a0c00017 	ldw	r3,0(r20)
  812398:	a009883a 	mov	r4,r20
  81239c:	1c47883a 	add	r3,r3,r17
  8123a0:	a0c00015 	stw	r3,0(r20)
  8123a4:	081185c0 	call	81185c <fflush>
  8123a8:	103f7b26 	beq	r2,zero,812198 <__sfvwrite+0x16c>
  8123ac:	003fb606 	br	812288 <__sfvwrite+0x25c>

008123b0 <_fwalk>:
  8123b0:	d0a00117 	ldw	r2,-32764(gp)
  8123b4:	defffa04 	addi	sp,sp,-24
  8123b8:	dcc00115 	stw	r19,4(sp)
  8123bc:	dd000015 	stw	r20,0(sp)
  8123c0:	dfc00515 	stw	ra,20(sp)
  8123c4:	dc000415 	stw	r16,16(sp)
  8123c8:	dc400315 	stw	r17,12(sp)
  8123cc:	dc800215 	stw	r18,8(sp)
  8123d0:	2829883a 	mov	r20,r5
  8123d4:	0027883a 	mov	r19,zero
  8123d8:	20801126 	beq	r4,r2,812420 <_fwalk+0x70>
  8123dc:	24809704 	addi	r18,r4,604
  8123e0:	90000f26 	beq	r18,zero,812420 <_fwalk+0x70>
  8123e4:	94400117 	ldw	r17,4(r18)
  8123e8:	94000217 	ldw	r16,8(r18)
  8123ec:	8c7fffc4 	addi	r17,r17,-1
  8123f0:	88000816 	blt	r17,zero,812414 <_fwalk+0x64>
  8123f4:	8080030f 	ldh	r2,12(r16)
  8123f8:	8009883a 	mov	r4,r16
  8123fc:	8c7fffc4 	addi	r17,r17,-1
  812400:	84001704 	addi	r16,r16,92
  812404:	103ffa26 	beq	r2,zero,8123f0 <_fwalk+0x40>
  812408:	a03ee83a 	callr	r20
  81240c:	98a6b03a 	or	r19,r19,r2
  812410:	883ff80e 	bge	r17,zero,8123f4 <_fwalk+0x44>
  812414:	94800017 	ldw	r18,0(r18)
  812418:	903ff21e 	bne	r18,zero,8123e4 <_fwalk+0x34>
  81241c:	d0a00117 	ldw	r2,-32764(gp)
  812420:	14809704 	addi	r18,r2,604
  812424:	90000e26 	beq	r18,zero,812460 <_fwalk+0xb0>
  812428:	94400117 	ldw	r17,4(r18)
  81242c:	94000217 	ldw	r16,8(r18)
  812430:	8c7fffc4 	addi	r17,r17,-1
  812434:	88000816 	blt	r17,zero,812458 <_fwalk+0xa8>
  812438:	8080030f 	ldh	r2,12(r16)
  81243c:	8009883a 	mov	r4,r16
  812440:	8c7fffc4 	addi	r17,r17,-1
  812444:	84001704 	addi	r16,r16,92
  812448:	103ffa26 	beq	r2,zero,812434 <_fwalk+0x84>
  81244c:	a03ee83a 	callr	r20
  812450:	98a6b03a 	or	r19,r19,r2
  812454:	883ff80e 	bge	r17,zero,812438 <_fwalk+0x88>
  812458:	94800017 	ldw	r18,0(r18)
  81245c:	903ff21e 	bne	r18,zero,812428 <_fwalk+0x78>
  812460:	9805883a 	mov	r2,r19
  812464:	dfc00517 	ldw	ra,20(sp)
  812468:	dc000417 	ldw	r16,16(sp)
  81246c:	dc400317 	ldw	r17,12(sp)
  812470:	dc800217 	ldw	r18,8(sp)
  812474:	dcc00117 	ldw	r19,4(sp)
  812478:	dd000017 	ldw	r20,0(sp)
  81247c:	dec00604 	addi	sp,sp,24
  812480:	f800283a 	ret

00812484 <_setlocale_r>:
  812484:	defffc04 	addi	sp,sp,-16
  812488:	dc000215 	stw	r16,8(sp)
  81248c:	dc400115 	stw	r17,4(sp)
  812490:	dc800015 	stw	r18,0(sp)
  812494:	2023883a 	mov	r17,r4
  812498:	2825883a 	mov	r18,r5
  81249c:	dfc00315 	stw	ra,12(sp)
  8124a0:	3021883a 	mov	r16,r6
  8124a4:	3009883a 	mov	r4,r6
  8124a8:	014020b4 	movhi	r5,130
  8124ac:	29670c04 	addi	r5,r5,-25552
  8124b0:	30000726 	beq	r6,zero,8124d0 <_setlocale_r+0x4c>
  8124b4:	0813c3c0 	call	813c3c <strcmp>
  8124b8:	8009883a 	mov	r4,r16
  8124bc:	014020b4 	movhi	r5,130
  8124c0:	29677e04 	addi	r5,r5,-25096
  8124c4:	10000b1e 	bne	r2,zero,8124f4 <_setlocale_r+0x70>
  8124c8:	8c000d15 	stw	r16,52(r17)
  8124cc:	8c800c15 	stw	r18,48(r17)
  8124d0:	00c020b4 	movhi	r3,130
  8124d4:	18e70c04 	addi	r3,r3,-25552
  8124d8:	1805883a 	mov	r2,r3
  8124dc:	dfc00317 	ldw	ra,12(sp)
  8124e0:	dc000217 	ldw	r16,8(sp)
  8124e4:	dc400117 	ldw	r17,4(sp)
  8124e8:	dc800017 	ldw	r18,0(sp)
  8124ec:	dec00404 	addi	sp,sp,16
  8124f0:	f800283a 	ret
  8124f4:	0813c3c0 	call	813c3c <strcmp>
  8124f8:	0007883a 	mov	r3,zero
  8124fc:	103ff61e 	bne	r2,zero,8124d8 <_setlocale_r+0x54>
  812500:	8c000d15 	stw	r16,52(r17)
  812504:	8c800c15 	stw	r18,48(r17)
  812508:	003ff106 	br	8124d0 <_setlocale_r+0x4c>

0081250c <__locale_charset>:
  81250c:	d0a00b17 	ldw	r2,-32724(gp)
  812510:	f800283a 	ret

00812514 <_localeconv_r>:
  812514:	008020b4 	movhi	r2,130
  812518:	10a79904 	addi	r2,r2,-24988
  81251c:	f800283a 	ret

00812520 <setlocale>:
  812520:	2007883a 	mov	r3,r4
  812524:	d1200117 	ldw	r4,-32764(gp)
  812528:	280d883a 	mov	r6,r5
  81252c:	02002074 	movhi	r8,129
  812530:	42092104 	addi	r8,r8,9348
  812534:	180b883a 	mov	r5,r3
  812538:	4000683a 	jmp	r8

0081253c <localeconv>:
  81253c:	d1200117 	ldw	r4,-32764(gp)
  812540:	02002074 	movhi	r8,129
  812544:	42094504 	addi	r8,r8,9492
  812548:	4000683a 	jmp	r8

0081254c <_lseek_r>:
  81254c:	defffe04 	addi	sp,sp,-8
  812550:	dc000015 	stw	r16,0(sp)
  812554:	2021883a 	mov	r16,r4
  812558:	2809883a 	mov	r4,r5
  81255c:	300b883a 	mov	r5,r6
  812560:	380d883a 	mov	r6,r7
  812564:	dfc00115 	stw	ra,4(sp)
  812568:	d0202815 	stw	zero,-32608(gp)
  81256c:	0814ca40 	call	814ca4 <lseek>
  812570:	1007883a 	mov	r3,r2
  812574:	00bfffc4 	movi	r2,-1
  812578:	18800526 	beq	r3,r2,812590 <_lseek_r+0x44>
  81257c:	1805883a 	mov	r2,r3
  812580:	dfc00117 	ldw	ra,4(sp)
  812584:	dc000017 	ldw	r16,0(sp)
  812588:	dec00204 	addi	sp,sp,8
  81258c:	f800283a 	ret
  812590:	d0a02817 	ldw	r2,-32608(gp)
  812594:	103ff926 	beq	r2,zero,81257c <_lseek_r+0x30>
  812598:	80800015 	stw	r2,0(r16)
  81259c:	1805883a 	mov	r2,r3
  8125a0:	dfc00117 	ldw	ra,4(sp)
  8125a4:	dc000017 	ldw	r16,0(sp)
  8125a8:	dec00204 	addi	sp,sp,8
  8125ac:	f800283a 	ret

008125b0 <memchr>:
  8125b0:	020000c4 	movi	r8,3
  8125b4:	29403fcc 	andi	r5,r5,255
  8125b8:	4180022e 	bgeu	r8,r6,8125c4 <memchr+0x14>
  8125bc:	2204703a 	and	r2,r4,r8
  8125c0:	10000b26 	beq	r2,zero,8125f0 <memchr+0x40>
  8125c4:	31bfffc4 	addi	r6,r6,-1
  8125c8:	00bfffc4 	movi	r2,-1
  8125cc:	30800626 	beq	r6,r2,8125e8 <memchr+0x38>
  8125d0:	1007883a 	mov	r3,r2
  8125d4:	20800003 	ldbu	r2,0(r4)
  8125d8:	31bfffc4 	addi	r6,r6,-1
  8125dc:	11402526 	beq	r2,r5,812674 <memchr+0xc4>
  8125e0:	21000044 	addi	r4,r4,1
  8125e4:	30fffb1e 	bne	r6,r3,8125d4 <memchr+0x24>
  8125e8:	0005883a 	mov	r2,zero
  8125ec:	f800283a 	ret
  8125f0:	200f883a 	mov	r7,r4
  8125f4:	0013883a 	mov	r9,zero
  8125f8:	0007883a 	mov	r3,zero
  8125fc:	4804923a 	slli	r2,r9,8
  812600:	18c00044 	addi	r3,r3,1
  812604:	1153883a 	add	r9,r2,r5
  812608:	40fffc2e 	bgeu	r8,r3,8125fc <memchr+0x4c>
  81260c:	028000c4 	movi	r10,3
  812610:	5180162e 	bgeu	r10,r6,81266c <memchr+0xbc>
  812614:	033fbff4 	movhi	r12,65279
  812618:	633fbfc4 	addi	r12,r12,-257
  81261c:	02e02074 	movhi	r11,32897
  812620:	5ae02004 	addi	r11,r11,-32640
  812624:	38800017 	ldw	r2,0(r7)
  812628:	1244f03a 	xor	r2,r2,r9
  81262c:	0086303a 	nor	r3,zero,r2
  812630:	1305883a 	add	r2,r2,r12
  812634:	10c4703a 	and	r2,r2,r3
  812638:	12c4703a 	and	r2,r2,r11
  81263c:	10000826 	beq	r2,zero,812660 <memchr+0xb0>
  812640:	3809883a 	mov	r4,r7
  812644:	0007883a 	mov	r3,zero
  812648:	020000c4 	movi	r8,3
  81264c:	20800003 	ldbu	r2,0(r4)
  812650:	18c00044 	addi	r3,r3,1
  812654:	11400726 	beq	r2,r5,812674 <memchr+0xc4>
  812658:	21000044 	addi	r4,r4,1
  81265c:	40fffb2e 	bgeu	r8,r3,81264c <memchr+0x9c>
  812660:	31bfff04 	addi	r6,r6,-4
  812664:	39c00104 	addi	r7,r7,4
  812668:	51bfee36 	bltu	r10,r6,812624 <memchr+0x74>
  81266c:	3809883a 	mov	r4,r7
  812670:	003fd406 	br	8125c4 <memchr+0x14>
  812674:	2005883a 	mov	r2,r4
  812678:	f800283a 	ret

0081267c <memmove>:
  81267c:	2811883a 	mov	r8,r5
  812680:	2007883a 	mov	r3,r4
  812684:	300f883a 	mov	r7,r6
  812688:	29000f2e 	bgeu	r5,r4,8126c8 <memmove+0x4c>
  81268c:	2985883a 	add	r2,r5,r6
  812690:	20800d2e 	bgeu	r4,r2,8126c8 <memmove+0x4c>
  812694:	2187883a 	add	r3,r4,r6
  812698:	31ffffc4 	addi	r7,r6,-1
  81269c:	01bfffc4 	movi	r6,-1
  8126a0:	100b883a 	mov	r5,r2
  8126a4:	39800626 	beq	r7,r6,8126c0 <memmove+0x44>
  8126a8:	297fffc4 	addi	r5,r5,-1
  8126ac:	28800003 	ldbu	r2,0(r5)
  8126b0:	18ffffc4 	addi	r3,r3,-1
  8126b4:	39ffffc4 	addi	r7,r7,-1
  8126b8:	18800005 	stb	r2,0(r3)
  8126bc:	39bffa1e 	bne	r7,r6,8126a8 <memmove+0x2c>
  8126c0:	2005883a 	mov	r2,r4
  8126c4:	f800283a 	ret
  8126c8:	024003c4 	movi	r9,15
  8126cc:	49800c36 	bltu	r9,r6,812700 <memmove+0x84>
  8126d0:	39ffffc4 	addi	r7,r7,-1
  8126d4:	00bfffc4 	movi	r2,-1
  8126d8:	38bff926 	beq	r7,r2,8126c0 <memmove+0x44>
  8126dc:	100d883a 	mov	r6,r2
  8126e0:	28800003 	ldbu	r2,0(r5)
  8126e4:	39ffffc4 	addi	r7,r7,-1
  8126e8:	29400044 	addi	r5,r5,1
  8126ec:	18800005 	stb	r2,0(r3)
  8126f0:	18c00044 	addi	r3,r3,1
  8126f4:	39bffa1e 	bne	r7,r6,8126e0 <memmove+0x64>
  8126f8:	2005883a 	mov	r2,r4
  8126fc:	f800283a 	ret
  812700:	4104b03a 	or	r2,r8,r4
  812704:	108000cc 	andi	r2,r2,3
  812708:	103ff11e 	bne	r2,zero,8126d0 <memmove+0x54>
  81270c:	400b883a 	mov	r5,r8
  812710:	200d883a 	mov	r6,r4
  812714:	28800017 	ldw	r2,0(r5)
  812718:	29400104 	addi	r5,r5,4
  81271c:	39fffc04 	addi	r7,r7,-16
  812720:	30800015 	stw	r2,0(r6)
  812724:	28c00017 	ldw	r3,0(r5)
  812728:	31800104 	addi	r6,r6,4
  81272c:	29400104 	addi	r5,r5,4
  812730:	30c00015 	stw	r3,0(r6)
  812734:	28800017 	ldw	r2,0(r5)
  812738:	31800104 	addi	r6,r6,4
  81273c:	29400104 	addi	r5,r5,4
  812740:	30800015 	stw	r2,0(r6)
  812744:	28c00017 	ldw	r3,0(r5)
  812748:	31800104 	addi	r6,r6,4
  81274c:	29400104 	addi	r5,r5,4
  812750:	30c00015 	stw	r3,0(r6)
  812754:	31800104 	addi	r6,r6,4
  812758:	49ffee36 	bltu	r9,r7,812714 <memmove+0x98>
  81275c:	00c000c4 	movi	r3,3
  812760:	19c0062e 	bgeu	r3,r7,81277c <memmove+0x100>
  812764:	28800017 	ldw	r2,0(r5)
  812768:	39ffff04 	addi	r7,r7,-4
  81276c:	29400104 	addi	r5,r5,4
  812770:	30800015 	stw	r2,0(r6)
  812774:	31800104 	addi	r6,r6,4
  812778:	19fffa36 	bltu	r3,r7,812764 <memmove+0xe8>
  81277c:	3007883a 	mov	r3,r6
  812780:	003fd306 	br	8126d0 <memmove+0x54>

00812784 <_Balloc>:
  812784:	defffc04 	addi	sp,sp,-16
  812788:	dc000215 	stw	r16,8(sp)
  81278c:	dc400115 	stw	r17,4(sp)
  812790:	dfc00315 	stw	ra,12(sp)
  812794:	dc800015 	stw	r18,0(sp)
  812798:	20c01317 	ldw	r3,76(r4)
  81279c:	2823883a 	mov	r17,r5
  8127a0:	2021883a 	mov	r16,r4
  8127a4:	01800404 	movi	r6,16
  8127a8:	01400104 	movi	r5,4
  8127ac:	18001426 	beq	r3,zero,812800 <_Balloc+0x7c>
  8127b0:	01400044 	movi	r5,1
  8127b4:	880490ba 	slli	r2,r17,2
  8127b8:	2c64983a 	sll	r18,r5,r17
  8127bc:	8009883a 	mov	r4,r16
  8127c0:	10cf883a 	add	r7,r2,r3
  8127c4:	900c90ba 	slli	r6,r18,2
  8127c8:	38c00017 	ldw	r3,0(r7)
  8127cc:	31800504 	addi	r6,r6,20
  8127d0:	18001126 	beq	r3,zero,812818 <_Balloc+0x94>
  8127d4:	18800017 	ldw	r2,0(r3)
  8127d8:	38800015 	stw	r2,0(r7)
  8127dc:	18000415 	stw	zero,16(r3)
  8127e0:	18000315 	stw	zero,12(r3)
  8127e4:	1805883a 	mov	r2,r3
  8127e8:	dfc00317 	ldw	ra,12(sp)
  8127ec:	dc000217 	ldw	r16,8(sp)
  8127f0:	dc400117 	ldw	r17,4(sp)
  8127f4:	dc800017 	ldw	r18,0(sp)
  8127f8:	dec00404 	addi	sp,sp,16
  8127fc:	f800283a 	ret
  812800:	080c7b40 	call	80c7b4 <_calloc_r>
  812804:	1007883a 	mov	r3,r2
  812808:	80801315 	stw	r2,76(r16)
  81280c:	0005883a 	mov	r2,zero
  812810:	183fe71e 	bne	r3,zero,8127b0 <_Balloc+0x2c>
  812814:	003ff406 	br	8127e8 <_Balloc+0x64>
  812818:	080c7b40 	call	80c7b4 <_calloc_r>
  81281c:	1007883a 	mov	r3,r2
  812820:	0005883a 	mov	r2,zero
  812824:	183ff026 	beq	r3,zero,8127e8 <_Balloc+0x64>
  812828:	1c400115 	stw	r17,4(r3)
  81282c:	1c800215 	stw	r18,8(r3)
  812830:	003fea06 	br	8127dc <_Balloc+0x58>

00812834 <_Bfree>:
  812834:	28000726 	beq	r5,zero,812854 <_Bfree+0x20>
  812838:	28800117 	ldw	r2,4(r5)
  81283c:	21001317 	ldw	r4,76(r4)
  812840:	100490ba 	slli	r2,r2,2
  812844:	1105883a 	add	r2,r2,r4
  812848:	10c00017 	ldw	r3,0(r2)
  81284c:	28c00015 	stw	r3,0(r5)
  812850:	11400015 	stw	r5,0(r2)
  812854:	f800283a 	ret

00812858 <_multadd>:
  812858:	defffa04 	addi	sp,sp,-24
  81285c:	dc000415 	stw	r16,16(sp)
  812860:	dcc00115 	stw	r19,4(sp)
  812864:	dd000015 	stw	r20,0(sp)
  812868:	dfc00515 	stw	ra,20(sp)
  81286c:	dc400315 	stw	r17,12(sp)
  812870:	dc800215 	stw	r18,8(sp)
  812874:	2c800417 	ldw	r18,16(r5)
  812878:	3821883a 	mov	r16,r7
  81287c:	2827883a 	mov	r19,r5
  812880:	2029883a 	mov	r20,r4
  812884:	2a000504 	addi	r8,r5,20
  812888:	000f883a 	mov	r7,zero
  81288c:	40800017 	ldw	r2,0(r8)
  812890:	39c00044 	addi	r7,r7,1
  812894:	10ffffcc 	andi	r3,r2,65535
  812898:	1987383a 	mul	r3,r3,r6
  81289c:	1004d43a 	srli	r2,r2,16
  8128a0:	1c07883a 	add	r3,r3,r16
  8128a4:	180ad43a 	srli	r5,r3,16
  8128a8:	1185383a 	mul	r2,r2,r6
  8128ac:	18ffffcc 	andi	r3,r3,65535
  8128b0:	1145883a 	add	r2,r2,r5
  8128b4:	1008943a 	slli	r4,r2,16
  8128b8:	1020d43a 	srli	r16,r2,16
  8128bc:	20c9883a 	add	r4,r4,r3
  8128c0:	41000015 	stw	r4,0(r8)
  8128c4:	42000104 	addi	r8,r8,4
  8128c8:	3cbff016 	blt	r7,r18,81288c <_multadd+0x34>
  8128cc:	80000726 	beq	r16,zero,8128ec <_multadd+0x94>
  8128d0:	98800217 	ldw	r2,8(r19)
  8128d4:	90800e0e 	bge	r18,r2,812910 <_multadd+0xb8>
  8128d8:	900490ba 	slli	r2,r18,2
  8128dc:	94800044 	addi	r18,r18,1
  8128e0:	9c800415 	stw	r18,16(r19)
  8128e4:	14c5883a 	add	r2,r2,r19
  8128e8:	14000515 	stw	r16,20(r2)
  8128ec:	9805883a 	mov	r2,r19
  8128f0:	dfc00517 	ldw	ra,20(sp)
  8128f4:	dc000417 	ldw	r16,16(sp)
  8128f8:	dc400317 	ldw	r17,12(sp)
  8128fc:	dc800217 	ldw	r18,8(sp)
  812900:	dcc00117 	ldw	r19,4(sp)
  812904:	dd000017 	ldw	r20,0(sp)
  812908:	dec00604 	addi	sp,sp,24
  81290c:	f800283a 	ret
  812910:	99400117 	ldw	r5,4(r19)
  812914:	a009883a 	mov	r4,r20
  812918:	29400044 	addi	r5,r5,1
  81291c:	08127840 	call	812784 <_Balloc>
  812920:	99800417 	ldw	r6,16(r19)
  812924:	99400304 	addi	r5,r19,12
  812928:	11000304 	addi	r4,r2,12
  81292c:	300c90ba 	slli	r6,r6,2
  812930:	1023883a 	mov	r17,r2
  812934:	31800204 	addi	r6,r6,8
  812938:	080d65c0 	call	80d65c <memcpy>
  81293c:	980b883a 	mov	r5,r19
  812940:	a009883a 	mov	r4,r20
  812944:	08128340 	call	812834 <_Bfree>
  812948:	8827883a 	mov	r19,r17
  81294c:	003fe206 	br	8128d8 <_multadd+0x80>

00812950 <_s2b>:
  812950:	defffa04 	addi	sp,sp,-24
  812954:	dc000415 	stw	r16,16(sp)
  812958:	dc800215 	stw	r18,8(sp)
  81295c:	2821883a 	mov	r16,r5
  812960:	2025883a 	mov	r18,r4
  812964:	01400244 	movi	r5,9
  812968:	39000204 	addi	r4,r7,8
  81296c:	dcc00115 	stw	r19,4(sp)
  812970:	dd000015 	stw	r20,0(sp)
  812974:	dfc00515 	stw	ra,20(sp)
  812978:	dc400315 	stw	r17,12(sp)
  81297c:	3827883a 	mov	r19,r7
  812980:	3029883a 	mov	r20,r6
  812984:	080bdb80 	call	80bdb8 <__divsi3>
  812988:	00c00044 	movi	r3,1
  81298c:	000b883a 	mov	r5,zero
  812990:	1880030e 	bge	r3,r2,8129a0 <_s2b+0x50>
  812994:	18c7883a 	add	r3,r3,r3
  812998:	29400044 	addi	r5,r5,1
  81299c:	18bffd16 	blt	r3,r2,812994 <_s2b+0x44>
  8129a0:	9009883a 	mov	r4,r18
  8129a4:	08127840 	call	812784 <_Balloc>
  8129a8:	1009883a 	mov	r4,r2
  8129ac:	d8800617 	ldw	r2,24(sp)
  8129b0:	00c00044 	movi	r3,1
  8129b4:	04400244 	movi	r17,9
  8129b8:	20800515 	stw	r2,20(r4)
  8129bc:	20c00415 	stw	r3,16(r4)
  8129c0:	8d00170e 	bge	r17,r20,812a20 <_s2b+0xd0>
  8129c4:	8461883a 	add	r16,r16,r17
  8129c8:	81c00007 	ldb	r7,0(r16)
  8129cc:	200b883a 	mov	r5,r4
  8129d0:	01800284 	movi	r6,10
  8129d4:	9009883a 	mov	r4,r18
  8129d8:	39fff404 	addi	r7,r7,-48
  8129dc:	08128580 	call	812858 <_multadd>
  8129e0:	8c400044 	addi	r17,r17,1
  8129e4:	1009883a 	mov	r4,r2
  8129e8:	84000044 	addi	r16,r16,1
  8129ec:	8d3ff616 	blt	r17,r20,8129c8 <_s2b+0x78>
  8129f0:	84000044 	addi	r16,r16,1
  8129f4:	8cc00c0e 	bge	r17,r19,812a28 <_s2b+0xd8>
  8129f8:	81c00007 	ldb	r7,0(r16)
  8129fc:	200b883a 	mov	r5,r4
  812a00:	01800284 	movi	r6,10
  812a04:	9009883a 	mov	r4,r18
  812a08:	39fff404 	addi	r7,r7,-48
  812a0c:	08128580 	call	812858 <_multadd>
  812a10:	1009883a 	mov	r4,r2
  812a14:	8c400044 	addi	r17,r17,1
  812a18:	84000044 	addi	r16,r16,1
  812a1c:	003ff506 	br	8129f4 <_s2b+0xa4>
  812a20:	84000284 	addi	r16,r16,10
  812a24:	8cfff416 	blt	r17,r19,8129f8 <_s2b+0xa8>
  812a28:	2005883a 	mov	r2,r4
  812a2c:	dfc00517 	ldw	ra,20(sp)
  812a30:	dc000417 	ldw	r16,16(sp)
  812a34:	dc400317 	ldw	r17,12(sp)
  812a38:	dc800217 	ldw	r18,8(sp)
  812a3c:	dcc00117 	ldw	r19,4(sp)
  812a40:	dd000017 	ldw	r20,0(sp)
  812a44:	dec00604 	addi	sp,sp,24
  812a48:	f800283a 	ret

00812a4c <_hi0bits>:
  812a4c:	20bfffec 	andhi	r2,r4,65535
  812a50:	0007883a 	mov	r3,zero
  812a54:	1000021e 	bne	r2,zero,812a60 <_hi0bits+0x14>
  812a58:	2008943a 	slli	r4,r4,16
  812a5c:	00c00404 	movi	r3,16
  812a60:	20bfc02c 	andhi	r2,r4,65280
  812a64:	1000021e 	bne	r2,zero,812a70 <_hi0bits+0x24>
  812a68:	2008923a 	slli	r4,r4,8
  812a6c:	18c00204 	addi	r3,r3,8
  812a70:	20bc002c 	andhi	r2,r4,61440
  812a74:	1000021e 	bne	r2,zero,812a80 <_hi0bits+0x34>
  812a78:	2008913a 	slli	r4,r4,4
  812a7c:	18c00104 	addi	r3,r3,4
  812a80:	20b0002c 	andhi	r2,r4,49152
  812a84:	1000021e 	bne	r2,zero,812a90 <_hi0bits+0x44>
  812a88:	200890ba 	slli	r4,r4,2
  812a8c:	18c00084 	addi	r3,r3,2
  812a90:	20000416 	blt	r4,zero,812aa4 <_hi0bits+0x58>
  812a94:	2090002c 	andhi	r2,r4,16384
  812a98:	18c00044 	addi	r3,r3,1
  812a9c:	01000804 	movi	r4,32
  812aa0:	10000126 	beq	r2,zero,812aa8 <_hi0bits+0x5c>
  812aa4:	1809883a 	mov	r4,r3
  812aa8:	2005883a 	mov	r2,r4
  812aac:	f800283a 	ret

00812ab0 <_lo0bits>:
  812ab0:	20c00017 	ldw	r3,0(r4)
  812ab4:	188001cc 	andi	r2,r3,7
  812ab8:	10000a26 	beq	r2,zero,812ae4 <_lo0bits+0x34>
  812abc:	1880004c 	andi	r2,r3,1
  812ac0:	000b883a 	mov	r5,zero
  812ac4:	1000051e 	bne	r2,zero,812adc <_lo0bits+0x2c>
  812ac8:	1880008c 	andi	r2,r3,2
  812acc:	10002126 	beq	r2,zero,812b54 <_lo0bits+0xa4>
  812ad0:	1804d07a 	srli	r2,r3,1
  812ad4:	01400044 	movi	r5,1
  812ad8:	20800015 	stw	r2,0(r4)
  812adc:	2805883a 	mov	r2,r5
  812ae0:	f800283a 	ret
  812ae4:	18bfffcc 	andi	r2,r3,65535
  812ae8:	000d883a 	mov	r6,zero
  812aec:	10001626 	beq	r2,zero,812b48 <_lo0bits+0x98>
  812af0:	18803fcc 	andi	r2,r3,255
  812af4:	1000021e 	bne	r2,zero,812b00 <_lo0bits+0x50>
  812af8:	1806d23a 	srli	r3,r3,8
  812afc:	31800204 	addi	r6,r6,8
  812b00:	188003cc 	andi	r2,r3,15
  812b04:	1000021e 	bne	r2,zero,812b10 <_lo0bits+0x60>
  812b08:	1806d13a 	srli	r3,r3,4
  812b0c:	31800104 	addi	r6,r6,4
  812b10:	188000cc 	andi	r2,r3,3
  812b14:	1000021e 	bne	r2,zero,812b20 <_lo0bits+0x70>
  812b18:	1806d0ba 	srli	r3,r3,2
  812b1c:	31800084 	addi	r6,r6,2
  812b20:	1880004c 	andi	r2,r3,1
  812b24:	1000041e 	bne	r2,zero,812b38 <_lo0bits+0x88>
  812b28:	1806d07a 	srli	r3,r3,1
  812b2c:	31800044 	addi	r6,r6,1
  812b30:	01400804 	movi	r5,32
  812b34:	183fe926 	beq	r3,zero,812adc <_lo0bits+0x2c>
  812b38:	300b883a 	mov	r5,r6
  812b3c:	2805883a 	mov	r2,r5
  812b40:	20c00015 	stw	r3,0(r4)
  812b44:	f800283a 	ret
  812b48:	1806d43a 	srli	r3,r3,16
  812b4c:	01800404 	movi	r6,16
  812b50:	003fe706 	br	812af0 <_lo0bits+0x40>
  812b54:	1804d0ba 	srli	r2,r3,2
  812b58:	01400084 	movi	r5,2
  812b5c:	20800015 	stw	r2,0(r4)
  812b60:	003fde06 	br	812adc <_lo0bits+0x2c>

00812b64 <_i2b>:
  812b64:	defffd04 	addi	sp,sp,-12
  812b68:	dc000115 	stw	r16,4(sp)
  812b6c:	04000044 	movi	r16,1
  812b70:	dc800015 	stw	r18,0(sp)
  812b74:	2825883a 	mov	r18,r5
  812b78:	800b883a 	mov	r5,r16
  812b7c:	dfc00215 	stw	ra,8(sp)
  812b80:	08127840 	call	812784 <_Balloc>
  812b84:	14000415 	stw	r16,16(r2)
  812b88:	14800515 	stw	r18,20(r2)
  812b8c:	dfc00217 	ldw	ra,8(sp)
  812b90:	dc000117 	ldw	r16,4(sp)
  812b94:	dc800017 	ldw	r18,0(sp)
  812b98:	dec00304 	addi	sp,sp,12
  812b9c:	f800283a 	ret

00812ba0 <_multiply>:
  812ba0:	defff804 	addi	sp,sp,-32
  812ba4:	dc000615 	stw	r16,24(sp)
  812ba8:	dfc00715 	stw	ra,28(sp)
  812bac:	dc400515 	stw	r17,20(sp)
  812bb0:	dc800415 	stw	r18,16(sp)
  812bb4:	dcc00315 	stw	r19,12(sp)
  812bb8:	dd000215 	stw	r20,8(sp)
  812bbc:	dd400115 	stw	r21,4(sp)
  812bc0:	2cc00417 	ldw	r19,16(r5)
  812bc4:	34800417 	ldw	r18,16(r6)
  812bc8:	2821883a 	mov	r16,r5
  812bcc:	9c80040e 	bge	r19,r18,812be0 <_multiply+0x40>
  812bd0:	9027883a 	mov	r19,r18
  812bd4:	2c800417 	ldw	r18,16(r5)
  812bd8:	3021883a 	mov	r16,r6
  812bdc:	280d883a 	mov	r6,r5
  812be0:	80800217 	ldw	r2,8(r16)
  812be4:	9ca3883a 	add	r17,r19,r18
  812be8:	81400117 	ldw	r5,4(r16)
  812bec:	1440010e 	bge	r2,r17,812bf4 <_multiply+0x54>
  812bf0:	29400044 	addi	r5,r5,1
  812bf4:	882a90ba 	slli	r21,r17,2
  812bf8:	d9800015 	stw	r6,0(sp)
  812bfc:	08127840 	call	812784 <_Balloc>
  812c00:	13800504 	addi	r14,r2,20
  812c04:	ab9b883a 	add	r13,r21,r14
  812c08:	1029883a 	mov	r20,r2
  812c0c:	7011883a 	mov	r8,r14
  812c10:	d9800017 	ldw	r6,0(sp)
  812c14:	7340032e 	bgeu	r14,r13,812c24 <_multiply+0x84>
  812c18:	40000015 	stw	zero,0(r8)
  812c1c:	42000104 	addi	r8,r8,4
  812c20:	437ffd36 	bltu	r8,r13,812c18 <_multiply+0x78>
  812c24:	900490ba 	slli	r2,r18,2
  812c28:	980690ba 	slli	r3,r19,2
  812c2c:	31800504 	addi	r6,r6,20
  812c30:	83400504 	addi	r13,r16,20
  812c34:	119f883a 	add	r15,r2,r6
  812c38:	1b57883a 	add	r11,r3,r13
  812c3c:	7019883a 	mov	r12,r14
  812c40:	33c0392e 	bgeu	r6,r15,812d28 <_multiply+0x188>
  812c44:	30800017 	ldw	r2,0(r6)
  812c48:	12bfffcc 	andi	r10,r2,65535
  812c4c:	50001826 	beq	r10,zero,812cb0 <_multiply+0x110>
  812c50:	6811883a 	mov	r8,r13
  812c54:	600f883a 	mov	r7,r12
  812c58:	0013883a 	mov	r9,zero
  812c5c:	41000017 	ldw	r4,0(r8)
  812c60:	39400017 	ldw	r5,0(r7)
  812c64:	42000104 	addi	r8,r8,4
  812c68:	20bfffcc 	andi	r2,r4,65535
  812c6c:	1285383a 	mul	r2,r2,r10
  812c70:	2008d43a 	srli	r4,r4,16
  812c74:	28ffffcc 	andi	r3,r5,65535
  812c78:	10c5883a 	add	r2,r2,r3
  812c7c:	1245883a 	add	r2,r2,r9
  812c80:	2289383a 	mul	r4,r4,r10
  812c84:	280ad43a 	srli	r5,r5,16
  812c88:	1012d43a 	srli	r9,r2,16
  812c8c:	3880000d 	sth	r2,0(r7)
  812c90:	2149883a 	add	r4,r4,r5
  812c94:	2245883a 	add	r2,r4,r9
  812c98:	3880008d 	sth	r2,2(r7)
  812c9c:	1012d43a 	srli	r9,r2,16
  812ca0:	39c00104 	addi	r7,r7,4
  812ca4:	42ffed36 	bltu	r8,r11,812c5c <_multiply+0xbc>
  812ca8:	3a400015 	stw	r9,0(r7)
  812cac:	30800017 	ldw	r2,0(r6)
  812cb0:	1014d43a 	srli	r10,r2,16
  812cb4:	50001926 	beq	r10,zero,812d1c <_multiply+0x17c>
  812cb8:	60800017 	ldw	r2,0(r12)
  812cbc:	600f883a 	mov	r7,r12
  812cc0:	6811883a 	mov	r8,r13
  812cc4:	0013883a 	mov	r9,zero
  812cc8:	1009883a 	mov	r4,r2
  812ccc:	40c00017 	ldw	r3,0(r8)
  812cd0:	3880000d 	sth	r2,0(r7)
  812cd4:	2008d43a 	srli	r4,r4,16
  812cd8:	18bfffcc 	andi	r2,r3,65535
  812cdc:	1285383a 	mul	r2,r2,r10
  812ce0:	1806d43a 	srli	r3,r3,16
  812ce4:	42000104 	addi	r8,r8,4
  812ce8:	1105883a 	add	r2,r2,r4
  812cec:	1245883a 	add	r2,r2,r9
  812cf0:	3880008d 	sth	r2,2(r7)
  812cf4:	39c00104 	addi	r7,r7,4
  812cf8:	39000017 	ldw	r4,0(r7)
  812cfc:	1a87383a 	mul	r3,r3,r10
  812d00:	1012d43a 	srli	r9,r2,16
  812d04:	20bfffcc 	andi	r2,r4,65535
  812d08:	1887883a 	add	r3,r3,r2
  812d0c:	1a45883a 	add	r2,r3,r9
  812d10:	1012d43a 	srli	r9,r2,16
  812d14:	42ffed36 	bltu	r8,r11,812ccc <_multiply+0x12c>
  812d18:	38800015 	stw	r2,0(r7)
  812d1c:	31800104 	addi	r6,r6,4
  812d20:	63000104 	addi	r12,r12,4
  812d24:	33ffc736 	bltu	r6,r15,812c44 <_multiply+0xa4>
  812d28:	ab8f883a 	add	r7,r21,r14
  812d2c:	0440060e 	bge	zero,r17,812d48 <_multiply+0x1a8>
  812d30:	39ffff04 	addi	r7,r7,-4
  812d34:	38800017 	ldw	r2,0(r7)
  812d38:	1000031e 	bne	r2,zero,812d48 <_multiply+0x1a8>
  812d3c:	8c7fffc4 	addi	r17,r17,-1
  812d40:	39ffff04 	addi	r7,r7,-4
  812d44:	047ffb16 	blt	zero,r17,812d34 <_multiply+0x194>
  812d48:	a005883a 	mov	r2,r20
  812d4c:	a4400415 	stw	r17,16(r20)
  812d50:	dfc00717 	ldw	ra,28(sp)
  812d54:	dc000617 	ldw	r16,24(sp)
  812d58:	dc400517 	ldw	r17,20(sp)
  812d5c:	dc800417 	ldw	r18,16(sp)
  812d60:	dcc00317 	ldw	r19,12(sp)
  812d64:	dd000217 	ldw	r20,8(sp)
  812d68:	dd400117 	ldw	r21,4(sp)
  812d6c:	dec00804 	addi	sp,sp,32
  812d70:	f800283a 	ret

00812d74 <_pow5mult>:
  812d74:	defffa04 	addi	sp,sp,-24
  812d78:	308000cc 	andi	r2,r6,3
  812d7c:	dc800215 	stw	r18,8(sp)
  812d80:	dcc00115 	stw	r19,4(sp)
  812d84:	dd000015 	stw	r20,0(sp)
  812d88:	dfc00515 	stw	ra,20(sp)
  812d8c:	dc000415 	stw	r16,16(sp)
  812d90:	dc400315 	stw	r17,12(sp)
  812d94:	3025883a 	mov	r18,r6
  812d98:	2027883a 	mov	r19,r4
  812d9c:	2829883a 	mov	r20,r5
  812da0:	10002a1e 	bne	r2,zero,812e4c <_pow5mult+0xd8>
  812da4:	9025d0ba 	srai	r18,r18,2
  812da8:	90001f26 	beq	r18,zero,812e28 <_pow5mult+0xb4>
  812dac:	9c001217 	ldw	r16,72(r19)
  812db0:	80003426 	beq	r16,zero,812e84 <_pow5mult+0x110>
  812db4:	9080004c 	andi	r2,r18,1
  812db8:	800d883a 	mov	r6,r16
  812dbc:	9809883a 	mov	r4,r19
  812dc0:	a00b883a 	mov	r5,r20
  812dc4:	9025d07a 	srai	r18,r18,1
  812dc8:	10000d1e 	bne	r2,zero,812e00 <_pow5mult+0x8c>
  812dcc:	800b883a 	mov	r5,r16
  812dd0:	800d883a 	mov	r6,r16
  812dd4:	9809883a 	mov	r4,r19
  812dd8:	90001326 	beq	r18,zero,812e28 <_pow5mult+0xb4>
  812ddc:	80800017 	ldw	r2,0(r16)
  812de0:	10002326 	beq	r2,zero,812e70 <_pow5mult+0xfc>
  812de4:	1021883a 	mov	r16,r2
  812de8:	9080004c 	andi	r2,r18,1
  812dec:	800d883a 	mov	r6,r16
  812df0:	9809883a 	mov	r4,r19
  812df4:	a00b883a 	mov	r5,r20
  812df8:	9025d07a 	srai	r18,r18,1
  812dfc:	103ff326 	beq	r2,zero,812dcc <_pow5mult+0x58>
  812e00:	0812ba00 	call	812ba0 <_multiply>
  812e04:	a00b883a 	mov	r5,r20
  812e08:	9809883a 	mov	r4,r19
  812e0c:	1023883a 	mov	r17,r2
  812e10:	08128340 	call	812834 <_Bfree>
  812e14:	8829883a 	mov	r20,r17
  812e18:	800b883a 	mov	r5,r16
  812e1c:	800d883a 	mov	r6,r16
  812e20:	9809883a 	mov	r4,r19
  812e24:	903fed1e 	bne	r18,zero,812ddc <_pow5mult+0x68>
  812e28:	a005883a 	mov	r2,r20
  812e2c:	dfc00517 	ldw	ra,20(sp)
  812e30:	dc000417 	ldw	r16,16(sp)
  812e34:	dc400317 	ldw	r17,12(sp)
  812e38:	dc800217 	ldw	r18,8(sp)
  812e3c:	dcc00117 	ldw	r19,4(sp)
  812e40:	dd000017 	ldw	r20,0(sp)
  812e44:	dec00604 	addi	sp,sp,24
  812e48:	f800283a 	ret
  812e4c:	100490ba 	slli	r2,r2,2
  812e50:	00c020b4 	movhi	r3,130
  812e54:	18e7ea04 	addi	r3,r3,-24664
  812e58:	000f883a 	mov	r7,zero
  812e5c:	10c5883a 	add	r2,r2,r3
  812e60:	11800017 	ldw	r6,0(r2)
  812e64:	08128580 	call	812858 <_multadd>
  812e68:	1029883a 	mov	r20,r2
  812e6c:	003fcd06 	br	812da4 <_pow5mult+0x30>
  812e70:	0812ba00 	call	812ba0 <_multiply>
  812e74:	80800015 	stw	r2,0(r16)
  812e78:	1021883a 	mov	r16,r2
  812e7c:	10000015 	stw	zero,0(r2)
  812e80:	003fd906 	br	812de8 <_pow5mult+0x74>
  812e84:	9809883a 	mov	r4,r19
  812e88:	01409c44 	movi	r5,625
  812e8c:	0812b640 	call	812b64 <_i2b>
  812e90:	98801215 	stw	r2,72(r19)
  812e94:	1021883a 	mov	r16,r2
  812e98:	10000015 	stw	zero,0(r2)
  812e9c:	003fc506 	br	812db4 <_pow5mult+0x40>

00812ea0 <_lshift>:
  812ea0:	defff904 	addi	sp,sp,-28
  812ea4:	dc000515 	stw	r16,20(sp)
  812ea8:	dc400415 	stw	r17,16(sp)
  812eac:	dc800315 	stw	r18,12(sp)
  812eb0:	dcc00215 	stw	r19,8(sp)
  812eb4:	dd400015 	stw	r21,0(sp)
  812eb8:	dfc00615 	stw	ra,24(sp)
  812ebc:	dd000115 	stw	r20,4(sp)
  812ec0:	28800417 	ldw	r2,16(r5)
  812ec4:	3021d17a 	srai	r16,r6,5
  812ec8:	28c00217 	ldw	r3,8(r5)
  812ecc:	2827883a 	mov	r19,r5
  812ed0:	1405883a 	add	r2,r2,r16
  812ed4:	14800044 	addi	r18,r2,1
  812ed8:	3023883a 	mov	r17,r6
  812edc:	202b883a 	mov	r21,r4
  812ee0:	29400117 	ldw	r5,4(r5)
  812ee4:	1c80030e 	bge	r3,r18,812ef4 <_lshift+0x54>
  812ee8:	18c7883a 	add	r3,r3,r3
  812eec:	29400044 	addi	r5,r5,1
  812ef0:	1cbffd16 	blt	r3,r18,812ee8 <_lshift+0x48>
  812ef4:	a809883a 	mov	r4,r21
  812ef8:	08127840 	call	812784 <_Balloc>
  812efc:	1029883a 	mov	r20,r2
  812f00:	11800504 	addi	r6,r2,20
  812f04:	0007883a 	mov	r3,zero
  812f08:	0400040e 	bge	zero,r16,812f1c <_lshift+0x7c>
  812f0c:	18c00044 	addi	r3,r3,1
  812f10:	30000015 	stw	zero,0(r6)
  812f14:	31800104 	addi	r6,r6,4
  812f18:	1c3ffc16 	blt	r3,r16,812f0c <_lshift+0x6c>
  812f1c:	98800417 	ldw	r2,16(r19)
  812f20:	99000504 	addi	r4,r19,20
  812f24:	8c4007cc 	andi	r17,r17,31
  812f28:	100490ba 	slli	r2,r2,2
  812f2c:	110f883a 	add	r7,r2,r4
  812f30:	88001e26 	beq	r17,zero,812fac <_lshift+0x10c>
  812f34:	00800804 	movi	r2,32
  812f38:	144bc83a 	sub	r5,r2,r17
  812f3c:	0007883a 	mov	r3,zero
  812f40:	20800017 	ldw	r2,0(r4)
  812f44:	1444983a 	sll	r2,r2,r17
  812f48:	10c4b03a 	or	r2,r2,r3
  812f4c:	30800015 	stw	r2,0(r6)
  812f50:	20c00017 	ldw	r3,0(r4)
  812f54:	21000104 	addi	r4,r4,4
  812f58:	31800104 	addi	r6,r6,4
  812f5c:	1946d83a 	srl	r3,r3,r5
  812f60:	21fff736 	bltu	r4,r7,812f40 <_lshift+0xa0>
  812f64:	30c00015 	stw	r3,0(r6)
  812f68:	18000126 	beq	r3,zero,812f70 <_lshift+0xd0>
  812f6c:	94800044 	addi	r18,r18,1
  812f70:	90bfffc4 	addi	r2,r18,-1
  812f74:	a0800415 	stw	r2,16(r20)
  812f78:	a809883a 	mov	r4,r21
  812f7c:	980b883a 	mov	r5,r19
  812f80:	08128340 	call	812834 <_Bfree>
  812f84:	a005883a 	mov	r2,r20
  812f88:	dfc00617 	ldw	ra,24(sp)
  812f8c:	dc000517 	ldw	r16,20(sp)
  812f90:	dc400417 	ldw	r17,16(sp)
  812f94:	dc800317 	ldw	r18,12(sp)
  812f98:	dcc00217 	ldw	r19,8(sp)
  812f9c:	dd000117 	ldw	r20,4(sp)
  812fa0:	dd400017 	ldw	r21,0(sp)
  812fa4:	dec00704 	addi	sp,sp,28
  812fa8:	f800283a 	ret
  812fac:	20800017 	ldw	r2,0(r4)
  812fb0:	21000104 	addi	r4,r4,4
  812fb4:	30800015 	stw	r2,0(r6)
  812fb8:	31800104 	addi	r6,r6,4
  812fbc:	21ffec2e 	bgeu	r4,r7,812f70 <_lshift+0xd0>
  812fc0:	20800017 	ldw	r2,0(r4)
  812fc4:	21000104 	addi	r4,r4,4
  812fc8:	30800015 	stw	r2,0(r6)
  812fcc:	31800104 	addi	r6,r6,4
  812fd0:	21fff636 	bltu	r4,r7,812fac <_lshift+0x10c>
  812fd4:	003fe606 	br	812f70 <_lshift+0xd0>

00812fd8 <__mcmp>:
  812fd8:	20800417 	ldw	r2,16(r4)
  812fdc:	28c00417 	ldw	r3,16(r5)
  812fe0:	10c5c83a 	sub	r2,r2,r3
  812fe4:	100d883a 	mov	r6,r2
  812fe8:	10000c1e 	bne	r2,zero,81301c <__mcmp+0x44>
  812fec:	180690ba 	slli	r3,r3,2
  812ff0:	21000504 	addi	r4,r4,20
  812ff4:	28800504 	addi	r2,r5,20
  812ff8:	1885883a 	add	r2,r3,r2
  812ffc:	1907883a 	add	r3,r3,r4
  813000:	18ffff04 	addi	r3,r3,-4
  813004:	10bfff04 	addi	r2,r2,-4
  813008:	19800017 	ldw	r6,0(r3)
  81300c:	11400017 	ldw	r5,0(r2)
  813010:	3140041e 	bne	r6,r5,813024 <__mcmp+0x4c>
  813014:	20fffa36 	bltu	r4,r3,813000 <__mcmp+0x28>
  813018:	000d883a 	mov	r6,zero
  81301c:	3005883a 	mov	r2,r6
  813020:	f800283a 	ret
  813024:	00bfffc4 	movi	r2,-1
  813028:	31400136 	bltu	r6,r5,813030 <__mcmp+0x58>
  81302c:	00800044 	movi	r2,1
  813030:	100d883a 	mov	r6,r2
  813034:	3005883a 	mov	r2,r6
  813038:	f800283a 	ret

0081303c <__mdiff>:
  81303c:	defffb04 	addi	sp,sp,-20
  813040:	dc400215 	stw	r17,8(sp)
  813044:	2823883a 	mov	r17,r5
  813048:	dcc00015 	stw	r19,0(sp)
  81304c:	300b883a 	mov	r5,r6
  813050:	2027883a 	mov	r19,r4
  813054:	8809883a 	mov	r4,r17
  813058:	dc800115 	stw	r18,4(sp)
  81305c:	dfc00415 	stw	ra,16(sp)
  813060:	dc000315 	stw	r16,12(sp)
  813064:	3025883a 	mov	r18,r6
  813068:	0812fd80 	call	812fd8 <__mcmp>
  81306c:	10004026 	beq	r2,zero,813170 <__mdiff+0x134>
  813070:	10004e16 	blt	r2,zero,8131ac <__mdiff+0x170>
  813074:	0021883a 	mov	r16,zero
  813078:	89400117 	ldw	r5,4(r17)
  81307c:	9809883a 	mov	r4,r19
  813080:	08127840 	call	812784 <_Balloc>
  813084:	1019883a 	mov	r12,r2
  813088:	8a800417 	ldw	r10,16(r17)
  81308c:	90800417 	ldw	r2,16(r18)
  813090:	8a000504 	addi	r8,r17,20
  813094:	500690ba 	slli	r3,r10,2
  813098:	100490ba 	slli	r2,r2,2
  81309c:	91800504 	addi	r6,r18,20
  8130a0:	64000315 	stw	r16,12(r12)
  8130a4:	1a1b883a 	add	r13,r3,r8
  8130a8:	1197883a 	add	r11,r2,r6
  8130ac:	61c00504 	addi	r7,r12,20
  8130b0:	0013883a 	mov	r9,zero
  8130b4:	41000017 	ldw	r4,0(r8)
  8130b8:	31400017 	ldw	r5,0(r6)
  8130bc:	31800104 	addi	r6,r6,4
  8130c0:	20bfffcc 	andi	r2,r4,65535
  8130c4:	28ffffcc 	andi	r3,r5,65535
  8130c8:	10c5c83a 	sub	r2,r2,r3
  8130cc:	1245883a 	add	r2,r2,r9
  8130d0:	2008d43a 	srli	r4,r4,16
  8130d4:	280ad43a 	srli	r5,r5,16
  8130d8:	1013d43a 	srai	r9,r2,16
  8130dc:	3880000d 	sth	r2,0(r7)
  8130e0:	2149c83a 	sub	r4,r4,r5
  8130e4:	2247883a 	add	r3,r4,r9
  8130e8:	38c0008d 	sth	r3,2(r7)
  8130ec:	42000104 	addi	r8,r8,4
  8130f0:	39c00104 	addi	r7,r7,4
  8130f4:	1813d43a 	srai	r9,r3,16
  8130f8:	32ffee36 	bltu	r6,r11,8130b4 <__mdiff+0x78>
  8130fc:	43400c2e 	bgeu	r8,r13,813130 <__mdiff+0xf4>
  813100:	40c00017 	ldw	r3,0(r8)
  813104:	42000104 	addi	r8,r8,4
  813108:	18bfffcc 	andi	r2,r3,65535
  81310c:	1245883a 	add	r2,r2,r9
  813110:	1013d43a 	srai	r9,r2,16
  813114:	1806d43a 	srli	r3,r3,16
  813118:	3880000d 	sth	r2,0(r7)
  81311c:	1a47883a 	add	r3,r3,r9
  813120:	38c0008d 	sth	r3,2(r7)
  813124:	1813d43a 	srai	r9,r3,16
  813128:	39c00104 	addi	r7,r7,4
  81312c:	437ff436 	bltu	r8,r13,813100 <__mdiff+0xc4>
  813130:	39ffff04 	addi	r7,r7,-4
  813134:	38800017 	ldw	r2,0(r7)
  813138:	1000041e 	bne	r2,zero,81314c <__mdiff+0x110>
  81313c:	39ffff04 	addi	r7,r7,-4
  813140:	38800017 	ldw	r2,0(r7)
  813144:	52bfffc4 	addi	r10,r10,-1
  813148:	103ffc26 	beq	r2,zero,81313c <__mdiff+0x100>
  81314c:	6005883a 	mov	r2,r12
  813150:	62800415 	stw	r10,16(r12)
  813154:	dfc00417 	ldw	ra,16(sp)
  813158:	dc000317 	ldw	r16,12(sp)
  81315c:	dc400217 	ldw	r17,8(sp)
  813160:	dc800117 	ldw	r18,4(sp)
  813164:	dcc00017 	ldw	r19,0(sp)
  813168:	dec00504 	addi	sp,sp,20
  81316c:	f800283a 	ret
  813170:	9809883a 	mov	r4,r19
  813174:	000b883a 	mov	r5,zero
  813178:	08127840 	call	812784 <_Balloc>
  81317c:	1019883a 	mov	r12,r2
  813180:	00800044 	movi	r2,1
  813184:	60800415 	stw	r2,16(r12)
  813188:	6005883a 	mov	r2,r12
  81318c:	60000515 	stw	zero,20(r12)
  813190:	dfc00417 	ldw	ra,16(sp)
  813194:	dc000317 	ldw	r16,12(sp)
  813198:	dc400217 	ldw	r17,8(sp)
  81319c:	dc800117 	ldw	r18,4(sp)
  8131a0:	dcc00017 	ldw	r19,0(sp)
  8131a4:	dec00504 	addi	sp,sp,20
  8131a8:	f800283a 	ret
  8131ac:	8819883a 	mov	r12,r17
  8131b0:	04000044 	movi	r16,1
  8131b4:	9023883a 	mov	r17,r18
  8131b8:	6025883a 	mov	r18,r12
  8131bc:	003fae06 	br	813078 <__mdiff+0x3c>

008131c0 <_ulp>:
  8131c0:	295ffc2c 	andhi	r5,r5,32752
  8131c4:	013f3034 	movhi	r4,64704
  8131c8:	21000004 	addi	r4,r4,0
  8131cc:	290b883a 	add	r5,r5,r4
  8131d0:	0145c83a 	sub	r2,zero,r5
  8131d4:	000d883a 	mov	r6,zero
  8131d8:	280f883a 	mov	r7,r5
  8131dc:	0140030e 	bge	zero,r5,8131ec <_ulp+0x2c>
  8131e0:	3005883a 	mov	r2,r6
  8131e4:	3807883a 	mov	r3,r7
  8131e8:	f800283a 	ret
  8131ec:	100bd53a 	srai	r5,r2,20
  8131f0:	008004c4 	movi	r2,19
  8131f4:	01000044 	movi	r4,1
  8131f8:	11400c0e 	bge	r2,r5,81322c <_ulp+0x6c>
  8131fc:	008007c4 	movi	r2,31
  813200:	297ffb04 	addi	r5,r5,-20
  813204:	1147c83a 	sub	r3,r2,r5
  813208:	00800784 	movi	r2,30
  81320c:	000f883a 	mov	r7,zero
  813210:	11400216 	blt	r2,r5,81321c <_ulp+0x5c>
  813214:	00800044 	movi	r2,1
  813218:	10c8983a 	sll	r4,r2,r3
  81321c:	200d883a 	mov	r6,r4
  813220:	3005883a 	mov	r2,r6
  813224:	3807883a 	mov	r3,r7
  813228:	f800283a 	ret
  81322c:	00800234 	movhi	r2,8
  813230:	10800004 	addi	r2,r2,0
  813234:	114fd83a 	sra	r7,r2,r5
  813238:	000d883a 	mov	r6,zero
  81323c:	3005883a 	mov	r2,r6
  813240:	3807883a 	mov	r3,r7
  813244:	f800283a 	ret

00813248 <_b2d>:
  813248:	defff904 	addi	sp,sp,-28
  81324c:	dc000515 	stw	r16,20(sp)
  813250:	dc400415 	stw	r17,16(sp)
  813254:	dd400015 	stw	r21,0(sp)
  813258:	dfc00615 	stw	ra,24(sp)
  81325c:	dc800315 	stw	r18,12(sp)
  813260:	dcc00215 	stw	r19,8(sp)
  813264:	dd000115 	stw	r20,4(sp)
  813268:	20800417 	ldw	r2,16(r4)
  81326c:	25400504 	addi	r21,r4,20
  813270:	2823883a 	mov	r17,r5
  813274:	100490ba 	slli	r2,r2,2
  813278:	1561883a 	add	r16,r2,r21
  81327c:	843fff04 	addi	r16,r16,-4
  813280:	85000017 	ldw	r20,0(r16)
  813284:	a009883a 	mov	r4,r20
  813288:	0812a4c0 	call	812a4c <_hi0bits>
  81328c:	100b883a 	mov	r5,r2
  813290:	00800804 	movi	r2,32
  813294:	1145c83a 	sub	r2,r2,r5
  813298:	00c00284 	movi	r3,10
  81329c:	88800015 	stw	r2,0(r17)
  8132a0:	1940240e 	bge	r3,r5,813334 <_b2d+0xec>
  8132a4:	0009883a 	mov	r4,zero
  8132a8:	ac001136 	bltu	r21,r16,8132f0 <_b2d+0xa8>
  8132ac:	297ffd44 	addi	r5,r5,-11
  8132b0:	28001326 	beq	r5,zero,813300 <_b2d+0xb8>
  8132b4:	00800804 	movi	r2,32
  8132b8:	1145c83a 	sub	r2,r2,r5
  8132bc:	a146983a 	sll	r3,r20,r5
  8132c0:	2084d83a 	srl	r2,r4,r2
  8132c4:	0029883a 	mov	r20,zero
  8132c8:	1886b03a 	or	r3,r3,r2
  8132cc:	1ccffc34 	orhi	r19,r3,16368
  8132d0:	ac00012e 	bgeu	r21,r16,8132d8 <_b2d+0x90>
  8132d4:	853fff17 	ldw	r20,-4(r16)
  8132d8:	00800804 	movi	r2,32
  8132dc:	1145c83a 	sub	r2,r2,r5
  8132e0:	a084d83a 	srl	r2,r20,r2
  8132e4:	2146983a 	sll	r3,r4,r5
  8132e8:	18a4b03a 	or	r18,r3,r2
  8132ec:	00000606 	br	813308 <_b2d+0xc0>
  8132f0:	843fff04 	addi	r16,r16,-4
  8132f4:	297ffd44 	addi	r5,r5,-11
  8132f8:	81000017 	ldw	r4,0(r16)
  8132fc:	283fed1e 	bne	r5,zero,8132b4 <_b2d+0x6c>
  813300:	a4cffc34 	orhi	r19,r20,16368
  813304:	2025883a 	mov	r18,r4
  813308:	9005883a 	mov	r2,r18
  81330c:	9807883a 	mov	r3,r19
  813310:	dfc00617 	ldw	ra,24(sp)
  813314:	dc000517 	ldw	r16,20(sp)
  813318:	dc400417 	ldw	r17,16(sp)
  81331c:	dc800317 	ldw	r18,12(sp)
  813320:	dcc00217 	ldw	r19,8(sp)
  813324:	dd000117 	ldw	r20,4(sp)
  813328:	dd400017 	ldw	r21,0(sp)
  81332c:	dec00704 	addi	sp,sp,28
  813330:	f800283a 	ret
  813334:	008002c4 	movi	r2,11
  813338:	1145c83a 	sub	r2,r2,r5
  81333c:	a084d83a 	srl	r2,r20,r2
  813340:	0009883a 	mov	r4,zero
  813344:	14cffc34 	orhi	r19,r2,16368
  813348:	ac00012e 	bgeu	r21,r16,813350 <_b2d+0x108>
  81334c:	813fff17 	ldw	r4,-4(r16)
  813350:	00c002c4 	movi	r3,11
  813354:	1947c83a 	sub	r3,r3,r5
  813358:	28800544 	addi	r2,r5,21
  81335c:	a084983a 	sll	r2,r20,r2
  813360:	20c6d83a 	srl	r3,r4,r3
  813364:	18a4b03a 	or	r18,r3,r2
  813368:	003fe706 	br	813308 <_b2d+0xc0>

0081336c <_d2b>:
  81336c:	defff404 	addi	sp,sp,-48
  813370:	dd000515 	stw	r20,20(sp)
  813374:	05000044 	movi	r20,1
  813378:	dc000915 	stw	r16,36(sp)
  81337c:	2821883a 	mov	r16,r5
  813380:	a00b883a 	mov	r5,r20
  813384:	df000a15 	stw	fp,40(sp)
  813388:	dc400815 	stw	r17,32(sp)
  81338c:	dc800715 	stw	r18,28(sp)
  813390:	3023883a 	mov	r17,r6
  813394:	dcc00615 	stw	r19,24(sp)
  813398:	dd400415 	stw	r21,16(sp)
  81339c:	dd800315 	stw	r22,12(sp)
  8133a0:	ddc00215 	stw	r23,8(sp)
  8133a4:	dfc00b15 	stw	ra,44(sp)
  8133a8:	382f883a 	mov	r23,r7
  8133ac:	df000c17 	ldw	fp,48(sp)
  8133b0:	08127840 	call	812784 <_Balloc>
  8133b4:	1027883a 	mov	r19,r2
  8133b8:	00e00034 	movhi	r3,32768
  8133bc:	18ffffc4 	addi	r3,r3,-1
  8133c0:	00800434 	movhi	r2,16
  8133c4:	10bfffc4 	addi	r2,r2,-1
  8133c8:	8888703a 	and	r4,r17,r2
  8133cc:	1c62703a 	and	r17,r3,r17
  8133d0:	882cd53a 	srli	r22,r17,20
  8133d4:	9c800504 	addi	r18,r19,20
  8133d8:	b02b003a 	cmpeq	r21,r22,zero
  8133dc:	a800011e 	bne	r21,zero,8133e4 <_d2b+0x78>
  8133e0:	21000434 	orhi	r4,r4,16
  8133e4:	d9000115 	stw	r4,4(sp)
  8133e8:	80002226 	beq	r16,zero,813474 <_d2b+0x108>
  8133ec:	d809883a 	mov	r4,sp
  8133f0:	dc000015 	stw	r16,0(sp)
  8133f4:	0812ab00 	call	812ab0 <_lo0bits>
  8133f8:	100d883a 	mov	r6,r2
  8133fc:	10002f1e 	bne	r2,zero,8134bc <_d2b+0x150>
  813400:	d8800017 	ldw	r2,0(sp)
  813404:	90800015 	stw	r2,0(r18)
  813408:	d9000117 	ldw	r4,4(sp)
  81340c:	2005003a 	cmpeq	r2,r4,zero
  813410:	00c00084 	movi	r3,2
  813414:	1885c83a 	sub	r2,r3,r2
  813418:	100b883a 	mov	r5,r2
  81341c:	91000115 	stw	r4,4(r18)
  813420:	98800415 	stw	r2,16(r19)
  813424:	a8001b1e 	bne	r21,zero,813494 <_d2b+0x128>
  813428:	b185883a 	add	r2,r22,r6
  81342c:	10bef344 	addi	r2,r2,-1075
  813430:	00c00d44 	movi	r3,53
  813434:	b8800015 	stw	r2,0(r23)
  813438:	1987c83a 	sub	r3,r3,r6
  81343c:	e0c00015 	stw	r3,0(fp)
  813440:	9805883a 	mov	r2,r19
  813444:	dfc00b17 	ldw	ra,44(sp)
  813448:	df000a17 	ldw	fp,40(sp)
  81344c:	dc000917 	ldw	r16,36(sp)
  813450:	dc400817 	ldw	r17,32(sp)
  813454:	dc800717 	ldw	r18,28(sp)
  813458:	dcc00617 	ldw	r19,24(sp)
  81345c:	dd000517 	ldw	r20,20(sp)
  813460:	dd400417 	ldw	r21,16(sp)
  813464:	dd800317 	ldw	r22,12(sp)
  813468:	ddc00217 	ldw	r23,8(sp)
  81346c:	dec00c04 	addi	sp,sp,48
  813470:	f800283a 	ret
  813474:	d9000104 	addi	r4,sp,4
  813478:	0812ab00 	call	812ab0 <_lo0bits>
  81347c:	d8c00117 	ldw	r3,4(sp)
  813480:	9d000415 	stw	r20,16(r19)
  813484:	a00b883a 	mov	r5,r20
  813488:	90c00015 	stw	r3,0(r18)
  81348c:	11800804 	addi	r6,r2,32
  813490:	a83fe526 	beq	r21,zero,813428 <_d2b+0xbc>
  813494:	280490ba 	slli	r2,r5,2
  813498:	30fef384 	addi	r3,r6,-1074
  81349c:	2820917a 	slli	r16,r5,5
  8134a0:	1485883a 	add	r2,r2,r18
  8134a4:	113fff17 	ldw	r4,-4(r2)
  8134a8:	b8c00015 	stw	r3,0(r23)
  8134ac:	0812a4c0 	call	812a4c <_hi0bits>
  8134b0:	80a1c83a 	sub	r16,r16,r2
  8134b4:	e4000015 	stw	r16,0(fp)
  8134b8:	003fe106 	br	813440 <_d2b+0xd4>
  8134bc:	00c00804 	movi	r3,32
  8134c0:	1887c83a 	sub	r3,r3,r2
  8134c4:	d8800117 	ldw	r2,4(sp)
  8134c8:	d9000017 	ldw	r4,0(sp)
  8134cc:	10c4983a 	sll	r2,r2,r3
  8134d0:	1104b03a 	or	r2,r2,r4
  8134d4:	90800015 	stw	r2,0(r18)
  8134d8:	d8c00117 	ldw	r3,4(sp)
  8134dc:	1988d83a 	srl	r4,r3,r6
  8134e0:	d9000115 	stw	r4,4(sp)
  8134e4:	003fc906 	br	81340c <_d2b+0xa0>

008134e8 <_ratio>:
  8134e8:	defff904 	addi	sp,sp,-28
  8134ec:	dc400515 	stw	r17,20(sp)
  8134f0:	2823883a 	mov	r17,r5
  8134f4:	d80b883a 	mov	r5,sp
  8134f8:	dfc00615 	stw	ra,24(sp)
  8134fc:	dc800415 	stw	r18,16(sp)
  813500:	dcc00315 	stw	r19,12(sp)
  813504:	2025883a 	mov	r18,r4
  813508:	dd000215 	stw	r20,8(sp)
  81350c:	08132480 	call	813248 <_b2d>
  813510:	8809883a 	mov	r4,r17
  813514:	d9400104 	addi	r5,sp,4
  813518:	1027883a 	mov	r19,r2
  81351c:	1829883a 	mov	r20,r3
  813520:	08132480 	call	813248 <_b2d>
  813524:	89000417 	ldw	r4,16(r17)
  813528:	91c00417 	ldw	r7,16(r18)
  81352c:	d9800117 	ldw	r6,4(sp)
  813530:	1813883a 	mov	r9,r3
  813534:	390fc83a 	sub	r7,r7,r4
  813538:	1009883a 	mov	r4,r2
  81353c:	d8800017 	ldw	r2,0(sp)
  813540:	380e917a 	slli	r7,r7,5
  813544:	2011883a 	mov	r8,r4
  813548:	1185c83a 	sub	r2,r2,r6
  81354c:	11c5883a 	add	r2,r2,r7
  813550:	100c953a 	slli	r6,r2,20
  813554:	00800d0e 	bge	zero,r2,81358c <_ratio+0xa4>
  813558:	3529883a 	add	r20,r6,r20
  81355c:	a00b883a 	mov	r5,r20
  813560:	480f883a 	mov	r7,r9
  813564:	9809883a 	mov	r4,r19
  813568:	400d883a 	mov	r6,r8
  81356c:	080b61c0 	call	80b61c <__divdf3>
  813570:	dfc00617 	ldw	ra,24(sp)
  813574:	dc400517 	ldw	r17,20(sp)
  813578:	dc800417 	ldw	r18,16(sp)
  81357c:	dcc00317 	ldw	r19,12(sp)
  813580:	dd000217 	ldw	r20,8(sp)
  813584:	dec00704 	addi	sp,sp,28
  813588:	f800283a 	ret
  81358c:	1993c83a 	sub	r9,r3,r6
  813590:	003ff206 	br	81355c <_ratio+0x74>

00813594 <_mprec_log10>:
  813594:	defffe04 	addi	sp,sp,-8
  813598:	008005c4 	movi	r2,23
  81359c:	dc000015 	stw	r16,0(sp)
  8135a0:	dfc00115 	stw	ra,4(sp)
  8135a4:	2021883a 	mov	r16,r4
  8135a8:	0011883a 	mov	r8,zero
  8135ac:	024ffc34 	movhi	r9,16368
  8135b0:	4a400004 	addi	r9,r9,0
  8135b4:	11000e16 	blt	r2,r4,8135f0 <_mprec_log10+0x5c>
  8135b8:	200490fa 	slli	r2,r4,3
  8135bc:	014020b4 	movhi	r5,130
  8135c0:	2967b904 	addi	r5,r5,-24860
  8135c4:	1145883a 	add	r2,r2,r5
  8135c8:	10c00017 	ldw	r3,0(r2)
  8135cc:	11000117 	ldw	r4,4(r2)
  8135d0:	180d883a 	mov	r6,r3
  8135d4:	200f883a 	mov	r7,r4
  8135d8:	3807883a 	mov	r3,r7
  8135dc:	3005883a 	mov	r2,r6
  8135e0:	dfc00117 	ldw	ra,4(sp)
  8135e4:	dc000017 	ldw	r16,0(sp)
  8135e8:	dec00204 	addi	sp,sp,8
  8135ec:	f800283a 	ret
  8135f0:	04000c0e 	bge	zero,r16,813624 <_mprec_log10+0x90>
  8135f4:	0005883a 	mov	r2,zero
  8135f8:	00d00934 	movhi	r3,16420
  8135fc:	18c00004 	addi	r3,r3,0
  813600:	480b883a 	mov	r5,r9
  813604:	4009883a 	mov	r4,r8
  813608:	180f883a 	mov	r7,r3
  81360c:	100d883a 	mov	r6,r2
  813610:	080b21c0 	call	80b21c <__muldf3>
  813614:	843fffc4 	addi	r16,r16,-1
  813618:	1011883a 	mov	r8,r2
  81361c:	1813883a 	mov	r9,r3
  813620:	043ff416 	blt	zero,r16,8135f4 <_mprec_log10+0x60>
  813624:	400d883a 	mov	r6,r8
  813628:	480f883a 	mov	r7,r9
  81362c:	3807883a 	mov	r3,r7
  813630:	3005883a 	mov	r2,r6
  813634:	dfc00117 	ldw	ra,4(sp)
  813638:	dc000017 	ldw	r16,0(sp)
  81363c:	dec00204 	addi	sp,sp,8
  813640:	f800283a 	ret

00813644 <_read_r>:
  813644:	defffe04 	addi	sp,sp,-8
  813648:	dc000015 	stw	r16,0(sp)
  81364c:	2021883a 	mov	r16,r4
  813650:	2809883a 	mov	r4,r5
  813654:	300b883a 	mov	r5,r6
  813658:	380d883a 	mov	r6,r7
  81365c:	dfc00115 	stw	ra,4(sp)
  813660:	d0202815 	stw	zero,-32608(gp)
  813664:	081537c0 	call	81537c <read>
  813668:	1007883a 	mov	r3,r2
  81366c:	00bfffc4 	movi	r2,-1
  813670:	18800526 	beq	r3,r2,813688 <_read_r+0x44>
  813674:	1805883a 	mov	r2,r3
  813678:	dfc00117 	ldw	ra,4(sp)
  81367c:	dc000017 	ldw	r16,0(sp)
  813680:	dec00204 	addi	sp,sp,8
  813684:	f800283a 	ret
  813688:	d0a02817 	ldw	r2,-32608(gp)
  81368c:	103ff926 	beq	r2,zero,813674 <_read_r+0x30>
  813690:	80800015 	stw	r2,0(r16)
  813694:	1805883a 	mov	r2,r3
  813698:	dfc00117 	ldw	ra,4(sp)
  81369c:	dc000017 	ldw	r16,0(sp)
  8136a0:	dec00204 	addi	sp,sp,8
  8136a4:	f800283a 	ret

008136a8 <_realloc_r>:
  8136a8:	defff404 	addi	sp,sp,-48
  8136ac:	dc400815 	stw	r17,32(sp)
  8136b0:	dd800315 	stw	r22,12(sp)
  8136b4:	dfc00b15 	stw	ra,44(sp)
  8136b8:	df000a15 	stw	fp,40(sp)
  8136bc:	dc000915 	stw	r16,36(sp)
  8136c0:	dc800715 	stw	r18,28(sp)
  8136c4:	dcc00615 	stw	r19,24(sp)
  8136c8:	dd000515 	stw	r20,20(sp)
  8136cc:	dd400415 	stw	r21,16(sp)
  8136d0:	ddc00215 	stw	r23,8(sp)
  8136d4:	2823883a 	mov	r17,r5
  8136d8:	202d883a 	mov	r22,r4
  8136dc:	28007826 	beq	r5,zero,8138c0 <_realloc_r+0x218>
  8136e0:	2c3ffe04 	addi	r16,r5,-8
  8136e4:	d9800115 	stw	r6,4(sp)
  8136e8:	0814e4c0 	call	814e4c <__malloc_lock>
  8136ec:	81400117 	ldw	r5,4(r16)
  8136f0:	d9800117 	ldw	r6,4(sp)
  8136f4:	00bfff04 	movi	r2,-4
  8136f8:	28a4703a 	and	r18,r5,r2
  8136fc:	30c002c4 	addi	r3,r6,11
  813700:	00800584 	movi	r2,22
  813704:	8027883a 	mov	r19,r16
  813708:	9013883a 	mov	r9,r18
  81370c:	05000404 	movi	r20,16
  813710:	10c05b36 	bltu	r2,r3,813880 <_realloc_r+0x1d8>
  813714:	a1805d36 	bltu	r20,r6,81388c <_realloc_r+0x1e4>
  813718:	9500a80e 	bge	r18,r20,8139bc <_realloc_r+0x314>
  81371c:	070020b4 	movhi	fp,130
  813720:	e7299804 	addi	fp,fp,-22944
  813724:	e2000217 	ldw	r8,8(fp)
  813728:	8489883a 	add	r4,r16,r18
  81372c:	e015883a 	mov	r10,fp
  813730:	4100c326 	beq	r8,r4,813a40 <_realloc_r+0x398>
  813734:	21c00117 	ldw	r7,4(r4)
  813738:	00bfff84 	movi	r2,-2
  81373c:	3884703a 	and	r2,r7,r2
  813740:	1105883a 	add	r2,r2,r4
  813744:	10c00117 	ldw	r3,4(r2)
  813748:	18c0004c 	andi	r3,r3,1
  81374c:	1800b91e 	bne	r3,zero,813a34 <_realloc_r+0x38c>
  813750:	00bfff04 	movi	r2,-4
  813754:	388e703a 	and	r7,r7,r2
  813758:	4100c526 	beq	r8,r4,813a70 <_realloc_r+0x3c8>
  81375c:	3c85883a 	add	r2,r7,r18
  813760:	1500bd0e 	bge	r2,r20,813a58 <_realloc_r+0x3b0>
  813764:	2880004c 	andi	r2,r5,1
  813768:	10000e1e 	bne	r2,zero,8137a4 <_realloc_r+0xfc>
  81376c:	80800017 	ldw	r2,0(r16)
  813770:	80afc83a 	sub	r23,r16,r2
  813774:	b8c00117 	ldw	r3,4(r23)
  813778:	00bfff04 	movi	r2,-4
  81377c:	188a703a 	and	r5,r3,r2
  813780:	20000526 	beq	r4,zero,813798 <_realloc_r+0xf0>
  813784:	e0800217 	ldw	r2,8(fp)
  813788:	1100cf26 	beq	r2,r4,813ac8 <_realloc_r+0x420>
  81378c:	3945883a 	add	r2,r7,r5
  813790:	1485883a 	add	r2,r2,r18
  813794:	1500590e 	bge	r2,r20,8138fc <_realloc_r+0x254>
  813798:	b8000226 	beq	r23,zero,8137a4 <_realloc_r+0xfc>
  81379c:	2c87883a 	add	r3,r5,r18
  8137a0:	1d00c10e 	bge	r3,r20,813aa8 <_realloc_r+0x400>
  8137a4:	300b883a 	mov	r5,r6
  8137a8:	b009883a 	mov	r4,r22
  8137ac:	080cfa40 	call	80cfa4 <_malloc_r>
  8137b0:	102b883a 	mov	r21,r2
  8137b4:	10010d26 	beq	r2,zero,813bec <_realloc_r+0x544>
  8137b8:	98800117 	ldw	r2,4(r19)
  8137bc:	00ffff84 	movi	r3,-2
  8137c0:	ac3ffe04 	addi	r16,r21,-8
  8137c4:	10c4703a 	and	r2,r2,r3
  8137c8:	14c5883a 	add	r2,r2,r19
  8137cc:	8080fd26 	beq	r16,r2,813bc4 <_realloc_r+0x51c>
  8137d0:	91bfff04 	addi	r6,r18,-4
  8137d4:	00800904 	movi	r2,36
  8137d8:	11809b36 	bltu	r2,r6,813a48 <_realloc_r+0x3a0>
  8137dc:	008004c4 	movi	r2,19
  8137e0:	880b883a 	mov	r5,r17
  8137e4:	a809883a 	mov	r4,r21
  8137e8:	1180162e 	bgeu	r2,r6,813844 <_realloc_r+0x19c>
  8137ec:	88800017 	ldw	r2,0(r17)
  8137f0:	89400204 	addi	r5,r17,8
  8137f4:	a9000204 	addi	r4,r21,8
  8137f8:	a8800015 	stw	r2,0(r21)
  8137fc:	88c00117 	ldw	r3,4(r17)
  813800:	008006c4 	movi	r2,27
  813804:	a8c00115 	stw	r3,4(r21)
  813808:	11800e2e 	bgeu	r2,r6,813844 <_realloc_r+0x19c>
  81380c:	28800017 	ldw	r2,0(r5)
  813810:	89400404 	addi	r5,r17,16
  813814:	20800015 	stw	r2,0(r4)
  813818:	88c00317 	ldw	r3,12(r17)
  81381c:	008008c4 	movi	r2,35
  813820:	a9000404 	addi	r4,r21,16
  813824:	a8c00315 	stw	r3,12(r21)
  813828:	1180062e 	bgeu	r2,r6,813844 <_realloc_r+0x19c>
  81382c:	28800017 	ldw	r2,0(r5)
  813830:	89400604 	addi	r5,r17,24
  813834:	20800015 	stw	r2,0(r4)
  813838:	88c00517 	ldw	r3,20(r17)
  81383c:	a9000604 	addi	r4,r21,24
  813840:	a8c00515 	stw	r3,20(r21)
  813844:	28800017 	ldw	r2,0(r5)
  813848:	29400104 	addi	r5,r5,4
  81384c:	20800015 	stw	r2,0(r4)
  813850:	28c00017 	ldw	r3,0(r5)
  813854:	21000104 	addi	r4,r4,4
  813858:	20c00015 	stw	r3,0(r4)
  81385c:	28800117 	ldw	r2,4(r5)
  813860:	20800115 	stw	r2,4(r4)
  813864:	b009883a 	mov	r4,r22
  813868:	880b883a 	mov	r5,r17
  81386c:	0811d740 	call	811d74 <_free_r>
  813870:	b009883a 	mov	r4,r22
  813874:	0814e680 	call	814e68 <__malloc_unlock>
  813878:	a805883a 	mov	r2,r21
  81387c:	00000406 	br	813890 <_realloc_r+0x1e8>
  813880:	00bffe04 	movi	r2,-8
  813884:	18a8703a 	and	r20,r3,r2
  813888:	a03fa20e 	bge	r20,zero,813714 <_realloc_r+0x6c>
  81388c:	0005883a 	mov	r2,zero
  813890:	dfc00b17 	ldw	ra,44(sp)
  813894:	df000a17 	ldw	fp,40(sp)
  813898:	dc000917 	ldw	r16,36(sp)
  81389c:	dc400817 	ldw	r17,32(sp)
  8138a0:	dc800717 	ldw	r18,28(sp)
  8138a4:	dcc00617 	ldw	r19,24(sp)
  8138a8:	dd000517 	ldw	r20,20(sp)
  8138ac:	dd400417 	ldw	r21,16(sp)
  8138b0:	dd800317 	ldw	r22,12(sp)
  8138b4:	ddc00217 	ldw	r23,8(sp)
  8138b8:	dec00c04 	addi	sp,sp,48
  8138bc:	f800283a 	ret
  8138c0:	300b883a 	mov	r5,r6
  8138c4:	02002074 	movhi	r8,129
  8138c8:	4233e904 	addi	r8,r8,-12380
  8138cc:	dfc00b17 	ldw	ra,44(sp)
  8138d0:	df000a17 	ldw	fp,40(sp)
  8138d4:	dc000917 	ldw	r16,36(sp)
  8138d8:	dc400817 	ldw	r17,32(sp)
  8138dc:	dc800717 	ldw	r18,28(sp)
  8138e0:	dcc00617 	ldw	r19,24(sp)
  8138e4:	dd000517 	ldw	r20,20(sp)
  8138e8:	dd400417 	ldw	r21,16(sp)
  8138ec:	dd800317 	ldw	r22,12(sp)
  8138f0:	ddc00217 	ldw	r23,8(sp)
  8138f4:	dec00c04 	addi	sp,sp,48
  8138f8:	4000683a 	jmp	r8
  8138fc:	21400217 	ldw	r5,8(r4)
  813900:	21000317 	ldw	r4,12(r4)
  813904:	b821883a 	mov	r16,r23
  813908:	49bfff04 	addi	r6,r9,-4
  81390c:	21400215 	stw	r5,8(r4)
  813910:	29000315 	stw	r4,12(r5)
  813914:	b9000317 	ldw	r4,12(r23)
  813918:	b9400217 	ldw	r5,8(r23)
  81391c:	1025883a 	mov	r18,r2
  813920:	21400215 	stw	r5,8(r4)
  813924:	29000315 	stw	r4,12(r5)
  813928:	00800904 	movi	r2,36
  81392c:	85400204 	addi	r21,r16,8
  813930:	1180a036 	bltu	r2,r6,813bb4 <_realloc_r+0x50c>
  813934:	008004c4 	movi	r2,19
  813938:	880f883a 	mov	r7,r17
  81393c:	a809883a 	mov	r4,r21
  813940:	1180162e 	bgeu	r2,r6,81399c <_realloc_r+0x2f4>
  813944:	88800017 	ldw	r2,0(r17)
  813948:	89c00204 	addi	r7,r17,8
  81394c:	81000404 	addi	r4,r16,16
  813950:	a8800015 	stw	r2,0(r21)
  813954:	88c00117 	ldw	r3,4(r17)
  813958:	008006c4 	movi	r2,27
  81395c:	80c00315 	stw	r3,12(r16)
  813960:	11800e2e 	bgeu	r2,r6,81399c <_realloc_r+0x2f4>
  813964:	38800017 	ldw	r2,0(r7)
  813968:	89c00404 	addi	r7,r17,16
  81396c:	20800015 	stw	r2,0(r4)
  813970:	88c00317 	ldw	r3,12(r17)
  813974:	008008c4 	movi	r2,35
  813978:	81000604 	addi	r4,r16,24
  81397c:	80c00515 	stw	r3,20(r16)
  813980:	1180062e 	bgeu	r2,r6,81399c <_realloc_r+0x2f4>
  813984:	38800017 	ldw	r2,0(r7)
  813988:	89c00604 	addi	r7,r17,24
  81398c:	20800015 	stw	r2,0(r4)
  813990:	88c00517 	ldw	r3,20(r17)
  813994:	81000804 	addi	r4,r16,32
  813998:	80c00715 	stw	r3,28(r16)
  81399c:	38800017 	ldw	r2,0(r7)
  8139a0:	39c00104 	addi	r7,r7,4
  8139a4:	20800015 	stw	r2,0(r4)
  8139a8:	38c00017 	ldw	r3,0(r7)
  8139ac:	21000104 	addi	r4,r4,4
  8139b0:	20c00015 	stw	r3,0(r4)
  8139b4:	38800117 	ldw	r2,4(r7)
  8139b8:	20800115 	stw	r2,4(r4)
  8139bc:	950dc83a 	sub	r6,r18,r20
  8139c0:	008003c4 	movi	r2,15
  8139c4:	11800c36 	bltu	r2,r6,8139f8 <_realloc_r+0x350>
  8139c8:	80800117 	ldw	r2,4(r16)
  8139cc:	8489883a 	add	r4,r16,r18
  8139d0:	1080004c 	andi	r2,r2,1
  8139d4:	1484b03a 	or	r2,r2,r18
  8139d8:	80800115 	stw	r2,4(r16)
  8139dc:	20c00117 	ldw	r3,4(r4)
  8139e0:	18c00054 	ori	r3,r3,1
  8139e4:	20c00115 	stw	r3,4(r4)
  8139e8:	b009883a 	mov	r4,r22
  8139ec:	0814e680 	call	814e68 <__malloc_unlock>
  8139f0:	80800204 	addi	r2,r16,8
  8139f4:	003fa606 	br	813890 <_realloc_r+0x1e8>
  8139f8:	80800117 	ldw	r2,4(r16)
  8139fc:	850b883a 	add	r5,r16,r20
  813a00:	31000054 	ori	r4,r6,1
  813a04:	1080004c 	andi	r2,r2,1
  813a08:	1504b03a 	or	r2,r2,r20
  813a0c:	80800115 	stw	r2,4(r16)
  813a10:	29000115 	stw	r4,4(r5)
  813a14:	2987883a 	add	r3,r5,r6
  813a18:	18800117 	ldw	r2,4(r3)
  813a1c:	29400204 	addi	r5,r5,8
  813a20:	b009883a 	mov	r4,r22
  813a24:	10800054 	ori	r2,r2,1
  813a28:	18800115 	stw	r2,4(r3)
  813a2c:	0811d740 	call	811d74 <_free_r>
  813a30:	003fed06 	br	8139e8 <_realloc_r+0x340>
  813a34:	0009883a 	mov	r4,zero
  813a38:	000f883a 	mov	r7,zero
  813a3c:	003f4906 	br	813764 <_realloc_r+0xbc>
  813a40:	21c00117 	ldw	r7,4(r4)
  813a44:	003f4206 	br	813750 <_realloc_r+0xa8>
  813a48:	a809883a 	mov	r4,r21
  813a4c:	880b883a 	mov	r5,r17
  813a50:	080d65c0 	call	80d65c <memcpy>
  813a54:	003f8306 	br	813864 <_realloc_r+0x1bc>
  813a58:	21400217 	ldw	r5,8(r4)
  813a5c:	21000317 	ldw	r4,12(r4)
  813a60:	1025883a 	mov	r18,r2
  813a64:	21400215 	stw	r5,8(r4)
  813a68:	29000315 	stw	r4,12(r5)
  813a6c:	003fd306 	br	8139bc <_realloc_r+0x314>
  813a70:	3c87883a 	add	r3,r7,r18
  813a74:	a0800404 	addi	r2,r20,16
  813a78:	18bf3a16 	blt	r3,r2,813764 <_realloc_r+0xbc>
  813a7c:	1d05c83a 	sub	r2,r3,r20
  813a80:	850b883a 	add	r5,r16,r20
  813a84:	10800054 	ori	r2,r2,1
  813a88:	28800115 	stw	r2,4(r5)
  813a8c:	80c00117 	ldw	r3,4(r16)
  813a90:	51400215 	stw	r5,8(r10)
  813a94:	b009883a 	mov	r4,r22
  813a98:	18c0004c 	andi	r3,r3,1
  813a9c:	1d0ab03a 	or	r5,r3,r20
  813aa0:	81400115 	stw	r5,4(r16)
  813aa4:	003fd106 	br	8139ec <_realloc_r+0x344>
  813aa8:	b9000317 	ldw	r4,12(r23)
  813aac:	b9400217 	ldw	r5,8(r23)
  813ab0:	b821883a 	mov	r16,r23
  813ab4:	49bfff04 	addi	r6,r9,-4
  813ab8:	1825883a 	mov	r18,r3
  813abc:	21400215 	stw	r5,8(r4)
  813ac0:	29000315 	stw	r4,12(r5)
  813ac4:	003f9806 	br	813928 <_realloc_r+0x280>
  813ac8:	3945883a 	add	r2,r7,r5
  813acc:	1485883a 	add	r2,r2,r18
  813ad0:	a0c00404 	addi	r3,r20,16
  813ad4:	d8800015 	stw	r2,0(sp)
  813ad8:	10ff2f16 	blt	r2,r3,813798 <_realloc_r+0xf0>
  813adc:	b9000317 	ldw	r4,12(r23)
  813ae0:	b9400217 	ldw	r5,8(r23)
  813ae4:	49bfff04 	addi	r6,r9,-4
  813ae8:	00800904 	movi	r2,36
  813aec:	21400215 	stw	r5,8(r4)
  813af0:	29000315 	stw	r4,12(r5)
  813af4:	bd400204 	addi	r21,r23,8
  813af8:	11803836 	bltu	r2,r6,813bdc <_realloc_r+0x534>
  813afc:	008004c4 	movi	r2,19
  813b00:	880f883a 	mov	r7,r17
  813b04:	a809883a 	mov	r4,r21
  813b08:	1180162e 	bgeu	r2,r6,813b64 <_realloc_r+0x4bc>
  813b0c:	88800017 	ldw	r2,0(r17)
  813b10:	89c00204 	addi	r7,r17,8
  813b14:	b9000404 	addi	r4,r23,16
  813b18:	a8800015 	stw	r2,0(r21)
  813b1c:	88c00117 	ldw	r3,4(r17)
  813b20:	008006c4 	movi	r2,27
  813b24:	b8c00315 	stw	r3,12(r23)
  813b28:	11800e2e 	bgeu	r2,r6,813b64 <_realloc_r+0x4bc>
  813b2c:	38800017 	ldw	r2,0(r7)
  813b30:	89c00404 	addi	r7,r17,16
  813b34:	20800015 	stw	r2,0(r4)
  813b38:	88c00317 	ldw	r3,12(r17)
  813b3c:	008008c4 	movi	r2,35
  813b40:	b9000604 	addi	r4,r23,24
  813b44:	b8c00515 	stw	r3,20(r23)
  813b48:	1180062e 	bgeu	r2,r6,813b64 <_realloc_r+0x4bc>
  813b4c:	38800017 	ldw	r2,0(r7)
  813b50:	89c00604 	addi	r7,r17,24
  813b54:	20800015 	stw	r2,0(r4)
  813b58:	88c00517 	ldw	r3,20(r17)
  813b5c:	b9000804 	addi	r4,r23,32
  813b60:	b8c00715 	stw	r3,28(r23)
  813b64:	38800017 	ldw	r2,0(r7)
  813b68:	39c00104 	addi	r7,r7,4
  813b6c:	20800015 	stw	r2,0(r4)
  813b70:	38c00017 	ldw	r3,0(r7)
  813b74:	21000104 	addi	r4,r4,4
  813b78:	20c00015 	stw	r3,0(r4)
  813b7c:	38800117 	ldw	r2,4(r7)
  813b80:	20800115 	stw	r2,4(r4)
  813b84:	d8c00017 	ldw	r3,0(sp)
  813b88:	bd0b883a 	add	r5,r23,r20
  813b8c:	b009883a 	mov	r4,r22
  813b90:	1d05c83a 	sub	r2,r3,r20
  813b94:	10800054 	ori	r2,r2,1
  813b98:	28800115 	stw	r2,4(r5)
  813b9c:	b8c00117 	ldw	r3,4(r23)
  813ba0:	e1400215 	stw	r5,8(fp)
  813ba4:	18c0004c 	andi	r3,r3,1
  813ba8:	1d06b03a 	or	r3,r3,r20
  813bac:	b8c00115 	stw	r3,4(r23)
  813bb0:	003f3006 	br	813874 <_realloc_r+0x1cc>
  813bb4:	a809883a 	mov	r4,r21
  813bb8:	880b883a 	mov	r5,r17
  813bbc:	080d65c0 	call	80d65c <memcpy>
  813bc0:	003f7e06 	br	8139bc <_realloc_r+0x314>
  813bc4:	80800117 	ldw	r2,4(r16)
  813bc8:	00ffff04 	movi	r3,-4
  813bcc:	9821883a 	mov	r16,r19
  813bd0:	10c4703a 	and	r2,r2,r3
  813bd4:	90a5883a 	add	r18,r18,r2
  813bd8:	003f7806 	br	8139bc <_realloc_r+0x314>
  813bdc:	880b883a 	mov	r5,r17
  813be0:	a809883a 	mov	r4,r21
  813be4:	080d65c0 	call	80d65c <memcpy>
  813be8:	003fe606 	br	813b84 <_realloc_r+0x4dc>
  813bec:	b009883a 	mov	r4,r22
  813bf0:	0814e680 	call	814e68 <__malloc_unlock>
  813bf4:	003f2506 	br	81388c <_realloc_r+0x1e4>

00813bf8 <isinf>:
  813bf8:	200d883a 	mov	r6,r4
  813bfc:	0109c83a 	sub	r4,zero,r4
  813c00:	2188b03a 	or	r4,r4,r6
  813c04:	2008d7fa 	srli	r4,r4,31
  813c08:	00a00034 	movhi	r2,32768
  813c0c:	10bfffc4 	addi	r2,r2,-1
  813c10:	288a703a 	and	r5,r5,r2
  813c14:	290ab03a 	or	r5,r5,r4
  813c18:	009ffc34 	movhi	r2,32752
  813c1c:	10800004 	addi	r2,r2,0
  813c20:	114bc83a 	sub	r5,r2,r5
  813c24:	0145c83a 	sub	r2,zero,r5
  813c28:	1144b03a 	or	r2,r2,r5
  813c2c:	1004d7fa 	srli	r2,r2,31
  813c30:	00c00044 	movi	r3,1
  813c34:	1885c83a 	sub	r2,r3,r2
  813c38:	f800283a 	ret

00813c3c <strcmp>:
  813c3c:	2144b03a 	or	r2,r4,r5
  813c40:	108000cc 	andi	r2,r2,3
  813c44:	1000031e 	bne	r2,zero,813c54 <strcmp+0x18>
  813c48:	20c00017 	ldw	r3,0(r4)
  813c4c:	28800017 	ldw	r2,0(r5)
  813c50:	18801626 	beq	r3,r2,813cac <strcmp+0x70>
  813c54:	20c00003 	ldbu	r3,0(r4)
  813c58:	19803fcc 	andi	r6,r3,255
  813c5c:	3180201c 	xori	r6,r6,128
  813c60:	31bfe004 	addi	r6,r6,-128
  813c64:	30000c26 	beq	r6,zero,813c98 <strcmp+0x5c>
  813c68:	29c00003 	ldbu	r7,0(r5)
  813c6c:	38803fcc 	andi	r2,r7,255
  813c70:	1080201c 	xori	r2,r2,128
  813c74:	10bfe004 	addi	r2,r2,-128
  813c78:	3080081e 	bne	r6,r2,813c9c <strcmp+0x60>
  813c7c:	21000044 	addi	r4,r4,1
  813c80:	20c00003 	ldbu	r3,0(r4)
  813c84:	29400044 	addi	r5,r5,1
  813c88:	19803fcc 	andi	r6,r3,255
  813c8c:	3180201c 	xori	r6,r6,128
  813c90:	31bfe004 	addi	r6,r6,-128
  813c94:	303ff41e 	bne	r6,zero,813c68 <strcmp+0x2c>
  813c98:	29c00003 	ldbu	r7,0(r5)
  813c9c:	18c03fcc 	andi	r3,r3,255
  813ca0:	38803fcc 	andi	r2,r7,255
  813ca4:	1885c83a 	sub	r2,r3,r2
  813ca8:	f800283a 	ret
  813cac:	180d883a 	mov	r6,r3
  813cb0:	023fbff4 	movhi	r8,65279
  813cb4:	423fbfc4 	addi	r8,r8,-257
  813cb8:	01e02074 	movhi	r7,32897
  813cbc:	39e02004 	addi	r7,r7,-32640
  813cc0:	0186303a 	nor	r3,zero,r6
  813cc4:	3205883a 	add	r2,r6,r8
  813cc8:	10c4703a 	and	r2,r2,r3
  813ccc:	11c4703a 	and	r2,r2,r7
  813cd0:	21000104 	addi	r4,r4,4
  813cd4:	29400104 	addi	r5,r5,4
  813cd8:	1000041e 	bne	r2,zero,813cec <strcmp+0xb0>
  813cdc:	21800017 	ldw	r6,0(r4)
  813ce0:	28800017 	ldw	r2,0(r5)
  813ce4:	30bff626 	beq	r6,r2,813cc0 <strcmp+0x84>
  813ce8:	003fda06 	br	813c54 <strcmp+0x18>
  813cec:	0005883a 	mov	r2,zero
  813cf0:	f800283a 	ret

00813cf4 <__udivdi3>:
  813cf4:	defff604 	addi	sp,sp,-40
  813cf8:	dc000715 	stw	r16,28(sp)
  813cfc:	dc800515 	stw	r18,20(sp)
  813d00:	dcc00415 	stw	r19,16(sp)
  813d04:	dd800115 	stw	r22,4(sp)
  813d08:	dfc00915 	stw	ra,36(sp)
  813d0c:	df000815 	stw	fp,32(sp)
  813d10:	dc400615 	stw	r17,24(sp)
  813d14:	dd000315 	stw	r20,12(sp)
  813d18:	dd400215 	stw	r21,8(sp)
  813d1c:	ddc00015 	stw	r23,0(sp)
  813d20:	3019883a 	mov	r12,r6
  813d24:	3821883a 	mov	r16,r7
  813d28:	202d883a 	mov	r22,r4
  813d2c:	2827883a 	mov	r19,r5
  813d30:	3025883a 	mov	r18,r6
  813d34:	3800411e 	bne	r7,zero,813e3c <__udivdi3+0x148>
  813d38:	2980662e 	bgeu	r5,r6,813ed4 <__udivdi3+0x1e0>
  813d3c:	00bfffd4 	movui	r2,65535
  813d40:	1181022e 	bgeu	r2,r6,81414c <__udivdi3+0x458>
  813d44:	00804034 	movhi	r2,256
  813d48:	10bfffc4 	addi	r2,r2,-1
  813d4c:	01c00404 	movi	r7,16
  813d50:	1180012e 	bgeu	r2,r6,813d58 <__udivdi3+0x64>
  813d54:	01c00604 	movi	r7,24
  813d58:	61c4d83a 	srl	r2,r12,r7
  813d5c:	010020b4 	movhi	r4,130
  813d60:	2127ee04 	addi	r4,r4,-24648
  813d64:	01400804 	movi	r5,32
  813d68:	1105883a 	add	r2,r2,r4
  813d6c:	10c00003 	ldbu	r3,0(r2)
  813d70:	19c7883a 	add	r3,r3,r7
  813d74:	28cfc83a 	sub	r7,r5,r3
  813d78:	38000626 	beq	r7,zero,813d94 <__udivdi3+0xa0>
  813d7c:	29c5c83a 	sub	r2,r5,r7
  813d80:	b084d83a 	srl	r2,r22,r2
  813d84:	99c6983a 	sll	r3,r19,r7
  813d88:	b1ec983a 	sll	r22,r22,r7
  813d8c:	91e4983a 	sll	r18,r18,r7
  813d90:	18a6b03a 	or	r19,r3,r2
  813d94:	9028d43a 	srli	r20,r18,16
  813d98:	9809883a 	mov	r4,r19
  813d9c:	957fffcc 	andi	r21,r18,65535
  813da0:	a00b883a 	mov	r5,r20
  813da4:	080be640 	call	80be64 <__umodsi3>
  813da8:	9809883a 	mov	r4,r19
  813dac:	a00b883a 	mov	r5,r20
  813db0:	1023883a 	mov	r17,r2
  813db4:	080be540 	call	80be54 <__udivsi3>
  813db8:	1027883a 	mov	r19,r2
  813dbc:	8806943a 	slli	r3,r17,16
  813dc0:	b004d43a 	srli	r2,r22,16
  813dc4:	9d4b383a 	mul	r5,r19,r21
  813dc8:	18a2b03a 	or	r17,r3,r2
  813dcc:	8940042e 	bgeu	r17,r5,813de0 <__udivdi3+0xec>
  813dd0:	8ca3883a 	add	r17,r17,r18
  813dd4:	9cffffc4 	addi	r19,r19,-1
  813dd8:	8c800136 	bltu	r17,r18,813de0 <__udivdi3+0xec>
  813ddc:	89411736 	bltu	r17,r5,81423c <__udivdi3+0x548>
  813de0:	8963c83a 	sub	r17,r17,r5
  813de4:	8809883a 	mov	r4,r17
  813de8:	a00b883a 	mov	r5,r20
  813dec:	080be640 	call	80be64 <__umodsi3>
  813df0:	8809883a 	mov	r4,r17
  813df4:	a00b883a 	mov	r5,r20
  813df8:	1021883a 	mov	r16,r2
  813dfc:	080be540 	call	80be54 <__udivsi3>
  813e00:	8006943a 	slli	r3,r16,16
  813e04:	154b383a 	mul	r5,r2,r21
  813e08:	1009883a 	mov	r4,r2
  813e0c:	b0bfffcc 	andi	r2,r22,65535
  813e10:	18a0b03a 	or	r16,r3,r2
  813e14:	8140052e 	bgeu	r16,r5,813e2c <__udivdi3+0x138>
  813e18:	84a1883a 	add	r16,r16,r18
  813e1c:	213fffc4 	addi	r4,r4,-1
  813e20:	84800236 	bltu	r16,r18,813e2c <__udivdi3+0x138>
  813e24:	8140012e 	bgeu	r16,r5,813e2c <__udivdi3+0x138>
  813e28:	213fffc4 	addi	r4,r4,-1
  813e2c:	9804943a 	slli	r2,r19,16
  813e30:	0029883a 	mov	r20,zero
  813e34:	1110b03a 	or	r8,r2,r4
  813e38:	00000306 	br	813e48 <__udivdi3+0x154>
  813e3c:	0011883a 	mov	r8,zero
  813e40:	29c00f2e 	bgeu	r5,r7,813e80 <__udivdi3+0x18c>
  813e44:	0029883a 	mov	r20,zero
  813e48:	4005883a 	mov	r2,r8
  813e4c:	a007883a 	mov	r3,r20
  813e50:	dfc00917 	ldw	ra,36(sp)
  813e54:	df000817 	ldw	fp,32(sp)
  813e58:	dc000717 	ldw	r16,28(sp)
  813e5c:	dc400617 	ldw	r17,24(sp)
  813e60:	dc800517 	ldw	r18,20(sp)
  813e64:	dcc00417 	ldw	r19,16(sp)
  813e68:	dd000317 	ldw	r20,12(sp)
  813e6c:	dd400217 	ldw	r21,8(sp)
  813e70:	dd800117 	ldw	r22,4(sp)
  813e74:	ddc00017 	ldw	r23,0(sp)
  813e78:	dec00a04 	addi	sp,sp,40
  813e7c:	f800283a 	ret
  813e80:	00bfffd4 	movui	r2,65535
  813e84:	11c0592e 	bgeu	r2,r7,813fec <__udivdi3+0x2f8>
  813e88:	00804034 	movhi	r2,256
  813e8c:	10bfffc4 	addi	r2,r2,-1
  813e90:	01400404 	movi	r5,16
  813e94:	11c0012e 	bgeu	r2,r7,813e9c <__udivdi3+0x1a8>
  813e98:	01400604 	movi	r5,24
  813e9c:	8144d83a 	srl	r2,r16,r5
  813ea0:	010020b4 	movhi	r4,130
  813ea4:	2127ee04 	addi	r4,r4,-24648
  813ea8:	01800804 	movi	r6,32
  813eac:	1105883a 	add	r2,r2,r4
  813eb0:	10c00003 	ldbu	r3,0(r2)
  813eb4:	1947883a 	add	r3,r3,r5
  813eb8:	30cfc83a 	sub	r7,r6,r3
  813ebc:	3800571e 	bne	r7,zero,81401c <__udivdi3+0x328>
  813ec0:	84c00236 	bltu	r16,r19,813ecc <__udivdi3+0x1d8>
  813ec4:	0011883a 	mov	r8,zero
  813ec8:	b4bfde36 	bltu	r22,r18,813e44 <__udivdi3+0x150>
  813ecc:	02000044 	movi	r8,1
  813ed0:	003fdc06 	br	813e44 <__udivdi3+0x150>
  813ed4:	30003926 	beq	r6,zero,813fbc <__udivdi3+0x2c8>
  813ed8:	00bfffd4 	movui	r2,65535
  813edc:	14803d36 	bltu	r2,r18,813fd4 <__udivdi3+0x2e0>
  813ee0:	00803fc4 	movi	r2,255
  813ee4:	148b803a 	cmpltu	r5,r2,r18
  813ee8:	280a90fa 	slli	r5,r5,3
  813eec:	9144d83a 	srl	r2,r18,r5
  813ef0:	010020b4 	movhi	r4,130
  813ef4:	2127ee04 	addi	r4,r4,-24648
  813ef8:	01800804 	movi	r6,32
  813efc:	1105883a 	add	r2,r2,r4
  813f00:	10c00003 	ldbu	r3,0(r2)
  813f04:	1947883a 	add	r3,r3,r5
  813f08:	30cfc83a 	sub	r7,r6,r3
  813f0c:	3800931e 	bne	r7,zero,81415c <__udivdi3+0x468>
  813f10:	902ad43a 	srli	r21,r18,16
  813f14:	9ca7c83a 	sub	r19,r19,r18
  813f18:	05000044 	movi	r20,1
  813f1c:	95ffffcc 	andi	r23,r18,65535
  813f20:	9809883a 	mov	r4,r19
  813f24:	a80b883a 	mov	r5,r21
  813f28:	080be640 	call	80be64 <__umodsi3>
  813f2c:	9809883a 	mov	r4,r19
  813f30:	a80b883a 	mov	r5,r21
  813f34:	1023883a 	mov	r17,r2
  813f38:	080be540 	call	80be54 <__udivsi3>
  813f3c:	1027883a 	mov	r19,r2
  813f40:	8806943a 	slli	r3,r17,16
  813f44:	b004d43a 	srli	r2,r22,16
  813f48:	9dcb383a 	mul	r5,r19,r23
  813f4c:	18a2b03a 	or	r17,r3,r2
  813f50:	8940042e 	bgeu	r17,r5,813f64 <__udivdi3+0x270>
  813f54:	8ca3883a 	add	r17,r17,r18
  813f58:	9cffffc4 	addi	r19,r19,-1
  813f5c:	8c800136 	bltu	r17,r18,813f64 <__udivdi3+0x270>
  813f60:	8940b936 	bltu	r17,r5,814248 <__udivdi3+0x554>
  813f64:	8963c83a 	sub	r17,r17,r5
  813f68:	8809883a 	mov	r4,r17
  813f6c:	a80b883a 	mov	r5,r21
  813f70:	080be640 	call	80be64 <__umodsi3>
  813f74:	8809883a 	mov	r4,r17
  813f78:	a80b883a 	mov	r5,r21
  813f7c:	1021883a 	mov	r16,r2
  813f80:	080be540 	call	80be54 <__udivsi3>
  813f84:	8006943a 	slli	r3,r16,16
  813f88:	15cb383a 	mul	r5,r2,r23
  813f8c:	1009883a 	mov	r4,r2
  813f90:	b0bfffcc 	andi	r2,r22,65535
  813f94:	18a0b03a 	or	r16,r3,r2
  813f98:	8140052e 	bgeu	r16,r5,813fb0 <__udivdi3+0x2bc>
  813f9c:	84a1883a 	add	r16,r16,r18
  813fa0:	213fffc4 	addi	r4,r4,-1
  813fa4:	84800236 	bltu	r16,r18,813fb0 <__udivdi3+0x2bc>
  813fa8:	8140012e 	bgeu	r16,r5,813fb0 <__udivdi3+0x2bc>
  813fac:	213fffc4 	addi	r4,r4,-1
  813fb0:	9804943a 	slli	r2,r19,16
  813fb4:	1110b03a 	or	r8,r2,r4
  813fb8:	003fa306 	br	813e48 <__udivdi3+0x154>
  813fbc:	01000044 	movi	r4,1
  813fc0:	000b883a 	mov	r5,zero
  813fc4:	080be540 	call	80be54 <__udivsi3>
  813fc8:	1025883a 	mov	r18,r2
  813fcc:	00bfffd4 	movui	r2,65535
  813fd0:	14bfc32e 	bgeu	r2,r18,813ee0 <__udivdi3+0x1ec>
  813fd4:	00804034 	movhi	r2,256
  813fd8:	10bfffc4 	addi	r2,r2,-1
  813fdc:	01400404 	movi	r5,16
  813fe0:	14bfc22e 	bgeu	r2,r18,813eec <__udivdi3+0x1f8>
  813fe4:	01400604 	movi	r5,24
  813fe8:	003fc006 	br	813eec <__udivdi3+0x1f8>
  813fec:	00803fc4 	movi	r2,255
  813ff0:	11cb803a 	cmpltu	r5,r2,r7
  813ff4:	280a90fa 	slli	r5,r5,3
  813ff8:	010020b4 	movhi	r4,130
  813ffc:	2127ee04 	addi	r4,r4,-24648
  814000:	01800804 	movi	r6,32
  814004:	8144d83a 	srl	r2,r16,r5
  814008:	1105883a 	add	r2,r2,r4
  81400c:	10c00003 	ldbu	r3,0(r2)
  814010:	1947883a 	add	r3,r3,r5
  814014:	30cfc83a 	sub	r7,r6,r3
  814018:	383fa926 	beq	r7,zero,813ec0 <__udivdi3+0x1cc>
  81401c:	31c9c83a 	sub	r4,r6,r7
  814020:	81c6983a 	sll	r3,r16,r7
  814024:	9104d83a 	srl	r2,r18,r4
  814028:	9928d83a 	srl	r20,r19,r4
  81402c:	b10cd83a 	srl	r6,r22,r4
  814030:	18a0b03a 	or	r16,r3,r2
  814034:	802ad43a 	srli	r21,r16,16
  814038:	99c4983a 	sll	r2,r19,r7
  81403c:	a009883a 	mov	r4,r20
  814040:	a80b883a 	mov	r5,r21
  814044:	11a6b03a 	or	r19,r2,r6
  814048:	b1ec983a 	sll	r22,r22,r7
  81404c:	91e4983a 	sll	r18,r18,r7
  814050:	080be640 	call	80be64 <__umodsi3>
  814054:	a009883a 	mov	r4,r20
  814058:	a80b883a 	mov	r5,r21
  81405c:	1023883a 	mov	r17,r2
  814060:	080be540 	call	80be54 <__udivsi3>
  814064:	102f883a 	mov	r23,r2
  814068:	8806943a 	slli	r3,r17,16
  81406c:	873fffcc 	andi	fp,r16,65535
  814070:	9804d43a 	srli	r2,r19,16
  814074:	bf13383a 	mul	r9,r23,fp
  814078:	18a2b03a 	or	r17,r3,r2
  81407c:	8a40062e 	bgeu	r17,r9,814098 <__udivdi3+0x3a4>
  814080:	8c23883a 	add	r17,r17,r16
  814084:	bdffffc4 	addi	r23,r23,-1
  814088:	8c000336 	bltu	r17,r16,814098 <__udivdi3+0x3a4>
  81408c:	8a40022e 	bgeu	r17,r9,814098 <__udivdi3+0x3a4>
  814090:	bdffffc4 	addi	r23,r23,-1
  814094:	8c23883a 	add	r17,r17,r16
  814098:	8a63c83a 	sub	r17,r17,r9
  81409c:	8809883a 	mov	r4,r17
  8140a0:	a80b883a 	mov	r5,r21
  8140a4:	080be640 	call	80be64 <__umodsi3>
  8140a8:	a80b883a 	mov	r5,r21
  8140ac:	8809883a 	mov	r4,r17
  8140b0:	1029883a 	mov	r20,r2
  8140b4:	080be540 	call	80be54 <__udivsi3>
  8140b8:	a006943a 	slli	r3,r20,16
  8140bc:	1713383a 	mul	r9,r2,fp
  8140c0:	100b883a 	mov	r5,r2
  8140c4:	98bfffcc 	andi	r2,r19,65535
  8140c8:	18a8b03a 	or	r20,r3,r2
  8140cc:	a240032e 	bgeu	r20,r9,8140dc <__udivdi3+0x3e8>
  8140d0:	a429883a 	add	r20,r20,r16
  8140d4:	297fffc4 	addi	r5,r5,-1
  8140d8:	a400542e 	bgeu	r20,r16,81422c <__udivdi3+0x538>
  8140dc:	b808943a 	slli	r4,r23,16
  8140e0:	90ffffcc 	andi	r3,r18,65535
  8140e4:	900cd43a 	srli	r6,r18,16
  8140e8:	2150b03a 	or	r8,r4,r5
  8140ec:	40bfffcc 	andi	r2,r8,65535
  8140f0:	10d5383a 	mul	r10,r2,r3
  8140f4:	400ad43a 	srli	r5,r8,16
  8140f8:	118f383a 	mul	r7,r2,r6
  8140fc:	5008d43a 	srli	r4,r10,16
  814100:	28c7383a 	mul	r3,r5,r3
  814104:	a269c83a 	sub	r20,r20,r9
  814108:	390f883a 	add	r7,r7,r4
  81410c:	38cf883a 	add	r7,r7,r3
  814110:	298b383a 	mul	r5,r5,r6
  814114:	38c0032e 	bgeu	r7,r3,814124 <__udivdi3+0x430>
  814118:	00800074 	movhi	r2,1
  81411c:	10800004 	addi	r2,r2,0
  814120:	288b883a 	add	r5,r5,r2
  814124:	3804d43a 	srli	r2,r7,16
  814128:	3808943a 	slli	r4,r7,16
  81412c:	50ffffcc 	andi	r3,r10,65535
  814130:	1145883a 	add	r2,r2,r5
  814134:	20c7883a 	add	r3,r4,r3
  814138:	a0800236 	bltu	r20,r2,814144 <__udivdi3+0x450>
  81413c:	153f411e 	bne	r2,r20,813e44 <__udivdi3+0x150>
  814140:	b0ff402e 	bgeu	r22,r3,813e44 <__udivdi3+0x150>
  814144:	423fffc4 	addi	r8,r8,-1
  814148:	003f3e06 	br	813e44 <__udivdi3+0x150>
  81414c:	00803fc4 	movi	r2,255
  814150:	118f803a 	cmpltu	r7,r2,r6
  814154:	380e90fa 	slli	r7,r7,3
  814158:	003eff06 	br	813d58 <__udivdi3+0x64>
  81415c:	91e4983a 	sll	r18,r18,r7
  814160:	31c9c83a 	sub	r4,r6,r7
  814164:	9928d83a 	srl	r20,r19,r4
  814168:	902ad43a 	srli	r21,r18,16
  81416c:	b106d83a 	srl	r3,r22,r4
  814170:	99c4983a 	sll	r2,r19,r7
  814174:	a009883a 	mov	r4,r20
  814178:	a80b883a 	mov	r5,r21
  81417c:	10e6b03a 	or	r19,r2,r3
  814180:	b1ec983a 	sll	r22,r22,r7
  814184:	080be640 	call	80be64 <__umodsi3>
  814188:	a009883a 	mov	r4,r20
  81418c:	a80b883a 	mov	r5,r21
  814190:	1021883a 	mov	r16,r2
  814194:	080be540 	call	80be54 <__udivsi3>
  814198:	1029883a 	mov	r20,r2
  81419c:	8006943a 	slli	r3,r16,16
  8141a0:	95ffffcc 	andi	r23,r18,65535
  8141a4:	9804d43a 	srli	r2,r19,16
  8141a8:	a5d1383a 	mul	r8,r20,r23
  8141ac:	18a0b03a 	or	r16,r3,r2
  8141b0:	8200062e 	bgeu	r16,r8,8141cc <__udivdi3+0x4d8>
  8141b4:	84a1883a 	add	r16,r16,r18
  8141b8:	a53fffc4 	addi	r20,r20,-1
  8141bc:	84800336 	bltu	r16,r18,8141cc <__udivdi3+0x4d8>
  8141c0:	8200022e 	bgeu	r16,r8,8141cc <__udivdi3+0x4d8>
  8141c4:	a53fffc4 	addi	r20,r20,-1
  8141c8:	84a1883a 	add	r16,r16,r18
  8141cc:	8221c83a 	sub	r16,r16,r8
  8141d0:	8009883a 	mov	r4,r16
  8141d4:	a80b883a 	mov	r5,r21
  8141d8:	080be640 	call	80be64 <__umodsi3>
  8141dc:	8009883a 	mov	r4,r16
  8141e0:	a80b883a 	mov	r5,r21
  8141e4:	1023883a 	mov	r17,r2
  8141e8:	080be540 	call	80be54 <__udivsi3>
  8141ec:	8806943a 	slli	r3,r17,16
  8141f0:	15d1383a 	mul	r8,r2,r23
  8141f4:	1009883a 	mov	r4,r2
  8141f8:	98bfffcc 	andi	r2,r19,65535
  8141fc:	18a2b03a 	or	r17,r3,r2
  814200:	8a00062e 	bgeu	r17,r8,81421c <__udivdi3+0x528>
  814204:	8ca3883a 	add	r17,r17,r18
  814208:	213fffc4 	addi	r4,r4,-1
  81420c:	8c800336 	bltu	r17,r18,81421c <__udivdi3+0x528>
  814210:	8a00022e 	bgeu	r17,r8,81421c <__udivdi3+0x528>
  814214:	213fffc4 	addi	r4,r4,-1
  814218:	8ca3883a 	add	r17,r17,r18
  81421c:	a004943a 	slli	r2,r20,16
  814220:	8a27c83a 	sub	r19,r17,r8
  814224:	1128b03a 	or	r20,r2,r4
  814228:	003f3d06 	br	813f20 <__udivdi3+0x22c>
  81422c:	a27fab2e 	bgeu	r20,r9,8140dc <__udivdi3+0x3e8>
  814230:	a429883a 	add	r20,r20,r16
  814234:	297fffc4 	addi	r5,r5,-1
  814238:	003fa806 	br	8140dc <__udivdi3+0x3e8>
  81423c:	9cffffc4 	addi	r19,r19,-1
  814240:	8ca3883a 	add	r17,r17,r18
  814244:	003ee606 	br	813de0 <__udivdi3+0xec>
  814248:	9cffffc4 	addi	r19,r19,-1
  81424c:	8ca3883a 	add	r17,r17,r18
  814250:	003f4406 	br	813f64 <__udivdi3+0x270>

00814254 <__umoddi3>:
  814254:	defff004 	addi	sp,sp,-64
  814258:	df000e15 	stw	fp,56(sp)
  81425c:	dc000d15 	stw	r16,52(sp)
  814260:	dd000915 	stw	r20,36(sp)
  814264:	dd400815 	stw	r21,32(sp)
  814268:	dfc00f15 	stw	ra,60(sp)
  81426c:	dc400c15 	stw	r17,48(sp)
  814270:	dc800b15 	stw	r18,44(sp)
  814274:	dcc00a15 	stw	r19,40(sp)
  814278:	dd800715 	stw	r22,28(sp)
  81427c:	ddc00615 	stw	r23,24(sp)
  814280:	3019883a 	mov	r12,r6
  814284:	3821883a 	mov	r16,r7
  814288:	2829883a 	mov	r20,r5
  81428c:	302b883a 	mov	r21,r6
  814290:	2039883a 	mov	fp,r4
  814294:	38001d1e 	bne	r7,zero,81430c <__umoddi3+0xb8>
  814298:	2980472e 	bgeu	r5,r6,8143b8 <__umoddi3+0x164>
  81429c:	00bfffd4 	movui	r2,65535
  8142a0:	1180902e 	bgeu	r2,r6,8144e4 <__umoddi3+0x290>
  8142a4:	00804034 	movhi	r2,256
  8142a8:	10bfffc4 	addi	r2,r2,-1
  8142ac:	01c00404 	movi	r7,16
  8142b0:	1180012e 	bgeu	r2,r6,8142b8 <__umoddi3+0x64>
  8142b4:	01c00604 	movi	r7,24
  8142b8:	61c4d83a 	srl	r2,r12,r7
  8142bc:	010020b4 	movhi	r4,130
  8142c0:	2127ee04 	addi	r4,r4,-24648
  8142c4:	01400804 	movi	r5,32
  8142c8:	1105883a 	add	r2,r2,r4
  8142cc:	10c00003 	ldbu	r3,0(r2)
  8142d0:	19c7883a 	add	r3,r3,r7
  8142d4:	28c7c83a 	sub	r3,r5,r3
  8142d8:	d8c00315 	stw	r3,12(sp)
  8142dc:	18000726 	beq	r3,zero,8142fc <__umoddi3+0xa8>
  8142e0:	d9000317 	ldw	r4,12(sp)
  8142e4:	28c5c83a 	sub	r2,r5,r3
  8142e8:	e084d83a 	srl	r2,fp,r2
  8142ec:	a0c6983a 	sll	r3,r20,r3
  8142f0:	a92a983a 	sll	r21,r21,r4
  8142f4:	e138983a 	sll	fp,fp,r4
  8142f8:	18a8b03a 	or	r20,r3,r2
  8142fc:	a82cd43a 	srli	r22,r21,16
  814300:	a009883a 	mov	r4,r20
  814304:	adffffcc 	andi	r23,r21,65535
  814308:	00003f06 	br	814408 <__umoddi3+0x1b4>
  81430c:	29c0122e 	bgeu	r5,r7,814358 <__umoddi3+0x104>
  814310:	d9000015 	stw	r4,0(sp)
  814314:	d9400115 	stw	r5,4(sp)
  814318:	d9000017 	ldw	r4,0(sp)
  81431c:	d9400117 	ldw	r5,4(sp)
  814320:	2005883a 	mov	r2,r4
  814324:	2807883a 	mov	r3,r5
  814328:	dfc00f17 	ldw	ra,60(sp)
  81432c:	df000e17 	ldw	fp,56(sp)
  814330:	dc000d17 	ldw	r16,52(sp)
  814334:	dc400c17 	ldw	r17,48(sp)
  814338:	dc800b17 	ldw	r18,44(sp)
  81433c:	dcc00a17 	ldw	r19,40(sp)
  814340:	dd000917 	ldw	r20,36(sp)
  814344:	dd400817 	ldw	r21,32(sp)
  814348:	dd800717 	ldw	r22,28(sp)
  81434c:	ddc00617 	ldw	r23,24(sp)
  814350:	dec01004 	addi	sp,sp,64
  814354:	f800283a 	ret
  814358:	00bfffd4 	movui	r2,65535
  81435c:	11c05d2e 	bgeu	r2,r7,8144d4 <__umoddi3+0x280>
  814360:	00804034 	movhi	r2,256
  814364:	10bfffc4 	addi	r2,r2,-1
  814368:	01400404 	movi	r5,16
  81436c:	11c0012e 	bgeu	r2,r7,814374 <__umoddi3+0x120>
  814370:	01400604 	movi	r5,24
  814374:	8144d83a 	srl	r2,r16,r5
  814378:	010020b4 	movhi	r4,130
  81437c:	2127ee04 	addi	r4,r4,-24648
  814380:	01800804 	movi	r6,32
  814384:	1105883a 	add	r2,r2,r4
  814388:	10c00003 	ldbu	r3,0(r2)
  81438c:	1947883a 	add	r3,r3,r5
  814390:	30c7c83a 	sub	r3,r6,r3
  814394:	d8c00315 	stw	r3,12(sp)
  814398:	18005c1e 	bne	r3,zero,81450c <__umoddi3+0x2b8>
  81439c:	85005536 	bltu	r16,r20,8144f4 <__umoddi3+0x2a0>
  8143a0:	e540542e 	bgeu	fp,r21,8144f4 <__umoddi3+0x2a0>
  8143a4:	d83fdc26 	beq	sp,zero,814318 <__umoddi3+0xc4>
  8143a8:	e025883a 	mov	r18,fp
  8143ac:	dd000115 	stw	r20,4(sp)
  8143b0:	dc800015 	stw	r18,0(sp)
  8143b4:	003fd806 	br	814318 <__umoddi3+0xc4>
  8143b8:	30003a26 	beq	r6,zero,8144a4 <__umoddi3+0x250>
  8143bc:	00bfffd4 	movui	r2,65535
  8143c0:	15403e36 	bltu	r2,r21,8144bc <__umoddi3+0x268>
  8143c4:	00803fc4 	movi	r2,255
  8143c8:	154b803a 	cmpltu	r5,r2,r21
  8143cc:	280a90fa 	slli	r5,r5,3
  8143d0:	a944d83a 	srl	r2,r21,r5
  8143d4:	010020b4 	movhi	r4,130
  8143d8:	2127ee04 	addi	r4,r4,-24648
  8143dc:	01800804 	movi	r6,32
  8143e0:	1105883a 	add	r2,r2,r4
  8143e4:	10c00003 	ldbu	r3,0(r2)
  8143e8:	1947883a 	add	r3,r3,r5
  8143ec:	30c7c83a 	sub	r3,r6,r3
  8143f0:	d8c00315 	stw	r3,12(sp)
  8143f4:	1800a41e 	bne	r3,zero,814688 <__umoddi3+0x434>
  8143f8:	a82cd43a 	srli	r22,r21,16
  8143fc:	a569c83a 	sub	r20,r20,r21
  814400:	adffffcc 	andi	r23,r21,65535
  814404:	a009883a 	mov	r4,r20
  814408:	b00b883a 	mov	r5,r22
  81440c:	080be640 	call	80be64 <__umodsi3>
  814410:	a009883a 	mov	r4,r20
  814414:	b00b883a 	mov	r5,r22
  814418:	1021883a 	mov	r16,r2
  81441c:	080be540 	call	80be54 <__udivsi3>
  814420:	e006d43a 	srli	r3,fp,16
  814424:	8008943a 	slli	r4,r16,16
  814428:	15cb383a 	mul	r5,r2,r23
  81442c:	20e0b03a 	or	r16,r4,r3
  814430:	8140042e 	bgeu	r16,r5,814444 <__umoddi3+0x1f0>
  814434:	8561883a 	add	r16,r16,r21
  814438:	85400236 	bltu	r16,r21,814444 <__umoddi3+0x1f0>
  81443c:	8140012e 	bgeu	r16,r5,814444 <__umoddi3+0x1f0>
  814440:	8561883a 	add	r16,r16,r21
  814444:	8161c83a 	sub	r16,r16,r5
  814448:	8009883a 	mov	r4,r16
  81444c:	b00b883a 	mov	r5,r22
  814450:	080be640 	call	80be64 <__umodsi3>
  814454:	b00b883a 	mov	r5,r22
  814458:	8009883a 	mov	r4,r16
  81445c:	1023883a 	mov	r17,r2
  814460:	080be540 	call	80be54 <__udivsi3>
  814464:	8806943a 	slli	r3,r17,16
  814468:	15cb383a 	mul	r5,r2,r23
  81446c:	e0bfffcc 	andi	r2,fp,65535
  814470:	18a2b03a 	or	r17,r3,r2
  814474:	8940042e 	bgeu	r17,r5,814488 <__umoddi3+0x234>
  814478:	8d63883a 	add	r17,r17,r21
  81447c:	8d400236 	bltu	r17,r21,814488 <__umoddi3+0x234>
  814480:	8940012e 	bgeu	r17,r5,814488 <__umoddi3+0x234>
  814484:	8d63883a 	add	r17,r17,r21
  814488:	8979c83a 	sub	fp,r17,r5
  81448c:	d83fa226 	beq	sp,zero,814318 <__umoddi3+0xc4>
  814490:	d8c00317 	ldw	r3,12(sp)
  814494:	d8000115 	stw	zero,4(sp)
  814498:	e0e4d83a 	srl	r18,fp,r3
  81449c:	dc800015 	stw	r18,0(sp)
  8144a0:	003f9d06 	br	814318 <__umoddi3+0xc4>
  8144a4:	01000044 	movi	r4,1
  8144a8:	000b883a 	mov	r5,zero
  8144ac:	080be540 	call	80be54 <__udivsi3>
  8144b0:	102b883a 	mov	r21,r2
  8144b4:	00bfffd4 	movui	r2,65535
  8144b8:	157fc22e 	bgeu	r2,r21,8143c4 <__umoddi3+0x170>
  8144bc:	00804034 	movhi	r2,256
  8144c0:	10bfffc4 	addi	r2,r2,-1
  8144c4:	01400404 	movi	r5,16
  8144c8:	157fc12e 	bgeu	r2,r21,8143d0 <__umoddi3+0x17c>
  8144cc:	01400604 	movi	r5,24
  8144d0:	003fbf06 	br	8143d0 <__umoddi3+0x17c>
  8144d4:	00803fc4 	movi	r2,255
  8144d8:	11cb803a 	cmpltu	r5,r2,r7
  8144dc:	280a90fa 	slli	r5,r5,3
  8144e0:	003fa406 	br	814374 <__umoddi3+0x120>
  8144e4:	00803fc4 	movi	r2,255
  8144e8:	118f803a 	cmpltu	r7,r2,r6
  8144ec:	380e90fa 	slli	r7,r7,3
  8144f0:	003f7106 	br	8142b8 <__umoddi3+0x64>
  8144f4:	e549c83a 	sub	r4,fp,r21
  8144f8:	e105803a 	cmpltu	r2,fp,r4
  8144fc:	a407c83a 	sub	r3,r20,r16
  814500:	18a9c83a 	sub	r20,r3,r2
  814504:	2039883a 	mov	fp,r4
  814508:	003fa606 	br	8143a4 <__umoddi3+0x150>
  81450c:	d9000317 	ldw	r4,12(sp)
  814510:	310dc83a 	sub	r6,r6,r4
  814514:	a984d83a 	srl	r2,r21,r6
  814518:	8106983a 	sll	r3,r16,r4
  81451c:	d9800215 	stw	r6,8(sp)
  814520:	a1aed83a 	srl	r23,r20,r6
  814524:	18a0b03a 	or	r16,r3,r2
  814528:	8004d43a 	srli	r2,r16,16
  81452c:	d8c00217 	ldw	r3,8(sp)
  814530:	a10c983a 	sll	r6,r20,r4
  814534:	d8800415 	stw	r2,16(sp)
  814538:	d9400417 	ldw	r5,16(sp)
  81453c:	e0c4d83a 	srl	r2,fp,r3
  814540:	b809883a 	mov	r4,r23
  814544:	30a8b03a 	or	r20,r6,r2
  814548:	080be640 	call	80be64 <__umodsi3>
  81454c:	d9400417 	ldw	r5,16(sp)
  814550:	b809883a 	mov	r4,r23
  814554:	1023883a 	mov	r17,r2
  814558:	080be540 	call	80be54 <__udivsi3>
  81455c:	102f883a 	mov	r23,r2
  814560:	813fffcc 	andi	r4,r16,65535
  814564:	8806943a 	slli	r3,r17,16
  814568:	a004d43a 	srli	r2,r20,16
  81456c:	d9000515 	stw	r4,20(sp)
  814570:	b90f383a 	mul	r7,r23,r4
  814574:	d9000317 	ldw	r4,12(sp)
  814578:	18a2b03a 	or	r17,r3,r2
  81457c:	a92a983a 	sll	r21,r21,r4
  814580:	e138983a 	sll	fp,fp,r4
  814584:	89c0062e 	bgeu	r17,r7,8145a0 <__umoddi3+0x34c>
  814588:	8c23883a 	add	r17,r17,r16
  81458c:	bdffffc4 	addi	r23,r23,-1
  814590:	8c000336 	bltu	r17,r16,8145a0 <__umoddi3+0x34c>
  814594:	89c0022e 	bgeu	r17,r7,8145a0 <__umoddi3+0x34c>
  814598:	bdffffc4 	addi	r23,r23,-1
  81459c:	8c23883a 	add	r17,r17,r16
  8145a0:	d9400417 	ldw	r5,16(sp)
  8145a4:	89e3c83a 	sub	r17,r17,r7
  8145a8:	8809883a 	mov	r4,r17
  8145ac:	080be640 	call	80be64 <__umodsi3>
  8145b0:	d9400417 	ldw	r5,16(sp)
  8145b4:	8809883a 	mov	r4,r17
  8145b8:	102d883a 	mov	r22,r2
  8145bc:	080be540 	call	80be54 <__udivsi3>
  8145c0:	100b883a 	mov	r5,r2
  8145c4:	d8800517 	ldw	r2,20(sp)
  8145c8:	b006943a 	slli	r3,r22,16
  8145cc:	288f383a 	mul	r7,r5,r2
  8145d0:	a0bfffcc 	andi	r2,r20,65535
  8145d4:	18acb03a 	or	r22,r3,r2
  8145d8:	b1c0032e 	bgeu	r22,r7,8145e8 <__umoddi3+0x394>
  8145dc:	b42d883a 	add	r22,r22,r16
  8145e0:	297fffc4 	addi	r5,r5,-1
  8145e4:	b4005e2e 	bgeu	r22,r16,814760 <__umoddi3+0x50c>
  8145e8:	b804943a 	slli	r2,r23,16
  8145ec:	a93fffcc 	andi	r4,r21,65535
  8145f0:	a80cd43a 	srli	r6,r21,16
  8145f4:	1144b03a 	or	r2,r2,r5
  8145f8:	10ffffcc 	andi	r3,r2,65535
  8145fc:	1911383a 	mul	r8,r3,r4
  814600:	1004d43a 	srli	r2,r2,16
  814604:	1987383a 	mul	r3,r3,r6
  814608:	400ad43a 	srli	r5,r8,16
  81460c:	1109383a 	mul	r4,r2,r4
  814610:	b1edc83a 	sub	r22,r22,r7
  814614:	1947883a 	add	r3,r3,r5
  814618:	1907883a 	add	r3,r3,r4
  81461c:	118b383a 	mul	r5,r2,r6
  814620:	b029883a 	mov	r20,r22
  814624:	1900032e 	bgeu	r3,r4,814634 <__umoddi3+0x3e0>
  814628:	00800074 	movhi	r2,1
  81462c:	10800004 	addi	r2,r2,0
  814630:	288b883a 	add	r5,r5,r2
  814634:	1804d43a 	srli	r2,r3,16
  814638:	1808943a 	slli	r4,r3,16
  81463c:	40ffffcc 	andi	r3,r8,65535
  814640:	1145883a 	add	r2,r2,r5
  814644:	20cb883a 	add	r5,r4,r3
  814648:	a0803f36 	bltu	r20,r2,814748 <__umoddi3+0x4f4>
  81464c:	15003d26 	beq	r2,r20,814744 <__umoddi3+0x4f0>
  814650:	d83f3126 	beq	sp,zero,814318 <__umoddi3+0xc4>
  814654:	e147c83a 	sub	r3,fp,r5
  814658:	b089c83a 	sub	r4,r22,r2
  81465c:	e0c5803a 	cmpltu	r2,fp,r3
  814660:	20a9c83a 	sub	r20,r4,r2
  814664:	d8800317 	ldw	r2,12(sp)
  814668:	d9000217 	ldw	r4,8(sp)
  81466c:	1886d83a 	srl	r3,r3,r2
  814670:	a10a983a 	sll	r5,r20,r4
  814674:	a084d83a 	srl	r2,r20,r2
  814678:	28e4b03a 	or	r18,r5,r3
  81467c:	d8800115 	stw	r2,4(sp)
  814680:	dc800015 	stw	r18,0(sp)
  814684:	003f2406 	br	814318 <__umoddi3+0xc4>
  814688:	d8800317 	ldw	r2,12(sp)
  81468c:	a8aa983a 	sll	r21,r21,r2
  814690:	308dc83a 	sub	r6,r6,r2
  814694:	a1aed83a 	srl	r23,r20,r6
  814698:	a82cd43a 	srli	r22,r21,16
  81469c:	e186d83a 	srl	r3,fp,r6
  8146a0:	a084983a 	sll	r2,r20,r2
  8146a4:	b809883a 	mov	r4,r23
  8146a8:	b00b883a 	mov	r5,r22
  8146ac:	10e8b03a 	or	r20,r2,r3
  8146b0:	d9800215 	stw	r6,8(sp)
  8146b4:	080be640 	call	80be64 <__umodsi3>
  8146b8:	b809883a 	mov	r4,r23
  8146bc:	b00b883a 	mov	r5,r22
  8146c0:	1021883a 	mov	r16,r2
  8146c4:	080be540 	call	80be54 <__udivsi3>
  8146c8:	adffffcc 	andi	r23,r21,65535
  8146cc:	8008943a 	slli	r4,r16,16
  8146d0:	a006d43a 	srli	r3,r20,16
  8146d4:	15cf383a 	mul	r7,r2,r23
  8146d8:	d8800317 	ldw	r2,12(sp)
  8146dc:	20e0b03a 	or	r16,r4,r3
  8146e0:	e0b8983a 	sll	fp,fp,r2
  8146e4:	81c0042e 	bgeu	r16,r7,8146f8 <__umoddi3+0x4a4>
  8146e8:	8561883a 	add	r16,r16,r21
  8146ec:	85400236 	bltu	r16,r21,8146f8 <__umoddi3+0x4a4>
  8146f0:	81c0012e 	bgeu	r16,r7,8146f8 <__umoddi3+0x4a4>
  8146f4:	8561883a 	add	r16,r16,r21
  8146f8:	81e1c83a 	sub	r16,r16,r7
  8146fc:	8009883a 	mov	r4,r16
  814700:	b00b883a 	mov	r5,r22
  814704:	080be640 	call	80be64 <__umodsi3>
  814708:	8009883a 	mov	r4,r16
  81470c:	b00b883a 	mov	r5,r22
  814710:	1023883a 	mov	r17,r2
  814714:	080be540 	call	80be54 <__udivsi3>
  814718:	8806943a 	slli	r3,r17,16
  81471c:	15cf383a 	mul	r7,r2,r23
  814720:	a0bfffcc 	andi	r2,r20,65535
  814724:	18a2b03a 	or	r17,r3,r2
  814728:	89c0042e 	bgeu	r17,r7,81473c <__umoddi3+0x4e8>
  81472c:	8d63883a 	add	r17,r17,r21
  814730:	8d400236 	bltu	r17,r21,81473c <__umoddi3+0x4e8>
  814734:	89c0012e 	bgeu	r17,r7,81473c <__umoddi3+0x4e8>
  814738:	8d63883a 	add	r17,r17,r21
  81473c:	89e9c83a 	sub	r20,r17,r7
  814740:	003f3006 	br	814404 <__umoddi3+0x1b0>
  814744:	e17fc22e 	bgeu	fp,r5,814650 <__umoddi3+0x3fc>
  814748:	2d49c83a 	sub	r4,r5,r21
  81474c:	1407c83a 	sub	r3,r2,r16
  814750:	2905803a 	cmpltu	r2,r5,r4
  814754:	1885c83a 	sub	r2,r3,r2
  814758:	200b883a 	mov	r5,r4
  81475c:	003fbc06 	br	814650 <__umoddi3+0x3fc>
  814760:	b1ffa12e 	bgeu	r22,r7,8145e8 <__umoddi3+0x394>
  814764:	297fffc4 	addi	r5,r5,-1
  814768:	b42d883a 	add	r22,r22,r16
  81476c:	003f9e06 	br	8145e8 <__umoddi3+0x394>

00814770 <close>:
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  814770:	defff804 	addi	sp,sp,-32
  814774:	dfc00715 	stw	ra,28(sp)
  814778:	df000615 	stw	fp,24(sp)
  81477c:	df000604 	addi	fp,sp,24
  814780:	e13ffa15 	stw	r4,-24(fp)
  alt_fd* fd;
  int     rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  814784:	e0bffa17 	ldw	r2,-24(fp)
  814788:	1004803a 	cmplt	r2,r2,zero
  81478c:	1000091e 	bne	r2,zero,8147b4 <close+0x44>
  814790:	e0bffa17 	ldw	r2,-24(fp)
  814794:	10800324 	muli	r2,r2,12
  814798:	e0bffe15 	stw	r2,-8(fp)
  81479c:	008020b4 	movhi	r2,130
  8147a0:	10aaa704 	addi	r2,r2,-21860
  8147a4:	e0fffe17 	ldw	r3,-8(fp)
  8147a8:	1887883a 	add	r3,r3,r2
  8147ac:	e0fffe15 	stw	r3,-8(fp)
  8147b0:	00000106 	br	8147b8 <close+0x48>
  8147b4:	e03ffe15 	stw	zero,-8(fp)
  8147b8:	e0bffe17 	ldw	r2,-8(fp)
  8147bc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  8147c0:	e0bffb17 	ldw	r2,-20(fp)
  8147c4:	1005003a 	cmpeq	r2,r2,zero
  8147c8:	10001d1e 	bne	r2,zero,814840 <close+0xd0>
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8147cc:	e0bffb17 	ldw	r2,-20(fp)
  8147d0:	10800017 	ldw	r2,0(r2)
  8147d4:	10800417 	ldw	r2,16(r2)
  8147d8:	1005003a 	cmpeq	r2,r2,zero
  8147dc:	1000071e 	bne	r2,zero,8147fc <close+0x8c>
  8147e0:	e0bffb17 	ldw	r2,-20(fp)
  8147e4:	10800017 	ldw	r2,0(r2)
  8147e8:	10800417 	ldw	r2,16(r2)
  8147ec:	e13ffb17 	ldw	r4,-20(fp)
  8147f0:	103ee83a 	callr	r2
  8147f4:	e0bfff15 	stw	r2,-4(fp)
  8147f8:	00000106 	br	814800 <close+0x90>
  8147fc:	e03fff15 	stw	zero,-4(fp)
  814800:	e0ffff17 	ldw	r3,-4(fp)
  814804:	e0fffc15 	stw	r3,-16(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  814808:	e13ffa17 	ldw	r4,-24(fp)
  81480c:	08154e40 	call	8154e4 <alt_release_fd>
    if (rval < 0)
  814810:	e0bffc17 	ldw	r2,-16(fp)
  814814:	1004403a 	cmpge	r2,r2,zero
  814818:	1000071e 	bne	r2,zero,814838 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  81481c:	081486c0 	call	81486c <alt_get_errno>
  814820:	e0fffc17 	ldw	r3,-16(fp)
  814824:	00c7c83a 	sub	r3,zero,r3
  814828:	10c00015 	stw	r3,0(r2)
      return -1;
  81482c:	00bfffc4 	movi	r2,-1
  814830:	e0bffd15 	stw	r2,-12(fp)
  814834:	00000806 	br	814858 <close+0xe8>
    }
    return 0;
  814838:	e03ffd15 	stw	zero,-12(fp)
  81483c:	00000606 	br	814858 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814840:	081486c0 	call	81486c <alt_get_errno>
  814844:	1007883a 	mov	r3,r2
  814848:	00801444 	movi	r2,81
  81484c:	18800015 	stw	r2,0(r3)
    return -1;
  814850:	00ffffc4 	movi	r3,-1
  814854:	e0fffd15 	stw	r3,-12(fp)
  }
}
  814858:	e0bffd17 	ldw	r2,-12(fp)
  81485c:	dfc00717 	ldw	ra,28(sp)
  814860:	df000617 	ldw	fp,24(sp)
  814864:	dec00804 	addi	sp,sp,32
  814868:	f800283a 	ret

0081486c <alt_get_errno>:
  81486c:	defffd04 	addi	sp,sp,-12
  814870:	dfc00215 	stw	ra,8(sp)
  814874:	df000115 	stw	fp,4(sp)
  814878:	df000104 	addi	fp,sp,4
  81487c:	d0a01117 	ldw	r2,-32700(gp)
  814880:	1005003a 	cmpeq	r2,r2,zero
  814884:	1000041e 	bne	r2,zero,814898 <alt_get_errno+0x2c>
  814888:	d0a01117 	ldw	r2,-32700(gp)
  81488c:	103ee83a 	callr	r2
  814890:	e0bfff15 	stw	r2,-4(fp)
  814894:	00000206 	br	8148a0 <alt_get_errno+0x34>
  814898:	d0a02804 	addi	r2,gp,-32608
  81489c:	e0bfff15 	stw	r2,-4(fp)
  8148a0:	e0bfff17 	ldw	r2,-4(fp)
  8148a4:	dfc00217 	ldw	ra,8(sp)
  8148a8:	df000117 	ldw	fp,4(sp)
  8148ac:	dec00304 	addi	sp,sp,12
  8148b0:	f800283a 	ret

008148b4 <alt_dev_null_write>:
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8148b4:	defffc04 	addi	sp,sp,-16
  8148b8:	df000315 	stw	fp,12(sp)
  8148bc:	df000304 	addi	fp,sp,12
  8148c0:	e13ffd15 	stw	r4,-12(fp)
  8148c4:	e17ffe15 	stw	r5,-8(fp)
  8148c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8148cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8148d0:	df000317 	ldw	fp,12(sp)
  8148d4:	dec00404 	addi	sp,sp,16
  8148d8:	f800283a 	ret

008148dc <fstat>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8148dc:	defff904 	addi	sp,sp,-28
  8148e0:	dfc00615 	stw	ra,24(sp)
  8148e4:	df000515 	stw	fp,20(sp)
  8148e8:	df000504 	addi	fp,sp,20
  8148ec:	e13ffb15 	stw	r4,-20(fp)
  8148f0:	e17ffc15 	stw	r5,-16(fp)
  alt_fd*  fd;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8148f4:	e0bffb17 	ldw	r2,-20(fp)
  8148f8:	1004803a 	cmplt	r2,r2,zero
  8148fc:	1000091e 	bne	r2,zero,814924 <fstat+0x48>
  814900:	e0bffb17 	ldw	r2,-20(fp)
  814904:	10800324 	muli	r2,r2,12
  814908:	e0bfff15 	stw	r2,-4(fp)
  81490c:	008020b4 	movhi	r2,130
  814910:	10aaa704 	addi	r2,r2,-21860
  814914:	e0ffff17 	ldw	r3,-4(fp)
  814918:	1887883a 	add	r3,r3,r2
  81491c:	e0ffff15 	stw	r3,-4(fp)
  814920:	00000106 	br	814928 <fstat+0x4c>
  814924:	e03fff15 	stw	zero,-4(fp)
  814928:	e0bfff17 	ldw	r2,-4(fp)
  81492c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  814930:	e0bffd17 	ldw	r2,-12(fp)
  814934:	1005003a 	cmpeq	r2,r2,zero
  814938:	1000121e 	bne	r2,zero,814984 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  81493c:	e0bffd17 	ldw	r2,-12(fp)
  814940:	10800017 	ldw	r2,0(r2)
  814944:	10800817 	ldw	r2,32(r2)
  814948:	1005003a 	cmpeq	r2,r2,zero
  81494c:	1000081e 	bne	r2,zero,814970 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  814950:	e0bffd17 	ldw	r2,-12(fp)
  814954:	10800017 	ldw	r2,0(r2)
  814958:	10800817 	ldw	r2,32(r2)
  81495c:	e13ffd17 	ldw	r4,-12(fp)
  814960:	e17ffc17 	ldw	r5,-16(fp)
  814964:	103ee83a 	callr	r2
  814968:	e0bffe15 	stw	r2,-8(fp)
  81496c:	00000b06 	br	81499c <fstat+0xc0>
    }

    /* 
     * If no function is provided, mark the fd as belonging to a character 
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  814970:	e0fffc17 	ldw	r3,-16(fp)
  814974:	00880004 	movi	r2,8192
  814978:	18800115 	stw	r2,4(r3)
      return 0;
  81497c:	e03ffe15 	stw	zero,-8(fp)
  814980:	00000606 	br	81499c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814984:	08149b00 	call	8149b0 <alt_get_errno>
  814988:	1007883a 	mov	r3,r2
  81498c:	00801444 	movi	r2,81
  814990:	18800015 	stw	r2,0(r3)
    return -1;
  814994:	00ffffc4 	movi	r3,-1
  814998:	e0fffe15 	stw	r3,-8(fp)
  }
}
  81499c:	e0bffe17 	ldw	r2,-8(fp)
  8149a0:	dfc00617 	ldw	ra,24(sp)
  8149a4:	df000517 	ldw	fp,20(sp)
  8149a8:	dec00704 	addi	sp,sp,28
  8149ac:	f800283a 	ret

008149b0 <alt_get_errno>:
  8149b0:	defffd04 	addi	sp,sp,-12
  8149b4:	dfc00215 	stw	ra,8(sp)
  8149b8:	df000115 	stw	fp,4(sp)
  8149bc:	df000104 	addi	fp,sp,4
  8149c0:	d0a01117 	ldw	r2,-32700(gp)
  8149c4:	1005003a 	cmpeq	r2,r2,zero
  8149c8:	1000041e 	bne	r2,zero,8149dc <alt_get_errno+0x2c>
  8149cc:	d0a01117 	ldw	r2,-32700(gp)
  8149d0:	103ee83a 	callr	r2
  8149d4:	e0bfff15 	stw	r2,-4(fp)
  8149d8:	00000206 	br	8149e4 <alt_get_errno+0x34>
  8149dc:	d0a02804 	addi	r2,gp,-32608
  8149e0:	e0bfff15 	stw	r2,-4(fp)
  8149e4:	e0bfff17 	ldw	r2,-4(fp)
  8149e8:	dfc00217 	ldw	ra,8(sp)
  8149ec:	df000117 	ldw	fp,4(sp)
  8149f0:	dec00304 	addi	sp,sp,12
  8149f4:	f800283a 	ret

008149f8 <alt_irq_register>:
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8149f8:	defff304 	addi	sp,sp,-52
  8149fc:	df000c15 	stw	fp,48(sp)
  814a00:	df000c04 	addi	fp,sp,48
  814a04:	e13ff415 	stw	r4,-48(fp)
  814a08:	e17ff515 	stw	r5,-44(fp)
  814a0c:	e1bff615 	stw	r6,-40(fp)
  int rc = -EINVAL;  
  814a10:	00bffa84 	movi	r2,-22
  814a14:	e0bff715 	stw	r2,-36(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814a18:	e0bff417 	ldw	r2,-48(fp)
  814a1c:	10800828 	cmpgeui	r2,r2,32
  814a20:	10005a1e 	bne	r2,zero,814b8c <alt_irq_register+0x194>
  814a24:	0005303a 	rdctl	r2,status
  814a28:	e0bffa15 	stw	r2,-24(fp)
  814a2c:	e0fffa17 	ldw	r3,-24(fp)
  814a30:	00bfff84 	movi	r2,-2
  814a34:	1884703a 	and	r2,r3,r2
  814a38:	1001703a 	wrctl	status,r2
  814a3c:	e0bffa17 	ldw	r2,-24(fp)
  814a40:	e0bff915 	stw	r2,-28(fp)
  814a44:	e0bff917 	ldw	r2,-28(fp)
  814a48:	e0bff815 	stw	r2,-32(fp)
  {
    /* 
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  814a4c:	00c020b4 	movhi	r3,130
  814a50:	18f11004 	addi	r3,r3,-15296
  814a54:	e0bff417 	ldw	r2,-48(fp)
  814a58:	10800224 	muli	r2,r2,8
  814a5c:	10c7883a 	add	r3,r2,r3
  814a60:	e0bff617 	ldw	r2,-40(fp)
  814a64:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  814a68:	00c020b4 	movhi	r3,130
  814a6c:	18f11004 	addi	r3,r3,-15296
  814a70:	e0bff417 	ldw	r2,-48(fp)
  814a74:	10800224 	muli	r2,r2,8
  814a78:	10c5883a 	add	r2,r2,r3
  814a7c:	10c00104 	addi	r3,r2,4
  814a80:	e0bff517 	ldw	r2,-44(fp)
  814a84:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  814a88:	e0bff617 	ldw	r2,-40(fp)
  814a8c:	1005003a 	cmpeq	r2,r2,zero
  814a90:	10001c1e 	bne	r2,zero,814b04 <alt_irq_register+0x10c>
  814a94:	e0bff417 	ldw	r2,-48(fp)
  814a98:	e0bffa15 	stw	r2,-24(fp)
  814a9c:	0005303a 	rdctl	r2,status
  814aa0:	e0bffd15 	stw	r2,-12(fp)
  814aa4:	e0fffd17 	ldw	r3,-12(fp)
  814aa8:	00bfff84 	movi	r2,-2
  814aac:	1884703a 	and	r2,r3,r2
  814ab0:	1001703a 	wrctl	status,r2
  814ab4:	e0bffd17 	ldw	r2,-12(fp)
  814ab8:	e0bffc15 	stw	r2,-16(fp)
  814abc:	e0bffc17 	ldw	r2,-16(fp)
  814ac0:	e0bffb15 	stw	r2,-20(fp)
  814ac4:	00c00044 	movi	r3,1
  814ac8:	e0bffa17 	ldw	r2,-24(fp)
  814acc:	1886983a 	sll	r3,r3,r2
  814ad0:	d0a01217 	ldw	r2,-32696(gp)
  814ad4:	10c4b03a 	or	r2,r2,r3
  814ad8:	d0a01215 	stw	r2,-32696(gp)
  814adc:	d0a01217 	ldw	r2,-32696(gp)
  814ae0:	100170fa 	wrctl	ienable,r2
  814ae4:	e0bffb17 	ldw	r2,-20(fp)
  814ae8:	e0bffd15 	stw	r2,-12(fp)
  814aec:	e0bffd17 	ldw	r2,-12(fp)
  814af0:	1001703a 	wrctl	status,r2
  814af4:	e03ff915 	stw	zero,-28(fp)
  814af8:	e0bff917 	ldw	r2,-28(fp)
  814afc:	e0bfff15 	stw	r2,-4(fp)
  814b00:	00001c06 	br	814b74 <alt_irq_register+0x17c>
  814b04:	e0bff417 	ldw	r2,-48(fp)
  814b08:	e0bffd15 	stw	r2,-12(fp)
  814b0c:	0005303a 	rdctl	r2,status
  814b10:	e0bffe15 	stw	r2,-8(fp)
  814b14:	e0fffe17 	ldw	r3,-8(fp)
  814b18:	00bfff84 	movi	r2,-2
  814b1c:	1884703a 	and	r2,r3,r2
  814b20:	1001703a 	wrctl	status,r2
  814b24:	e0bffe17 	ldw	r2,-8(fp)
  814b28:	e0bffa15 	stw	r2,-24(fp)
  814b2c:	e0bffa17 	ldw	r2,-24(fp)
  814b30:	e0bffb15 	stw	r2,-20(fp)
  814b34:	00c00044 	movi	r3,1
  814b38:	e0bffd17 	ldw	r2,-12(fp)
  814b3c:	1884983a 	sll	r2,r3,r2
  814b40:	0086303a 	nor	r3,zero,r2
  814b44:	d0a01217 	ldw	r2,-32696(gp)
  814b48:	10c4703a 	and	r2,r2,r3
  814b4c:	d0a01215 	stw	r2,-32696(gp)
  814b50:	d0a01217 	ldw	r2,-32696(gp)
  814b54:	100170fa 	wrctl	ienable,r2
  814b58:	e0bffb17 	ldw	r2,-20(fp)
  814b5c:	e0bffe15 	stw	r2,-8(fp)
  814b60:	e0bffe17 	ldw	r2,-8(fp)
  814b64:	1001703a 	wrctl	status,r2
  814b68:	e03ffc15 	stw	zero,-16(fp)
  814b6c:	e0bffc17 	ldw	r2,-16(fp)
  814b70:	e0bfff15 	stw	r2,-4(fp)
  814b74:	e0bfff17 	ldw	r2,-4(fp)
  814b78:	e0bff715 	stw	r2,-36(fp)
  814b7c:	e0bff817 	ldw	r2,-32(fp)
  814b80:	e0bffe15 	stw	r2,-8(fp)
  814b84:	e0bffe17 	ldw	r2,-8(fp)
  814b88:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  814b8c:	e0bff717 	ldw	r2,-36(fp)
}
  814b90:	df000c17 	ldw	fp,48(sp)
  814b94:	dec00d04 	addi	sp,sp,52
  814b98:	f800283a 	ret

00814b9c <isatty>:
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  814b9c:	deffeb04 	addi	sp,sp,-84
  814ba0:	dfc01415 	stw	ra,80(sp)
  814ba4:	df001315 	stw	fp,76(sp)
  814ba8:	df001304 	addi	fp,sp,76
  814bac:	e13fed15 	stw	r4,-76(fp)
  alt_fd*     fd;
  struct stat stat;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  814bb0:	e0bfed17 	ldw	r2,-76(fp)
  814bb4:	1004803a 	cmplt	r2,r2,zero
  814bb8:	1000091e 	bne	r2,zero,814be0 <isatty+0x44>
  814bbc:	e0bfed17 	ldw	r2,-76(fp)
  814bc0:	10800324 	muli	r2,r2,12
  814bc4:	e0bfff15 	stw	r2,-4(fp)
  814bc8:	008020b4 	movhi	r2,130
  814bcc:	10aaa704 	addi	r2,r2,-21860
  814bd0:	e0ffff17 	ldw	r3,-4(fp)
  814bd4:	1887883a 	add	r3,r3,r2
  814bd8:	e0ffff15 	stw	r3,-4(fp)
  814bdc:	00000106 	br	814be4 <isatty+0x48>
  814be0:	e03fff15 	stw	zero,-4(fp)
  814be4:	e0bfff17 	ldw	r2,-4(fp)
  814be8:	e0bfee15 	stw	r2,-72(fp)
  
  if (fd)
  814bec:	e0bfee17 	ldw	r2,-72(fp)
  814bf0:	1005003a 	cmpeq	r2,r2,zero
  814bf4:	10000f1e 	bne	r2,zero,814c34 <isatty+0x98>
  {
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  814bf8:	e0bfee17 	ldw	r2,-72(fp)
  814bfc:	10800017 	ldw	r2,0(r2)
  814c00:	10800817 	ldw	r2,32(r2)
  814c04:	1004c03a 	cmpne	r2,r2,zero
  814c08:	1000031e 	bne	r2,zero,814c18 <isatty+0x7c>
    {
      return 1;
  814c0c:	00c00044 	movi	r3,1
  814c10:	e0fffe15 	stw	r3,-8(fp)
  814c14:	00000c06 	br	814c48 <isatty+0xac>
    }

    /*
     * If a driver does provide an implementation of the fstat() function, then
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  814c18:	e17fef04 	addi	r5,fp,-68
  814c1c:	e13fed17 	ldw	r4,-76(fp)
  814c20:	08148dc0 	call	8148dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  814c24:	e0bff017 	ldw	r2,-64(fp)
  814c28:	10880020 	cmpeqi	r2,r2,8192
  814c2c:	e0bffe15 	stw	r2,-8(fp)
  814c30:	00000506 	br	814c48 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814c34:	0814c5c0 	call	814c5c <alt_get_errno>
  814c38:	1007883a 	mov	r3,r2
  814c3c:	00801444 	movi	r2,81
  814c40:	18800015 	stw	r2,0(r3)
    return 0;
  814c44:	e03ffe15 	stw	zero,-8(fp)
  }
}
  814c48:	e0bffe17 	ldw	r2,-8(fp)
  814c4c:	dfc01417 	ldw	ra,80(sp)
  814c50:	df001317 	ldw	fp,76(sp)
  814c54:	dec01504 	addi	sp,sp,84
  814c58:	f800283a 	ret

00814c5c <alt_get_errno>:
  814c5c:	defffd04 	addi	sp,sp,-12
  814c60:	dfc00215 	stw	ra,8(sp)
  814c64:	df000115 	stw	fp,4(sp)
  814c68:	df000104 	addi	fp,sp,4
  814c6c:	d0a01117 	ldw	r2,-32700(gp)
  814c70:	1005003a 	cmpeq	r2,r2,zero
  814c74:	1000041e 	bne	r2,zero,814c88 <alt_get_errno+0x2c>
  814c78:	d0a01117 	ldw	r2,-32700(gp)
  814c7c:	103ee83a 	callr	r2
  814c80:	e0bfff15 	stw	r2,-4(fp)
  814c84:	00000206 	br	814c90 <alt_get_errno+0x34>
  814c88:	d0a02804 	addi	r2,gp,-32608
  814c8c:	e0bfff15 	stw	r2,-4(fp)
  814c90:	e0bfff17 	ldw	r2,-4(fp)
  814c94:	dfc00217 	ldw	ra,8(sp)
  814c98:	df000117 	ldw	fp,4(sp)
  814c9c:	dec00304 	addi	sp,sp,12
  814ca0:	f800283a 	ret

00814ca4 <lseek>:
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  814ca4:	defff804 	addi	sp,sp,-32
  814ca8:	dfc00715 	stw	ra,28(sp)
  814cac:	df000615 	stw	fp,24(sp)
  814cb0:	df000604 	addi	fp,sp,24
  814cb4:	e13ffa15 	stw	r4,-24(fp)
  814cb8:	e17ffb15 	stw	r5,-20(fp)
  814cbc:	e1bffc15 	stw	r6,-16(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  814cc0:	e03ffe15 	stw	zero,-8(fp)

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  814cc4:	e0bffa17 	ldw	r2,-24(fp)
  814cc8:	1004803a 	cmplt	r2,r2,zero
  814ccc:	1000091e 	bne	r2,zero,814cf4 <lseek+0x50>
  814cd0:	e0bffa17 	ldw	r2,-24(fp)
  814cd4:	10800324 	muli	r2,r2,12
  814cd8:	e0bfff15 	stw	r2,-4(fp)
  814cdc:	008020b4 	movhi	r2,130
  814ce0:	10aaa704 	addi	r2,r2,-21860
  814ce4:	e0ffff17 	ldw	r3,-4(fp)
  814ce8:	1887883a 	add	r3,r3,r2
  814cec:	e0ffff15 	stw	r3,-4(fp)
  814cf0:	00000106 	br	814cf8 <lseek+0x54>
  814cf4:	e03fff15 	stw	zero,-4(fp)
  814cf8:	e0bfff17 	ldw	r2,-4(fp)
  814cfc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd) 
  814d00:	e0bffd17 	ldw	r2,-12(fp)
  814d04:	1005003a 	cmpeq	r2,r2,zero
  814d08:	1000111e 	bne	r2,zero,814d50 <lseek+0xac>
  {
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  814d0c:	e0bffd17 	ldw	r2,-12(fp)
  814d10:	10800017 	ldw	r2,0(r2)
  814d14:	10800717 	ldw	r2,28(r2)
  814d18:	1005003a 	cmpeq	r2,r2,zero
  814d1c:	1000091e 	bne	r2,zero,814d44 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  814d20:	e0bffd17 	ldw	r2,-12(fp)
  814d24:	10800017 	ldw	r2,0(r2)
  814d28:	10800717 	ldw	r2,28(r2)
  814d2c:	e13ffd17 	ldw	r4,-12(fp)
  814d30:	e17ffb17 	ldw	r5,-20(fp)
  814d34:	e1bffc17 	ldw	r6,-16(fp)
  814d38:	103ee83a 	callr	r2
  814d3c:	e0bffe15 	stw	r2,-8(fp)
  814d40:	00000506 	br	814d58 <lseek+0xb4>
    }
    /*
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  814d44:	00bfde84 	movi	r2,-134
  814d48:	e0bffe15 	stw	r2,-8(fp)
  814d4c:	00000206 	br	814d58 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  814d50:	00bfebc4 	movi	r2,-81
  814d54:	e0bffe15 	stw	r2,-8(fp)
  }

  if (rc < 0)
  814d58:	e0bffe17 	ldw	r2,-8(fp)
  814d5c:	1004403a 	cmpge	r2,r2,zero
  814d60:	1000071e 	bne	r2,zero,814d80 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  814d64:	0814d940 	call	814d94 <alt_get_errno>
  814d68:	1007883a 	mov	r3,r2
  814d6c:	e0bffe17 	ldw	r2,-8(fp)
  814d70:	0085c83a 	sub	r2,zero,r2
  814d74:	18800015 	stw	r2,0(r3)
    rc = -1;
  814d78:	00bfffc4 	movi	r2,-1
  814d7c:	e0bffe15 	stw	r2,-8(fp)
  }

  return rc;
  814d80:	e0bffe17 	ldw	r2,-8(fp)
}
  814d84:	dfc00717 	ldw	ra,28(sp)
  814d88:	df000617 	ldw	fp,24(sp)
  814d8c:	dec00804 	addi	sp,sp,32
  814d90:	f800283a 	ret

00814d94 <alt_get_errno>:
  814d94:	defffd04 	addi	sp,sp,-12
  814d98:	dfc00215 	stw	ra,8(sp)
  814d9c:	df000115 	stw	fp,4(sp)
  814da0:	df000104 	addi	fp,sp,4
  814da4:	d0a01117 	ldw	r2,-32700(gp)
  814da8:	1005003a 	cmpeq	r2,r2,zero
  814dac:	1000041e 	bne	r2,zero,814dc0 <alt_get_errno+0x2c>
  814db0:	d0a01117 	ldw	r2,-32700(gp)
  814db4:	103ee83a 	callr	r2
  814db8:	e0bfff15 	stw	r2,-4(fp)
  814dbc:	00000206 	br	814dc8 <alt_get_errno+0x34>
  814dc0:	d0a02804 	addi	r2,gp,-32608
  814dc4:	e0bfff15 	stw	r2,-4(fp)
  814dc8:	e0bfff17 	ldw	r2,-4(fp)
  814dcc:	dfc00217 	ldw	ra,8(sp)
  814dd0:	df000117 	ldw	fp,4(sp)
  814dd4:	dec00304 	addi	sp,sp,12
  814dd8:	f800283a 	ret

00814ddc <alt_main>:
 * the users application, i.e. main().
 */

void alt_main (void)
{
  814ddc:	defffc04 	addi	sp,sp,-16
  814de0:	dfc00315 	stw	ra,12(sp)
  814de4:	df000215 	stw	fp,8(sp)
  814de8:	df000204 	addi	fp,sp,8
  int result;

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  814dec:	0009883a 	mov	r4,zero
  814df0:	08157940 	call	815794 <alt_irq_init>
  814df4:	e03fff15 	stw	zero,-4(fp)

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();

  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  814df8:	08157c40 	call	8157c4 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");

#if !defined(ALT_USE_DIRECT_DRIVERS) && (defined(ALT_STDIN_PRESENT) || defined(ALT_STDOUT_PRESENT) || defined(ALT_STDERR_PRESENT))

  /*
   * Redirect stdio to the apropriate devices now that the devices have
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  814dfc:	010020b4 	movhi	r4,130
  814e00:	21283104 	addi	r4,r4,-24380
  814e04:	014020b4 	movhi	r5,130
  814e08:	29683104 	addi	r5,r5,-24380
  814e0c:	018020b4 	movhi	r6,130
  814e10:	31a83104 	addi	r6,r6,-24380
  814e14:	0818ed80 	call	818ed8 <alt_io_redirect>
#endif

#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  814e18:	0818b480 	call	818b48 <_do_ctors>
#endif /* ALT_NO_C_PLUS_PLUS */

#if !defined(ALT_NO_C_PLUS_PLUS) && !defined(ALT_NO_CLEAN_EXIT) && !defined(ALT_NO_EXIT)
  /*
   * Set the C++ destructors to be called at system shutdown. This is only done
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  814e1c:	010020b4 	movhi	r4,130
  814e20:	2122e804 	addi	r4,r4,-29792
  814e24:	08191040 	call	819104 <atexit>
#endif

  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  814e28:	d1201417 	ldw	r4,-32688(gp)
  814e2c:	d1601517 	ldw	r5,-32684(gp)
  814e30:	d1a01617 	ldw	r6,-32680(gp)
  814e34:	0804f500 	call	804f50 <main>
  814e38:	e0bffe15 	stw	r2,-8(fp)
  close(STDOUT_FILENO);
  814e3c:	01000044 	movi	r4,1
  814e40:	08147700 	call	814770 <close>
  exit (result);
  814e44:	e13ffe17 	ldw	r4,-8(fp)
  814e48:	08191a00 	call	8191a0 <exit>

00814e4c <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  814e4c:	defffe04 	addi	sp,sp,-8
  814e50:	df000115 	stw	fp,4(sp)
  814e54:	df000104 	addi	fp,sp,4
  814e58:	e13fff15 	stw	r4,-4(fp)
  814e5c:	df000117 	ldw	fp,4(sp)
  814e60:	dec00204 	addi	sp,sp,8
  814e64:	f800283a 	ret

00814e68 <__malloc_unlock>:
}

/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  814e68:	defffe04 	addi	sp,sp,-8
  814e6c:	df000115 	stw	fp,4(sp)
  814e70:	df000104 	addi	fp,sp,4
  814e74:	e13fff15 	stw	r4,-4(fp)
  814e78:	df000117 	ldw	fp,4(sp)
  814e7c:	dec00204 	addi	sp,sp,8
  814e80:	f800283a 	ret

00814e84 <alt_file_locked>:
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  814e84:	defffc04 	addi	sp,sp,-16
  814e88:	df000315 	stw	fp,12(sp)
  814e8c:	df000304 	addi	fp,sp,12
  814e90:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 i;

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  814e94:	e0fffd17 	ldw	r3,-12(fp)
  814e98:	e0bffd17 	ldw	r2,-12(fp)
  814e9c:	10800217 	ldw	r2,8(r2)
  814ea0:	10900034 	orhi	r2,r2,16384
  814ea4:	18800215 	stw	r2,8(r3)

  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  814ea8:	e03ffe15 	stw	zero,-8(fp)
  814eac:	d0e01017 	ldw	r3,-32704(gp)
  814eb0:	e0bffe17 	ldw	r2,-8(fp)
  814eb4:	18802036 	bltu	r3,r2,814f38 <alt_file_locked+0xb4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  814eb8:	00c020b4 	movhi	r3,130
  814ebc:	18eaa704 	addi	r3,r3,-21860
  814ec0:	e0bffe17 	ldw	r2,-8(fp)
  814ec4:	10800324 	muli	r2,r2,12
  814ec8:	10c5883a 	add	r2,r2,r3
  814ecc:	e0fffd17 	ldw	r3,-12(fp)
  814ed0:	11000017 	ldw	r4,0(r2)
  814ed4:	18800017 	ldw	r2,0(r3)
  814ed8:	2080131e 	bne	r4,r2,814f28 <alt_file_locked+0xa4>
  814edc:	00c020b4 	movhi	r3,130
  814ee0:	18eaa704 	addi	r3,r3,-21860
  814ee4:	e0bffe17 	ldw	r2,-8(fp)
  814ee8:	10800324 	muli	r2,r2,12
  814eec:	10c5883a 	add	r2,r2,r3
  814ef0:	10800204 	addi	r2,r2,8
  814ef4:	10800017 	ldw	r2,0(r2)
  814ef8:	1004403a 	cmpge	r2,r2,zero
  814efc:	10000a1e 	bne	r2,zero,814f28 <alt_file_locked+0xa4>
  814f00:	e0bffe17 	ldw	r2,-8(fp)
  814f04:	10c00324 	muli	r3,r2,12
  814f08:	008020b4 	movhi	r2,130
  814f0c:	10aaa704 	addi	r2,r2,-21860
  814f10:	1887883a 	add	r3,r3,r2
  814f14:	e0bffd17 	ldw	r2,-12(fp)
  814f18:	18800326 	beq	r3,r2,814f28 <alt_file_locked+0xa4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  814f1c:	00bffcc4 	movi	r2,-13
  814f20:	e0bfff15 	stw	r2,-4(fp)
  814f24:	00000506 	br	814f3c <alt_file_locked+0xb8>
  814f28:	e0bffe17 	ldw	r2,-8(fp)
  814f2c:	10800044 	addi	r2,r2,1
  814f30:	e0bffe15 	stw	r2,-8(fp)
  814f34:	003fdd06 	br	814eac <alt_file_locked+0x28>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  814f38:	e03fff15 	stw	zero,-4(fp)
}
  814f3c:	e0bfff17 	ldw	r2,-4(fp)
  814f40:	df000317 	ldw	fp,12(sp)
  814f44:	dec00404 	addi	sp,sp,16
  814f48:	f800283a 	ret

00814f4c <open>:

/*
 * open() is called in order to get a file descriptor that reference the file
 * or device named "name". This descriptor can then be used to manipulate the
 * file/device using the standard system calls, e.g. write(), read(), ioctl()
 * etc.
 *
 * This is equivalent to the standard open() system call.
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  814f4c:	defff404 	addi	sp,sp,-48
  814f50:	dfc00b15 	stw	ra,44(sp)
  814f54:	df000a15 	stw	fp,40(sp)
  814f58:	df000a04 	addi	fp,sp,40
  814f5c:	e13ff615 	stw	r4,-40(fp)
  814f60:	e17ff715 	stw	r5,-36(fp)
  814f64:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  814f68:	00bfffc4 	movi	r2,-1
  814f6c:	e0bffb15 	stw	r2,-20(fp)
  int status = -ENODEV;
  814f70:	00bffb44 	movi	r2,-19
  814f74:	e0bffc15 	stw	r2,-16(fp)
  int isafs = 0;
  814f78:	e03ffd15 	stw	zero,-12(fp)

  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  814f7c:	e13ff617 	ldw	r4,-40(fp)
  814f80:	d1600e04 	addi	r5,gp,-32712
  814f84:	0818bf80 	call	818bf8 <alt_find_dev>
  814f88:	e0bff915 	stw	r2,-28(fp)
  814f8c:	e0bff917 	ldw	r2,-28(fp)
  814f90:	1004c03a 	cmpne	r2,r2,zero
  814f94:	1000051e 	bne	r2,zero,814fac <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  814f98:	e13ff617 	ldw	r4,-40(fp)
  814f9c:	0818c880 	call	818c88 <alt_find_file>
  814fa0:	e0bff915 	stw	r2,-28(fp)
    isafs = 1;
  814fa4:	00800044 	movi	r2,1
  814fa8:	e0bffd15 	stw	r2,-12(fp)
  }

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  814fac:	e0bff917 	ldw	r2,-28(fp)
  814fb0:	1005003a 	cmpeq	r2,r2,zero
  814fb4:	1000301e 	bne	r2,zero,815078 <open+0x12c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  814fb8:	e13ff917 	ldw	r4,-28(fp)
  814fbc:	0818d6c0 	call	818d6c <alt_get_fd>
  814fc0:	e0bffb15 	stw	r2,-20(fp)
  814fc4:	e0bffb17 	ldw	r2,-20(fp)
  814fc8:	1004403a 	cmpge	r2,r2,zero
  814fcc:	1000031e 	bne	r2,zero,814fdc <open+0x90>
    {
      status = index;
  814fd0:	e0bffb17 	ldw	r2,-20(fp)
  814fd4:	e0bffc15 	stw	r2,-16(fp)
  814fd8:	00002906 	br	815080 <open+0x134>
    }
    else
    {
      fd = &alt_fd_list[index];
  814fdc:	e0bffb17 	ldw	r2,-20(fp)
  814fe0:	10c00324 	muli	r3,r2,12
  814fe4:	008020b4 	movhi	r2,130
  814fe8:	10aaa704 	addi	r2,r2,-21860
  814fec:	1885883a 	add	r2,r3,r2
  814ff0:	e0bffa15 	stw	r2,-24(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  814ff4:	e13ffa17 	ldw	r4,-24(fp)
  814ff8:	e0fff717 	ldw	r3,-36(fp)
  814ffc:	00900034 	movhi	r2,16384
  815000:	10bfffc4 	addi	r2,r2,-1
  815004:	1884703a 	and	r2,r3,r2
  815008:	20800215 	stw	r2,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81500c:	e0bffd17 	ldw	r2,-12(fp)
  815010:	1004c03a 	cmpne	r2,r2,zero
  815014:	1000071e 	bne	r2,zero,815034 <open+0xe8>
  815018:	e13ffa17 	ldw	r4,-24(fp)
  81501c:	0814e840 	call	814e84 <alt_file_locked>
  815020:	e0bffc15 	stw	r2,-16(fp)
  815024:	e0bffc17 	ldw	r2,-16(fp)
  815028:	1004403a 	cmpge	r2,r2,zero
  81502c:	1000011e 	bne	r2,zero,815034 <open+0xe8>
  815030:	00001306 	br	815080 <open+0x134>
      {
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  815034:	e0bff917 	ldw	r2,-28(fp)
  815038:	10800317 	ldw	r2,12(r2)
  81503c:	1005003a 	cmpeq	r2,r2,zero
  815040:	1000091e 	bne	r2,zero,815068 <open+0x11c>
  815044:	e0bff917 	ldw	r2,-28(fp)
  815048:	10800317 	ldw	r2,12(r2)
  81504c:	e13ffa17 	ldw	r4,-24(fp)
  815050:	e17ff617 	ldw	r5,-40(fp)
  815054:	e1bff717 	ldw	r6,-36(fp)
  815058:	e1fff817 	ldw	r7,-32(fp)
  81505c:	103ee83a 	callr	r2
  815060:	e0bfff15 	stw	r2,-4(fp)
  815064:	00000106 	br	81506c <open+0x120>
  815068:	e03fff15 	stw	zero,-4(fp)
  81506c:	e0bfff17 	ldw	r2,-4(fp)
  815070:	e0bffc15 	stw	r2,-16(fp)
  815074:	00000206 	br	815080 <open+0x134>
      }
    }
  }
  else
  {
    status = -ENODEV;
  815078:	00bffb44 	movi	r2,-19
  81507c:	e0bffc15 	stw	r2,-16(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  815080:	e0bffc17 	ldw	r2,-16(fp)
  815084:	1004403a 	cmpge	r2,r2,zero
  815088:	1000091e 	bne	r2,zero,8150b0 <open+0x164>
  {
    alt_release_fd (index);  
  81508c:	e13ffb17 	ldw	r4,-20(fp)
  815090:	08154e40 	call	8154e4 <alt_release_fd>
    ALT_ERRNO = -status;
  815094:	08150cc0 	call	8150cc <alt_get_errno>
  815098:	e0fffc17 	ldw	r3,-16(fp)
  81509c:	00c7c83a 	sub	r3,zero,r3
  8150a0:	10c00015 	stw	r3,0(r2)
    return -1;
  8150a4:	00bfffc4 	movi	r2,-1
  8150a8:	e0bffe15 	stw	r2,-8(fp)
  8150ac:	00000206 	br	8150b8 <open+0x16c>
  }
  
  /* return the reference upon success */

  return index;
  8150b0:	e0bffb17 	ldw	r2,-20(fp)
  8150b4:	e0bffe15 	stw	r2,-8(fp)
}
  8150b8:	e0bffe17 	ldw	r2,-8(fp)
  8150bc:	dfc00b17 	ldw	ra,44(sp)
  8150c0:	df000a17 	ldw	fp,40(sp)
  8150c4:	dec00c04 	addi	sp,sp,48
  8150c8:	f800283a 	ret

008150cc <alt_get_errno>:
  8150cc:	defffd04 	addi	sp,sp,-12
  8150d0:	dfc00215 	stw	ra,8(sp)
  8150d4:	df000115 	stw	fp,4(sp)
  8150d8:	df000104 	addi	fp,sp,4
  8150dc:	d0a01117 	ldw	r2,-32700(gp)
  8150e0:	1005003a 	cmpeq	r2,r2,zero
  8150e4:	1000041e 	bne	r2,zero,8150f8 <alt_get_errno+0x2c>
  8150e8:	d0a01117 	ldw	r2,-32700(gp)
  8150ec:	103ee83a 	callr	r2
  8150f0:	e0bfff15 	stw	r2,-4(fp)
  8150f4:	00000206 	br	815100 <alt_get_errno+0x34>
  8150f8:	d0a02804 	addi	r2,gp,-32608
  8150fc:	e0bfff15 	stw	r2,-4(fp)
  815100:	e0bfff17 	ldw	r2,-4(fp)
  815104:	dfc00217 	ldw	ra,8(sp)
  815108:	df000117 	ldw	fp,4(sp)
  81510c:	dec00304 	addi	sp,sp,12
  815110:	f800283a 	ret

00815114 <alt_printf>:
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  815114:	defff404 	addi	sp,sp,-48
  815118:	dfc00815 	stw	ra,32(sp)
  81511c:	df000715 	stw	fp,28(sp)
  815120:	df000704 	addi	fp,sp,28
  815124:	e1400215 	stw	r5,8(fp)
  815128:	e1800315 	stw	r6,12(fp)
  81512c:	e1c00415 	stw	r7,16(fp)
  815130:	e13ff915 	stw	r4,-28(fp)
	va_list args;
	va_start(args, fmt);
  815134:	e0800204 	addi	r2,fp,8
  815138:	e0bffa15 	stw	r2,-24(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  81513c:	e0bff917 	ldw	r2,-28(fp)
  815140:	e0bffb15 	stw	r2,-20(fp)
    while ((c = *w++) != 0)
  815144:	e13ffb04 	addi	r4,fp,-20
  815148:	20800017 	ldw	r2,0(r4)
  81514c:	1007883a 	mov	r3,r2
  815150:	18c00003 	ldbu	r3,0(r3)
  815154:	10800044 	addi	r2,r2,1
  815158:	20800015 	stw	r2,0(r4)
  81515c:	e0fffc05 	stb	r3,-16(fp)
  815160:	18803fcc 	andi	r2,r3,255
  815164:	1080201c 	xori	r2,r2,128
  815168:	10bfe004 	addi	r2,r2,-128
  81516c:	1005003a 	cmpeq	r2,r2,zero
  815170:	1000711e 	bne	r2,zero,815338 <alt_printf+0x224>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  815174:	e0bffc07 	ldb	r2,-16(fp)
  815178:	10800960 	cmpeqi	r2,r2,37
  81517c:	1000031e 	bne	r2,zero,81518c <alt_printf+0x78>
        {
            alt_putchar(c);
  815180:	e13ffc07 	ldb	r4,-16(fp)
  815184:	08153480 	call	815348 <alt_putchar>
  815188:	003fee06 	br	815144 <alt_printf+0x30>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  81518c:	e13ffb04 	addi	r4,fp,-20
  815190:	20800017 	ldw	r2,0(r4)
  815194:	1007883a 	mov	r3,r2
  815198:	18c00003 	ldbu	r3,0(r3)
  81519c:	10800044 	addi	r2,r2,1
  8151a0:	20800015 	stw	r2,0(r4)
  8151a4:	e0fffc05 	stb	r3,-16(fp)
  8151a8:	18803fcc 	andi	r2,r3,255
  8151ac:	1080201c 	xori	r2,r2,128
  8151b0:	10bfe004 	addi	r2,r2,-128
  8151b4:	1005003a 	cmpeq	r2,r2,zero
  8151b8:	10005f1e 	bne	r2,zero,815338 <alt_printf+0x224>
            {
                if (c == '%')
  8151bc:	e0bffc07 	ldb	r2,-16(fp)
  8151c0:	10800958 	cmpnei	r2,r2,37
  8151c4:	1000031e 	bne	r2,zero,8151d4 <alt_printf+0xc0>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  8151c8:	e13ffc07 	ldb	r4,-16(fp)
  8151cc:	08153480 	call	815348 <alt_putchar>
  8151d0:	003fdc06 	br	815144 <alt_printf+0x30>
                } 
                else if (c == 'c')
  8151d4:	e0bffc07 	ldb	r2,-16(fp)
  8151d8:	108018d8 	cmpnei	r2,r2,99
  8151dc:	1000091e 	bne	r2,zero,815204 <alt_printf+0xf0>
                {
                    int v = va_arg(args, int);
  8151e0:	e0fffa17 	ldw	r3,-24(fp)
  8151e4:	e0bffa17 	ldw	r2,-24(fp)
  8151e8:	10800104 	addi	r2,r2,4
  8151ec:	e0bffa15 	stw	r2,-24(fp)
  8151f0:	18800017 	ldw	r2,0(r3)
  8151f4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  8151f8:	e13ffd17 	ldw	r4,-12(fp)
  8151fc:	08153480 	call	815348 <alt_putchar>
  815200:	003fd006 	br	815144 <alt_printf+0x30>
                }
                else if (c == 'x')
  815204:	e0bffc07 	ldb	r2,-16(fp)
  815208:	10801e18 	cmpnei	r2,r2,120
  81520c:	1000341e 	bne	r2,zero,8152e0 <alt_printf+0x1cc>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  815210:	e0fffa17 	ldw	r3,-24(fp)
  815214:	e0bffa17 	ldw	r2,-24(fp)
  815218:	10800104 	addi	r2,r2,4
  81521c:	e0bffa15 	stw	r2,-24(fp)
  815220:	18800017 	ldw	r2,0(r3)
  815224:	e0bffd15 	stw	r2,-12(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  815228:	e0bffd17 	ldw	r2,-12(fp)
  81522c:	1004c03a 	cmpne	r2,r2,zero
  815230:	1000031e 	bne	r2,zero,815240 <alt_printf+0x12c>
                    {
                        alt_putchar('0');
  815234:	01000c04 	movi	r4,48
  815238:	08153480 	call	815348 <alt_putchar>
                        continue;
  81523c:	003fc106 	br	815144 <alt_printf+0x30>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  815240:	00800704 	movi	r2,28
  815244:	e0bfff15 	stw	r2,-4(fp)
                    while (!(v & (0xF << digit_shift)))
  815248:	00c003c4 	movi	r3,15
  81524c:	e0bfff17 	ldw	r2,-4(fp)
  815250:	1886983a 	sll	r3,r3,r2
  815254:	e0bffd17 	ldw	r2,-12(fp)
  815258:	1884703a 	and	r2,r3,r2
  81525c:	1004c03a 	cmpne	r2,r2,zero
  815260:	1000041e 	bne	r2,zero,815274 <alt_printf+0x160>
                        digit_shift -= 4;
  815264:	e0bfff17 	ldw	r2,-4(fp)
  815268:	10bfff04 	addi	r2,r2,-4
  81526c:	e0bfff15 	stw	r2,-4(fp)
  815270:	003ff506 	br	815248 <alt_printf+0x134>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  815274:	e0bfff17 	ldw	r2,-4(fp)
  815278:	1004803a 	cmplt	r2,r2,zero
  81527c:	103fb11e 	bne	r2,zero,815144 <alt_printf+0x30>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  815280:	00c003c4 	movi	r3,15
  815284:	e0bfff17 	ldw	r2,-4(fp)
  815288:	1886983a 	sll	r3,r3,r2
  81528c:	e0bffd17 	ldw	r2,-12(fp)
  815290:	1886703a 	and	r3,r3,r2
  815294:	e0bfff17 	ldw	r2,-4(fp)
  815298:	1884d83a 	srl	r2,r3,r2
  81529c:	e0bffe15 	stw	r2,-8(fp)
                        if (digit <= 9)
  8152a0:	e0bffe17 	ldw	r2,-8(fp)
  8152a4:	108002a8 	cmpgeui	r2,r2,10
  8152a8:	1000041e 	bne	r2,zero,8152bc <alt_printf+0x1a8>
                            c = '0' + digit;
  8152ac:	e0bffe17 	ldw	r2,-8(fp)
  8152b0:	10800c04 	addi	r2,r2,48
  8152b4:	e0bffc05 	stb	r2,-16(fp)
  8152b8:	00000306 	br	8152c8 <alt_printf+0x1b4>
                        else
                            c = 'a' + digit - 10;
  8152bc:	e0bffe17 	ldw	r2,-8(fp)
  8152c0:	108015c4 	addi	r2,r2,87
  8152c4:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
  8152c8:	e13ffc07 	ldb	r4,-16(fp)
  8152cc:	08153480 	call	815348 <alt_putchar>
  8152d0:	e0bfff17 	ldw	r2,-4(fp)
  8152d4:	10bfff04 	addi	r2,r2,-4
  8152d8:	e0bfff15 	stw	r2,-4(fp)
  8152dc:	003fe506 	br	815274 <alt_printf+0x160>
                    }
                }
                else if (c == 's')
  8152e0:	e0bffc07 	ldb	r2,-16(fp)
  8152e4:	10801cd8 	cmpnei	r2,r2,115
  8152e8:	103f961e 	bne	r2,zero,815144 <alt_printf+0x30>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  8152ec:	e0fffa17 	ldw	r3,-24(fp)
  8152f0:	e0bffa17 	ldw	r2,-24(fp)
  8152f4:	10800104 	addi	r2,r2,4
  8152f8:	e0bffa15 	stw	r2,-24(fp)
  8152fc:	18800017 	ldw	r2,0(r3)
  815300:	e0bfff15 	stw	r2,-4(fp)

                    while(*s)
  815304:	e0bfff17 	ldw	r2,-4(fp)
  815308:	10800007 	ldb	r2,0(r2)
  81530c:	1005003a 	cmpeq	r2,r2,zero
  815310:	103f8c1e 	bne	r2,zero,815144 <alt_printf+0x30>
                      alt_putchar(*s++);
  815314:	e13fff04 	addi	r4,fp,-4
  815318:	20800017 	ldw	r2,0(r4)
  81531c:	1007883a 	mov	r3,r2
  815320:	18c00007 	ldb	r3,0(r3)
  815324:	10800044 	addi	r2,r2,1
  815328:	20800015 	stw	r2,0(r4)
  81532c:	1809883a 	mov	r4,r3
  815330:	08153480 	call	815348 <alt_putchar>
  815334:	003ff306 	br	815304 <alt_printf+0x1f0>
                }
            }
            else
            {
                break;
            }
        }
    }
}
  815338:	dfc00817 	ldw	ra,32(sp)
  81533c:	df000717 	ldw	fp,28(sp)
  815340:	dec00c04 	addi	sp,sp,48
  815344:	f800283a 	ret

00815348 <alt_putchar>:
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  815348:	defffd04 	addi	sp,sp,-12
  81534c:	dfc00215 	stw	ra,8(sp)
  815350:	df000115 	stw	fp,4(sp)
  815354:	df000104 	addi	fp,sp,4
  815358:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  81535c:	d0a00117 	ldw	r2,-32764(gp)
  815360:	e13fff17 	ldw	r4,-4(fp)
  815364:	11400217 	ldw	r5,8(r2)
  815368:	08192f40 	call	8192f4 <putc>
#endif
}
  81536c:	dfc00217 	ldw	ra,8(sp)
  815370:	df000117 	ldw	fp,4(sp)
  815374:	dec00304 	addi	sp,sp,12
  815378:	f800283a 	ret

0081537c <read>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  81537c:	defff704 	addi	sp,sp,-36
  815380:	dfc00815 	stw	ra,32(sp)
  815384:	df000715 	stw	fp,28(sp)
  815388:	df000704 	addi	fp,sp,28
  81538c:	e13ff915 	stw	r4,-28(fp)
  815390:	e17ffa15 	stw	r5,-24(fp)
  815394:	e1bffb15 	stw	r6,-20(fp)
  alt_fd*  fd;
  int      rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815398:	e0bff917 	ldw	r2,-28(fp)
  81539c:	1004803a 	cmplt	r2,r2,zero
  8153a0:	1000091e 	bne	r2,zero,8153c8 <read+0x4c>
  8153a4:	e0bff917 	ldw	r2,-28(fp)
  8153a8:	10800324 	muli	r2,r2,12
  8153ac:	e0bfff15 	stw	r2,-4(fp)
  8153b0:	008020b4 	movhi	r2,130
  8153b4:	10aaa704 	addi	r2,r2,-21860
  8153b8:	e0ffff17 	ldw	r3,-4(fp)
  8153bc:	1887883a 	add	r3,r3,r2
  8153c0:	e0ffff15 	stw	r3,-4(fp)
  8153c4:	00000106 	br	8153cc <read+0x50>
  8153c8:	e03fff15 	stw	zero,-4(fp)
  8153cc:	e0bfff17 	ldw	r2,-4(fp)
  8153d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd)
  8153d4:	e0bffc17 	ldw	r2,-16(fp)
  8153d8:	1005003a 	cmpeq	r2,r2,zero
  8153dc:	1000241e 	bne	r2,zero,815470 <read+0xf4>
  {
    /*
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8153e0:	e0bffc17 	ldw	r2,-16(fp)
  8153e4:	10800217 	ldw	r2,8(r2)
  8153e8:	108000cc 	andi	r2,r2,3
  8153ec:	10800060 	cmpeqi	r2,r2,1
  8153f0:	10001a1e 	bne	r2,zero,81545c <read+0xe0>
  8153f4:	e0bffc17 	ldw	r2,-16(fp)
  8153f8:	10800017 	ldw	r2,0(r2)
  8153fc:	10800517 	ldw	r2,20(r2)
  815400:	1005003a 	cmpeq	r2,r2,zero
  815404:	1000151e 	bne	r2,zero,81545c <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  815408:	e0bffc17 	ldw	r2,-16(fp)
  81540c:	10800017 	ldw	r2,0(r2)
  815410:	10800517 	ldw	r2,20(r2)
  815414:	e13ffc17 	ldw	r4,-16(fp)
  815418:	e17ffa17 	ldw	r5,-24(fp)
  81541c:	e1bffb17 	ldw	r6,-20(fp)
  815420:	103ee83a 	callr	r2
  815424:	e0bffd15 	stw	r2,-12(fp)
  815428:	e0bffd17 	ldw	r2,-12(fp)
  81542c:	1004403a 	cmpge	r2,r2,zero
  815430:	1000071e 	bne	r2,zero,815450 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  815434:	081549c0 	call	81549c <alt_get_errno>
  815438:	e0fffd17 	ldw	r3,-12(fp)
  81543c:	00c7c83a 	sub	r3,zero,r3
  815440:	10c00015 	stw	r3,0(r2)
          return -1;
  815444:	00ffffc4 	movi	r3,-1
  815448:	e0fffe15 	stw	r3,-8(fp)
  81544c:	00000e06 	br	815488 <read+0x10c>
        }
        return rval;
  815450:	e0bffd17 	ldw	r2,-12(fp)
  815454:	e0bffe15 	stw	r2,-8(fp)
  815458:	00000b06 	br	815488 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  81545c:	081549c0 	call	81549c <alt_get_errno>
  815460:	1007883a 	mov	r3,r2
  815464:	00800344 	movi	r2,13
  815468:	18800015 	stw	r2,0(r3)
  81546c:	00000406 	br	815480 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  815470:	081549c0 	call	81549c <alt_get_errno>
  815474:	1007883a 	mov	r3,r2
  815478:	00801444 	movi	r2,81
  81547c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  815480:	00bfffc4 	movi	r2,-1
  815484:	e0bffe15 	stw	r2,-8(fp)
}
  815488:	e0bffe17 	ldw	r2,-8(fp)
  81548c:	dfc00817 	ldw	ra,32(sp)
  815490:	df000717 	ldw	fp,28(sp)
  815494:	dec00904 	addi	sp,sp,36
  815498:	f800283a 	ret

0081549c <alt_get_errno>:
  81549c:	defffd04 	addi	sp,sp,-12
  8154a0:	dfc00215 	stw	ra,8(sp)
  8154a4:	df000115 	stw	fp,4(sp)
  8154a8:	df000104 	addi	fp,sp,4
  8154ac:	d0a01117 	ldw	r2,-32700(gp)
  8154b0:	1005003a 	cmpeq	r2,r2,zero
  8154b4:	1000041e 	bne	r2,zero,8154c8 <alt_get_errno+0x2c>
  8154b8:	d0a01117 	ldw	r2,-32700(gp)
  8154bc:	103ee83a 	callr	r2
  8154c0:	e0bfff15 	stw	r2,-4(fp)
  8154c4:	00000206 	br	8154d0 <alt_get_errno+0x34>
  8154c8:	d0a02804 	addi	r2,gp,-32608
  8154cc:	e0bfff15 	stw	r2,-4(fp)
  8154d0:	e0bfff17 	ldw	r2,-4(fp)
  8154d4:	dfc00217 	ldw	ra,8(sp)
  8154d8:	df000117 	ldw	fp,4(sp)
  8154dc:	dec00304 	addi	sp,sp,12
  8154e0:	f800283a 	ret

008154e4 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8154e4:	defffe04 	addi	sp,sp,-8
  8154e8:	df000115 	stw	fp,4(sp)
  8154ec:	df000104 	addi	fp,sp,4
  8154f0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8154f4:	e0bfff17 	ldw	r2,-4(fp)
  8154f8:	108000d0 	cmplti	r2,r2,3
  8154fc:	10000d1e 	bne	r2,zero,815534 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  815500:	00c020b4 	movhi	r3,130
  815504:	18eaa704 	addi	r3,r3,-21860
  815508:	e0bfff17 	ldw	r2,-4(fp)
  81550c:	10800324 	muli	r2,r2,12
  815510:	10c5883a 	add	r2,r2,r3
  815514:	10800204 	addi	r2,r2,8
  815518:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  81551c:	00c020b4 	movhi	r3,130
  815520:	18eaa704 	addi	r3,r3,-21860
  815524:	e0bfff17 	ldw	r2,-4(fp)
  815528:	10800324 	muli	r2,r2,12
  81552c:	10c5883a 	add	r2,r2,r3
  815530:	10000015 	stw	zero,0(r2)
  }
}
  815534:	df000117 	ldw	fp,4(sp)
  815538:	dec00204 	addi	sp,sp,8
  81553c:	f800283a 	ret

00815540 <sbrk>:
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  815540:	defff904 	addi	sp,sp,-28
  815544:	df000615 	stw	fp,24(sp)
  815548:	df000604 	addi	fp,sp,24
  81554c:	e13ffa15 	stw	r4,-24(fp)
  815550:	0005303a 	rdctl	r2,status
  815554:	e0bffe15 	stw	r2,-8(fp)
  815558:	e0fffe17 	ldw	r3,-8(fp)
  81555c:	00bfff84 	movi	r2,-2
  815560:	1884703a 	and	r2,r3,r2
  815564:	1001703a 	wrctl	status,r2
  815568:	e0bffe17 	ldw	r2,-8(fp)
  81556c:	e0bffd15 	stw	r2,-12(fp)
  815570:	e0bffd17 	ldw	r2,-12(fp)
  815574:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  815578:	d0a01717 	ldw	r2,-32676(gp)
  81557c:	10c000c4 	addi	r3,r2,3
  815580:	00bfff04 	movi	r2,-4
  815584:	1884703a 	and	r2,r3,r2
  815588:	d0a01715 	stw	r2,-32676(gp)

#ifdef ALT_MAX_HEAP_BYTES
  /*  
   * User specified a maximum heap size.  Return -1 if it would
   * be exceeded by this sbrk call.
   */
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81558c:	d0e01717 	ldw	r3,-32676(gp)
  815590:	e0bffa17 	ldw	r2,-24(fp)
  815594:	1887883a 	add	r3,r3,r2
  815598:	00804034 	movhi	r2,256
  81559c:	10800004 	addi	r2,r2,0
  8155a0:	10c0072e 	bgeu	r2,r3,8155c0 <sbrk+0x80>
  8155a4:	e0bffb17 	ldw	r2,-20(fp)
  8155a8:	e0bffe15 	stw	r2,-8(fp)
  8155ac:	e0bffe17 	ldw	r2,-8(fp)
  8155b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8155b4:	00bfffc4 	movi	r2,-1
  8155b8:	e0bfff15 	stw	r2,-4(fp)
  8155bc:	00000c06 	br	8155f0 <sbrk+0xb0>
  }
#endif

  prev_heap_end = heap_end; 
  8155c0:	d0a01717 	ldw	r2,-32676(gp)
  8155c4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8155c8:	d0e01717 	ldw	r3,-32676(gp)
  8155cc:	e0bffa17 	ldw	r2,-24(fp)
  8155d0:	1885883a 	add	r2,r3,r2
  8155d4:	d0a01715 	stw	r2,-32676(gp)
  8155d8:	e0bffb17 	ldw	r2,-20(fp)
  8155dc:	e0bffe15 	stw	r2,-8(fp)
  8155e0:	e0bffe17 	ldw	r2,-8(fp)
  8155e4:	1001703a 	wrctl	status,r2

#ifdef ALT_STACK_CHECK
  /*
   * If the stack and heap are contiguous then extending the heap reduces the
   * space available for the stack.  If we are still using the default stack
   * then adjust the stack limit to note this, while checking for stack
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
  {
    if (alt_stack_pointer() <= heap_end)
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
  }

#ifdef ALT_EXCEPTION_STACK
  /*
   * If we are executing from the exception stack then compare against the
   * stack we switched away from as well.  The exception stack is a fixed
   * size so doesn't need to be checked.
   */

  if (alt_exception_old_stack_limit == prev_heap_end)
  {
    if (alt_exception_old_stack_limit <= heap_end)
      alt_report_stack_overflow();

    alt_exception_old_stack_limit = heap_end;
  }
#endif

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8155e8:	e0bffc17 	ldw	r2,-16(fp)
  8155ec:	e0bfff15 	stw	r2,-4(fp)
} 
  8155f0:	e0bfff17 	ldw	r2,-4(fp)
  8155f4:	df000617 	ldw	fp,24(sp)
  8155f8:	dec00704 	addi	sp,sp,28
  8155fc:	f800283a 	ret

00815600 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  815600:	defffd04 	addi	sp,sp,-12
  815604:	dfc00215 	stw	ra,8(sp)
  815608:	df000115 	stw	fp,4(sp)
  81560c:	df000104 	addi	fp,sp,4
  815610:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  815614:	e13fff17 	ldw	r4,-4(fp)
  815618:	08189080 	call	818908 <alt_busy_sleep>
}
  81561c:	dfc00217 	ldw	ra,8(sp)
  815620:	df000117 	ldw	fp,4(sp)
  815624:	dec00304 	addi	sp,sp,12
  815628:	f800283a 	ret

0081562c <write>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  81562c:	defff704 	addi	sp,sp,-36
  815630:	dfc00815 	stw	ra,32(sp)
  815634:	df000715 	stw	fp,28(sp)
  815638:	df000704 	addi	fp,sp,28
  81563c:	e13ff915 	stw	r4,-28(fp)
  815640:	e17ffa15 	stw	r5,-24(fp)
  815644:	e1bffb15 	stw	r6,-20(fp)
  alt_fd*  fd;
  int      rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815648:	e0bff917 	ldw	r2,-28(fp)
  81564c:	1004803a 	cmplt	r2,r2,zero
  815650:	1000091e 	bne	r2,zero,815678 <write+0x4c>
  815654:	e0bff917 	ldw	r2,-28(fp)
  815658:	10800324 	muli	r2,r2,12
  81565c:	e0bfff15 	stw	r2,-4(fp)
  815660:	008020b4 	movhi	r2,130
  815664:	10aaa704 	addi	r2,r2,-21860
  815668:	e0ffff17 	ldw	r3,-4(fp)
  81566c:	1887883a 	add	r3,r3,r2
  815670:	e0ffff15 	stw	r3,-4(fp)
  815674:	00000106 	br	81567c <write+0x50>
  815678:	e03fff15 	stw	zero,-4(fp)
  81567c:	e0bfff17 	ldw	r2,-4(fp)
  815680:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd)
  815684:	e0bffc17 	ldw	r2,-16(fp)
  815688:	1005003a 	cmpeq	r2,r2,zero
  81568c:	1000241e 	bne	r2,zero,815720 <write+0xf4>
  {
    /*
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  815690:	e0bffc17 	ldw	r2,-16(fp)
  815694:	10800217 	ldw	r2,8(r2)
  815698:	108000cc 	andi	r2,r2,3
  81569c:	1005003a 	cmpeq	r2,r2,zero
  8156a0:	10001a1e 	bne	r2,zero,81570c <write+0xe0>
  8156a4:	e0bffc17 	ldw	r2,-16(fp)
  8156a8:	10800017 	ldw	r2,0(r2)
  8156ac:	10800617 	ldw	r2,24(r2)
  8156b0:	1005003a 	cmpeq	r2,r2,zero
  8156b4:	1000151e 	bne	r2,zero,81570c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8156b8:	e0bffc17 	ldw	r2,-16(fp)
  8156bc:	10800017 	ldw	r2,0(r2)
  8156c0:	10800617 	ldw	r2,24(r2)
  8156c4:	e13ffc17 	ldw	r4,-16(fp)
  8156c8:	e17ffa17 	ldw	r5,-24(fp)
  8156cc:	e1bffb17 	ldw	r6,-20(fp)
  8156d0:	103ee83a 	callr	r2
  8156d4:	e0bffd15 	stw	r2,-12(fp)
  8156d8:	e0bffd17 	ldw	r2,-12(fp)
  8156dc:	1004403a 	cmpge	r2,r2,zero
  8156e0:	1000071e 	bne	r2,zero,815700 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  8156e4:	081574c0 	call	81574c <alt_get_errno>
  8156e8:	e0fffd17 	ldw	r3,-12(fp)
  8156ec:	00c7c83a 	sub	r3,zero,r3
  8156f0:	10c00015 	stw	r3,0(r2)
        return -1;
  8156f4:	00ffffc4 	movi	r3,-1
  8156f8:	e0fffe15 	stw	r3,-8(fp)
  8156fc:	00000e06 	br	815738 <write+0x10c>
      }
      return rval;
  815700:	e0bffd17 	ldw	r2,-12(fp)
  815704:	e0bffe15 	stw	r2,-8(fp)
  815708:	00000b06 	br	815738 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  81570c:	081574c0 	call	81574c <alt_get_errno>
  815710:	1007883a 	mov	r3,r2
  815714:	00800344 	movi	r2,13
  815718:	18800015 	stw	r2,0(r3)
  81571c:	00000406 	br	815730 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  815720:	081574c0 	call	81574c <alt_get_errno>
  815724:	1007883a 	mov	r3,r2
  815728:	00801444 	movi	r2,81
  81572c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  815730:	00bfffc4 	movi	r2,-1
  815734:	e0bffe15 	stw	r2,-8(fp)
}
  815738:	e0bffe17 	ldw	r2,-8(fp)
  81573c:	dfc00817 	ldw	ra,32(sp)
  815740:	df000717 	ldw	fp,28(sp)
  815744:	dec00904 	addi	sp,sp,36
  815748:	f800283a 	ret

0081574c <alt_get_errno>:
  81574c:	defffd04 	addi	sp,sp,-12
  815750:	dfc00215 	stw	ra,8(sp)
  815754:	df000115 	stw	fp,4(sp)
  815758:	df000104 	addi	fp,sp,4
  81575c:	d0a01117 	ldw	r2,-32700(gp)
  815760:	1005003a 	cmpeq	r2,r2,zero
  815764:	1000041e 	bne	r2,zero,815778 <alt_get_errno+0x2c>
  815768:	d0a01117 	ldw	r2,-32700(gp)
  81576c:	103ee83a 	callr	r2
  815770:	e0bfff15 	stw	r2,-4(fp)
  815774:	00000206 	br	815780 <alt_get_errno+0x34>
  815778:	d0a02804 	addi	r2,gp,-32608
  81577c:	e0bfff15 	stw	r2,-4(fp)
  815780:	e0bfff17 	ldw	r2,-4(fp)
  815784:	dfc00217 	ldw	ra,8(sp)
  815788:	df000117 	ldw	fp,4(sp)
  81578c:	dec00304 	addi	sp,sp,12
  815790:	f800283a 	ret

00815794 <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  815794:	defffd04 	addi	sp,sp,-12
  815798:	dfc00215 	stw	ra,8(sp)
  81579c:	df000115 	stw	fp,4(sp)
  8157a0:	df000104 	addi	fp,sp,4
  8157a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  8157a8:	08190e80 	call	8190e8 <altera_nios2_irq_init>
  8157ac:	00800044 	movi	r2,1
  8157b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8157b4:	dfc00217 	ldw	ra,8(sp)
  8157b8:	df000117 	ldw	fp,4(sp)
  8157bc:	dec00304 	addi	sp,sp,12
  8157c0:	f800283a 	ret

008157c4 <alt_sys_init>:

/*
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8157c4:	defffd04 	addi	sp,sp,-12
  8157c8:	dfc00215 	stw	ra,8(sp)
  8157cc:	df000115 	stw	fp,4(sp)
  8157d0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8157d4:	01004434 	movhi	r4,272
  8157d8:	21040004 	addi	r4,r4,4096
  8157dc:	000b883a 	mov	r5,zero
  8157e0:	01800084 	movi	r6,2
  8157e4:	01c0fa04 	movi	r7,1000
  8157e8:	08172e80 	call	8172e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8157ec:	010020b4 	movhi	r4,130
  8157f0:	212b1104 	addi	r4,r4,-21436
  8157f4:	000b883a 	mov	r5,zero
  8157f8:	000d883a 	mov	r6,zero
  8157fc:	0815b9c0 	call	815b9c <altera_avalon_jtag_uart_init>
  815800:	010020b4 	movhi	r4,130
  815804:	212b0704 	addi	r4,r4,-21476
  815808:	0815a340 	call	815a34 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
  81580c:	010020b4 	movhi	r4,130
  815810:	212f2904 	addi	r4,r4,-17244
  815814:	08170f00 	call	8170f0 <altera_avalon_lcd_16207_init>
  815818:	010020b4 	movhi	r4,130
  81581c:	212f1f04 	addi	r4,r4,-17284
  815820:	0815a340 	call	815a34 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  815824:	010020b4 	movhi	r4,130
  815828:	212f6704 	addi	r4,r4,-16996
  81582c:	0815a340 	call	815a34 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  815830:	010020b4 	movhi	r4,130
  815834:	212f7404 	addi	r4,r4,-16944
  815838:	0815a340 	call	815a34 <alt_dev_reg>
    ALTERA_UP_AVALON_PIXEL_BUFFER_INIT ( PIXEL_BUFFER_0, pixel_buffer_0);
  81583c:	00c020b4 	movhi	r3,130
  815840:	18ef8004 	addi	r3,r3,-16896
  815844:	008020b4 	movhi	r2,130
  815848:	10af8004 	addi	r2,r2,-16896
  81584c:	10800a17 	ldw	r2,40(r2)
  815850:	10800017 	ldw	r2,0(r2)
  815854:	18800b15 	stw	r2,44(r3)
  815858:	00c020b4 	movhi	r3,130
  81585c:	18ef8004 	addi	r3,r3,-16896
  815860:	008020b4 	movhi	r2,130
  815864:	10af8004 	addi	r2,r2,-16896
  815868:	10800a17 	ldw	r2,40(r2)
  81586c:	10800104 	addi	r2,r2,4
  815870:	10800017 	ldw	r2,0(r2)
  815874:	18800c15 	stw	r2,48(r3)
  815878:	00c020b4 	movhi	r3,130
  81587c:	18ef8004 	addi	r3,r3,-16896
  815880:	008020b4 	movhi	r2,130
  815884:	10af8004 	addi	r2,r2,-16896
  815888:	10800a17 	ldw	r2,40(r2)
  81588c:	10800204 	addi	r2,r2,8
  815890:	10800017 	ldw	r2,0(r2)
  815894:	10bfffcc 	andi	r2,r2,65535
  815898:	18800f15 	stw	r2,60(r3)
  81589c:	00c020b4 	movhi	r3,130
  8158a0:	18ef8004 	addi	r3,r3,-16896
  8158a4:	008020b4 	movhi	r2,130
  8158a8:	10af8004 	addi	r2,r2,-16896
  8158ac:	10800a17 	ldw	r2,40(r2)
  8158b0:	10800204 	addi	r2,r2,8
  8158b4:	10800017 	ldw	r2,0(r2)
  8158b8:	1005d43a 	srai	r2,r2,16
  8158bc:	10bfffcc 	andi	r2,r2,65535
  8158c0:	18801015 	stw	r2,64(r3)
  8158c4:	00c020b4 	movhi	r3,130
  8158c8:	18ef8004 	addi	r3,r3,-16896
  8158cc:	008020b4 	movhi	r2,130
  8158d0:	10af8004 	addi	r2,r2,-16896
  8158d4:	10800a17 	ldw	r2,40(r2)
  8158d8:	10800304 	addi	r2,r2,12
  8158dc:	10800017 	ldw	r2,0(r2)
  8158e0:	1005d07a 	srai	r2,r2,1
  8158e4:	1080004c 	andi	r2,r2,1
  8158e8:	18800d15 	stw	r2,52(r3)
  8158ec:	00c020b4 	movhi	r3,130
  8158f0:	18ef8004 	addi	r3,r3,-16896
  8158f4:	008020b4 	movhi	r2,130
  8158f8:	10af8004 	addi	r2,r2,-16896
  8158fc:	10800a17 	ldw	r2,40(r2)
  815900:	10800304 	addi	r2,r2,12
  815904:	10800017 	ldw	r2,0(r2)
  815908:	1005d13a 	srai	r2,r2,4
  81590c:	108003cc 	andi	r2,r2,15
  815910:	18800e15 	stw	r2,56(r3)
  815914:	008020b4 	movhi	r2,130
  815918:	10af8004 	addi	r2,r2,-16896
  81591c:	10800a17 	ldw	r2,40(r2)
  815920:	10800304 	addi	r2,r2,12
  815924:	10800017 	ldw	r2,0(r2)
  815928:	1005d43a 	srai	r2,r2,16
  81592c:	00ffffc4 	movi	r3,-1
  815930:	10c4703a 	and	r2,r2,r3
  815934:	e0bfff05 	stb	r2,-4(fp)
  815938:	008020b4 	movhi	r2,130
  81593c:	10af8004 	addi	r2,r2,-16896
  815940:	10800a17 	ldw	r2,40(r2)
  815944:	10800304 	addi	r2,r2,12
  815948:	10800017 	ldw	r2,0(r2)
  81594c:	1005d63a 	srai	r2,r2,24
  815950:	00ffffc4 	movi	r3,-1
  815954:	10c4703a 	and	r2,r2,r3
  815958:	e0bfff45 	stb	r2,-3(fp)
  81595c:	008020b4 	movhi	r2,130
  815960:	10af8004 	addi	r2,r2,-16896
  815964:	10800e17 	ldw	r2,56(r2)
  815968:	10800058 	cmpnei	r2,r2,1
  81596c:	1000041e 	bne	r2,zero,815980 <alt_sys_init+0x1bc>
  815970:	008020b4 	movhi	r2,130
  815974:	10af8004 	addi	r2,r2,-16896
  815978:	10001115 	stw	zero,68(r2)
  81597c:	00000e06 	br	8159b8 <alt_sys_init+0x1f4>
  815980:	008020b4 	movhi	r2,130
  815984:	10af8004 	addi	r2,r2,-16896
  815988:	10800e17 	ldw	r2,56(r2)
  81598c:	10800098 	cmpnei	r2,r2,2
  815990:	1000051e 	bne	r2,zero,8159a8 <alt_sys_init+0x1e4>
  815994:	00c020b4 	movhi	r3,130
  815998:	18ef8004 	addi	r3,r3,-16896
  81599c:	00800044 	movi	r2,1
  8159a0:	18801115 	stw	r2,68(r3)
  8159a4:	00000406 	br	8159b8 <alt_sys_init+0x1f4>
  8159a8:	00c020b4 	movhi	r3,130
  8159ac:	18ef8004 	addi	r3,r3,-16896
  8159b0:	00800084 	movi	r2,2
  8159b4:	18801115 	stw	r2,68(r3)
  8159b8:	010020b4 	movhi	r4,130
  8159bc:	212f8004 	addi	r4,r4,-16896
  8159c0:	e0ffff03 	ldbu	r3,-4(fp)
  8159c4:	00800804 	movi	r2,32
  8159c8:	10c7c83a 	sub	r3,r2,r3
  8159cc:	00bfffc4 	movi	r2,-1
  8159d0:	10c4d83a 	srl	r2,r2,r3
  8159d4:	20801215 	stw	r2,72(r4)
  8159d8:	010020b4 	movhi	r4,130
  8159dc:	212f8004 	addi	r4,r4,-16896
  8159e0:	e0ffff03 	ldbu	r3,-4(fp)
  8159e4:	008020b4 	movhi	r2,130
  8159e8:	10af8004 	addi	r2,r2,-16896
  8159ec:	10801117 	ldw	r2,68(r2)
  8159f0:	1885883a 	add	r2,r3,r2
  8159f4:	20801315 	stw	r2,76(r4)
  8159f8:	010020b4 	movhi	r4,130
  8159fc:	212f8004 	addi	r4,r4,-16896
  815a00:	e0ffff43 	ldbu	r3,-3(fp)
  815a04:	00800804 	movi	r2,32
  815a08:	10c7c83a 	sub	r3,r2,r3
  815a0c:	00bfffc4 	movi	r2,-1
  815a10:	10c4d83a 	srl	r2,r2,r3
  815a14:	20801415 	stw	r2,80(r4)
  815a18:	010020b4 	movhi	r4,130
  815a1c:	212f8004 	addi	r4,r4,-16896
  815a20:	0815a340 	call	815a34 <alt_dev_reg>
}
  815a24:	dfc00217 	ldw	ra,8(sp)
  815a28:	df000117 	ldw	fp,4(sp)
  815a2c:	dec00304 	addi	sp,sp,12
  815a30:	f800283a 	ret

00815a34 <alt_dev_reg>:
  815a34:	defffd04 	addi	sp,sp,-12
  815a38:	dfc00215 	stw	ra,8(sp)
  815a3c:	df000115 	stw	fp,4(sp)
  815a40:	df000104 	addi	fp,sp,4
  815a44:	e13fff15 	stw	r4,-4(fp)
  815a48:	e13fff17 	ldw	r4,-4(fp)
  815a4c:	d1600e04 	addi	r5,gp,-32712
  815a50:	0818a500 	call	818a50 <alt_dev_llist_insert>
  815a54:	dfc00217 	ldw	ra,8(sp)
  815a58:	df000117 	ldw	fp,4(sp)
  815a5c:	dec00304 	addi	sp,sp,12
  815a60:	f800283a 	ret

00815a64 <altera_avalon_jtag_uart_read_fd>:
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  815a64:	defffa04 	addi	sp,sp,-24
  815a68:	dfc00515 	stw	ra,20(sp)
  815a6c:	df000415 	stw	fp,16(sp)
  815a70:	df000404 	addi	fp,sp,16
  815a74:	e13ffc15 	stw	r4,-16(fp)
  815a78:	e17ffd15 	stw	r5,-12(fp)
  815a7c:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  815a80:	e0bffc17 	ldw	r2,-16(fp)
  815a84:	10800017 	ldw	r2,0(r2)
  815a88:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  815a8c:	e0bfff17 	ldw	r2,-4(fp)
  815a90:	11000a04 	addi	r4,r2,40
  815a94:	e0bffc17 	ldw	r2,-16(fp)
  815a98:	e17ffd17 	ldw	r5,-12(fp)
  815a9c:	e1bffe17 	ldw	r6,-8(fp)
  815aa0:	11c00217 	ldw	r7,8(r2)
  815aa4:	08160980 	call	816098 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  815aa8:	dfc00517 	ldw	ra,20(sp)
  815aac:	df000417 	ldw	fp,16(sp)
  815ab0:	dec00604 	addi	sp,sp,24
  815ab4:	f800283a 	ret

00815ab8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  815ab8:	defffa04 	addi	sp,sp,-24
  815abc:	dfc00515 	stw	ra,20(sp)
  815ac0:	df000415 	stw	fp,16(sp)
  815ac4:	df000404 	addi	fp,sp,16
  815ac8:	e13ffc15 	stw	r4,-16(fp)
  815acc:	e17ffd15 	stw	r5,-12(fp)
  815ad0:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  815ad4:	e0bffc17 	ldw	r2,-16(fp)
  815ad8:	10800017 	ldw	r2,0(r2)
  815adc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  815ae0:	e0bfff17 	ldw	r2,-4(fp)
  815ae4:	11000a04 	addi	r4,r2,40
  815ae8:	e0bffc17 	ldw	r2,-16(fp)
  815aec:	e17ffd17 	ldw	r5,-12(fp)
  815af0:	e1bffe17 	ldw	r6,-8(fp)
  815af4:	11c00217 	ldw	r7,8(r2)
  815af8:	08162cc0 	call	8162cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  815afc:	dfc00517 	ldw	ra,20(sp)
  815b00:	df000417 	ldw	fp,16(sp)
  815b04:	dec00604 	addi	sp,sp,24
  815b08:	f800283a 	ret

00815b0c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  815b0c:	defffc04 	addi	sp,sp,-16
  815b10:	dfc00315 	stw	ra,12(sp)
  815b14:	df000215 	stw	fp,8(sp)
  815b18:	df000204 	addi	fp,sp,8
  815b1c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  815b20:	e0bffe17 	ldw	r2,-8(fp)
  815b24:	10800017 	ldw	r2,0(r2)
  815b28:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  815b2c:	e0bfff17 	ldw	r2,-4(fp)
  815b30:	11000a04 	addi	r4,r2,40
  815b34:	e0bffe17 	ldw	r2,-8(fp)
  815b38:	11400217 	ldw	r5,8(r2)
  815b3c:	0815f340 	call	815f34 <altera_avalon_jtag_uart_close>
}
  815b40:	dfc00317 	ldw	ra,12(sp)
  815b44:	df000217 	ldw	fp,8(sp)
  815b48:	dec00404 	addi	sp,sp,16
  815b4c:	f800283a 	ret

00815b50 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  815b50:	defffa04 	addi	sp,sp,-24
  815b54:	dfc00515 	stw	ra,20(sp)
  815b58:	df000415 	stw	fp,16(sp)
  815b5c:	df000404 	addi	fp,sp,16
  815b60:	e13ffc15 	stw	r4,-16(fp)
  815b64:	e17ffd15 	stw	r5,-12(fp)
  815b68:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  815b6c:	e0bffc17 	ldw	r2,-16(fp)
  815b70:	10800017 	ldw	r2,0(r2)
  815b74:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  815b78:	e0bfff17 	ldw	r2,-4(fp)
  815b7c:	11000a04 	addi	r4,r2,40
  815b80:	e17ffd17 	ldw	r5,-12(fp)
  815b84:	e1bffe17 	ldw	r6,-8(fp)
  815b88:	0815fa00 	call	815fa0 <altera_avalon_jtag_uart_ioctl>
}
  815b8c:	dfc00517 	ldw	ra,20(sp)
  815b90:	df000417 	ldw	fp,16(sp)
  815b94:	dec00604 	addi	sp,sp,24
  815b98:	f800283a 	ret

00815b9c <altera_avalon_jtag_uart_init>:
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  815b9c:	defff704 	addi	sp,sp,-36
  815ba0:	dfc00815 	stw	ra,32(sp)
  815ba4:	df000715 	stw	fp,28(sp)
  815ba8:	df000704 	addi	fp,sp,28
  815bac:	e13ff915 	stw	r4,-28(fp)
  815bb0:	e17ffa15 	stw	r5,-24(fp)
  815bb4:	e1bffb15 	stw	r6,-20(fp)
  815bb8:	e03ffc15 	stw	zero,-16(fp)
  815bbc:	e03ffd15 	stw	zero,-12(fp)
  815bc0:	e03ffe15 	stw	zero,-8(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  815bc4:	e0fff917 	ldw	r3,-28(fp)
  815bc8:	00800044 	movi	r2,1
  815bcc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  815bd0:	e0bff917 	ldw	r2,-28(fp)
  815bd4:	10800017 	ldw	r2,0(r2)
  815bd8:	10800104 	addi	r2,r2,4
  815bdc:	1007883a 	mov	r3,r2
  815be0:	e0bff917 	ldw	r2,-28(fp)
  815be4:	10800817 	ldw	r2,32(r2)
  815be8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  815bec:	e13ffb17 	ldw	r4,-20(fp)
  815bf0:	e17ff917 	ldw	r5,-28(fp)
  815bf4:	01802074 	movhi	r6,129
  815bf8:	31971504 	addi	r6,r6,23636
  815bfc:	08149f80 	call	8149f8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  815c00:	e0bff917 	ldw	r2,-28(fp)
  815c04:	10000915 	stw	zero,36(r2)
  815c08:	d0a01917 	ldw	r2,-32668(gp)
  815c0c:	e0bfff15 	stw	r2,-4(fp)
  815c10:	e17fff17 	ldw	r5,-4(fp)
  815c14:	e0bff917 	ldw	r2,-28(fp)
  815c18:	11000204 	addi	r4,r2,8
  815c1c:	01802074 	movhi	r6,129
  815c20:	31979d04 	addi	r6,r6,24180
  815c24:	e1fff917 	ldw	r7,-28(fp)
  815c28:	08187b40 	call	8187b4 <alt_alarm_start>
  815c2c:	1004403a 	cmpge	r2,r2,zero
  815c30:	1000041e 	bne	r2,zero,815c44 <altera_avalon_jtag_uart_init+0xa8>

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  815c34:	e0fff917 	ldw	r3,-28(fp)
  815c38:	00a00034 	movhi	r2,32768
  815c3c:	10bfffc4 	addi	r2,r2,-1
  815c40:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  815c44:	dfc00817 	ldw	ra,32(sp)
  815c48:	df000717 	ldw	fp,28(sp)
  815c4c:	dec00904 	addi	sp,sp,36
  815c50:	f800283a 	ret

00815c54 <altera_avalon_jtag_uart_irq>:

/*
 * Interrupt routine
 */ 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  815c54:	defff704 	addi	sp,sp,-36
  815c58:	df000815 	stw	fp,32(sp)
  815c5c:	df000804 	addi	fp,sp,32
  815c60:	e13ff815 	stw	r4,-32(fp)
  815c64:	e17ff915 	stw	r5,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  815c68:	e0bff817 	ldw	r2,-32(fp)
  815c6c:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  815c70:	e0bffa17 	ldw	r2,-24(fp)
  815c74:	10800017 	ldw	r2,0(r2)
  815c78:	e0bffb15 	stw	r2,-20(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815c7c:	e0bffb17 	ldw	r2,-20(fp)
  815c80:	10800104 	addi	r2,r2,4
  815c84:	10800037 	ldwio	r2,0(r2)
  815c88:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  815c8c:	e0bffc17 	ldw	r2,-16(fp)
  815c90:	1080c00c 	andi	r2,r2,768
  815c94:	1004c03a 	cmpne	r2,r2,zero
  815c98:	1000011e 	bne	r2,zero,815ca0 <altera_avalon_jtag_uart_irq+0x4c>
      break;
  815c9c:	00007206 	br	815e68 <altera_avalon_jtag_uart_irq+0x214>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  815ca0:	e0bffc17 	ldw	r2,-16(fp)
  815ca4:	1080400c 	andi	r2,r2,256
  815ca8:	1005003a 	cmpeq	r2,r2,zero
  815cac:	1000371e 	bne	r2,zero,815d8c <altera_avalon_jtag_uart_irq+0x138>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  815cb0:	00800074 	movhi	r2,1
  815cb4:	10800004 	addi	r2,r2,0
  815cb8:	e0bffd15 	stw	r2,-12(fp)

      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815cbc:	e0bffa17 	ldw	r2,-24(fp)
  815cc0:	10800a17 	ldw	r2,40(r2)
  815cc4:	10800044 	addi	r2,r2,1
  815cc8:	1081ffcc 	andi	r2,r2,2047
  815ccc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  815cd0:	e0bffa17 	ldw	r2,-24(fp)
  815cd4:	10c00b17 	ldw	r3,44(r2)
  815cd8:	e0bffe17 	ldw	r2,-8(fp)
  815cdc:	1880011e 	bne	r3,r2,815ce4 <altera_avalon_jtag_uart_irq+0x90>
          break;
  815ce0:	00001706 	br	815d40 <altera_avalon_jtag_uart_irq+0xec>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  815ce4:	e0bffb17 	ldw	r2,-20(fp)
  815ce8:	10800037 	ldwio	r2,0(r2)
  815cec:	e0bffd15 	stw	r2,-12(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  815cf0:	e0bffd17 	ldw	r2,-12(fp)
  815cf4:	10a0000c 	andi	r2,r2,32768
  815cf8:	1004c03a 	cmpne	r2,r2,zero
  815cfc:	1000011e 	bne	r2,zero,815d04 <altera_avalon_jtag_uart_irq+0xb0>
          break;
  815d00:	00000f06 	br	815d40 <altera_avalon_jtag_uart_irq+0xec>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  815d04:	e0fffa17 	ldw	r3,-24(fp)
  815d08:	e0bffa17 	ldw	r2,-24(fp)
  815d0c:	10800a17 	ldw	r2,40(r2)
  815d10:	1885883a 	add	r2,r3,r2
  815d14:	10c00e04 	addi	r3,r2,56
  815d18:	e0bffd17 	ldw	r2,-12(fp)
  815d1c:	18800005 	stb	r2,0(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815d20:	e0fffa17 	ldw	r3,-24(fp)
  815d24:	e0bffa17 	ldw	r2,-24(fp)
  815d28:	10800a17 	ldw	r2,40(r2)
  815d2c:	10800044 	addi	r2,r2,1
  815d30:	1081ffcc 	andi	r2,r2,2047
  815d34:	18800a15 	stw	r2,40(r3)
  815d38:	e03fff15 	stw	zero,-4(fp)
  815d3c:	003fdf06 	br	815cbc <altera_avalon_jtag_uart_irq+0x68>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  815d40:	e0bffd17 	ldw	r2,-12(fp)
  815d44:	10bfffec 	andhi	r2,r2,65535
  815d48:	1005003a 	cmpeq	r2,r2,zero
  815d4c:	10000f1e 	bne	r2,zero,815d8c <altera_avalon_jtag_uart_irq+0x138>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  815d50:	e13ffa17 	ldw	r4,-24(fp)
  815d54:	e0bffa17 	ldw	r2,-24(fp)
  815d58:	10c00817 	ldw	r3,32(r2)
  815d5c:	00bfff84 	movi	r2,-2
  815d60:	1884703a 	and	r2,r3,r2
  815d64:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  815d68:	e0bffb17 	ldw	r2,-20(fp)
  815d6c:	10800104 	addi	r2,r2,4
  815d70:	1007883a 	mov	r3,r2
  815d74:	e0bffa17 	ldw	r2,-24(fp)
  815d78:	10800817 	ldw	r2,32(r2)
  815d7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815d80:	e0bffb17 	ldw	r2,-20(fp)
  815d84:	10800104 	addi	r2,r2,4
  815d88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  815d8c:	e0bffc17 	ldw	r2,-16(fp)
  815d90:	1080800c 	andi	r2,r2,512
  815d94:	1005003a 	cmpeq	r2,r2,zero
  815d98:	103fb81e 	bne	r2,zero,815c7c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  815d9c:	e0bffc17 	ldw	r2,-16(fp)
  815da0:	10bfffec 	andhi	r2,r2,65535
  815da4:	1004d43a 	srli	r2,r2,16
  815da8:	e0bfff15 	stw	r2,-4(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  815dac:	e0bfff17 	ldw	r2,-4(fp)
  815db0:	1005003a 	cmpeq	r2,r2,zero
  815db4:	1000181e 	bne	r2,zero,815e18 <altera_avalon_jtag_uart_irq+0x1c4>
  815db8:	e0bffa17 	ldw	r2,-24(fp)
  815dbc:	e0fffa17 	ldw	r3,-24(fp)
  815dc0:	11000d17 	ldw	r4,52(r2)
  815dc4:	18800c17 	ldw	r2,48(r3)
  815dc8:	20801326 	beq	r4,r2,815e18 <altera_avalon_jtag_uart_irq+0x1c4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  815dcc:	e13ffb17 	ldw	r4,-20(fp)
  815dd0:	e0fffa17 	ldw	r3,-24(fp)
  815dd4:	e0bffa17 	ldw	r2,-24(fp)
  815dd8:	10800d17 	ldw	r2,52(r2)
  815ddc:	1885883a 	add	r2,r3,r2
  815de0:	10820e04 	addi	r2,r2,2104
  815de4:	10800007 	ldb	r2,0(r2)
  815de8:	20800035 	stwio	r2,0(r4)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815dec:	e0fffa17 	ldw	r3,-24(fp)
  815df0:	e0bffa17 	ldw	r2,-24(fp)
  815df4:	10800d17 	ldw	r2,52(r2)
  815df8:	10800044 	addi	r2,r2,1
  815dfc:	1081ffcc 	andi	r2,r2,2047
  815e00:	18800d15 	stw	r2,52(r3)
  815e04:	e03ffe15 	stw	zero,-8(fp)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  815e08:	e0bfff17 	ldw	r2,-4(fp)
  815e0c:	10bfffc4 	addi	r2,r2,-1
  815e10:	e0bfff15 	stw	r2,-4(fp)
  815e14:	003fe506 	br	815dac <altera_avalon_jtag_uart_irq+0x158>
      }

      if (space > 0)
  815e18:	e0bfff17 	ldw	r2,-4(fp)
  815e1c:	1005003a 	cmpeq	r2,r2,zero
  815e20:	103f961e 	bne	r2,zero,815c7c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  815e24:	e13ffa17 	ldw	r4,-24(fp)
  815e28:	e0bffa17 	ldw	r2,-24(fp)
  815e2c:	10c00817 	ldw	r3,32(r2)
  815e30:	00bfff44 	movi	r2,-3
  815e34:	1884703a 	and	r2,r3,r2
  815e38:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  815e3c:	e0bffa17 	ldw	r2,-24(fp)
  815e40:	10800017 	ldw	r2,0(r2)
  815e44:	10800104 	addi	r2,r2,4
  815e48:	1007883a 	mov	r3,r2
  815e4c:	e0bffa17 	ldw	r2,-24(fp)
  815e50:	10800817 	ldw	r2,32(r2)
  815e54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815e58:	e0bffb17 	ldw	r2,-20(fp)
  815e5c:	10800104 	addi	r2,r2,4
  815e60:	10800037 	ldwio	r2,0(r2)
  815e64:	003f8506 	br	815c7c <altera_avalon_jtag_uart_irq+0x28>
      }
    }
  }
}
  815e68:	df000817 	ldw	fp,32(sp)
  815e6c:	dec00904 	addi	sp,sp,36
  815e70:	f800283a 	ret

00815e74 <altera_avalon_jtag_uart_timeout>:

/*
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  815e74:	defffb04 	addi	sp,sp,-20
  815e78:	df000415 	stw	fp,16(sp)
  815e7c:	df000404 	addi	fp,sp,16
  815e80:	e13ffc15 	stw	r4,-16(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  815e84:	e0bffc17 	ldw	r2,-16(fp)
  815e88:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  815e8c:	e0bffd17 	ldw	r2,-12(fp)
  815e90:	10800017 	ldw	r2,0(r2)
  815e94:	10800104 	addi	r2,r2,4
  815e98:	10800037 	ldwio	r2,0(r2)
  815e9c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  815ea0:	e0bffe17 	ldw	r2,-8(fp)
  815ea4:	1081000c 	andi	r2,r2,1024
  815ea8:	1005003a 	cmpeq	r2,r2,zero
  815eac:	10000b1e 	bne	r2,zero,815edc <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  815eb0:	e0bffd17 	ldw	r2,-12(fp)
  815eb4:	10800017 	ldw	r2,0(r2)
  815eb8:	10800104 	addi	r2,r2,4
  815ebc:	1007883a 	mov	r3,r2
  815ec0:	e0bffd17 	ldw	r2,-12(fp)
  815ec4:	10800817 	ldw	r2,32(r2)
  815ec8:	10810014 	ori	r2,r2,1024
  815ecc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  815ed0:	e0bffd17 	ldw	r2,-12(fp)
  815ed4:	10000915 	stw	zero,36(r2)
  815ed8:	00001006 	br	815f1c <altera_avalon_jtag_uart_timeout+0xa8>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  815edc:	e0bffd17 	ldw	r2,-12(fp)
  815ee0:	10c00917 	ldw	r3,36(r2)
  815ee4:	00a00034 	movhi	r2,32768
  815ee8:	10bfff04 	addi	r2,r2,-4
  815eec:	10c00b36 	bltu	r2,r3,815f1c <altera_avalon_jtag_uart_timeout+0xa8>
    sp->host_inactive++;
  815ef0:	e0fffd17 	ldw	r3,-12(fp)
  815ef4:	e0bffd17 	ldw	r2,-12(fp)
  815ef8:	10800917 	ldw	r2,36(r2)
  815efc:	10800044 	addi	r2,r2,1
  815f00:	18800915 	stw	r2,36(r3)
    
    if (sp->host_inactive >= sp->timeout) {
  815f04:	e0bffd17 	ldw	r2,-12(fp)
  815f08:	e0fffd17 	ldw	r3,-12(fp)
  815f0c:	11000917 	ldw	r4,36(r2)
  815f10:	18800117 	ldw	r2,4(r3)
  815f14:	20800136 	bltu	r4,r2,815f1c <altera_avalon_jtag_uart_timeout+0xa8>
  815f18:	e03fff15 	stw	zero,-4(fp)
  815f1c:	d0a01917 	ldw	r2,-32668(gp)
  815f20:	e0bfff15 	stw	r2,-4(fp)
  815f24:	e0bfff17 	ldw	r2,-4(fp)
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  815f28:	df000417 	ldw	fp,16(sp)
  815f2c:	dec00504 	addi	sp,sp,20
  815f30:	f800283a 	ret

00815f34 <altera_avalon_jtag_uart_close>:

/*
 * The close() routine is implemented to drain the JTAG UART transmit buffer
 * when not in "small" mode. This routine will wait for transimt data to be
 * emptied unless a timeout from host-activity occurs. If the driver flags
 * have been set to non-blocking mode, this routine will exit immediately if
 * any data remains. This routine should be called indirectly (i.e. though
 * the C library close() routine) so that the file descriptor associated 
 * with the relevant stream (i.e. stdout) can be closed as well. This routine
 * does not manage file descriptors.
 * 
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  815f34:	defffc04 	addi	sp,sp,-16
  815f38:	df000315 	stw	fp,12(sp)
  815f3c:	df000304 	addi	fp,sp,12
  815f40:	e13ffd15 	stw	r4,-12(fp)
  815f44:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  815f48:	e0bffd17 	ldw	r2,-12(fp)
  815f4c:	e0fffd17 	ldw	r3,-12(fp)
  815f50:	11000d17 	ldw	r4,52(r2)
  815f54:	18800c17 	ldw	r2,48(r3)
  815f58:	20800c26 	beq	r4,r2,815f8c <altera_avalon_jtag_uart_close+0x58>
  815f5c:	e0bffd17 	ldw	r2,-12(fp)
  815f60:	e0fffd17 	ldw	r3,-12(fp)
  815f64:	11000917 	ldw	r4,36(r2)
  815f68:	18800117 	ldw	r2,4(r3)
  815f6c:	2080072e 	bgeu	r4,r2,815f8c <altera_avalon_jtag_uart_close+0x58>
    if (flags & O_NONBLOCK) {
  815f70:	e0bffe17 	ldw	r2,-8(fp)
  815f74:	1090000c 	andi	r2,r2,16384
  815f78:	1005003a 	cmpeq	r2,r2,zero
  815f7c:	103ff21e 	bne	r2,zero,815f48 <altera_avalon_jtag_uart_close+0x14>
      return -EWOULDBLOCK; 
  815f80:	00bffd44 	movi	r2,-11
  815f84:	e0bfff15 	stw	r2,-4(fp)
  815f88:	00000106 	br	815f90 <altera_avalon_jtag_uart_close+0x5c>
    }
  }

  return 0;
  815f8c:	e03fff15 	stw	zero,-4(fp)
}
  815f90:	e0bfff17 	ldw	r2,-4(fp)
  815f94:	df000317 	ldw	fp,12(sp)
  815f98:	dec00404 	addi	sp,sp,16
  815f9c:	f800283a 	ret

00815fa0 <altera_avalon_jtag_uart_ioctl>:

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  815fa0:	defff704 	addi	sp,sp,-36
  815fa4:	df000815 	stw	fp,32(sp)
  815fa8:	df000804 	addi	fp,sp,32
  815fac:	e13ff815 	stw	r4,-32(fp)
  815fb0:	e17ff915 	stw	r5,-28(fp)
  815fb4:	e1bffa15 	stw	r6,-24(fp)
  int rc = -ENOTTY;
  815fb8:	00bff9c4 	movi	r2,-25
  815fbc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  815fc0:	e0bff917 	ldw	r2,-28(fp)
  815fc4:	e0bfff15 	stw	r2,-4(fp)
  815fc8:	e0ffff17 	ldw	r3,-4(fp)
  815fcc:	189a8060 	cmpeqi	r2,r3,27137
  815fd0:	1000041e 	bne	r2,zero,815fe4 <altera_avalon_jtag_uart_ioctl+0x44>
  815fd4:	e0ffff17 	ldw	r3,-4(fp)
  815fd8:	189a80a0 	cmpeqi	r2,r3,27138
  815fdc:	10001d1e 	bne	r2,zero,816054 <altera_avalon_jtag_uart_ioctl+0xb4>
  815fe0:	00002906 	br	816088 <altera_avalon_jtag_uart_ioctl+0xe8>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  815fe4:	e0bff817 	ldw	r2,-32(fp)
  815fe8:	10c00117 	ldw	r3,4(r2)
  815fec:	00a00034 	movhi	r2,32768
  815ff0:	10bfffc4 	addi	r2,r2,-1
  815ff4:	18802426 	beq	r3,r2,816088 <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      int timeout = *((int *)arg);
  815ff8:	e0bffa17 	ldw	r2,-24(fp)
  815ffc:	10800017 	ldw	r2,0(r2)
  816000:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  816004:	e0bff817 	ldw	r2,-32(fp)
  816008:	e0bffd15 	stw	r2,-12(fp)
  81600c:	e0bffc17 	ldw	r2,-16(fp)
  816010:	10800090 	cmplti	r2,r2,2
  816014:	1000071e 	bne	r2,zero,816034 <altera_avalon_jtag_uart_ioctl+0x94>
  816018:	e0fffc17 	ldw	r3,-16(fp)
  81601c:	00a00034 	movhi	r2,32768
  816020:	10bfffc4 	addi	r2,r2,-1
  816024:	18800326 	beq	r3,r2,816034 <altera_avalon_jtag_uart_ioctl+0x94>
  816028:	e0fffc17 	ldw	r3,-16(fp)
  81602c:	e0fffe15 	stw	r3,-8(fp)
  816030:	00000306 	br	816040 <altera_avalon_jtag_uart_ioctl+0xa0>
  816034:	00a00034 	movhi	r2,32768
  816038:	10bfff84 	addi	r2,r2,-2
  81603c:	e0bffe15 	stw	r2,-8(fp)
  816040:	e0fffe17 	ldw	r3,-8(fp)
  816044:	e0bffd17 	ldw	r2,-12(fp)
  816048:	10c00115 	stw	r3,4(r2)
      rc = 0;
  81604c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  816050:	00000d06 	br	816088 <altera_avalon_jtag_uart_ioctl+0xe8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  816054:	e0bff817 	ldw	r2,-32(fp)
  816058:	10c00117 	ldw	r3,4(r2)
  81605c:	00a00034 	movhi	r2,32768
  816060:	10bfffc4 	addi	r2,r2,-1
  816064:	18800826 	beq	r3,r2,816088 <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  816068:	e17ffa17 	ldw	r5,-24(fp)
  81606c:	e0bff817 	ldw	r2,-32(fp)
  816070:	e0fff817 	ldw	r3,-32(fp)
  816074:	11000917 	ldw	r4,36(r2)
  816078:	18800117 	ldw	r2,4(r3)
  81607c:	2085803a 	cmpltu	r2,r4,r2
  816080:	28800015 	stw	r2,0(r5)
      rc = 0;
  816084:	e03ffb15 	stw	zero,-20(fp)
    }
    break;

  default:
    break;
  }

  return rc;
  816088:	e0bffb17 	ldw	r2,-20(fp)
}
  81608c:	df000817 	ldw	fp,32(sp)
  816090:	dec00904 	addi	sp,sp,36
  816094:	f800283a 	ret

00816098 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  816098:	defff204 	addi	sp,sp,-56
  81609c:	dfc00d15 	stw	ra,52(sp)
  8160a0:	df000c15 	stw	fp,48(sp)
  8160a4:	df000c04 	addi	fp,sp,48
  8160a8:	e13ff415 	stw	r4,-48(fp)
  8160ac:	e17ff515 	stw	r5,-44(fp)
  8160b0:	e1bff615 	stw	r6,-40(fp)
  8160b4:	e1fff715 	stw	r7,-36(fp)
  char * ptr = buffer;
  8160b8:	e0bff517 	ldw	r2,-44(fp)
  8160bc:	e0bff815 	stw	r2,-32(fp)
  8160c0:	e03ffb15 	stw	zero,-20(fp)

  alt_irq_context context;
  unsigned int n;

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8160c4:	e0bff617 	ldw	r2,-40(fp)
  8160c8:	10800050 	cmplti	r2,r2,1
  8160cc:	10004b1e 	bne	r2,zero,8161fc <altera_avalon_jtag_uart_read+0x164>
  {
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8160d0:	e0bff417 	ldw	r2,-48(fp)
  8160d4:	10800a17 	ldw	r2,40(r2)
  8160d8:	e0bffc15 	stw	r2,-16(fp)
      out = sp->rx_out;
  8160dc:	e0bff417 	ldw	r2,-48(fp)
  8160e0:	10800b17 	ldw	r2,44(r2)
  8160e4:	e0bffd15 	stw	r2,-12(fp)

      if (in >= out)
  8160e8:	e0fffc17 	ldw	r3,-16(fp)
  8160ec:	e0bffd17 	ldw	r2,-12(fp)
  8160f0:	18800536 	bltu	r3,r2,816108 <altera_avalon_jtag_uart_read+0x70>
        n = in - out;
  8160f4:	e0bffc17 	ldw	r2,-16(fp)
  8160f8:	e0fffd17 	ldw	r3,-12(fp)
  8160fc:	10c5c83a 	sub	r2,r2,r3
  816100:	e0bffa15 	stw	r2,-24(fp)
  816104:	00000406 	br	816118 <altera_avalon_jtag_uart_read+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  816108:	00820004 	movi	r2,2048
  81610c:	e0fffd17 	ldw	r3,-12(fp)
  816110:	10c5c83a 	sub	r2,r2,r3
  816114:	e0bffa15 	stw	r2,-24(fp)

      if (n == 0)
  816118:	e0bffa17 	ldw	r2,-24(fp)
  81611c:	1004c03a 	cmpne	r2,r2,zero
  816120:	1000011e 	bne	r2,zero,816128 <altera_avalon_jtag_uart_read+0x90>
        break; /* No more data available */
  816124:	00001e06 	br	8161a0 <altera_avalon_jtag_uart_read+0x108>

      if (n > space)
  816128:	e0fff617 	ldw	r3,-40(fp)
  81612c:	e0bffa17 	ldw	r2,-24(fp)
  816130:	1880022e 	bgeu	r3,r2,81613c <altera_avalon_jtag_uart_read+0xa4>
        n = space;
  816134:	e0bff617 	ldw	r2,-40(fp)
  816138:	e0bffa15 	stw	r2,-24(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  81613c:	e0fff417 	ldw	r3,-48(fp)
  816140:	e0bffd17 	ldw	r2,-12(fp)
  816144:	1885883a 	add	r2,r3,r2
  816148:	11400e04 	addi	r5,r2,56
  81614c:	e13ff817 	ldw	r4,-32(fp)
  816150:	e1bffa17 	ldw	r6,-24(fp)
  816154:	080d65c0 	call	80d65c <memcpy>
      ptr   += n;
  816158:	e0fff817 	ldw	r3,-32(fp)
  81615c:	e0bffa17 	ldw	r2,-24(fp)
  816160:	1885883a 	add	r2,r3,r2
  816164:	e0bff815 	stw	r2,-32(fp)
      space -= n;
  816168:	e0fff617 	ldw	r3,-40(fp)
  81616c:	e0bffa17 	ldw	r2,-24(fp)
  816170:	1885c83a 	sub	r2,r3,r2
  816174:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  816178:	e13ff417 	ldw	r4,-48(fp)
  81617c:	e0fffd17 	ldw	r3,-12(fp)
  816180:	e0bffa17 	ldw	r2,-24(fp)
  816184:	1885883a 	add	r2,r3,r2
  816188:	1081ffcc 	andi	r2,r2,2047
  81618c:	20800b15 	stw	r2,44(r4)
    }
  816190:	e0bff617 	ldw	r2,-40(fp)
  816194:	10800050 	cmplti	r2,r2,1
  816198:	1000011e 	bne	r2,zero,8161a0 <altera_avalon_jtag_uart_read+0x108>
  81619c:	003fcc06 	br	8160d0 <altera_avalon_jtag_uart_read+0x38>
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8161a0:	e0fff817 	ldw	r3,-32(fp)
  8161a4:	e0bff517 	ldw	r2,-44(fp)
  8161a8:	18800126 	beq	r3,r2,8161b0 <altera_avalon_jtag_uart_read+0x118>
      break;
  8161ac:	00001306 	br	8161fc <altera_avalon_jtag_uart_read+0x164>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8161b0:	e0bff717 	ldw	r2,-36(fp)
  8161b4:	1090000c 	andi	r2,r2,16384
  8161b8:	1005003a 	cmpeq	r2,r2,zero
  8161bc:	1000011e 	bne	r2,zero,8161c4 <altera_avalon_jtag_uart_read+0x12c>
      break;
  8161c0:	00000e06 	br	8161fc <altera_avalon_jtag_uart_read+0x164>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
      /*
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
                     ALT_JTAG_UART_READ_RDY | ALT_JTAG_UART_TIMEOUT,
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8161c4:	e0bff417 	ldw	r2,-48(fp)
  8161c8:	10c00a17 	ldw	r3,40(r2)
  8161cc:	e0bffc17 	ldw	r2,-16(fp)
  8161d0:	1880061e 	bne	r3,r2,8161ec <altera_avalon_jtag_uart_read+0x154>
  8161d4:	e0bff417 	ldw	r2,-48(fp)
  8161d8:	e0fff417 	ldw	r3,-48(fp)
  8161dc:	11000917 	ldw	r4,36(r2)
  8161e0:	18800117 	ldw	r2,4(r3)
  8161e4:	2080012e 	bgeu	r4,r2,8161ec <altera_avalon_jtag_uart_read+0x154>
  8161e8:	003ff606 	br	8161c4 <altera_avalon_jtag_uart_read+0x12c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8161ec:	e0bff417 	ldw	r2,-48(fp)
  8161f0:	10c00a17 	ldw	r3,40(r2)
  8161f4:	e0bffc17 	ldw	r2,-16(fp)
  8161f8:	18bfb21e 	bne	r3,r2,8160c4 <altera_avalon_jtag_uart_read+0x2c>
  8161fc:	e03ffd15 	stw	zero,-12(fp)
      break;
  }

  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  816200:	e0fff817 	ldw	r3,-32(fp)
  816204:	e0bff517 	ldw	r2,-44(fp)
  816208:	18801a26 	beq	r3,r2,816274 <altera_avalon_jtag_uart_read+0x1dc>
  81620c:	0005303a 	rdctl	r2,status
  816210:	e0bffe15 	stw	r2,-8(fp)
  816214:	e0fffe17 	ldw	r3,-8(fp)
  816218:	00bfff84 	movi	r2,-2
  81621c:	1884703a 	and	r2,r3,r2
  816220:	1001703a 	wrctl	status,r2
  816224:	e0bffe17 	ldw	r2,-8(fp)
  816228:	e0bffc15 	stw	r2,-16(fp)
  81622c:	e0bffc17 	ldw	r2,-16(fp)
  816230:	e0bff915 	stw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  816234:	e0fff417 	ldw	r3,-48(fp)
  816238:	e0bff417 	ldw	r2,-48(fp)
  81623c:	10800817 	ldw	r2,32(r2)
  816240:	10800054 	ori	r2,r2,1
  816244:	18800815 	stw	r2,32(r3)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  816248:	e0bff417 	ldw	r2,-48(fp)
  81624c:	10800017 	ldw	r2,0(r2)
  816250:	10800104 	addi	r2,r2,4
  816254:	1007883a 	mov	r3,r2
  816258:	e0bff417 	ldw	r2,-48(fp)
  81625c:	10800817 	ldw	r2,32(r2)
  816260:	18800035 	stwio	r2,0(r3)
  816264:	e0bff917 	ldw	r2,-28(fp)
  816268:	e0bffe15 	stw	r2,-8(fp)
  81626c:	e0bffe17 	ldw	r2,-8(fp)
  816270:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  816274:	e0fff817 	ldw	r3,-32(fp)
  816278:	e0bff517 	ldw	r2,-44(fp)
  81627c:	18800526 	beq	r3,r2,816294 <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
  816280:	e0bff817 	ldw	r2,-32(fp)
  816284:	e0fff517 	ldw	r3,-44(fp)
  816288:	10c5c83a 	sub	r2,r2,r3
  81628c:	e0bfff15 	stw	r2,-4(fp)
  816290:	00000906 	br	8162b8 <altera_avalon_jtag_uart_read+0x220>
  else if (flags & O_NONBLOCK)
  816294:	e0bff717 	ldw	r2,-36(fp)
  816298:	1090000c 	andi	r2,r2,16384
  81629c:	1005003a 	cmpeq	r2,r2,zero
  8162a0:	1000031e 	bne	r2,zero,8162b0 <altera_avalon_jtag_uart_read+0x218>
    return -EWOULDBLOCK;
  8162a4:	00bffd44 	movi	r2,-11
  8162a8:	e0bfff15 	stw	r2,-4(fp)
  8162ac:	00000206 	br	8162b8 <altera_avalon_jtag_uart_read+0x220>
  else
    return -EIO;
  8162b0:	00bffec4 	movi	r2,-5
  8162b4:	e0bfff15 	stw	r2,-4(fp)
}
  8162b8:	e0bfff17 	ldw	r2,-4(fp)
  8162bc:	dfc00d17 	ldw	ra,52(sp)
  8162c0:	df000c17 	ldw	fp,48(sp)
  8162c4:	dec00e04 	addi	sp,sp,56
  8162c8:	f800283a 	ret

008162cc <altera_avalon_jtag_uart_write>:

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8162cc:	defff104 	addi	sp,sp,-60
  8162d0:	dfc00e15 	stw	ra,56(sp)
  8162d4:	df000d15 	stw	fp,52(sp)
  8162d8:	df000d04 	addi	fp,sp,52
  8162dc:	e13ff315 	stw	r4,-52(fp)
  8162e0:	e17ff415 	stw	r5,-48(fp)
  8162e4:	e1bff515 	stw	r6,-44(fp)
  8162e8:	e1fff615 	stw	r7,-40(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8162ec:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8162f0:	e0bff417 	ldw	r2,-48(fp)
  8162f4:	e0bffb15 	stw	r2,-20(fp)
  8162f8:	e03ffc15 	stw	zero,-16(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8162fc:	e0bff517 	ldw	r2,-44(fp)
  816300:	10800050 	cmplti	r2,r2,1
  816304:	10003a1e 	bne	r2,zero,8163f0 <altera_avalon_jtag_uart_write+0x124>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  816308:	e0bff317 	ldw	r2,-52(fp)
  81630c:	10800c17 	ldw	r2,48(r2)
  816310:	e0bff715 	stw	r2,-36(fp)
      out = sp->tx_out;
  816314:	e0bff317 	ldw	r2,-52(fp)
  816318:	10800d17 	ldw	r2,52(r2)
  81631c:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  816320:	e0fff717 	ldw	r3,-36(fp)
  816324:	e0bff817 	ldw	r2,-32(fp)
  816328:	1880062e 	bgeu	r3,r2,816344 <altera_avalon_jtag_uart_write+0x78>
        n = out - 1 - in;
  81632c:	e0fff817 	ldw	r3,-32(fp)
  816330:	e0bff717 	ldw	r2,-36(fp)
  816334:	1885c83a 	sub	r2,r3,r2
  816338:	10bfffc4 	addi	r2,r2,-1
  81633c:	e0bff915 	stw	r2,-28(fp)
  816340:	00000c06 	br	816374 <altera_avalon_jtag_uart_write+0xa8>
      else if (out > 0)
  816344:	e0bff817 	ldw	r2,-32(fp)
  816348:	1005003a 	cmpeq	r2,r2,zero
  81634c:	1000051e 	bne	r2,zero,816364 <altera_avalon_jtag_uart_write+0x98>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  816350:	00820004 	movi	r2,2048
  816354:	e0fff717 	ldw	r3,-36(fp)
  816358:	10c5c83a 	sub	r2,r2,r3
  81635c:	e0bff915 	stw	r2,-28(fp)
  816360:	00000406 	br	816374 <altera_avalon_jtag_uart_write+0xa8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  816364:	0081ffc4 	movi	r2,2047
  816368:	e0fff717 	ldw	r3,-36(fp)
  81636c:	10c5c83a 	sub	r2,r2,r3
  816370:	e0bff915 	stw	r2,-28(fp)

      if (n == 0)
  816374:	e0bff917 	ldw	r2,-28(fp)
  816378:	1004c03a 	cmpne	r2,r2,zero
  81637c:	1000011e 	bne	r2,zero,816384 <altera_avalon_jtag_uart_write+0xb8>
        break;
  816380:	00001b06 	br	8163f0 <altera_avalon_jtag_uart_write+0x124>

      if (n > count)
  816384:	e0fff517 	ldw	r3,-44(fp)
  816388:	e0bff917 	ldw	r2,-28(fp)
  81638c:	1880022e 	bgeu	r3,r2,816398 <altera_avalon_jtag_uart_write+0xcc>
        n = count;
  816390:	e0bff517 	ldw	r2,-44(fp)
  816394:	e0bff915 	stw	r2,-28(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  816398:	e0fff317 	ldw	r3,-52(fp)
  81639c:	e0bff717 	ldw	r2,-36(fp)
  8163a0:	1885883a 	add	r2,r3,r2
  8163a4:	11020e04 	addi	r4,r2,2104
  8163a8:	e17ff417 	ldw	r5,-48(fp)
  8163ac:	e1bff917 	ldw	r6,-28(fp)
  8163b0:	080d65c0 	call	80d65c <memcpy>
      ptr   += n;
  8163b4:	e0fff417 	ldw	r3,-48(fp)
  8163b8:	e0bff917 	ldw	r2,-28(fp)
  8163bc:	1885883a 	add	r2,r3,r2
  8163c0:	e0bff415 	stw	r2,-48(fp)
      count -= n;
  8163c4:	e0fff517 	ldw	r3,-44(fp)
  8163c8:	e0bff917 	ldw	r2,-28(fp)
  8163cc:	1885c83a 	sub	r2,r3,r2
  8163d0:	e0bff515 	stw	r2,-44(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8163d4:	e13ff317 	ldw	r4,-52(fp)
  8163d8:	e0fff717 	ldw	r3,-36(fp)
  8163dc:	e0bff917 	ldw	r2,-28(fp)
  8163e0:	1885883a 	add	r2,r3,r2
  8163e4:	1081ffcc 	andi	r2,r2,2047
  8163e8:	20800c15 	stw	r2,48(r4)
  8163ec:	003fc306 	br	8162fc <altera_avalon_jtag_uart_write+0x30>
  8163f0:	0005303a 	rdctl	r2,status
  8163f4:	e0bffe15 	stw	r2,-8(fp)
  8163f8:	e0fffe17 	ldw	r3,-8(fp)
  8163fc:	00bfff84 	movi	r2,-2
  816400:	1884703a 	and	r2,r3,r2
  816404:	1001703a 	wrctl	status,r2
  816408:	e0bffe17 	ldw	r2,-8(fp)
  81640c:	e0bffd15 	stw	r2,-12(fp)
  816410:	e0bffd17 	ldw	r2,-12(fp)
  816414:	e0bffa15 	stw	r2,-24(fp)
    }

    /*
     * If interrupts are disabled then we could transmit here, we only need 
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  816418:	e0fff317 	ldw	r3,-52(fp)
  81641c:	e0bff317 	ldw	r2,-52(fp)
  816420:	10800817 	ldw	r2,32(r2)
  816424:	10800094 	ori	r2,r2,2
  816428:	18800815 	stw	r2,32(r3)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81642c:	e0bff317 	ldw	r2,-52(fp)
  816430:	10800017 	ldw	r2,0(r2)
  816434:	10800104 	addi	r2,r2,4
  816438:	1007883a 	mov	r3,r2
  81643c:	e0bff317 	ldw	r2,-52(fp)
  816440:	10800817 	ldw	r2,32(r2)
  816444:	18800035 	stwio	r2,0(r3)
  816448:	e0bffa17 	ldw	r2,-24(fp)
  81644c:	e0bffe15 	stw	r2,-8(fp)
  816450:	e0bffe17 	ldw	r2,-8(fp)
  816454:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);

    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  816458:	e0bff517 	ldw	r2,-44(fp)
  81645c:	10800050 	cmplti	r2,r2,1
  816460:	1000141e 	bne	r2,zero,8164b4 <altera_avalon_jtag_uart_write+0x1e8>
    {
      if (flags & O_NONBLOCK)
  816464:	e0bff617 	ldw	r2,-40(fp)
  816468:	1090000c 	andi	r2,r2,16384
  81646c:	1005003a 	cmpeq	r2,r2,zero
  816470:	1000011e 	bne	r2,zero,816478 <altera_avalon_jtag_uart_write+0x1ac>
        break;
  816474:	00001306 	br	8164c4 <altera_avalon_jtag_uart_write+0x1f8>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
        /*
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
                       ALT_JTAG_UART_WRITE_RDY | ALT_JTAG_UART_TIMEOUT,
                       OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                       0);
      }
      else {
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
          ;
      }
#else
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  816478:	e0bff317 	ldw	r2,-52(fp)
  81647c:	10c00d17 	ldw	r3,52(r2)
  816480:	e0bff817 	ldw	r2,-32(fp)
  816484:	1880061e 	bne	r3,r2,8164a0 <altera_avalon_jtag_uart_write+0x1d4>
  816488:	e0bff317 	ldw	r2,-52(fp)
  81648c:	e0fff317 	ldw	r3,-52(fp)
  816490:	11000917 	ldw	r4,36(r2)
  816494:	18800117 	ldw	r2,4(r3)
  816498:	2080012e 	bgeu	r4,r2,8164a0 <altera_avalon_jtag_uart_write+0x1d4>
  81649c:	003ff606 	br	816478 <altera_avalon_jtag_uart_write+0x1ac>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8164a0:	e0bff317 	ldw	r2,-52(fp)
  8164a4:	10c00d17 	ldw	r3,52(r2)
  8164a8:	e0bff817 	ldw	r2,-32(fp)
  8164ac:	1880011e 	bne	r3,r2,8164b4 <altera_avalon_jtag_uart_write+0x1e8>
        break;
  8164b0:	00000406 	br	8164c4 <altera_avalon_jtag_uart_write+0x1f8>
    }
  }
  8164b4:	e0bff517 	ldw	r2,-44(fp)
  8164b8:	10800050 	cmplti	r2,r2,1
  8164bc:	1000011e 	bne	r2,zero,8164c4 <altera_avalon_jtag_uart_write+0x1f8>
  8164c0:	003f8e06 	br	8162fc <altera_avalon_jtag_uart_write+0x30>
  8164c4:	e03ffe15 	stw	zero,-8(fp)
  while (count > 0);

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8164c8:	e0fff417 	ldw	r3,-48(fp)
  8164cc:	e0bffb17 	ldw	r2,-20(fp)
  8164d0:	18800526 	beq	r3,r2,8164e8 <altera_avalon_jtag_uart_write+0x21c>
    return ptr - start;
  8164d4:	e0bff417 	ldw	r2,-48(fp)
  8164d8:	e0fffb17 	ldw	r3,-20(fp)
  8164dc:	10c5c83a 	sub	r2,r2,r3
  8164e0:	e0bfff15 	stw	r2,-4(fp)
  8164e4:	00000906 	br	81650c <altera_avalon_jtag_uart_write+0x240>
  else if (flags & O_NONBLOCK)
  8164e8:	e0bff617 	ldw	r2,-40(fp)
  8164ec:	1090000c 	andi	r2,r2,16384
  8164f0:	1005003a 	cmpeq	r2,r2,zero
  8164f4:	1000031e 	bne	r2,zero,816504 <altera_avalon_jtag_uart_write+0x238>
    return -EWOULDBLOCK;
  8164f8:	00bffd44 	movi	r2,-11
  8164fc:	e0bfff15 	stw	r2,-4(fp)
  816500:	00000206 	br	81650c <altera_avalon_jtag_uart_write+0x240>
  else
    return -EIO; /* Host not connected */
  816504:	00bffec4 	movi	r2,-5
  816508:	e0bfff15 	stw	r2,-4(fp)
}
  81650c:	e0bfff17 	ldw	r2,-4(fp)
  816510:	dfc00e17 	ldw	ra,56(sp)
  816514:	df000d17 	ldw	fp,52(sp)
  816518:	dec00f04 	addi	sp,sp,60
  81651c:	f800283a 	ret

00816520 <lcd_write_command>:
/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  816520:	defffa04 	addi	sp,sp,-24
  816524:	dfc00515 	stw	ra,20(sp)
  816528:	df000415 	stw	fp,16(sp)
  81652c:	df000404 	addi	fp,sp,16
  816530:	e13ffc15 	stw	r4,-16(fp)
  816534:	e17ffd05 	stb	r5,-12(fp)
  unsigned int base = sp->base;
  816538:	e0bffc17 	ldw	r2,-16(fp)
  81653c:	10800017 	ldw	r2,0(r2)
  816540:	e0bffe15 	stw	r2,-8(fp)

  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  816544:	008003f4 	movhi	r2,15
  816548:	10909004 	addi	r2,r2,16960
  81654c:	e0bfff15 	stw	r2,-4(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  816550:	e0bffc17 	ldw	r2,-16(fp)
  816554:	10800807 	ldb	r2,32(r2)
  816558:	1005003a 	cmpeq	r2,r2,zero
  81655c:	1000011e 	bne	r2,zero,816564 <lcd_write_command+0x44>
    return;
  816560:	00001406 	br	8165b4 <lcd_write_command+0x94>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  816564:	e0bffe17 	ldw	r2,-8(fp)
  816568:	10800104 	addi	r2,r2,4
  81656c:	10800037 	ldwio	r2,0(r2)
  816570:	1080200c 	andi	r2,r2,128
  816574:	1005003a 	cmpeq	r2,r2,zero
  816578:	1000091e 	bne	r2,zero,8165a0 <lcd_write_command+0x80>
    if (--i == 0)
  81657c:	e0bfff17 	ldw	r2,-4(fp)
  816580:	10bfffc4 	addi	r2,r2,-1
  816584:	e0bfff15 	stw	r2,-4(fp)
  816588:	1004c03a 	cmpne	r2,r2,zero
  81658c:	103ff51e 	bne	r2,zero,816564 <lcd_write_command+0x44>
    {
      sp->broken = 1;
  816590:	e0fffc17 	ldw	r3,-16(fp)
  816594:	00800044 	movi	r2,1
  816598:	18800805 	stb	r2,32(r3)
      return;
  81659c:	00000506 	br	8165b4 <lcd_write_command+0x94>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8165a0:	01001904 	movi	r4,100
  8165a4:	08156000 	call	815600 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8165a8:	e0fffe17 	ldw	r3,-8(fp)
  8165ac:	e0bffd03 	ldbu	r2,-12(fp)
  8165b0:	18800035 	stwio	r2,0(r3)
}
  8165b4:	dfc00517 	ldw	ra,20(sp)
  8165b8:	df000417 	ldw	fp,16(sp)
  8165bc:	dec00604 	addi	sp,sp,24
  8165c0:	f800283a 	ret

008165c4 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8165c4:	defffa04 	addi	sp,sp,-24
  8165c8:	dfc00515 	stw	ra,20(sp)
  8165cc:	df000415 	stw	fp,16(sp)
  8165d0:	df000404 	addi	fp,sp,16
  8165d4:	e13ffc15 	stw	r4,-16(fp)
  8165d8:	e17ffd05 	stb	r5,-12(fp)
  unsigned int base = sp->base;
  8165dc:	e0bffc17 	ldw	r2,-16(fp)
  8165e0:	10800017 	ldw	r2,0(r2)
  8165e4:	e0bffe15 	stw	r2,-8(fp)

  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8165e8:	008003f4 	movhi	r2,15
  8165ec:	10909004 	addi	r2,r2,16960
  8165f0:	e0bfff15 	stw	r2,-4(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8165f4:	e0bffc17 	ldw	r2,-16(fp)
  8165f8:	10800807 	ldb	r2,32(r2)
  8165fc:	1005003a 	cmpeq	r2,r2,zero
  816600:	1000011e 	bne	r2,zero,816608 <lcd_write_data+0x44>
    return;
  816604:	00001b06 	br	816674 <lcd_write_data+0xb0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  816608:	e0bffe17 	ldw	r2,-8(fp)
  81660c:	10800104 	addi	r2,r2,4
  816610:	10800037 	ldwio	r2,0(r2)
  816614:	1080200c 	andi	r2,r2,128
  816618:	1005003a 	cmpeq	r2,r2,zero
  81661c:	1000091e 	bne	r2,zero,816644 <lcd_write_data+0x80>
    if (--i == 0)
  816620:	e0bfff17 	ldw	r2,-4(fp)
  816624:	10bfffc4 	addi	r2,r2,-1
  816628:	e0bfff15 	stw	r2,-4(fp)
  81662c:	1004c03a 	cmpne	r2,r2,zero
  816630:	103ff51e 	bne	r2,zero,816608 <lcd_write_data+0x44>
    {
      sp->broken = 1;
  816634:	e0fffc17 	ldw	r3,-16(fp)
  816638:	00800044 	movi	r2,1
  81663c:	18800805 	stb	r2,32(r3)
      return;
  816640:	00000c06 	br	816674 <lcd_write_data+0xb0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  816644:	01001904 	movi	r4,100
  816648:	08156000 	call	815600 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  81664c:	e0bffe17 	ldw	r2,-8(fp)
  816650:	10800204 	addi	r2,r2,8
  816654:	1007883a 	mov	r3,r2
  816658:	e0bffd03 	ldbu	r2,-12(fp)
  81665c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  816660:	e0fffc17 	ldw	r3,-16(fp)
  816664:	e0bffc17 	ldw	r2,-16(fp)
  816668:	108008c3 	ldbu	r2,35(r2)
  81666c:	10800044 	addi	r2,r2,1
  816670:	188008c5 	stb	r2,35(r3)
}
  816674:	dfc00517 	ldw	ra,20(sp)
  816678:	df000417 	ldw	fp,16(sp)
  81667c:	dec00604 	addi	sp,sp,24
  816680:	f800283a 	ret

00816684 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  816684:	defffc04 	addi	sp,sp,-16
  816688:	dfc00315 	stw	ra,12(sp)
  81668c:	df000215 	stw	fp,8(sp)
  816690:	df000204 	addi	fp,sp,8
  816694:	e13ffe15 	stw	r4,-8(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  816698:	e13ffe17 	ldw	r4,-8(fp)
  81669c:	01400044 	movi	r5,1
  8166a0:	08165200 	call	816520 <lcd_write_command>

  sp->x = 0;
  8166a4:	e0bffe17 	ldw	r2,-8(fp)
  8166a8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8166ac:	e0bffe17 	ldw	r2,-8(fp)
  8166b0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8166b4:	e0bffe17 	ldw	r2,-8(fp)
  8166b8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8166bc:	e03fff15 	stw	zero,-4(fp)
  8166c0:	e0bfff17 	ldw	r2,-4(fp)
  8166c4:	10800088 	cmpgei	r2,r2,2
  8166c8:	10001a1e 	bne	r2,zero,816734 <lcd_clear_screen+0xb0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8166cc:	e0bfff17 	ldw	r2,-4(fp)
  8166d0:	10c018e4 	muli	r3,r2,99
  8166d4:	e0bffe17 	ldw	r2,-8(fp)
  8166d8:	1885883a 	add	r2,r3,r2
  8166dc:	11001004 	addi	r4,r2,64
  8166e0:	01400804 	movi	r5,32
  8166e4:	01801444 	movi	r6,81
  8166e8:	080d7180 	call	80d718 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8166ec:	e0bfff17 	ldw	r2,-4(fp)
  8166f0:	10c018e4 	muli	r3,r2,99
  8166f4:	e0bffe17 	ldw	r2,-8(fp)
  8166f8:	1885883a 	add	r2,r3,r2
  8166fc:	11000c04 	addi	r4,r2,48
  816700:	01400804 	movi	r5,32
  816704:	01800404 	movi	r6,16
  816708:	080d7180 	call	80d718 <memset>
    sp->line[y].width = 0;
  81670c:	e0fffe17 	ldw	r3,-8(fp)
  816710:	e0bfff17 	ldw	r2,-4(fp)
  816714:	108018e4 	muli	r2,r2,99
  816718:	10c5883a 	add	r2,r2,r3
  81671c:	10802404 	addi	r2,r2,144
  816720:	10000045 	stb	zero,1(r2)
  816724:	e0bfff17 	ldw	r2,-4(fp)
  816728:	10800044 	addi	r2,r2,1
  81672c:	e0bfff15 	stw	r2,-4(fp)
  816730:	003fe306 	br	8166c0 <lcd_clear_screen+0x3c>
  }
}
  816734:	dfc00317 	ldw	ra,12(sp)
  816738:	df000217 	ldw	fp,8(sp)
  81673c:	dec00404 	addi	sp,sp,16
  816740:	f800283a 	ret

00816744 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  816744:	defff604 	addi	sp,sp,-40
  816748:	dfc00915 	stw	ra,36(sp)
  81674c:	df000815 	stw	fp,32(sp)
  816750:	dc000715 	stw	r16,28(sp)
  816754:	df000804 	addi	fp,sp,32
  816758:	e13ff815 	stw	r4,-32(fp)
  int y, x;

  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  81675c:	e0bff817 	ldw	r2,-32(fp)
  816760:	10800947 	ldb	r2,37(r2)
  816764:	e0bffb15 	stw	r2,-20(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816768:	e03ff915 	stw	zero,-28(fp)
  81676c:	e0bff917 	ldw	r2,-28(fp)
  816770:	10800088 	cmpgei	r2,r2,2
  816774:	10005a1e 	bne	r2,zero,8168e0 <lcd_repaint_screen+0x19c>
  {
    int width  = sp->line[y].width;
  816778:	e0fff817 	ldw	r3,-32(fp)
  81677c:	e0bff917 	ldw	r2,-28(fp)
  816780:	108018e4 	muli	r2,r2,99
  816784:	10c5883a 	add	r2,r2,r3
  816788:	10802404 	addi	r2,r2,144
  81678c:	10800047 	ldb	r2,1(r2)
  816790:	e0bffc15 	stw	r2,-16(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  816794:	e0fff817 	ldw	r3,-32(fp)
  816798:	e0bff917 	ldw	r2,-28(fp)
  81679c:	108018e4 	muli	r2,r2,99
  8167a0:	10c5883a 	add	r2,r2,r3
  8167a4:	10802404 	addi	r2,r2,144
  8167a8:	10c00083 	ldbu	r3,2(r2)
  8167ac:	e0bffb17 	ldw	r2,-20(fp)
  8167b0:	1885383a 	mul	r2,r3,r2
  8167b4:	1005d23a 	srai	r2,r2,8
  8167b8:	e0bffd15 	stw	r2,-12(fp)
    if (offset >= width)
  8167bc:	e0fffd17 	ldw	r3,-12(fp)
  8167c0:	e0bffc17 	ldw	r2,-16(fp)
  8167c4:	18800116 	blt	r3,r2,8167cc <lcd_repaint_screen+0x88>
      offset = 0;
  8167c8:	e03ffd15 	stw	zero,-12(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8167cc:	e03ffa15 	stw	zero,-24(fp)
  8167d0:	e0bffa17 	ldw	r2,-24(fp)
  8167d4:	10800408 	cmpgei	r2,r2,16
  8167d8:	10003d1e 	bne	r2,zero,8168d0 <lcd_repaint_screen+0x18c>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8167dc:	e43ff817 	ldw	r16,-32(fp)
  8167e0:	e0fffa17 	ldw	r3,-24(fp)
  8167e4:	e0bffd17 	ldw	r2,-12(fp)
  8167e8:	1889883a 	add	r4,r3,r2
  8167ec:	e17ffc17 	ldw	r5,-16(fp)
  8167f0:	080be080 	call	80be08 <__modsi3>
  8167f4:	1007883a 	mov	r3,r2
  8167f8:	e0bff917 	ldw	r2,-28(fp)
  8167fc:	108018e4 	muli	r2,r2,99
  816800:	1405883a 	add	r2,r2,r16
  816804:	10c5883a 	add	r2,r2,r3
  816808:	10801004 	addi	r2,r2,64
  81680c:	10800003 	ldbu	r2,0(r2)
  816810:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  816814:	e0fff817 	ldw	r3,-32(fp)
  816818:	e0bff917 	ldw	r2,-28(fp)
  81681c:	108018e4 	muli	r2,r2,99
  816820:	10c7883a 	add	r3,r2,r3
  816824:	e0bffa17 	ldw	r2,-24(fp)
  816828:	1885883a 	add	r2,r3,r2
  81682c:	10800c04 	addi	r2,r2,48
  816830:	10c00007 	ldb	r3,0(r2)
  816834:	e0bffe07 	ldb	r2,-8(fp)
  816838:	18802126 	beq	r3,r2,8168c0 <lcd_repaint_screen+0x17c>
      {
        unsigned char address = x + colstart[y];
  81683c:	e0fff917 	ldw	r3,-28(fp)
  816840:	d0a01804 	addi	r2,gp,-32672
  816844:	1885883a 	add	r2,r3,r2
  816848:	e0fffa17 	ldw	r3,-24(fp)
  81684c:	11000003 	ldbu	r4,0(r2)
  816850:	1805883a 	mov	r2,r3
  816854:	2085883a 	add	r2,r4,r2
  816858:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  81685c:	e0fffe43 	ldbu	r3,-7(fp)
  816860:	e0bff817 	ldw	r2,-32(fp)
  816864:	108008c7 	ldb	r2,35(r2)
  816868:	18800926 	beq	r3,r2,816890 <lcd_repaint_screen+0x14c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  81686c:	e0fffe43 	ldbu	r3,-7(fp)
  816870:	00bfe004 	movi	r2,-128
  816874:	1884b03a 	or	r2,r3,r2
  816878:	11403fcc 	andi	r5,r2,255
  81687c:	e13ff817 	ldw	r4,-32(fp)
  816880:	08165200 	call	816520 <lcd_write_command>
          sp->address = address;
  816884:	e0fff817 	ldw	r3,-32(fp)
  816888:	e0bffe43 	ldbu	r2,-7(fp)
  81688c:	188008c5 	stb	r2,35(r3)
        }

        lcd_write_data(sp, c);
  816890:	e17ffe03 	ldbu	r5,-8(fp)
  816894:	e13ff817 	ldw	r4,-32(fp)
  816898:	08165c40 	call	8165c4 <lcd_write_data>
        sp->line[y].visible[x] = c;
  81689c:	e0fff817 	ldw	r3,-32(fp)
  8168a0:	e0bff917 	ldw	r2,-28(fp)
  8168a4:	108018e4 	muli	r2,r2,99
  8168a8:	10c7883a 	add	r3,r2,r3
  8168ac:	e0bffa17 	ldw	r2,-24(fp)
  8168b0:	1885883a 	add	r2,r3,r2
  8168b4:	10c00c04 	addi	r3,r2,48
  8168b8:	e0bffe03 	ldbu	r2,-8(fp)
  8168bc:	18800005 	stb	r2,0(r3)
  8168c0:	e0bffa17 	ldw	r2,-24(fp)
  8168c4:	10800044 	addi	r2,r2,1
  8168c8:	e0bffa15 	stw	r2,-24(fp)
  8168cc:	003fc006 	br	8167d0 <lcd_repaint_screen+0x8c>
  8168d0:	e0bff917 	ldw	r2,-28(fp)
  8168d4:	10800044 	addi	r2,r2,1
  8168d8:	e0bff915 	stw	r2,-28(fp)
  8168dc:	003fa306 	br	81676c <lcd_repaint_screen+0x28>
      }
    }
  }
}
  8168e0:	dfc00917 	ldw	ra,36(sp)
  8168e4:	df000817 	ldw	fp,32(sp)
  8168e8:	dc000717 	ldw	r16,28(sp)
  8168ec:	dec00a04 	addi	sp,sp,40
  8168f0:	f800283a 	ret

008168f4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8168f4:	defffc04 	addi	sp,sp,-16
  8168f8:	dfc00315 	stw	ra,12(sp)
  8168fc:	df000215 	stw	fp,8(sp)
  816900:	df000204 	addi	fp,sp,8
  816904:	e13ffe15 	stw	r4,-8(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816908:	e03fff15 	stw	zero,-4(fp)
  81690c:	e0bfff17 	ldw	r2,-4(fp)
  816910:	10800088 	cmpgei	r2,r2,2
  816914:	10001c1e 	bne	r2,zero,816988 <lcd_scroll_up+0x94>
  {
    if (y < ALT_LCD_HEIGHT-1)
  816918:	e0bfff17 	ldw	r2,-4(fp)
  81691c:	10800048 	cmpgei	r2,r2,1
  816920:	10000d1e 	bne	r2,zero,816958 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  816924:	e0bfff17 	ldw	r2,-4(fp)
  816928:	10c018e4 	muli	r3,r2,99
  81692c:	e0bffe17 	ldw	r2,-8(fp)
  816930:	1885883a 	add	r2,r3,r2
  816934:	11001004 	addi	r4,r2,64
  816938:	e0bfff17 	ldw	r2,-4(fp)
  81693c:	10c018e4 	muli	r3,r2,99
  816940:	e0bffe17 	ldw	r2,-8(fp)
  816944:	1885883a 	add	r2,r3,r2
  816948:	114028c4 	addi	r5,r2,163
  81694c:	01801404 	movi	r6,80
  816950:	080d65c0 	call	80d65c <memcpy>
  816954:	00000806 	br	816978 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  816958:	e0bfff17 	ldw	r2,-4(fp)
  81695c:	10c018e4 	muli	r3,r2,99
  816960:	e0bffe17 	ldw	r2,-8(fp)
  816964:	1885883a 	add	r2,r3,r2
  816968:	11001004 	addi	r4,r2,64
  81696c:	01400804 	movi	r5,32
  816970:	01801404 	movi	r6,80
  816974:	080d7180 	call	80d718 <memset>
  816978:	e0bfff17 	ldw	r2,-4(fp)
  81697c:	10800044 	addi	r2,r2,1
  816980:	e0bfff15 	stw	r2,-4(fp)
  816984:	003fe106 	br	81690c <lcd_scroll_up+0x18>
  }

  sp->y--;
  816988:	e0fffe17 	ldw	r3,-8(fp)
  81698c:	e0bffe17 	ldw	r2,-8(fp)
  816990:	10800883 	ldbu	r2,34(r2)
  816994:	10bfffc4 	addi	r2,r2,-1
  816998:	18800885 	stb	r2,34(r3)
}
  81699c:	dfc00317 	ldw	ra,12(sp)
  8169a0:	df000217 	ldw	fp,8(sp)
  8169a4:	dec00404 	addi	sp,sp,16
  8169a8:	f800283a 	ret

008169ac <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8169ac:	defff804 	addi	sp,sp,-32
  8169b0:	dfc00715 	stw	ra,28(sp)
  8169b4:	df000615 	stw	fp,24(sp)
  8169b8:	df000604 	addi	fp,sp,24
  8169bc:	e13ffa15 	stw	r4,-24(fp)
  8169c0:	e17ffb05 	stb	r5,-20(fp)
  int parm1 = 0, parm2 = 0;
  8169c4:	e03ffc15 	stw	zero,-16(fp)
  8169c8:	e03ffd15 	stw	zero,-12(fp)

  if (sp->escape[0] == '[')
  8169cc:	e0bffa17 	ldw	r2,-24(fp)
  8169d0:	10800a07 	ldb	r2,40(r2)
  8169d4:	108016d8 	cmpnei	r2,r2,91
  8169d8:	1000341e 	bne	r2,zero,816aac <lcd_handle_escape+0x100>
  {
    char * ptr = sp->escape+1;
  8169dc:	e0bffa17 	ldw	r2,-24(fp)
  8169e0:	10800a44 	addi	r2,r2,41
  8169e4:	e0bffe15 	stw	r2,-8(fp)
    while (isdigit(*ptr))
  8169e8:	e0bffe17 	ldw	r2,-8(fp)
  8169ec:	10c00007 	ldb	r3,0(r2)
  8169f0:	008020b4 	movhi	r2,130
  8169f4:	10a86f04 	addi	r2,r2,-24132
  8169f8:	1885883a 	add	r2,r3,r2
  8169fc:	10800003 	ldbu	r2,0(r2)
  816a00:	1080010c 	andi	r2,r2,4
  816a04:	1005003a 	cmpeq	r2,r2,zero
  816a08:	10000c1e 	bne	r2,zero,816a3c <lcd_handle_escape+0x90>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  816a0c:	e0bffc17 	ldw	r2,-16(fp)
  816a10:	110002a4 	muli	r4,r2,10
  816a14:	e17ffe04 	addi	r5,fp,-8
  816a18:	28c00017 	ldw	r3,0(r5)
  816a1c:	1805883a 	mov	r2,r3
  816a20:	10800007 	ldb	r2,0(r2)
  816a24:	2085883a 	add	r2,r4,r2
  816a28:	10bff404 	addi	r2,r2,-48
  816a2c:	18c00044 	addi	r3,r3,1
  816a30:	28c00015 	stw	r3,0(r5)
  816a34:	e0bffc15 	stw	r2,-16(fp)
  816a38:	003feb06 	br	8169e8 <lcd_handle_escape+0x3c>

    if (*ptr == ';')
  816a3c:	e0bffe17 	ldw	r2,-8(fp)
  816a40:	10800007 	ldb	r2,0(r2)
  816a44:	10800ed8 	cmpnei	r2,r2,59
  816a48:	10001a1e 	bne	r2,zero,816ab4 <lcd_handle_escape+0x108>
    {
      ptr++;
  816a4c:	e0bffe17 	ldw	r2,-8(fp)
  816a50:	10800044 	addi	r2,r2,1
  816a54:	e0bffe15 	stw	r2,-8(fp)
      while (isdigit(*ptr))
  816a58:	e0bffe17 	ldw	r2,-8(fp)
  816a5c:	10c00007 	ldb	r3,0(r2)
  816a60:	008020b4 	movhi	r2,130
  816a64:	10a86f04 	addi	r2,r2,-24132
  816a68:	1885883a 	add	r2,r3,r2
  816a6c:	10800003 	ldbu	r2,0(r2)
  816a70:	1080010c 	andi	r2,r2,4
  816a74:	1005003a 	cmpeq	r2,r2,zero
  816a78:	10000e1e 	bne	r2,zero,816ab4 <lcd_handle_escape+0x108>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  816a7c:	e0bffd17 	ldw	r2,-12(fp)
  816a80:	110002a4 	muli	r4,r2,10
  816a84:	e17ffe04 	addi	r5,fp,-8
  816a88:	28c00017 	ldw	r3,0(r5)
  816a8c:	1805883a 	mov	r2,r3
  816a90:	10800007 	ldb	r2,0(r2)
  816a94:	2085883a 	add	r2,r4,r2
  816a98:	10bff404 	addi	r2,r2,-48
  816a9c:	18c00044 	addi	r3,r3,1
  816aa0:	28c00015 	stw	r3,0(r5)
  816aa4:	e0bffd15 	stw	r2,-12(fp)
  816aa8:	003feb06 	br	816a58 <lcd_handle_escape+0xac>
    }
  }
  else
    parm1 = -1;
  816aac:	00bfffc4 	movi	r2,-1
  816ab0:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  816ab4:	e0bffb07 	ldb	r2,-20(fp)
  816ab8:	e0bfff15 	stw	r2,-4(fp)
  816abc:	e0ffff17 	ldw	r3,-4(fp)
  816ac0:	188012a0 	cmpeqi	r2,r3,74
  816ac4:	10002a1e 	bne	r2,zero,816b70 <lcd_handle_escape+0x1c4>
  816ac8:	e0ffff17 	ldw	r3,-4(fp)
  816acc:	188012c8 	cmpgei	r2,r3,75
  816ad0:	1000041e 	bne	r2,zero,816ae4 <lcd_handle_escape+0x138>
  816ad4:	e0ffff17 	ldw	r3,-4(fp)
  816ad8:	18801220 	cmpeqi	r2,r3,72
  816adc:	1000081e 	bne	r2,zero,816b00 <lcd_handle_escape+0x154>
  816ae0:	00003f06 	br	816be0 <lcd_handle_escape+0x234>
  816ae4:	e0ffff17 	ldw	r3,-4(fp)
  816ae8:	188012e0 	cmpeqi	r2,r3,75
  816aec:	1000261e 	bne	r2,zero,816b88 <lcd_handle_escape+0x1dc>
  816af0:	e0ffff17 	ldw	r3,-4(fp)
  816af4:	188019a0 	cmpeqi	r2,r3,102
  816af8:	1000011e 	bne	r2,zero,816b00 <lcd_handle_escape+0x154>
  816afc:	00003806 	br	816be0 <lcd_handle_escape+0x234>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  816b00:	e0bffd17 	ldw	r2,-12(fp)
  816b04:	10800050 	cmplti	r2,r2,1
  816b08:	1000041e 	bne	r2,zero,816b1c <lcd_handle_escape+0x170>
      sp->x = parm2 - 1;
  816b0c:	e0fffa17 	ldw	r3,-24(fp)
  816b10:	e0bffd17 	ldw	r2,-12(fp)
  816b14:	10bfffc4 	addi	r2,r2,-1
  816b18:	18800845 	stb	r2,33(r3)
    if (parm1 > 0)
  816b1c:	e0bffc17 	ldw	r2,-16(fp)
  816b20:	10800050 	cmplti	r2,r2,1
  816b24:	10002e1e 	bne	r2,zero,816be0 <lcd_handle_escape+0x234>
    {
      sp->y = parm1 - 1;
  816b28:	e0fffa17 	ldw	r3,-24(fp)
  816b2c:	e0bffc17 	ldw	r2,-16(fp)
  816b30:	10bfffc4 	addi	r2,r2,-1
  816b34:	18800885 	stb	r2,34(r3)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  816b38:	e0bffa17 	ldw	r2,-24(fp)
  816b3c:	10800883 	ldbu	r2,34(r2)
  816b40:	10800170 	cmpltui	r2,r2,5
  816b44:	1000031e 	bne	r2,zero,816b54 <lcd_handle_escape+0x1a8>
        sp->y = ALT_LCD_HEIGHT * 2;
  816b48:	e0fffa17 	ldw	r3,-24(fp)
  816b4c:	00800104 	movi	r2,4
  816b50:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  816b54:	e0bffa17 	ldw	r2,-24(fp)
  816b58:	10800883 	ldbu	r2,34(r2)
  816b5c:	108000f0 	cmpltui	r2,r2,3
  816b60:	10001f1e 	bne	r2,zero,816be0 <lcd_handle_escape+0x234>
        lcd_scroll_up(sp);
  816b64:	e13ffa17 	ldw	r4,-24(fp)
  816b68:	08168f40 	call	8168f4 <lcd_scroll_up>
  816b6c:	003ff906 	br	816b54 <lcd_handle_escape+0x1a8>
    }
    break;

  case 'J':
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  816b70:	e0bffc17 	ldw	r2,-16(fp)
  816b74:	10800098 	cmpnei	r2,r2,2
  816b78:	1000191e 	bne	r2,zero,816be0 <lcd_handle_escape+0x234>
      lcd_clear_screen(sp);
  816b7c:	e13ffa17 	ldw	r4,-24(fp)
  816b80:	08166840 	call	816684 <lcd_clear_screen>
    break;
  816b84:	00001606 	br	816be0 <lcd_handle_escape+0x234>

  case 'K':
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  816b88:	e0bffc17 	ldw	r2,-16(fp)
  816b8c:	10800048 	cmpgei	r2,r2,1
  816b90:	1000131e 	bne	r2,zero,816be0 <lcd_handle_escape+0x234>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  816b94:	e0bffa17 	ldw	r2,-24(fp)
  816b98:	10800843 	ldbu	r2,33(r2)
  816b9c:	10801428 	cmpgeui	r2,r2,80
  816ba0:	10000f1e 	bne	r2,zero,816be0 <lcd_handle_escape+0x234>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  816ba4:	e0bffa17 	ldw	r2,-24(fp)
  816ba8:	10800883 	ldbu	r2,34(r2)
  816bac:	10c018e4 	muli	r3,r2,99
  816bb0:	e0bffa17 	ldw	r2,-24(fp)
  816bb4:	1887883a 	add	r3,r3,r2
  816bb8:	e0bffa17 	ldw	r2,-24(fp)
  816bbc:	10800843 	ldbu	r2,33(r2)
  816bc0:	1885883a 	add	r2,r3,r2
  816bc4:	11001004 	addi	r4,r2,64
  816bc8:	e0bffa17 	ldw	r2,-24(fp)
  816bcc:	10c00843 	ldbu	r3,33(r2)
  816bd0:	00801404 	movi	r2,80
  816bd4:	10cdc83a 	sub	r6,r2,r3
  816bd8:	01400804 	movi	r5,32
  816bdc:	080d7180 	call	80d718 <memset>
    }
    break;
  }
}
  816be0:	dfc00717 	ldw	ra,28(sp)
  816be4:	df000617 	ldw	fp,24(sp)
  816be8:	dec00804 	addi	sp,sp,32
  816bec:	f800283a 	ret

00816bf0 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  816bf0:	defff304 	addi	sp,sp,-52
  816bf4:	dfc00c15 	stw	ra,48(sp)
  816bf8:	df000b15 	stw	fp,44(sp)
  816bfc:	dc000a15 	stw	r16,40(sp)
  816c00:	df000b04 	addi	fp,sp,44
  816c04:	e13ff515 	stw	r4,-44(fp)
  816c08:	e17ff615 	stw	r5,-40(fp)
  816c0c:	e1bff715 	stw	r6,-36(fp)
  816c10:	e1fff815 	stw	r7,-32(fp)
  const char* end = ptr + len;
  816c14:	e0fff617 	ldw	r3,-40(fp)
  816c18:	e0bff717 	ldw	r2,-36(fp)
  816c1c:	1885883a 	add	r2,r3,r2
  816c20:	e0bff915 	stw	r2,-28(fp)
  816c24:	e03ffc15 	stw	zero,-16(fp)

  int y;
  int widthmax;

  /* When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  816c28:	e0fff517 	ldw	r3,-44(fp)
  816c2c:	00800044 	movi	r2,1
  816c30:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  816c34:	e0fff617 	ldw	r3,-40(fp)
  816c38:	e0bff917 	ldw	r2,-28(fp)
  816c3c:	18808b2e 	bgeu	r3,r2,816e6c <altera_avalon_lcd_16207_write+0x27c>
  {
    char c = *ptr;
  816c40:	e0bff617 	ldw	r2,-40(fp)
  816c44:	10800003 	ldbu	r2,0(r2)
  816c48:	e0bffd05 	stb	r2,-12(fp)

    if (sp->esccount >= 0)
  816c4c:	e0bff517 	ldw	r2,-44(fp)
  816c50:	10800907 	ldb	r2,36(r2)
  816c54:	1004803a 	cmplt	r2,r2,zero
  816c58:	1000341e 	bne	r2,zero,816d2c <altera_avalon_lcd_16207_write+0x13c>
    {
      unsigned int esccount = sp->esccount;
  816c5c:	e0bff517 	ldw	r2,-44(fp)
  816c60:	10800907 	ldb	r2,36(r2)
  816c64:	e0bffe15 	stw	r2,-8(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  816c68:	e0bffe17 	ldw	r2,-8(fp)
  816c6c:	1004c03a 	cmpne	r2,r2,zero
  816c70:	1000031e 	bne	r2,zero,816c80 <altera_avalon_lcd_16207_write+0x90>
  816c74:	e0bffd07 	ldb	r2,-12(fp)
  816c78:	108016d8 	cmpnei	r2,r2,91
  816c7c:	10000f1e 	bne	r2,zero,816cbc <altera_avalon_lcd_16207_write+0xcc>
  816c80:	e0bffe17 	ldw	r2,-8(fp)
  816c84:	1005003a 	cmpeq	r2,r2,zero
  816c88:	1000181e 	bne	r2,zero,816cec <altera_avalon_lcd_16207_write+0xfc>
  816c8c:	e0fffd07 	ldb	r3,-12(fp)
  816c90:	008020b4 	movhi	r2,130
  816c94:	10a86f04 	addi	r2,r2,-24132
  816c98:	1885883a 	add	r2,r3,r2
  816c9c:	10800003 	ldbu	r2,0(r2)
  816ca0:	1080010c 	andi	r2,r2,4
  816ca4:	1004c03a 	cmpne	r2,r2,zero
  816ca8:	1000101e 	bne	r2,zero,816cec <altera_avalon_lcd_16207_write+0xfc>
  816cac:	e0bffd07 	ldb	r2,-12(fp)
  816cb0:	10800ed8 	cmpnei	r2,r2,59
  816cb4:	1000011e 	bne	r2,zero,816cbc <altera_avalon_lcd_16207_write+0xcc>
  816cb8:	00000c06 	br	816cec <altera_avalon_lcd_16207_write+0xfc>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  816cbc:	e0fff517 	ldw	r3,-44(fp)
  816cc0:	e0bffe17 	ldw	r2,-8(fp)
  816cc4:	1885883a 	add	r2,r3,r2
  816cc8:	10800a04 	addi	r2,r2,40
  816ccc:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  816cd0:	e17ffd07 	ldb	r5,-12(fp)
  816cd4:	e13ff517 	ldw	r4,-44(fp)
  816cd8:	08169ac0 	call	8169ac <lcd_handle_escape>

        sp->esccount = -1;
  816cdc:	e0fff517 	ldw	r3,-44(fp)
  816ce0:	00bfffc4 	movi	r2,-1
  816ce4:	18800905 	stb	r2,36(r3)
  816ce8:	00005c06 	br	816e5c <altera_avalon_lcd_16207_write+0x26c>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  816cec:	e0bff517 	ldw	r2,-44(fp)
  816cf0:	10800903 	ldbu	r2,36(r2)
  816cf4:	108001e8 	cmpgeui	r2,r2,7
  816cf8:	1000581e 	bne	r2,zero,816e5c <altera_avalon_lcd_16207_write+0x26c>
      {
        sp->escape[esccount] = c;
  816cfc:	e0fff517 	ldw	r3,-44(fp)
  816d00:	e0bffe17 	ldw	r2,-8(fp)
  816d04:	1885883a 	add	r2,r3,r2
  816d08:	10c00a04 	addi	r3,r2,40
  816d0c:	e0bffd03 	ldbu	r2,-12(fp)
  816d10:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  816d14:	e0fff517 	ldw	r3,-44(fp)
  816d18:	e0bff517 	ldw	r2,-44(fp)
  816d1c:	10800903 	ldbu	r2,36(r2)
  816d20:	10800044 	addi	r2,r2,1
  816d24:	18800905 	stb	r2,36(r3)
  816d28:	00004c06 	br	816e5c <altera_avalon_lcd_16207_write+0x26c>
      }
    }
    else if (c == 27) /* ESC */
  816d2c:	e0bffd07 	ldb	r2,-12(fp)
  816d30:	108006d8 	cmpnei	r2,r2,27
  816d34:	1000031e 	bne	r2,zero,816d44 <altera_avalon_lcd_16207_write+0x154>
    {
      sp->esccount = 0;
  816d38:	e0bff517 	ldw	r2,-44(fp)
  816d3c:	10000905 	stb	zero,36(r2)
  816d40:	00004606 	br	816e5c <altera_avalon_lcd_16207_write+0x26c>
    }
    else if (c == '\r')
  816d44:	e0bffd07 	ldb	r2,-12(fp)
  816d48:	10800358 	cmpnei	r2,r2,13
  816d4c:	1000031e 	bne	r2,zero,816d5c <altera_avalon_lcd_16207_write+0x16c>
    {
      sp->x = 0;
  816d50:	e0bff517 	ldw	r2,-44(fp)
  816d54:	10000845 	stb	zero,33(r2)
  816d58:	00004006 	br	816e5c <altera_avalon_lcd_16207_write+0x26c>
    }
    else if (c == '\n')
  816d5c:	e0bffd07 	ldb	r2,-12(fp)
  816d60:	10800298 	cmpnei	r2,r2,10
  816d64:	10000e1e 	bne	r2,zero,816da0 <altera_avalon_lcd_16207_write+0x1b0>
    {
      sp->x = 0;
  816d68:	e0bff517 	ldw	r2,-44(fp)
  816d6c:	10000845 	stb	zero,33(r2)
      sp->y++;
  816d70:	e0fff517 	ldw	r3,-44(fp)
  816d74:	e0bff517 	ldw	r2,-44(fp)
  816d78:	10800883 	ldbu	r2,34(r2)
  816d7c:	10800044 	addi	r2,r2,1
  816d80:	18800885 	stb	r2,34(r3)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  816d84:	e0bff517 	ldw	r2,-44(fp)
  816d88:	10800883 	ldbu	r2,34(r2)
  816d8c:	108000f0 	cmpltui	r2,r2,3
  816d90:	1000321e 	bne	r2,zero,816e5c <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
  816d94:	e13ff517 	ldw	r4,-44(fp)
  816d98:	08168f40 	call	8168f4 <lcd_scroll_up>
  816d9c:	00002f06 	br	816e5c <altera_avalon_lcd_16207_write+0x26c>
    }
    else if (c == '\b')
  816da0:	e0bffd07 	ldb	r2,-12(fp)
  816da4:	10800218 	cmpnei	r2,r2,8
  816da8:	10000a1e 	bne	r2,zero,816dd4 <altera_avalon_lcd_16207_write+0x1e4>
    {
      if (sp->x > 0)
  816dac:	e0bff517 	ldw	r2,-44(fp)
  816db0:	10800843 	ldbu	r2,33(r2)
  816db4:	1005003a 	cmpeq	r2,r2,zero
  816db8:	1000281e 	bne	r2,zero,816e5c <altera_avalon_lcd_16207_write+0x26c>
        sp->x--;
  816dbc:	e0fff517 	ldw	r3,-44(fp)
  816dc0:	e0bff517 	ldw	r2,-44(fp)
  816dc4:	10800843 	ldbu	r2,33(r2)
  816dc8:	10bfffc4 	addi	r2,r2,-1
  816dcc:	18800845 	stb	r2,33(r3)
  816dd0:	00002206 	br	816e5c <altera_avalon_lcd_16207_write+0x26c>
    }
    else if (isprint(c))
  816dd4:	e0fffd07 	ldb	r3,-12(fp)
  816dd8:	008020b4 	movhi	r2,130
  816ddc:	10a86f04 	addi	r2,r2,-24132
  816de0:	1885883a 	add	r2,r3,r2
  816de4:	10800007 	ldb	r2,0(r2)
  816de8:	108025cc 	andi	r2,r2,151
  816dec:	1005003a 	cmpeq	r2,r2,zero
  816df0:	10001a1e 	bne	r2,zero,816e5c <altera_avalon_lcd_16207_write+0x26c>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  816df4:	e0bff517 	ldw	r2,-44(fp)
  816df8:	10800883 	ldbu	r2,34(r2)
  816dfc:	108000b0 	cmpltui	r2,r2,2
  816e00:	1000021e 	bne	r2,zero,816e0c <altera_avalon_lcd_16207_write+0x21c>
        lcd_scroll_up(sp);
  816e04:	e13ff517 	ldw	r4,-44(fp)
  816e08:	08168f40 	call	8168f4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  816e0c:	e0bff517 	ldw	r2,-44(fp)
  816e10:	10800843 	ldbu	r2,33(r2)
  816e14:	10801428 	cmpgeui	r2,r2,80
  816e18:	10000b1e 	bne	r2,zero,816e48 <altera_avalon_lcd_16207_write+0x258>
        sp->line[sp->y].data[sp->x] = c;
  816e1c:	e13ff517 	ldw	r4,-44(fp)
  816e20:	e0bff517 	ldw	r2,-44(fp)
  816e24:	10c00843 	ldbu	r3,33(r2)
  816e28:	e0bff517 	ldw	r2,-44(fp)
  816e2c:	10800883 	ldbu	r2,34(r2)
  816e30:	108018e4 	muli	r2,r2,99
  816e34:	1105883a 	add	r2,r2,r4
  816e38:	10c5883a 	add	r2,r2,r3
  816e3c:	10c01004 	addi	r3,r2,64
  816e40:	e0bffd03 	ldbu	r2,-12(fp)
  816e44:	18800005 	stb	r2,0(r3)

      sp->x++;
  816e48:	e0fff517 	ldw	r3,-44(fp)
  816e4c:	e0bff517 	ldw	r2,-44(fp)
  816e50:	10800843 	ldbu	r2,33(r2)
  816e54:	10800044 	addi	r2,r2,1
  816e58:	18800845 	stb	r2,33(r3)
  816e5c:	e0bff617 	ldw	r2,-40(fp)
  816e60:	10800044 	addi	r2,r2,1
  816e64:	e0bff615 	stw	r2,-40(fp)
  816e68:	003f7206 	br	816c34 <altera_avalon_lcd_16207_write+0x44>
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  816e6c:	00800404 	movi	r2,16
  816e70:	e0bffb15 	stw	r2,-20(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816e74:	e03ffa15 	stw	zero,-24(fp)
  816e78:	e0bffa17 	ldw	r2,-24(fp)
  816e7c:	10800088 	cmpgei	r2,r2,2
  816e80:	1000331e 	bne	r2,zero,816f50 <altera_avalon_lcd_16207_write+0x360>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  816e84:	00801404 	movi	r2,80
  816e88:	e0bffe15 	stw	r2,-8(fp)
  816e8c:	e0bffe17 	ldw	r2,-8(fp)
  816e90:	10800050 	cmplti	r2,r2,1
  816e94:	10000f1e 	bne	r2,zero,816ed4 <altera_avalon_lcd_16207_write+0x2e4>
      if (sp->line[y].data[width-1] != ' ')
  816e98:	e0fff517 	ldw	r3,-44(fp)
  816e9c:	e0bffa17 	ldw	r2,-24(fp)
  816ea0:	108018e4 	muli	r2,r2,99
  816ea4:	10c7883a 	add	r3,r2,r3
  816ea8:	e0bffe17 	ldw	r2,-8(fp)
  816eac:	1885883a 	add	r2,r3,r2
  816eb0:	10800fc4 	addi	r2,r2,63
  816eb4:	10800007 	ldb	r2,0(r2)
  816eb8:	10800820 	cmpeqi	r2,r2,32
  816ebc:	1000011e 	bne	r2,zero,816ec4 <altera_avalon_lcd_16207_write+0x2d4>
        break;
  816ec0:	00000406 	br	816ed4 <altera_avalon_lcd_16207_write+0x2e4>
  816ec4:	e0bffe17 	ldw	r2,-8(fp)
  816ec8:	10bfffc4 	addi	r2,r2,-1
  816ecc:	e0bffe15 	stw	r2,-8(fp)
  816ed0:	003fee06 	br	816e8c <altera_avalon_lcd_16207_write+0x29c>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  816ed4:	e0bffe17 	ldw	r2,-8(fp)
  816ed8:	10800448 	cmpgei	r2,r2,17
  816edc:	1000031e 	bne	r2,zero,816eec <altera_avalon_lcd_16207_write+0x2fc>
      width = ALT_LCD_WIDTH;
  816ee0:	00800404 	movi	r2,16
  816ee4:	e0bffe15 	stw	r2,-8(fp)
  816ee8:	00000306 	br	816ef8 <altera_avalon_lcd_16207_write+0x308>
    else
      width++;
  816eec:	e0bffe17 	ldw	r2,-8(fp)
  816ef0:	10800044 	addi	r2,r2,1
  816ef4:	e0bffe15 	stw	r2,-8(fp)

    sp->line[y].width = width;
  816ef8:	e0fff517 	ldw	r3,-44(fp)
  816efc:	e0bffa17 	ldw	r2,-24(fp)
  816f00:	108018e4 	muli	r2,r2,99
  816f04:	10c5883a 	add	r2,r2,r3
  816f08:	10c02404 	addi	r3,r2,144
  816f0c:	e0bffe17 	ldw	r2,-8(fp)
  816f10:	18800045 	stb	r2,1(r3)
    if (widthmax < width)
  816f14:	e0fffb17 	ldw	r3,-20(fp)
  816f18:	e0bffe17 	ldw	r2,-8(fp)
  816f1c:	1880020e 	bge	r3,r2,816f28 <altera_avalon_lcd_16207_write+0x338>
      widthmax = width;
  816f20:	e0bffe17 	ldw	r2,-8(fp)
  816f24:	e0bffb15 	stw	r2,-20(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  816f28:	e0fff517 	ldw	r3,-44(fp)
  816f2c:	e0bffa17 	ldw	r2,-24(fp)
  816f30:	108018e4 	muli	r2,r2,99
  816f34:	10c5883a 	add	r2,r2,r3
  816f38:	10802404 	addi	r2,r2,144
  816f3c:	10000085 	stb	zero,2(r2)
  816f40:	e0bffa17 	ldw	r2,-24(fp)
  816f44:	10800044 	addi	r2,r2,1
  816f48:	e0bffa15 	stw	r2,-24(fp)
  816f4c:	003fca06 	br	816e78 <altera_avalon_lcd_16207_write+0x288>
  }

  if (widthmax <= ALT_LCD_WIDTH)
  816f50:	e0bffb17 	ldw	r2,-20(fp)
  816f54:	10800448 	cmpgei	r2,r2,17
  816f58:	1000031e 	bne	r2,zero,816f68 <altera_avalon_lcd_16207_write+0x378>
    sp->scrollmax = 0;
  816f5c:	e0bff517 	ldw	r2,-44(fp)
  816f60:	10000985 	stb	zero,38(r2)
  816f64:	00002606 	br	817000 <altera_avalon_lcd_16207_write+0x410>
  else
  {
    widthmax *= 2;
  816f68:	e0fffb17 	ldw	r3,-20(fp)
  816f6c:	1805883a 	mov	r2,r3
  816f70:	10c5883a 	add	r2,r2,r3
  816f74:	e0bffb15 	stw	r2,-20(fp)
    sp->scrollmax = widthmax;
  816f78:	e0fff517 	ldw	r3,-44(fp)
  816f7c:	e0bffb17 	ldw	r2,-20(fp)
  816f80:	18800985 	stb	r2,38(r3)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816f84:	e03ffa15 	stw	zero,-24(fp)
  816f88:	e0bffa17 	ldw	r2,-24(fp)
  816f8c:	10800088 	cmpgei	r2,r2,2
  816f90:	10001b1e 	bne	r2,zero,817000 <altera_avalon_lcd_16207_write+0x410>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  816f94:	e0fff517 	ldw	r3,-44(fp)
  816f98:	e0bffa17 	ldw	r2,-24(fp)
  816f9c:	108018e4 	muli	r2,r2,99
  816fa0:	10c5883a 	add	r2,r2,r3
  816fa4:	10802404 	addi	r2,r2,144
  816fa8:	10800047 	ldb	r2,1(r2)
  816fac:	10800450 	cmplti	r2,r2,17
  816fb0:	10000f1e 	bne	r2,zero,816ff0 <altera_avalon_lcd_16207_write+0x400>
      {
        /* You have three options for how to make the display scroll, chosen
         * using the preprocessor directives below
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  816fb4:	e0fff517 	ldw	r3,-44(fp)
  816fb8:	e0bffa17 	ldw	r2,-24(fp)
  816fbc:	108018e4 	muli	r2,r2,99
  816fc0:	10c5883a 	add	r2,r2,r3
  816fc4:	14002404 	addi	r16,r2,144
  816fc8:	e0fff517 	ldw	r3,-44(fp)
  816fcc:	e0bffa17 	ldw	r2,-24(fp)
  816fd0:	108018e4 	muli	r2,r2,99
  816fd4:	10c5883a 	add	r2,r2,r3
  816fd8:	10802404 	addi	r2,r2,144
  816fdc:	10800047 	ldb	r2,1(r2)
  816fe0:	11004024 	muli	r4,r2,256
  816fe4:	e17ffb17 	ldw	r5,-20(fp)
  816fe8:	080bdb80 	call	80bdb8 <__divsi3>
  816fec:	80800085 	stb	r2,2(r16)
  816ff0:	e0bffa17 	ldw	r2,-24(fp)
  816ff4:	10800044 	addi	r2,r2,1
  816ff8:	e0bffa15 	stw	r2,-24(fp)
  816ffc:	003fe206 	br	816f88 <altera_avalon_lcd_16207_write+0x398>
#elif 1
        /* This option pads the shorter lines with spaces so that they all
         * scroll together.
         */
        sp->line[y].width = widthmax / 2;
        sp->line[y].speed = 256/2;
#else
        /* This option makes the shorter lines stop after they have rotated
         * and waits for the longer lines to catch up
         */
        sp->line[y].speed = 256/2;
#endif
      }
  }

  /* Repaint once, then check whether there has been a missed repaint
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  817000:	e0bff517 	ldw	r2,-44(fp)
  817004:	10800947 	ldb	r2,37(r2)
  817008:	e0bffe15 	stw	r2,-8(fp)

    lcd_repaint_screen(sp);
  81700c:	e13ff517 	ldw	r4,-44(fp)
  817010:	08167440 	call	816744 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  817014:	e0bff517 	ldw	r2,-44(fp)
  817018:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  81701c:	e0bff517 	ldw	r2,-44(fp)
  817020:	10c00947 	ldb	r3,37(r2)
  817024:	e0bffe17 	ldw	r2,-8(fp)
  817028:	1880011e 	bne	r3,r2,817030 <altera_avalon_lcd_16207_write+0x440>
      break;
  81702c:	00000406 	br	817040 <altera_avalon_lcd_16207_write+0x450>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  817030:	e0fff517 	ldw	r3,-44(fp)
  817034:	00800044 	movi	r2,1
  817038:	188009c5 	stb	r2,39(r3)
  81703c:	003ff006 	br	817000 <altera_avalon_lcd_16207_write+0x410>
  817040:	e03ffe15 	stw	zero,-8(fp)
  }

  /* Now that access to the display is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  817044:	e0bff717 	ldw	r2,-36(fp)
}
  817048:	dfc00c17 	ldw	ra,48(sp)
  81704c:	df000b17 	ldw	fp,44(sp)
  817050:	dc000a17 	ldw	r16,40(sp)
  817054:	dec00d04 	addi	sp,sp,52
  817058:	f800283a 	ret

0081705c <alt_lcd_16207_timeout>:

/* --------------------------------------------------------------------- */

/* This should be in a top level header file really */
#define container_of(ptr, type, member) ((type *)((char *)ptr - offsetof(type, member)))

/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  81705c:	defffc04 	addi	sp,sp,-16
  817060:	dfc00315 	stw	ra,12(sp)
  817064:	df000215 	stw	fp,8(sp)
  817068:	df000204 	addi	fp,sp,8
  81706c:	e13ffe15 	stw	r4,-8(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  817070:	e0bffe17 	ldw	r2,-8(fp)
  817074:	e0bfff15 	stw	r2,-4(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  817078:	e0bfff17 	ldw	r2,-4(fp)
  81707c:	10800947 	ldb	r2,37(r2)
  817080:	10c00044 	addi	r3,r2,1
  817084:	e0bfff17 	ldw	r2,-4(fp)
  817088:	10800987 	ldb	r2,38(r2)
  81708c:	18800316 	blt	r3,r2,81709c <alt_lcd_16207_timeout+0x40>
    sp->scrollpos = 0;
  817090:	e0bfff17 	ldw	r2,-4(fp)
  817094:	10000945 	stb	zero,37(r2)
  817098:	00000506 	br	8170b0 <alt_lcd_16207_timeout+0x54>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81709c:	e0ffff17 	ldw	r3,-4(fp)
  8170a0:	e0bfff17 	ldw	r2,-4(fp)
  8170a4:	10800943 	ldbu	r2,37(r2)
  8170a8:	10800044 	addi	r2,r2,1
  8170ac:	18800945 	stb	r2,37(r3)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8170b0:	e0bfff17 	ldw	r2,-4(fp)
  8170b4:	10800987 	ldb	r2,38(r2)
  8170b8:	10800050 	cmplti	r2,r2,1
  8170bc:	1000061e 	bne	r2,zero,8170d8 <alt_lcd_16207_timeout+0x7c>
  8170c0:	e0bfff17 	ldw	r2,-4(fp)
  8170c4:	108009c7 	ldb	r2,39(r2)
  8170c8:	1004c03a 	cmpne	r2,r2,zero
  8170cc:	1000021e 	bne	r2,zero,8170d8 <alt_lcd_16207_timeout+0x7c>
    lcd_repaint_screen(sp);
  8170d0:	e13fff17 	ldw	r4,-4(fp)
  8170d4:	08167440 	call	816744 <lcd_repaint_screen>

  return sp->period;
  8170d8:	e0bfff17 	ldw	r2,-4(fp)
  8170dc:	10800717 	ldw	r2,28(r2)
}
  8170e0:	dfc00317 	ldw	ra,12(sp)
  8170e4:	df000217 	ldw	fp,8(sp)
  8170e8:	dec00404 	addi	sp,sp,16
  8170ec:	f800283a 	ret

008170f0 <altera_avalon_lcd_16207_init>:

/* --------------------------------------------------------------------- */

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8170f0:	defff904 	addi	sp,sp,-28
  8170f4:	dfc00615 	stw	ra,24(sp)
  8170f8:	df000515 	stw	fp,20(sp)
  8170fc:	dc000415 	stw	r16,16(sp)
  817100:	df000504 	addi	fp,sp,20
  817104:	e13ffb15 	stw	r4,-20(fp)
  unsigned int base = sp->base;
  817108:	e0bffb17 	ldw	r2,-20(fp)
  81710c:	10800017 	ldw	r2,0(r2)
  817110:	e0bffc15 	stw	r2,-16(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  817114:	e0bffb17 	ldw	r2,-20(fp)
  817118:	10000805 	stb	zero,32(r2)
  81711c:	e03ffd15 	stw	zero,-12(fp)

  ALT_SEM_CREATE (&sp->write_lock, 1);

  /* The initialisation sequence below is copied from the datasheet for
   * the 16207 LCD display.  The first commands need to be timed because
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  817120:	010ea604 	movi	r4,15000
  817124:	08156000 	call	815600 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  817128:	e0fffc17 	ldw	r3,-16(fp)
  81712c:	00800c04 	movi	r2,48
  817130:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  817134:	01040104 	movi	r4,4100
  817138:	08156000 	call	815600 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81713c:	e0fffc17 	ldw	r3,-16(fp)
  817140:	00800c04 	movi	r2,48
  817144:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  817148:	0100fa04 	movi	r4,1000
  81714c:	08156000 	call	815600 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  817150:	e0fffc17 	ldw	r3,-16(fp)
  817154:	00800c04 	movi	r2,48
  817158:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  81715c:	e13ffb17 	ldw	r4,-20(fp)
  817160:	01400e04 	movi	r5,56
  817164:	08165200 	call	816520 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  817168:	e13ffb17 	ldw	r4,-20(fp)
  81716c:	01400204 	movi	r5,8
  817170:	08165200 	call	816520 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  817174:	e13ffb17 	ldw	r4,-20(fp)
  817178:	08166840 	call	816684 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  81717c:	e13ffb17 	ldw	r4,-20(fp)
  817180:	01400184 	movi	r5,6
  817184:	08165200 	call	816520 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  817188:	e13ffb17 	ldw	r4,-20(fp)
  81718c:	01400304 	movi	r5,12
  817190:	08165200 	call	816520 <lcd_write_command>

  sp->esccount = -1;
  817194:	e0fffb17 	ldw	r3,-20(fp)
  817198:	00bfffc4 	movi	r2,-1
  81719c:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  8171a0:	e0bffb17 	ldw	r2,-20(fp)
  8171a4:	11000a04 	addi	r4,r2,40
  8171a8:	000b883a 	mov	r5,zero
  8171ac:	01800204 	movi	r6,8
  8171b0:	080d7180 	call	80d718 <memset>

  sp->scrollpos = 0;
  8171b4:	e0bffb17 	ldw	r2,-20(fp)
  8171b8:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8171bc:	e0bffb17 	ldw	r2,-20(fp)
  8171c0:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8171c4:	e0bffb17 	ldw	r2,-20(fp)
  8171c8:	100009c5 	stb	zero,39(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8171cc:	e43ffb17 	ldw	r16,-20(fp)
  8171d0:	d0a01917 	ldw	r2,-32668(gp)
  8171d4:	e0bffe15 	stw	r2,-8(fp)
  8171d8:	e13ffe17 	ldw	r4,-8(fp)
  8171dc:	01400284 	movi	r5,10
  8171e0:	080be540 	call	80be54 <__udivsi3>
  8171e4:	80800715 	stw	r2,28(r16)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8171e8:	e0bffb17 	ldw	r2,-20(fp)
  8171ec:	11000104 	addi	r4,r2,4
  8171f0:	e0bffb17 	ldw	r2,-20(fp)
  8171f4:	11400717 	ldw	r5,28(r2)
  8171f8:	01802074 	movhi	r6,129
  8171fc:	319c1704 	addi	r6,r6,28764
  817200:	e1fffb17 	ldw	r7,-20(fp)
  817204:	08187b40 	call	8187b4 <alt_alarm_start>
}
  817208:	dfc00617 	ldw	ra,24(sp)
  81720c:	df000517 	ldw	fp,20(sp)
  817210:	dc000417 	ldw	r16,16(sp)
  817214:	dec00704 	addi	sp,sp,28
  817218:	f800283a 	ret

0081721c <altera_avalon_lcd_16207_write_fd>:
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81721c:	defffa04 	addi	sp,sp,-24
  817220:	dfc00515 	stw	ra,20(sp)
  817224:	df000415 	stw	fp,16(sp)
  817228:	df000404 	addi	fp,sp,16
  81722c:	e13ffc15 	stw	r4,-16(fp)
  817230:	e17ffd15 	stw	r5,-12(fp)
  817234:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  817238:	e0bffc17 	ldw	r2,-16(fp)
  81723c:	10800017 	ldw	r2,0(r2)
  817240:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  817244:	e0bfff17 	ldw	r2,-4(fp)
  817248:	11000a04 	addi	r4,r2,40
  81724c:	e0bffc17 	ldw	r2,-16(fp)
  817250:	e17ffd17 	ldw	r5,-12(fp)
  817254:	e1bffe17 	ldw	r6,-8(fp)
  817258:	11c00217 	ldw	r7,8(r2)
  81725c:	0816bf00 	call	816bf0 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  817260:	dfc00517 	ldw	ra,20(sp)
  817264:	df000417 	ldw	fp,16(sp)
  817268:	dec00604 	addi	sp,sp,24
  81726c:	f800283a 	ret

00817270 <alt_avalon_timer_sc_irq>:
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  817270:	defff904 	addi	sp,sp,-28
  817274:	dfc00615 	stw	ra,24(sp)
  817278:	df000515 	stw	fp,20(sp)
  81727c:	df000504 	addi	fp,sp,20
  817280:	e13ffb15 	stw	r4,-20(fp)
  817284:	e17ffc15 	stw	r5,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  817288:	e0bffb17 	ldw	r2,-20(fp)
  81728c:	10000035 	stwio	zero,0(r2)
  
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  817290:	e0bffb17 	ldw	r2,-20(fp)
  817294:	10800104 	addi	r2,r2,4
  817298:	10800037 	ldwio	r2,0(r2)
  81729c:	0005303a 	rdctl	r2,status
  8172a0:	e0bfff15 	stw	r2,-4(fp)
  8172a4:	e0ffff17 	ldw	r3,-4(fp)
  8172a8:	00bfff84 	movi	r2,-2
  8172ac:	1884703a 	and	r2,r3,r2
  8172b0:	1001703a 	wrctl	status,r2
  8172b4:	e0bfff17 	ldw	r2,-4(fp)
  8172b8:	e0bffe15 	stw	r2,-8(fp)
  8172bc:	e0bffe17 	ldw	r2,-8(fp)
  8172c0:	e0bffd15 	stw	r2,-12(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
  ALT_LOG_SYS_CLK_HEARTBEAT();

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  8172c4:	0818fe80 	call	818fe8 <alt_tick>
  8172c8:	e0bffd17 	ldw	r2,-12(fp)
  8172cc:	e0bfff15 	stw	r2,-4(fp)
  8172d0:	e0bfff17 	ldw	r2,-4(fp)
  8172d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8172d8:	dfc00617 	ldw	ra,24(sp)
  8172dc:	df000517 	ldw	fp,20(sp)
  8172e0:	dec00704 	addi	sp,sp,28
  8172e4:	f800283a 	ret

008172e8 <alt_avalon_timer_sc_init>:

/*
 * alt_avalon_timer_sc_init() is called to initialise the timer that will be 
 * used to provide the periodic system clock. This is called from the 
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8172e8:	defff804 	addi	sp,sp,-32
  8172ec:	dfc00715 	stw	ra,28(sp)
  8172f0:	df000615 	stw	fp,24(sp)
  8172f4:	df000604 	addi	fp,sp,24
  8172f8:	e13ffa15 	stw	r4,-24(fp)
  8172fc:	e17ffb15 	stw	r5,-20(fp)
  817300:	e1bffc15 	stw	r6,-16(fp)
  817304:	e1fffd15 	stw	r7,-12(fp)
  817308:	e0bffd17 	ldw	r2,-12(fp)
  81730c:	e0bffe15 	stw	r2,-8(fp)
  817310:	d0a01917 	ldw	r2,-32668(gp)
  817314:	1004c03a 	cmpne	r2,r2,zero
  817318:	1000041e 	bne	r2,zero,81732c <alt_avalon_timer_sc_init+0x44>
  81731c:	e0bffe17 	ldw	r2,-8(fp)
  817320:	d0a01915 	stw	r2,-32668(gp)
  817324:	e03fff15 	stw	zero,-4(fp)
  817328:	00000206 	br	817334 <alt_avalon_timer_sc_init+0x4c>
  81732c:	00bfffc4 	movi	r2,-1
  817330:	e0bfff15 	stw	r2,-4(fp)
  /* set the system clock frequency */
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  817334:	e0bffa17 	ldw	r2,-24(fp)
  817338:	10800104 	addi	r2,r2,4
  81733c:	1007883a 	mov	r3,r2
  817340:	008001c4 	movi	r2,7
  817344:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  817348:	e13ffc17 	ldw	r4,-16(fp)
  81734c:	e17ffa17 	ldw	r5,-24(fp)
  817350:	01802074 	movhi	r6,129
  817354:	319c9c04 	addi	r6,r6,29296
  817358:	08149f80 	call	8149f8 <alt_irq_register>
#endif  
}
  81735c:	dfc00717 	ldw	ra,28(sp)
  817360:	df000617 	ldw	fp,24(sp)
  817364:	dec00804 	addi	sp,sp,32
  817368:	f800283a 	ret

0081736c <alt_up_pixel_buffer_open_dev>:
#include "altera_up_avalon_pixel_buffer.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dev* alt_up_pixel_buffer_open_dev(const char* name) {
  81736c:	defffc04 	addi	sp,sp,-16
  817370:	dfc00315 	stw	ra,12(sp)
  817374:	df000215 	stw	fp,8(sp)
  817378:	df000204 	addi	fp,sp,8
  81737c:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dev *dev = (alt_up_pixel_buffer_dev*)alt_find_dev(name, &alt_dev_list);
  817380:	e13ffe17 	ldw	r4,-8(fp)
  817384:	d1600e04 	addi	r5,gp,-32712
  817388:	0818bf80 	call	818bf8 <alt_find_dev>
  81738c:	e0bfff15 	stw	r2,-4(fp)

  return dev;
  817390:	e0bfff17 	ldw	r2,-4(fp)
}
  817394:	dfc00317 	ldw	ra,12(sp)
  817398:	df000217 	ldw	fp,8(sp)
  81739c:	dec00404 	addi	sp,sp,16
  8173a0:	f800283a 	ret

008173a4 <alt_up_pixel_buffer_draw>:

int alt_up_pixel_buffer_draw(alt_up_pixel_buffer_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  8173a4:	defff904 	addi	sp,sp,-28
  8173a8:	df000615 	stw	fp,24(sp)
  8173ac:	df000604 	addi	fp,sp,24
  8173b0:	e13ffa15 	stw	r4,-24(fp)
  8173b4:	e17ffb15 	stw	r5,-20(fp)
  8173b8:	e1bffc15 	stw	r6,-16(fp)
  8173bc:	e1fffd15 	stw	r7,-12(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  8173c0:	e0bffa17 	ldw	r2,-24(fp)
  8173c4:	10c00f17 	ldw	r3,60(r2)
  8173c8:	e0bffc17 	ldw	r2,-16(fp)
  8173cc:	10c0052e 	bgeu	r2,r3,8173e4 <alt_up_pixel_buffer_draw+0x40>
  8173d0:	e0bffa17 	ldw	r2,-24(fp)
  8173d4:	10c01017 	ldw	r3,64(r2)
  8173d8:	e0bffd17 	ldw	r2,-12(fp)
  8173dc:	10c0012e 	bgeu	r2,r3,8173e4 <alt_up_pixel_buffer_draw+0x40>
  8173e0:	00000306 	br	8173f0 <alt_up_pixel_buffer_draw+0x4c>
		return -1;
  8173e4:	00bfffc4 	movi	r2,-1
  8173e8:	e0bfff15 	stw	r2,-4(fp)
  8173ec:	00005106 	br	817534 <alt_up_pixel_buffer_draw+0x190>

	unsigned int addr = 0;
  8173f0:	e03ffe15 	stw	zero,-8(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  8173f4:	e0bffa17 	ldw	r2,-24(fp)
  8173f8:	10800d17 	ldw	r2,52(r2)
  8173fc:	1004c03a 	cmpne	r2,r2,zero
  817400:	1000151e 	bne	r2,zero,817458 <alt_up_pixel_buffer_draw+0xb4>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  817404:	e0bffa17 	ldw	r2,-24(fp)
  817408:	10c01217 	ldw	r3,72(r2)
  81740c:	e0bffc17 	ldw	r2,-16(fp)
  817410:	1886703a 	and	r3,r3,r2
  817414:	e0bffa17 	ldw	r2,-24(fp)
  817418:	10801117 	ldw	r2,68(r2)
  81741c:	1886983a 	sll	r3,r3,r2
  817420:	e0bffe17 	ldw	r2,-8(fp)
  817424:	10c4b03a 	or	r2,r2,r3
  817428:	e0bffe15 	stw	r2,-8(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  81742c:	e0bffa17 	ldw	r2,-24(fp)
  817430:	10c01417 	ldw	r3,80(r2)
  817434:	e0bffd17 	ldw	r2,-12(fp)
  817438:	1886703a 	and	r3,r3,r2
  81743c:	e0bffa17 	ldw	r2,-24(fp)
  817440:	10801317 	ldw	r2,76(r2)
  817444:	1886983a 	sll	r3,r3,r2
  817448:	e0bffe17 	ldw	r2,-8(fp)
  81744c:	10c4b03a 	or	r2,r2,r3
  817450:	e0bffe15 	stw	r2,-8(fp)
  817454:	00001706 	br	8174b4 <alt_up_pixel_buffer_draw+0x110>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  817458:	e0bffa17 	ldw	r2,-24(fp)
  81745c:	10c01217 	ldw	r3,72(r2)
  817460:	e0bffc17 	ldw	r2,-16(fp)
  817464:	1886703a 	and	r3,r3,r2
  817468:	e0bffa17 	ldw	r2,-24(fp)
  81746c:	10801117 	ldw	r2,68(r2)
  817470:	1886983a 	sll	r3,r3,r2
  817474:	e0bffe17 	ldw	r2,-8(fp)
  817478:	10c5883a 	add	r2,r2,r3
  81747c:	e0bffe15 	stw	r2,-8(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  817480:	e0bffa17 	ldw	r2,-24(fp)
  817484:	10c01417 	ldw	r3,80(r2)
  817488:	e0bffd17 	ldw	r2,-12(fp)
  81748c:	1886703a 	and	r3,r3,r2
  817490:	e0bffa17 	ldw	r2,-24(fp)
  817494:	10800f17 	ldw	r2,60(r2)
  817498:	1887383a 	mul	r3,r3,r2
  81749c:	e0bffa17 	ldw	r2,-24(fp)
  8174a0:	10801117 	ldw	r2,68(r2)
  8174a4:	1886983a 	sll	r3,r3,r2
  8174a8:	e0bffe17 	ldw	r2,-8(fp)
  8174ac:	10c5883a 	add	r2,r2,r3
  8174b0:	e0bffe15 	stw	r2,-8(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8174b4:	e0bffa17 	ldw	r2,-24(fp)
  8174b8:	10800e17 	ldw	r2,56(r2)
  8174bc:	10800058 	cmpnei	r2,r2,1
  8174c0:	1000081e 	bne	r2,zero,8174e4 <alt_up_pixel_buffer_draw+0x140>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  8174c4:	e0bffa17 	ldw	r2,-24(fp)
  8174c8:	10c00c17 	ldw	r3,48(r2)
  8174cc:	e0bffe17 	ldw	r2,-8(fp)
  8174d0:	1885883a 	add	r2,r3,r2
  8174d4:	1007883a 	mov	r3,r2
  8174d8:	e0bffb17 	ldw	r2,-20(fp)
  8174dc:	18800025 	stbio	r2,0(r3)
  8174e0:	00001306 	br	817530 <alt_up_pixel_buffer_draw+0x18c>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8174e4:	e0bffa17 	ldw	r2,-24(fp)
  8174e8:	10800e17 	ldw	r2,56(r2)
  8174ec:	10800098 	cmpnei	r2,r2,2
  8174f0:	1000081e 	bne	r2,zero,817514 <alt_up_pixel_buffer_draw+0x170>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  8174f4:	e0bffa17 	ldw	r2,-24(fp)
  8174f8:	10c00c17 	ldw	r3,48(r2)
  8174fc:	e0bffe17 	ldw	r2,-8(fp)
  817500:	1885883a 	add	r2,r3,r2
  817504:	1007883a 	mov	r3,r2
  817508:	e0bffb17 	ldw	r2,-20(fp)
  81750c:	1880002d 	sthio	r2,0(r3)
  817510:	00000706 	br	817530 <alt_up_pixel_buffer_draw+0x18c>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  817514:	e0bffa17 	ldw	r2,-24(fp)
  817518:	10c00c17 	ldw	r3,48(r2)
  81751c:	e0bffe17 	ldw	r2,-8(fp)
  817520:	1885883a 	add	r2,r3,r2
  817524:	1007883a 	mov	r3,r2
  817528:	e0bffb17 	ldw	r2,-20(fp)
  81752c:	18800035 	stwio	r2,0(r3)
	}

	return 0;
  817530:	e03fff15 	stw	zero,-4(fp)
}
  817534:	e0bfff17 	ldw	r2,-4(fp)
  817538:	df000617 	ldw	fp,24(sp)
  81753c:	dec00704 	addi	sp,sp,28
  817540:	f800283a 	ret

00817544 <alt_up_pixel_buffer_change_back_buffer_address>:

int alt_up_pixel_buffer_change_back_buffer_address(alt_up_pixel_buffer_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  817544:	defffd04 	addi	sp,sp,-12
  817548:	df000215 	stw	fp,8(sp)
  81754c:	df000204 	addi	fp,sp,8
  817550:	e13ffe15 	stw	r4,-8(fp)
  817554:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  817558:	e0bffe17 	ldw	r2,-8(fp)
  81755c:	10800a17 	ldw	r2,40(r2)
  817560:	10800104 	addi	r2,r2,4
  817564:	1007883a 	mov	r3,r2
  817568:	e0bfff17 	ldw	r2,-4(fp)
  81756c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  817570:	e0fffe17 	ldw	r3,-8(fp)
  817574:	e0bffe17 	ldw	r2,-8(fp)
  817578:	10800a17 	ldw	r2,40(r2)
  81757c:	10800104 	addi	r2,r2,4
  817580:	10800037 	ldwio	r2,0(r2)
  817584:	18800c15 	stw	r2,48(r3)
	return 0;
  817588:	0005883a 	mov	r2,zero
}
  81758c:	df000217 	ldw	fp,8(sp)
  817590:	dec00304 	addi	sp,sp,12
  817594:	f800283a 	ret

00817598 <alt_up_pixel_buffer_swap_buffers>:

int alt_up_pixel_buffer_swap_buffers(alt_up_pixel_buffer_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  817598:	defffe04 	addi	sp,sp,-8
  81759c:	df000115 	stw	fp,4(sp)
  8175a0:	df000104 	addi	fp,sp,4
  8175a4:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  8175a8:	e0bfff17 	ldw	r2,-4(fp)
  8175ac:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  8175b0:	e0bfff17 	ldw	r2,-4(fp)
  8175b4:	10c00a17 	ldw	r3,40(r2)
  8175b8:	00800044 	movi	r2,1
  8175bc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  8175c0:	e0ffff17 	ldw	r3,-4(fp)
  8175c4:	e0bfff17 	ldw	r2,-4(fp)
  8175c8:	10800b17 	ldw	r2,44(r2)
  8175cc:	18800c15 	stw	r2,48(r3)
	pixel_buffer->buffer_start_address = temp;
  8175d0:	e0bfff17 	ldw	r2,-4(fp)
  8175d4:	11000b15 	stw	r4,44(r2)
	return 0;
  8175d8:	0005883a 	mov	r2,zero
}
  8175dc:	df000117 	ldw	fp,4(sp)
  8175e0:	dec00204 	addi	sp,sp,8
  8175e4:	f800283a 	ret

008175e8 <alt_up_pixel_buffer_check_swap_buffers_status>:

int alt_up_pixel_buffer_check_swap_buffers_status(alt_up_pixel_buffer_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  8175e8:	defffe04 	addi	sp,sp,-8
  8175ec:	df000115 	stw	fp,4(sp)
  8175f0:	df000104 	addi	fp,sp,4
  8175f4:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  8175f8:	e0bfff17 	ldw	r2,-4(fp)
  8175fc:	10800a17 	ldw	r2,40(r2)
  817600:	10800304 	addi	r2,r2,12
  817604:	10800037 	ldwio	r2,0(r2)
  817608:	1080004c 	andi	r2,r2,1
}
  81760c:	df000117 	ldw	fp,4(sp)
  817610:	dec00204 	addi	sp,sp,8
  817614:	f800283a 	ret

00817618 <alt_up_pixel_buffer_clear_screen>:

void alt_up_pixel_buffer_clear_screen(alt_up_pixel_buffer_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  817618:	defff604 	addi	sp,sp,-40
  81761c:	df000915 	stw	fp,36(sp)
  817620:	df000904 	addi	fp,sp,36
  817624:	e13ff715 	stw	r4,-36(fp)
  817628:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  81762c:	e0bff817 	ldw	r2,-32(fp)
  817630:	10800058 	cmpnei	r2,r2,1
  817634:	1000041e 	bne	r2,zero,817648 <alt_up_pixel_buffer_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  817638:	e0bff717 	ldw	r2,-36(fp)
  81763c:	10800c17 	ldw	r2,48(r2)
  817640:	e0bff915 	stw	r2,-28(fp)
  817644:	00000306 	br	817654 <alt_up_pixel_buffer_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  817648:	e0bff717 	ldw	r2,-36(fp)
  81764c:	10800b17 	ldw	r2,44(r2)
  817650:	e0bff915 	stw	r2,-28(fp)
	limit_x = pixel_buffer->x_resolution;
  817654:	e0bff717 	ldw	r2,-36(fp)
  817658:	10800f17 	ldw	r2,60(r2)
  81765c:	e0bffa15 	stw	r2,-24(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  817660:	e0bff717 	ldw	r2,-36(fp)
  817664:	10800e17 	ldw	r2,56(r2)
  817668:	10800098 	cmpnei	r2,r2,2
  81766c:	1000041e 	bne	r2,zero,817680 <alt_up_pixel_buffer_clear_screen+0x68>
		limit_x = limit_x << 1;
  817670:	e0bffa17 	ldw	r2,-24(fp)
  817674:	1085883a 	add	r2,r2,r2
  817678:	e0bffa15 	stw	r2,-24(fp)
  81767c:	00000306 	br	81768c <alt_up_pixel_buffer_clear_screen+0x74>
	} else {
		limit_x = limit_x << 2;
  817680:	e0fffa17 	ldw	r3,-24(fp)
  817684:	180690ba 	slli	r3,r3,2
  817688:	e0fffa15 	stw	r3,-24(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  81768c:	e0bff717 	ldw	r2,-36(fp)
  817690:	10801017 	ldw	r2,64(r2)
  817694:	e0bffb15 	stw	r2,-20(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  817698:	e0bff717 	ldw	r2,-36(fp)
  81769c:	10800d17 	ldw	r2,52(r2)
  8176a0:	1004c03a 	cmpne	r2,r2,zero
  8176a4:	10001d1e 	bne	r2,zero,81771c <alt_up_pixel_buffer_clear_screen+0x104>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  8176a8:	e0bff717 	ldw	r2,-36(fp)
  8176ac:	10801317 	ldw	r2,76(r2)
  8176b0:	e0bffe15 	stw	r2,-8(fp)

		for (y = 0; y < limit_y; y++)
  8176b4:	e03ffd15 	stw	zero,-12(fp)
  8176b8:	e13ffd17 	ldw	r4,-12(fp)
  8176bc:	e0bffb17 	ldw	r2,-20(fp)
  8176c0:	2080262e 	bgeu	r4,r2,81775c <alt_up_pixel_buffer_clear_screen+0x144>
		{
			for (x = 0; x < limit_x; x = x + 4)
  8176c4:	e03ffc15 	stw	zero,-16(fp)
  8176c8:	e0fffc17 	ldw	r3,-16(fp)
  8176cc:	e13ffa17 	ldw	r4,-24(fp)
  8176d0:	1900082e 	bgeu	r3,r4,8176f4 <alt_up_pixel_buffer_clear_screen+0xdc>
			{
				IOWR_32DIRECT(addr, x, 0);
  8176d4:	e0fff917 	ldw	r3,-28(fp)
  8176d8:	e13ffc17 	ldw	r4,-16(fp)
  8176dc:	1905883a 	add	r2,r3,r4
  8176e0:	10000035 	stwio	zero,0(r2)
  8176e4:	e0bffc17 	ldw	r2,-16(fp)
  8176e8:	10800104 	addi	r2,r2,4
  8176ec:	e0bffc15 	stw	r2,-16(fp)
  8176f0:	003ff506 	br	8176c8 <alt_up_pixel_buffer_clear_screen+0xb0>
			}
			addr = addr + (1 << offset_y);
  8176f4:	00800044 	movi	r2,1
  8176f8:	e0fffe17 	ldw	r3,-8(fp)
  8176fc:	10c4983a 	sll	r2,r2,r3
  817700:	e13ff917 	ldw	r4,-28(fp)
  817704:	2089883a 	add	r4,r4,r2
  817708:	e13ff915 	stw	r4,-28(fp)
  81770c:	e0bffd17 	ldw	r2,-12(fp)
  817710:	10800044 	addi	r2,r2,1
  817714:	e0bffd15 	stw	r2,-12(fp)
  817718:	003fe706 	br	8176b8 <alt_up_pixel_buffer_clear_screen+0xa0>
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  81771c:	e0fffb17 	ldw	r3,-20(fp)
  817720:	e13ffa17 	ldw	r4,-24(fp)
  817724:	1907383a 	mul	r3,r3,r4
  817728:	e0fffb15 	stw	r3,-20(fp)

		for (x = 0; x < limit_y; x = x + 4)
  81772c:	e03fff15 	stw	zero,-4(fp)
  817730:	e0bfff17 	ldw	r2,-4(fp)
  817734:	e0fffb17 	ldw	r3,-20(fp)
  817738:	10c0082e 	bgeu	r2,r3,81775c <alt_up_pixel_buffer_clear_screen+0x144>
		{
			IOWR_32DIRECT(addr, x, 0);
  81773c:	e13ff917 	ldw	r4,-28(fp)
  817740:	e0ffff17 	ldw	r3,-4(fp)
  817744:	20c5883a 	add	r2,r4,r3
  817748:	10000035 	stwio	zero,0(r2)
  81774c:	e13fff17 	ldw	r4,-4(fp)
  817750:	21000104 	addi	r4,r4,4
  817754:	e13fff15 	stw	r4,-4(fp)
  817758:	003ff506 	br	817730 <alt_up_pixel_buffer_clear_screen+0x118>
		}
	}
}
  81775c:	df000917 	ldw	fp,36(sp)
  817760:	dec00a04 	addi	sp,sp,40
  817764:	f800283a 	ret

00817768 <alt_up_pixel_buffer_draw_box>:

void alt_up_pixel_buffer_draw_box(alt_up_pixel_buffer_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  817768:	deffed04 	addi	sp,sp,-76
  81776c:	df001215 	stw	fp,72(sp)
  817770:	df001204 	addi	fp,sp,72
  817774:	e13fee15 	stw	r4,-72(fp)
  817778:	e17fef15 	stw	r5,-68(fp)
  81777c:	e1bff015 	stw	r6,-64(fp)
  817780:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  817784:	e0bfee17 	ldw	r2,-72(fp)
  817788:	10800f17 	ldw	r2,60(r2)
  81778c:	e0bff315 	stw	r2,-52(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  817790:	e0bfee17 	ldw	r2,-72(fp)
  817794:	10801017 	ldw	r2,64(r2)
  817798:	e0bff415 	stw	r2,-48(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  81779c:	e0bfef17 	ldw	r2,-68(fp)
  8177a0:	e0bff615 	stw	r2,-40(fp)
	register unsigned int r_x = x1;
  8177a4:	e0fff117 	ldw	r3,-60(fp)
  8177a8:	e0fff715 	stw	r3,-36(fp)
	register unsigned int t_y = y0;
  8177ac:	e13ff017 	ldw	r4,-64(fp)
  8177b0:	e13ff815 	stw	r4,-32(fp)
	register unsigned int b_y = y1;
  8177b4:	e0800117 	ldw	r2,4(fp)
  8177b8:	e0bff915 	stw	r2,-28(fp)
	register unsigned int local_color = color;
  8177bc:	e0c00217 	ldw	r3,8(fp)
  8177c0:	e0fffa15 	stw	r3,-24(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  8177c4:	e13ff717 	ldw	r4,-36(fp)
  8177c8:	e0bff617 	ldw	r2,-40(fp)
  8177cc:	2080062e 	bgeu	r4,r2,8177e8 <alt_up_pixel_buffer_draw_box+0x80>
	{
		temp = l_x;
  8177d0:	e0fff617 	ldw	r3,-40(fp)
  8177d4:	e0fff515 	stw	r3,-44(fp)
		l_x = r_x;
  8177d8:	e13ff717 	ldw	r4,-36(fp)
  8177dc:	e13ff615 	stw	r4,-40(fp)
		r_x = temp;
  8177e0:	e0bff517 	ldw	r2,-44(fp)
  8177e4:	e0bff715 	stw	r2,-36(fp)
	}
	if (t_y > b_y)
  8177e8:	e0fff917 	ldw	r3,-28(fp)
  8177ec:	e13ff817 	ldw	r4,-32(fp)
  8177f0:	1900062e 	bgeu	r3,r4,81780c <alt_up_pixel_buffer_draw_box+0xa4>
	{
		temp = t_y;
  8177f4:	e0bff817 	ldw	r2,-32(fp)
  8177f8:	e0bff515 	stw	r2,-44(fp)
		t_y = b_y;
  8177fc:	e0fff917 	ldw	r3,-28(fp)
  817800:	e0fff815 	stw	r3,-32(fp)
		b_y = temp;
  817804:	e13ff517 	ldw	r4,-44(fp)
  817808:	e13ff915 	stw	r4,-28(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  81780c:	e0bff617 	ldw	r2,-40(fp)
  817810:	e0fff317 	ldw	r3,-52(fp)
  817814:	10c0fa2e 	bgeu	r2,r3,817c00 <alt_up_pixel_buffer_draw_box+0x498>
  817818:	e13ff817 	ldw	r4,-32(fp)
  81781c:	e0bff417 	ldw	r2,-48(fp)
  817820:	2080f72e 	bgeu	r4,r2,817c00 <alt_up_pixel_buffer_draw_box+0x498>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
	}
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  817824:	e0fff717 	ldw	r3,-36(fp)
  817828:	e13ff317 	ldw	r4,-52(fp)
  81782c:	19000336 	bltu	r3,r4,81783c <alt_up_pixel_buffer_draw_box+0xd4>
	{
		r_x = limit_x - 1;
  817830:	e0bff317 	ldw	r2,-52(fp)
  817834:	10bfffc4 	addi	r2,r2,-1
  817838:	e0bff715 	stw	r2,-36(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  81783c:	e0fff917 	ldw	r3,-28(fp)
  817840:	e13ff417 	ldw	r4,-48(fp)
  817844:	19000336 	bltu	r3,r4,817854 <alt_up_pixel_buffer_draw_box+0xec>
	{
		b_y = limit_y - 1;
  817848:	e0bff417 	ldw	r2,-48(fp)
  81784c:	10bfffc4 	addi	r2,r2,-1
  817850:	e0bff915 	stw	r2,-28(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  817854:	e0800317 	ldw	r2,12(fp)
  817858:	10800058 	cmpnei	r2,r2,1
  81785c:	1000041e 	bne	r2,zero,817870 <alt_up_pixel_buffer_draw_box+0x108>
		addr = pixel_buffer->back_buffer_start_address;
  817860:	e0bfee17 	ldw	r2,-72(fp)
  817864:	10800c17 	ldw	r2,48(r2)
  817868:	e0bff215 	stw	r2,-56(fp)
  81786c:	00000306 	br	81787c <alt_up_pixel_buffer_draw_box+0x114>
	else
		addr = pixel_buffer->buffer_start_address;
  817870:	e0bfee17 	ldw	r2,-72(fp)
  817874:	10800b17 	ldw	r2,44(r2)
  817878:	e0bff215 	stw	r2,-56(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  81787c:	e0bfee17 	ldw	r2,-72(fp)
  817880:	10800d17 	ldw	r2,52(r2)
  817884:	1004c03a 	cmpne	r2,r2,zero
  817888:	10006a1e 	bne	r2,zero,817a34 <alt_up_pixel_buffer_draw_box+0x2cc>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  81788c:	e0bfee17 	ldw	r2,-72(fp)
  817890:	10801317 	ldw	r2,76(r2)
  817894:	e0bffd15 	stw	r2,-12(fp)
		addr = addr + (t_y << offset_y);
  817898:	e0fff817 	ldw	r3,-32(fp)
  81789c:	e13ffd17 	ldw	r4,-12(fp)
  8178a0:	1904983a 	sll	r2,r3,r4
  8178a4:	e0fff217 	ldw	r3,-56(fp)
  8178a8:	1887883a 	add	r3,r3,r2
  8178ac:	e0fff215 	stw	r3,-56(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8178b0:	e0bfee17 	ldw	r2,-72(fp)
  8178b4:	10800e17 	ldw	r2,56(r2)
  8178b8:	10800058 	cmpnei	r2,r2,1
  8178bc:	10001d1e 	bne	r2,zero,817934 <alt_up_pixel_buffer_draw_box+0x1cc>
			for (y = t_y; y <= b_y; y++)
  8178c0:	e13ff817 	ldw	r4,-32(fp)
  8178c4:	e13ffc15 	stw	r4,-16(fp)
  8178c8:	e0bff917 	ldw	r2,-28(fp)
  8178cc:	e0fffc17 	ldw	r3,-16(fp)
  8178d0:	10c0cb36 	bltu	r2,r3,817c00 <alt_up_pixel_buffer_draw_box+0x498>
			{
				for (x = l_x; x <= r_x; x++)
  8178d4:	e13ff617 	ldw	r4,-40(fp)
  8178d8:	e13ffb15 	stw	r4,-20(fp)
  8178dc:	e0bff717 	ldw	r2,-36(fp)
  8178e0:	e0fffb17 	ldw	r3,-20(fp)
  8178e4:	10c00936 	bltu	r2,r3,81790c <alt_up_pixel_buffer_draw_box+0x1a4>
				{
					IOWR_8DIRECT(addr, x, local_color);
  8178e8:	e13ff217 	ldw	r4,-56(fp)
  8178ec:	e0fffb17 	ldw	r3,-20(fp)
  8178f0:	20c5883a 	add	r2,r4,r3
  8178f4:	e13ffa17 	ldw	r4,-24(fp)
  8178f8:	11000025 	stbio	r4,0(r2)
  8178fc:	e0bffb17 	ldw	r2,-20(fp)
  817900:	10800044 	addi	r2,r2,1
  817904:	e0bffb15 	stw	r2,-20(fp)
  817908:	003ff406 	br	8178dc <alt_up_pixel_buffer_draw_box+0x174>
				}
				addr = addr + (1 << offset_y);
  81790c:	00800044 	movi	r2,1
  817910:	e0fffd17 	ldw	r3,-12(fp)
  817914:	10c4983a 	sll	r2,r2,r3
  817918:	e13ff217 	ldw	r4,-56(fp)
  81791c:	2089883a 	add	r4,r4,r2
  817920:	e13ff215 	stw	r4,-56(fp)
  817924:	e0bffc17 	ldw	r2,-16(fp)
  817928:	10800044 	addi	r2,r2,1
  81792c:	e0bffc15 	stw	r2,-16(fp)
  817930:	003fe506 	br	8178c8 <alt_up_pixel_buffer_draw_box+0x160>
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  817934:	e0bfee17 	ldw	r2,-72(fp)
  817938:	10800e17 	ldw	r2,56(r2)
  81793c:	10800098 	cmpnei	r2,r2,2
  817940:	10001e1e 	bne	r2,zero,8179bc <alt_up_pixel_buffer_draw_box+0x254>
			for (y = t_y; y <= b_y; y++)
  817944:	e0fff817 	ldw	r3,-32(fp)
  817948:	e0fffc15 	stw	r3,-16(fp)
  81794c:	e13ff917 	ldw	r4,-28(fp)
  817950:	e0bffc17 	ldw	r2,-16(fp)
  817954:	2080aa36 	bltu	r4,r2,817c00 <alt_up_pixel_buffer_draw_box+0x498>
			{
				for (x = l_x; x <= r_x; x++)
  817958:	e0fff617 	ldw	r3,-40(fp)
  81795c:	e0fffb15 	stw	r3,-20(fp)
  817960:	e13ff717 	ldw	r4,-36(fp)
  817964:	e0bffb17 	ldw	r2,-20(fp)
  817968:	20800a36 	bltu	r4,r2,817994 <alt_up_pixel_buffer_draw_box+0x22c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  81796c:	e0fffb17 	ldw	r3,-20(fp)
  817970:	18c5883a 	add	r2,r3,r3
  817974:	e13ff217 	ldw	r4,-56(fp)
  817978:	1105883a 	add	r2,r2,r4
  81797c:	e0fffa17 	ldw	r3,-24(fp)
  817980:	10c0002d 	sthio	r3,0(r2)
  817984:	e13ffb17 	ldw	r4,-20(fp)
  817988:	21000044 	addi	r4,r4,1
  81798c:	e13ffb15 	stw	r4,-20(fp)
  817990:	003ff306 	br	817960 <alt_up_pixel_buffer_draw_box+0x1f8>
				}
				addr = addr + (1 << offset_y);
  817994:	00800044 	movi	r2,1
  817998:	e0fffd17 	ldw	r3,-12(fp)
  81799c:	10c4983a 	sll	r2,r2,r3
  8179a0:	e13ff217 	ldw	r4,-56(fp)
  8179a4:	2089883a 	add	r4,r4,r2
  8179a8:	e13ff215 	stw	r4,-56(fp)
  8179ac:	e0bffc17 	ldw	r2,-16(fp)
  8179b0:	10800044 	addi	r2,r2,1
  8179b4:	e0bffc15 	stw	r2,-16(fp)
  8179b8:	003fe406 	br	81794c <alt_up_pixel_buffer_draw_box+0x1e4>
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8179bc:	e0fff817 	ldw	r3,-32(fp)
  8179c0:	e0fffc15 	stw	r3,-16(fp)
  8179c4:	e13ff917 	ldw	r4,-28(fp)
  8179c8:	e0bffc17 	ldw	r2,-16(fp)
  8179cc:	20808c36 	bltu	r4,r2,817c00 <alt_up_pixel_buffer_draw_box+0x498>
			{
				for (x = l_x; x <= r_x; x++)
  8179d0:	e0fff617 	ldw	r3,-40(fp)
  8179d4:	e0fffb15 	stw	r3,-20(fp)
  8179d8:	e13ff717 	ldw	r4,-36(fp)
  8179dc:	e0bffb17 	ldw	r2,-20(fp)
  8179e0:	20800a36 	bltu	r4,r2,817a0c <alt_up_pixel_buffer_draw_box+0x2a4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  8179e4:	e0fffb17 	ldw	r3,-20(fp)
  8179e8:	180490ba 	slli	r2,r3,2
  8179ec:	e13ff217 	ldw	r4,-56(fp)
  8179f0:	1105883a 	add	r2,r2,r4
  8179f4:	e0fffa17 	ldw	r3,-24(fp)
  8179f8:	10c00035 	stwio	r3,0(r2)
  8179fc:	e13ffb17 	ldw	r4,-20(fp)
  817a00:	21000044 	addi	r4,r4,1
  817a04:	e13ffb15 	stw	r4,-20(fp)
  817a08:	003ff306 	br	8179d8 <alt_up_pixel_buffer_draw_box+0x270>
				}
				addr = addr + (1 << offset_y);
  817a0c:	00800044 	movi	r2,1
  817a10:	e0fffd17 	ldw	r3,-12(fp)
  817a14:	10c4983a 	sll	r2,r2,r3
  817a18:	e13ff217 	ldw	r4,-56(fp)
  817a1c:	2089883a 	add	r4,r4,r2
  817a20:	e13ff215 	stw	r4,-56(fp)
  817a24:	e0bffc17 	ldw	r2,-16(fp)
  817a28:	10800044 	addi	r2,r2,1
  817a2c:	e0bffc15 	stw	r2,-16(fp)
  817a30:	003fe406 	br	8179c4 <alt_up_pixel_buffer_draw_box+0x25c>
			}
		}
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  817a34:	e0bfee17 	ldw	r2,-72(fp)
  817a38:	10800e17 	ldw	r2,56(r2)
  817a3c:	10800058 	cmpnei	r2,r2,1
  817a40:	1000211e 	bne	r2,zero,817ac8 <alt_up_pixel_buffer_draw_box+0x360>
			addr = addr + t_y * limit_x;
  817a44:	e0fff817 	ldw	r3,-32(fp)
  817a48:	e13ff317 	ldw	r4,-52(fp)
  817a4c:	1905383a 	mul	r2,r3,r4
  817a50:	e0fff217 	ldw	r3,-56(fp)
  817a54:	1887883a 	add	r3,r3,r2
  817a58:	e0fff215 	stw	r3,-56(fp)
			for (y = t_y; y <= b_y; y++)
  817a5c:	e13ff817 	ldw	r4,-32(fp)
  817a60:	e13fff15 	stw	r4,-4(fp)
  817a64:	e0bff917 	ldw	r2,-28(fp)
  817a68:	e0ffff17 	ldw	r3,-4(fp)
  817a6c:	10c06436 	bltu	r2,r3,817c00 <alt_up_pixel_buffer_draw_box+0x498>
			{
				for (x = l_x; x <= r_x; x++)
  817a70:	e13ff617 	ldw	r4,-40(fp)
  817a74:	e13ffe15 	stw	r4,-8(fp)
  817a78:	e0bff717 	ldw	r2,-36(fp)
  817a7c:	e0fffe17 	ldw	r3,-8(fp)
  817a80:	10c00936 	bltu	r2,r3,817aa8 <alt_up_pixel_buffer_draw_box+0x340>
				{
					IOWR_8DIRECT(addr, x, local_color);
  817a84:	e13ff217 	ldw	r4,-56(fp)
  817a88:	e0fffe17 	ldw	r3,-8(fp)
  817a8c:	20c5883a 	add	r2,r4,r3
  817a90:	e13ffa17 	ldw	r4,-24(fp)
  817a94:	11000025 	stbio	r4,0(r2)
  817a98:	e0bffe17 	ldw	r2,-8(fp)
  817a9c:	10800044 	addi	r2,r2,1
  817aa0:	e0bffe15 	stw	r2,-8(fp)
  817aa4:	003ff406 	br	817a78 <alt_up_pixel_buffer_draw_box+0x310>
				}
				addr = addr + limit_x;
  817aa8:	e0fff217 	ldw	r3,-56(fp)
  817aac:	e13ff317 	ldw	r4,-52(fp)
  817ab0:	1907883a 	add	r3,r3,r4
  817ab4:	e0fff215 	stw	r3,-56(fp)
  817ab8:	e0bfff17 	ldw	r2,-4(fp)
  817abc:	10800044 	addi	r2,r2,1
  817ac0:	e0bfff15 	stw	r2,-4(fp)
  817ac4:	003fe706 	br	817a64 <alt_up_pixel_buffer_draw_box+0x2fc>
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  817ac8:	e0bfee17 	ldw	r2,-72(fp)
  817acc:	10800e17 	ldw	r2,56(r2)
  817ad0:	10800098 	cmpnei	r2,r2,2
  817ad4:	1000251e 	bne	r2,zero,817b6c <alt_up_pixel_buffer_draw_box+0x404>
			limit_x = limit_x << 1;
  817ad8:	e0fff317 	ldw	r3,-52(fp)
  817adc:	18c7883a 	add	r3,r3,r3
  817ae0:	e0fff315 	stw	r3,-52(fp)
			addr = addr + t_y * limit_x;
  817ae4:	e13ff817 	ldw	r4,-32(fp)
  817ae8:	e0fff317 	ldw	r3,-52(fp)
  817aec:	20c5383a 	mul	r2,r4,r3
  817af0:	e13ff217 	ldw	r4,-56(fp)
  817af4:	2089883a 	add	r4,r4,r2
  817af8:	e13ff215 	stw	r4,-56(fp)
			for (y = t_y; y <= b_y; y++)
  817afc:	e0bff817 	ldw	r2,-32(fp)
  817b00:	e0bfff15 	stw	r2,-4(fp)
  817b04:	e0fff917 	ldw	r3,-28(fp)
  817b08:	e13fff17 	ldw	r4,-4(fp)
  817b0c:	19003c36 	bltu	r3,r4,817c00 <alt_up_pixel_buffer_draw_box+0x498>
			{
				for (x = l_x; x <= r_x; x++)
  817b10:	e0bff617 	ldw	r2,-40(fp)
  817b14:	e0bffe15 	stw	r2,-8(fp)
  817b18:	e0fff717 	ldw	r3,-36(fp)
  817b1c:	e13ffe17 	ldw	r4,-8(fp)
  817b20:	19000a36 	bltu	r3,r4,817b4c <alt_up_pixel_buffer_draw_box+0x3e4>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  817b24:	e0fffe17 	ldw	r3,-8(fp)
  817b28:	18c5883a 	add	r2,r3,r3
  817b2c:	e13ff217 	ldw	r4,-56(fp)
  817b30:	1105883a 	add	r2,r2,r4
  817b34:	e0fffa17 	ldw	r3,-24(fp)
  817b38:	10c0002d 	sthio	r3,0(r2)
  817b3c:	e13ffe17 	ldw	r4,-8(fp)
  817b40:	21000044 	addi	r4,r4,1
  817b44:	e13ffe15 	stw	r4,-8(fp)
  817b48:	003ff306 	br	817b18 <alt_up_pixel_buffer_draw_box+0x3b0>
				}
				addr = addr + limit_x;
  817b4c:	e0bff217 	ldw	r2,-56(fp)
  817b50:	e0fff317 	ldw	r3,-52(fp)
  817b54:	10c5883a 	add	r2,r2,r3
  817b58:	e0bff215 	stw	r2,-56(fp)
  817b5c:	e13fff17 	ldw	r4,-4(fp)
  817b60:	21000044 	addi	r4,r4,1
  817b64:	e13fff15 	stw	r4,-4(fp)
  817b68:	003fe606 	br	817b04 <alt_up_pixel_buffer_draw_box+0x39c>
			}
		}
		else
		{
			limit_x = limit_x << 2;
  817b6c:	e0bff317 	ldw	r2,-52(fp)
  817b70:	100490ba 	slli	r2,r2,2
  817b74:	e0bff315 	stw	r2,-52(fp)
			addr = addr + t_y * limit_x;
  817b78:	e0fff817 	ldw	r3,-32(fp)
  817b7c:	e13ff317 	ldw	r4,-52(fp)
  817b80:	1905383a 	mul	r2,r3,r4
  817b84:	e0fff217 	ldw	r3,-56(fp)
  817b88:	1887883a 	add	r3,r3,r2
  817b8c:	e0fff215 	stw	r3,-56(fp)
			for (y = t_y; y <= b_y; y++)
  817b90:	e13ff817 	ldw	r4,-32(fp)
  817b94:	e13fff15 	stw	r4,-4(fp)
  817b98:	e0bff917 	ldw	r2,-28(fp)
  817b9c:	e0ffff17 	ldw	r3,-4(fp)
  817ba0:	10c01736 	bltu	r2,r3,817c00 <alt_up_pixel_buffer_draw_box+0x498>
			{
				for (x = l_x; x <= r_x; x++)
  817ba4:	e13ff617 	ldw	r4,-40(fp)
  817ba8:	e13ffe15 	stw	r4,-8(fp)
  817bac:	e0bff717 	ldw	r2,-36(fp)
  817bb0:	e0fffe17 	ldw	r3,-8(fp)
  817bb4:	10c00a36 	bltu	r2,r3,817be0 <alt_up_pixel_buffer_draw_box+0x478>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  817bb8:	e13ffe17 	ldw	r4,-8(fp)
  817bbc:	200490ba 	slli	r2,r4,2
  817bc0:	e0fff217 	ldw	r3,-56(fp)
  817bc4:	10c5883a 	add	r2,r2,r3
  817bc8:	e13ffa17 	ldw	r4,-24(fp)
  817bcc:	11000035 	stwio	r4,0(r2)
  817bd0:	e0bffe17 	ldw	r2,-8(fp)
  817bd4:	10800044 	addi	r2,r2,1
  817bd8:	e0bffe15 	stw	r2,-8(fp)
  817bdc:	003ff306 	br	817bac <alt_up_pixel_buffer_draw_box+0x444>
				}
				addr = addr + limit_x;
  817be0:	e0fff217 	ldw	r3,-56(fp)
  817be4:	e13ff317 	ldw	r4,-52(fp)
  817be8:	1907883a 	add	r3,r3,r4
  817bec:	e0fff215 	stw	r3,-56(fp)
  817bf0:	e0bfff17 	ldw	r2,-4(fp)
  817bf4:	10800044 	addi	r2,r2,1
  817bf8:	e0bfff15 	stw	r2,-4(fp)
  817bfc:	003fe606 	br	817b98 <alt_up_pixel_buffer_draw_box+0x430>
			}
		}
	}
}
  817c00:	df001217 	ldw	fp,72(sp)
  817c04:	dec01304 	addi	sp,sp,76
  817c08:	f800283a 	ret

00817c0c <alt_up_pixel_buffer_draw_hline>:

void alt_up_pixel_buffer_draw_hline(alt_up_pixel_buffer_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  817c0c:	defff204 	addi	sp,sp,-56
  817c10:	df000d15 	stw	fp,52(sp)
  817c14:	df000d04 	addi	fp,sp,52
  817c18:	e13ff315 	stw	r4,-52(fp)
  817c1c:	e17ff415 	stw	r5,-48(fp)
  817c20:	e1bff515 	stw	r6,-44(fp)
  817c24:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  817c28:	e0bff317 	ldw	r2,-52(fp)
  817c2c:	10800f17 	ldw	r2,60(r2)
  817c30:	e0bff815 	stw	r2,-32(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  817c34:	e0bff317 	ldw	r2,-52(fp)
  817c38:	10801017 	ldw	r2,64(r2)
  817c3c:	e0bff915 	stw	r2,-28(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  817c40:	e0bff417 	ldw	r2,-48(fp)
  817c44:	e0bffa15 	stw	r2,-24(fp)
	register unsigned int r_x = x1;
  817c48:	e0fff517 	ldw	r3,-44(fp)
  817c4c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  817c50:	e13ff617 	ldw	r4,-40(fp)
  817c54:	e13ffc15 	stw	r4,-16(fp)
	register unsigned int local_color = color;
  817c58:	e0800117 	ldw	r2,4(fp)
  817c5c:	e0bffd15 	stw	r2,-12(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  817c60:	e0fffb17 	ldw	r3,-20(fp)
  817c64:	e13ffa17 	ldw	r4,-24(fp)
  817c68:	1900042e 	bgeu	r3,r4,817c7c <alt_up_pixel_buffer_draw_hline+0x70>
	{
		temp = l_x;
  817c6c:	e0bffa17 	ldw	r2,-24(fp)
		l_x = r_x;
  817c70:	e0fffb17 	ldw	r3,-20(fp)
  817c74:	e0fffa15 	stw	r3,-24(fp)
		r_x = temp;
  817c78:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  817c7c:	e13ffa17 	ldw	r4,-24(fp)
  817c80:	e0bff817 	ldw	r2,-32(fp)
  817c84:	20809e2e 	bgeu	r4,r2,817f00 <alt_up_pixel_buffer_draw_hline+0x2f4>
  817c88:	e0fffc17 	ldw	r3,-16(fp)
  817c8c:	e13ff917 	ldw	r4,-28(fp)
  817c90:	19009b2e 	bgeu	r3,r4,817f00 <alt_up_pixel_buffer_draw_hline+0x2f4>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
	}
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  817c94:	e0bffb17 	ldw	r2,-20(fp)
  817c98:	e0fff817 	ldw	r3,-32(fp)
  817c9c:	10c00336 	bltu	r2,r3,817cac <alt_up_pixel_buffer_draw_hline+0xa0>
	{
		r_x = limit_x - 1;
  817ca0:	e13ff817 	ldw	r4,-32(fp)
  817ca4:	213fffc4 	addi	r4,r4,-1
  817ca8:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  817cac:	e0800217 	ldw	r2,8(fp)
  817cb0:	10800058 	cmpnei	r2,r2,1
  817cb4:	1000041e 	bne	r2,zero,817cc8 <alt_up_pixel_buffer_draw_hline+0xbc>
		addr = pixel_buffer->back_buffer_start_address;
  817cb8:	e0bff317 	ldw	r2,-52(fp)
  817cbc:	10800c17 	ldw	r2,48(r2)
  817cc0:	e0bff715 	stw	r2,-36(fp)
  817cc4:	00000306 	br	817cd4 <alt_up_pixel_buffer_draw_hline+0xc8>
	else
		addr = pixel_buffer->buffer_start_address;
  817cc8:	e0bff317 	ldw	r2,-52(fp)
  817ccc:	10800b17 	ldw	r2,44(r2)
  817cd0:	e0bff715 	stw	r2,-36(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  817cd4:	e0bff317 	ldw	r2,-52(fp)
  817cd8:	10800d17 	ldw	r2,52(r2)
  817cdc:	1004c03a 	cmpne	r2,r2,zero
  817ce0:	10003b1e 	bne	r2,zero,817dd0 <alt_up_pixel_buffer_draw_hline+0x1c4>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  817ce4:	e0bff317 	ldw	r2,-52(fp)
  817ce8:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  817cec:	e0fffc17 	ldw	r3,-16(fp)
  817cf0:	1884983a 	sll	r2,r3,r2
  817cf4:	e13ff717 	ldw	r4,-36(fp)
  817cf8:	2089883a 	add	r4,r4,r2
  817cfc:	e13ff715 	stw	r4,-36(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  817d00:	e0bff317 	ldw	r2,-52(fp)
  817d04:	10800e17 	ldw	r2,56(r2)
  817d08:	10800058 	cmpnei	r2,r2,1
  817d0c:	10000e1e 	bne	r2,zero,817d48 <alt_up_pixel_buffer_draw_hline+0x13c>
			for (x = l_x; x <= r_x; x++)
  817d10:	e0bffa17 	ldw	r2,-24(fp)
  817d14:	e0bffe15 	stw	r2,-8(fp)
  817d18:	e0fffb17 	ldw	r3,-20(fp)
  817d1c:	e13ffe17 	ldw	r4,-8(fp)
  817d20:	19007736 	bltu	r3,r4,817f00 <alt_up_pixel_buffer_draw_hline+0x2f4>
			{
				IOWR_8DIRECT(addr, x, local_color);
  817d24:	e0fff717 	ldw	r3,-36(fp)
  817d28:	e13ffe17 	ldw	r4,-8(fp)
  817d2c:	1905883a 	add	r2,r3,r4
  817d30:	e0fffd17 	ldw	r3,-12(fp)
  817d34:	10c00025 	stbio	r3,0(r2)
  817d38:	e13ffe17 	ldw	r4,-8(fp)
  817d3c:	21000044 	addi	r4,r4,1
  817d40:	e13ffe15 	stw	r4,-8(fp)
  817d44:	003ff406 	br	817d18 <alt_up_pixel_buffer_draw_hline+0x10c>
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  817d48:	e0bff317 	ldw	r2,-52(fp)
  817d4c:	10800e17 	ldw	r2,56(r2)
  817d50:	10800098 	cmpnei	r2,r2,2
  817d54:	10000f1e 	bne	r2,zero,817d94 <alt_up_pixel_buffer_draw_hline+0x188>
			for (x = l_x; x <= r_x; x++)
  817d58:	e0bffa17 	ldw	r2,-24(fp)
  817d5c:	e0bffe15 	stw	r2,-8(fp)
  817d60:	e0fffb17 	ldw	r3,-20(fp)
  817d64:	e13ffe17 	ldw	r4,-8(fp)
  817d68:	19006536 	bltu	r3,r4,817f00 <alt_up_pixel_buffer_draw_hline+0x2f4>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  817d6c:	e0fffe17 	ldw	r3,-8(fp)
  817d70:	18c5883a 	add	r2,r3,r3
  817d74:	e13ff717 	ldw	r4,-36(fp)
  817d78:	1105883a 	add	r2,r2,r4
  817d7c:	e0fffd17 	ldw	r3,-12(fp)
  817d80:	10c0002d 	sthio	r3,0(r2)
  817d84:	e13ffe17 	ldw	r4,-8(fp)
  817d88:	21000044 	addi	r4,r4,1
  817d8c:	e13ffe15 	stw	r4,-8(fp)
  817d90:	003ff306 	br	817d60 <alt_up_pixel_buffer_draw_hline+0x154>
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  817d94:	e0bffa17 	ldw	r2,-24(fp)
  817d98:	e0bffe15 	stw	r2,-8(fp)
  817d9c:	e0fffb17 	ldw	r3,-20(fp)
  817da0:	e13ffe17 	ldw	r4,-8(fp)
  817da4:	19005636 	bltu	r3,r4,817f00 <alt_up_pixel_buffer_draw_hline+0x2f4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  817da8:	e0fffe17 	ldw	r3,-8(fp)
  817dac:	180490ba 	slli	r2,r3,2
  817db0:	e13ff717 	ldw	r4,-36(fp)
  817db4:	1105883a 	add	r2,r2,r4
  817db8:	e0fffd17 	ldw	r3,-12(fp)
  817dbc:	10c00035 	stwio	r3,0(r2)
  817dc0:	e13ffe17 	ldw	r4,-8(fp)
  817dc4:	21000044 	addi	r4,r4,1
  817dc8:	e13ffe15 	stw	r4,-8(fp)
  817dcc:	003ff306 	br	817d9c <alt_up_pixel_buffer_draw_hline+0x190>
			}
		}
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  817dd0:	e0bff317 	ldw	r2,-52(fp)
  817dd4:	10800e17 	ldw	r2,56(r2)
  817dd8:	10800058 	cmpnei	r2,r2,1
  817ddc:	1000141e 	bne	r2,zero,817e30 <alt_up_pixel_buffer_draw_hline+0x224>
			addr = addr + line_y * limit_x;
  817de0:	e0fffc17 	ldw	r3,-16(fp)
  817de4:	e13ff817 	ldw	r4,-32(fp)
  817de8:	1905383a 	mul	r2,r3,r4
  817dec:	e0fff717 	ldw	r3,-36(fp)
  817df0:	1887883a 	add	r3,r3,r2
  817df4:	e0fff715 	stw	r3,-36(fp)
			for (x = l_x; x <= r_x; x++)
  817df8:	e13ffa17 	ldw	r4,-24(fp)
  817dfc:	e13fff15 	stw	r4,-4(fp)
  817e00:	e0bffb17 	ldw	r2,-20(fp)
  817e04:	e0ffff17 	ldw	r3,-4(fp)
  817e08:	10c03d36 	bltu	r2,r3,817f00 <alt_up_pixel_buffer_draw_hline+0x2f4>
			{
				IOWR_8DIRECT(addr, x, local_color);
  817e0c:	e13ff717 	ldw	r4,-36(fp)
  817e10:	e0ffff17 	ldw	r3,-4(fp)
  817e14:	20c5883a 	add	r2,r4,r3
  817e18:	e13ffd17 	ldw	r4,-12(fp)
  817e1c:	11000025 	stbio	r4,0(r2)
  817e20:	e0bfff17 	ldw	r2,-4(fp)
  817e24:	10800044 	addi	r2,r2,1
  817e28:	e0bfff15 	stw	r2,-4(fp)
  817e2c:	003ff406 	br	817e00 <alt_up_pixel_buffer_draw_hline+0x1f4>
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  817e30:	e0bff317 	ldw	r2,-52(fp)
  817e34:	10800e17 	ldw	r2,56(r2)
  817e38:	10800098 	cmpnei	r2,r2,2
  817e3c:	1000181e 	bne	r2,zero,817ea0 <alt_up_pixel_buffer_draw_hline+0x294>
			limit_x = limit_x << 1;
  817e40:	e0fff817 	ldw	r3,-32(fp)
  817e44:	18c7883a 	add	r3,r3,r3
  817e48:	e0fff815 	stw	r3,-32(fp)
			addr = addr + line_y * limit_x;
  817e4c:	e13ffc17 	ldw	r4,-16(fp)
  817e50:	e0fff817 	ldw	r3,-32(fp)
  817e54:	20c5383a 	mul	r2,r4,r3
  817e58:	e13ff717 	ldw	r4,-36(fp)
  817e5c:	2089883a 	add	r4,r4,r2
  817e60:	e13ff715 	stw	r4,-36(fp)
			for (x = l_x; x <= r_x; x++)
  817e64:	e0bffa17 	ldw	r2,-24(fp)
  817e68:	e0bfff15 	stw	r2,-4(fp)
  817e6c:	e0fffb17 	ldw	r3,-20(fp)
  817e70:	e13fff17 	ldw	r4,-4(fp)
  817e74:	19002236 	bltu	r3,r4,817f00 <alt_up_pixel_buffer_draw_hline+0x2f4>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  817e78:	e0ffff17 	ldw	r3,-4(fp)
  817e7c:	18c5883a 	add	r2,r3,r3
  817e80:	e13ff717 	ldw	r4,-36(fp)
  817e84:	1105883a 	add	r2,r2,r4
  817e88:	e0fffd17 	ldw	r3,-12(fp)
  817e8c:	10c0002d 	sthio	r3,0(r2)
  817e90:	e13fff17 	ldw	r4,-4(fp)
  817e94:	21000044 	addi	r4,r4,1
  817e98:	e13fff15 	stw	r4,-4(fp)
  817e9c:	003ff306 	br	817e6c <alt_up_pixel_buffer_draw_hline+0x260>
			}
		}
		else
		{
			limit_x = limit_x << 2;
  817ea0:	e0bff817 	ldw	r2,-32(fp)
  817ea4:	100490ba 	slli	r2,r2,2
  817ea8:	e0bff815 	stw	r2,-32(fp)
			addr = addr + line_y * limit_x;
  817eac:	e0fffc17 	ldw	r3,-16(fp)
  817eb0:	e13ff817 	ldw	r4,-32(fp)
  817eb4:	1905383a 	mul	r2,r3,r4
  817eb8:	e0fff717 	ldw	r3,-36(fp)
  817ebc:	1887883a 	add	r3,r3,r2
  817ec0:	e0fff715 	stw	r3,-36(fp)
			for (x = l_x; x <= r_x; x++)
  817ec4:	e13ffa17 	ldw	r4,-24(fp)
  817ec8:	e13fff15 	stw	r4,-4(fp)
  817ecc:	e0bffb17 	ldw	r2,-20(fp)
  817ed0:	e0ffff17 	ldw	r3,-4(fp)
  817ed4:	10c00a36 	bltu	r2,r3,817f00 <alt_up_pixel_buffer_draw_hline+0x2f4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  817ed8:	e13fff17 	ldw	r4,-4(fp)
  817edc:	200490ba 	slli	r2,r4,2
  817ee0:	e0fff717 	ldw	r3,-36(fp)
  817ee4:	10c5883a 	add	r2,r2,r3
  817ee8:	e13ffd17 	ldw	r4,-12(fp)
  817eec:	11000035 	stwio	r4,0(r2)
  817ef0:	e0bfff17 	ldw	r2,-4(fp)
  817ef4:	10800044 	addi	r2,r2,1
  817ef8:	e0bfff15 	stw	r2,-4(fp)
  817efc:	003ff306 	br	817ecc <alt_up_pixel_buffer_draw_hline+0x2c0>
			}
			addr = addr + limit_x;
		}
	}
}
  817f00:	df000d17 	ldw	fp,52(sp)
  817f04:	dec00e04 	addi	sp,sp,56
  817f08:	f800283a 	ret

00817f0c <alt_up_pixel_buffer_draw_vline>:


void alt_up_pixel_buffer_draw_vline(alt_up_pixel_buffer_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  817f0c:	defff104 	addi	sp,sp,-60
  817f10:	df000e15 	stw	fp,56(sp)
  817f14:	df000e04 	addi	fp,sp,56
  817f18:	e13ff215 	stw	r4,-56(fp)
  817f1c:	e17ff315 	stw	r5,-52(fp)
  817f20:	e1bff415 	stw	r6,-48(fp)
  817f24:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  817f28:	e0bff217 	ldw	r2,-56(fp)
  817f2c:	10800f17 	ldw	r2,60(r2)
  817f30:	e0bff715 	stw	r2,-36(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  817f34:	e0bff217 	ldw	r2,-56(fp)
  817f38:	10801017 	ldw	r2,64(r2)
  817f3c:	e0bff815 	stw	r2,-32(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  817f40:	e0bff317 	ldw	r2,-52(fp)
  817f44:	e0bff915 	stw	r2,-28(fp)
	register unsigned int t_y = y0;
  817f48:	e0fff417 	ldw	r3,-48(fp)
  817f4c:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int b_y = y1;
  817f50:	e13ff517 	ldw	r4,-44(fp)
  817f54:	e13ffb15 	stw	r4,-20(fp)
	register unsigned int local_color = color;
  817f58:	e0800117 	ldw	r2,4(fp)
  817f5c:	e0bffc15 	stw	r2,-16(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  817f60:	e0fffb17 	ldw	r3,-20(fp)
  817f64:	e13ffa17 	ldw	r4,-24(fp)
  817f68:	1900042e 	bgeu	r3,r4,817f7c <alt_up_pixel_buffer_draw_vline+0x70>
	{
		temp = t_y;
  817f6c:	e0bffa17 	ldw	r2,-24(fp)
		t_y = b_y;
  817f70:	e0fffb17 	ldw	r3,-20(fp)
  817f74:	e0fffa15 	stw	r3,-24(fp)
		b_y = temp;
  817f78:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  817f7c:	e13ff917 	ldw	r4,-28(fp)
  817f80:	e0bff717 	ldw	r2,-36(fp)
  817f84:	2080be2e 	bgeu	r4,r2,818280 <alt_up_pixel_buffer_draw_vline+0x374>
  817f88:	e0fffa17 	ldw	r3,-24(fp)
  817f8c:	e13ff817 	ldw	r4,-32(fp)
  817f90:	1900bb2e 	bgeu	r3,r4,818280 <alt_up_pixel_buffer_draw_vline+0x374>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
	}
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  817f94:	e0bffb17 	ldw	r2,-20(fp)
  817f98:	e0fff817 	ldw	r3,-32(fp)
  817f9c:	10c00336 	bltu	r2,r3,817fac <alt_up_pixel_buffer_draw_vline+0xa0>
	{
		b_y = limit_y - 1;
  817fa0:	e13ff817 	ldw	r4,-32(fp)
  817fa4:	213fffc4 	addi	r4,r4,-1
  817fa8:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  817fac:	e0800217 	ldw	r2,8(fp)
  817fb0:	10800058 	cmpnei	r2,r2,1
  817fb4:	1000041e 	bne	r2,zero,817fc8 <alt_up_pixel_buffer_draw_vline+0xbc>
		addr = pixel_buffer->back_buffer_start_address;
  817fb8:	e0bff217 	ldw	r2,-56(fp)
  817fbc:	10800c17 	ldw	r2,48(r2)
  817fc0:	e0bff615 	stw	r2,-40(fp)
  817fc4:	00000306 	br	817fd4 <alt_up_pixel_buffer_draw_vline+0xc8>
	else
		addr = pixel_buffer->buffer_start_address;
  817fc8:	e0bff217 	ldw	r2,-56(fp)
  817fcc:	10800b17 	ldw	r2,44(r2)
  817fd0:	e0bff615 	stw	r2,-40(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  817fd4:	e0bff217 	ldw	r2,-56(fp)
  817fd8:	10800d17 	ldw	r2,52(r2)
  817fdc:	1004c03a 	cmpne	r2,r2,zero
  817fe0:	10004f1e 	bne	r2,zero,818120 <alt_up_pixel_buffer_draw_vline+0x214>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  817fe4:	e0bff217 	ldw	r2,-56(fp)
  817fe8:	10801317 	ldw	r2,76(r2)
  817fec:	e0bffe15 	stw	r2,-8(fp)
		addr = addr + (t_y << offset_y);
  817ff0:	e0fffa17 	ldw	r3,-24(fp)
  817ff4:	e13ffe17 	ldw	r4,-8(fp)
  817ff8:	1904983a 	sll	r2,r3,r4
  817ffc:	e0fff617 	ldw	r3,-40(fp)
  818000:	1887883a 	add	r3,r3,r2
  818004:	e0fff615 	stw	r3,-40(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  818008:	e0bff217 	ldw	r2,-56(fp)
  81800c:	10800e17 	ldw	r2,56(r2)
  818010:	10800058 	cmpnei	r2,r2,1
  818014:	1000141e 	bne	r2,zero,818068 <alt_up_pixel_buffer_draw_vline+0x15c>
			for (y = t_y; y <= b_y; y++)
  818018:	e13ffa17 	ldw	r4,-24(fp)
  81801c:	e13ffd15 	stw	r4,-12(fp)
  818020:	e0bffb17 	ldw	r2,-20(fp)
  818024:	e0fffd17 	ldw	r3,-12(fp)
  818028:	10c09536 	bltu	r2,r3,818280 <alt_up_pixel_buffer_draw_vline+0x374>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  81802c:	e13ff617 	ldw	r4,-40(fp)
  818030:	e0fff917 	ldw	r3,-28(fp)
  818034:	20c5883a 	add	r2,r4,r3
  818038:	e13ffc17 	ldw	r4,-16(fp)
  81803c:	11000025 	stbio	r4,0(r2)
				addr = addr + (1 << offset_y);
  818040:	00800044 	movi	r2,1
  818044:	e0fffe17 	ldw	r3,-8(fp)
  818048:	10c4983a 	sll	r2,r2,r3
  81804c:	e13ff617 	ldw	r4,-40(fp)
  818050:	2089883a 	add	r4,r4,r2
  818054:	e13ff615 	stw	r4,-40(fp)
  818058:	e0bffd17 	ldw	r2,-12(fp)
  81805c:	10800044 	addi	r2,r2,1
  818060:	e0bffd15 	stw	r2,-12(fp)
  818064:	003fee06 	br	818020 <alt_up_pixel_buffer_draw_vline+0x114>
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  818068:	e0bff217 	ldw	r2,-56(fp)
  81806c:	10800e17 	ldw	r2,56(r2)
  818070:	10800098 	cmpnei	r2,r2,2
  818074:	1000151e 	bne	r2,zero,8180cc <alt_up_pixel_buffer_draw_vline+0x1c0>
			for (y = t_y; y <= b_y; y++)
  818078:	e0fffa17 	ldw	r3,-24(fp)
  81807c:	e0fffd15 	stw	r3,-12(fp)
  818080:	e13ffb17 	ldw	r4,-20(fp)
  818084:	e0bffd17 	ldw	r2,-12(fp)
  818088:	20807d36 	bltu	r4,r2,818280 <alt_up_pixel_buffer_draw_vline+0x374>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  81808c:	e0fff917 	ldw	r3,-28(fp)
  818090:	18c5883a 	add	r2,r3,r3
  818094:	e13ff617 	ldw	r4,-40(fp)
  818098:	1105883a 	add	r2,r2,r4
  81809c:	e0fffc17 	ldw	r3,-16(fp)
  8180a0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  8180a4:	00800044 	movi	r2,1
  8180a8:	e13ffe17 	ldw	r4,-8(fp)
  8180ac:	1104983a 	sll	r2,r2,r4
  8180b0:	e0fff617 	ldw	r3,-40(fp)
  8180b4:	1887883a 	add	r3,r3,r2
  8180b8:	e0fff615 	stw	r3,-40(fp)
  8180bc:	e13ffd17 	ldw	r4,-12(fp)
  8180c0:	21000044 	addi	r4,r4,1
  8180c4:	e13ffd15 	stw	r4,-12(fp)
  8180c8:	003fed06 	br	818080 <alt_up_pixel_buffer_draw_vline+0x174>
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8180cc:	e0bffa17 	ldw	r2,-24(fp)
  8180d0:	e0bffd15 	stw	r2,-12(fp)
  8180d4:	e0fffb17 	ldw	r3,-20(fp)
  8180d8:	e13ffd17 	ldw	r4,-12(fp)
  8180dc:	19006836 	bltu	r3,r4,818280 <alt_up_pixel_buffer_draw_vline+0x374>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  8180e0:	e0fff917 	ldw	r3,-28(fp)
  8180e4:	180490ba 	slli	r2,r3,2
  8180e8:	e13ff617 	ldw	r4,-40(fp)
  8180ec:	1105883a 	add	r2,r2,r4
  8180f0:	e0fffc17 	ldw	r3,-16(fp)
  8180f4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  8180f8:	00800044 	movi	r2,1
  8180fc:	e13ffe17 	ldw	r4,-8(fp)
  818100:	1104983a 	sll	r2,r2,r4
  818104:	e0fff617 	ldw	r3,-40(fp)
  818108:	1887883a 	add	r3,r3,r2
  81810c:	e0fff615 	stw	r3,-40(fp)
  818110:	e13ffd17 	ldw	r4,-12(fp)
  818114:	21000044 	addi	r4,r4,1
  818118:	e13ffd15 	stw	r4,-12(fp)
  81811c:	003fed06 	br	8180d4 <alt_up_pixel_buffer_draw_vline+0x1c8>
			}
		}
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  818120:	e0bff217 	ldw	r2,-56(fp)
  818124:	10800e17 	ldw	r2,56(r2)
  818128:	10800058 	cmpnei	r2,r2,1
  81812c:	1000181e 	bne	r2,zero,818190 <alt_up_pixel_buffer_draw_vline+0x284>
			addr = addr + t_y * limit_x;
  818130:	e0fffa17 	ldw	r3,-24(fp)
  818134:	e13ff717 	ldw	r4,-36(fp)
  818138:	1905383a 	mul	r2,r3,r4
  81813c:	e0fff617 	ldw	r3,-40(fp)
  818140:	1887883a 	add	r3,r3,r2
  818144:	e0fff615 	stw	r3,-40(fp)
			for (y = t_y; y <= b_y; y++)
  818148:	e13ffa17 	ldw	r4,-24(fp)
  81814c:	e13fff15 	stw	r4,-4(fp)
  818150:	e0bffb17 	ldw	r2,-20(fp)
  818154:	e0ffff17 	ldw	r3,-4(fp)
  818158:	10c04936 	bltu	r2,r3,818280 <alt_up_pixel_buffer_draw_vline+0x374>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  81815c:	e13ff617 	ldw	r4,-40(fp)
  818160:	e0fff917 	ldw	r3,-28(fp)
  818164:	20c5883a 	add	r2,r4,r3
  818168:	e13ffc17 	ldw	r4,-16(fp)
  81816c:	11000025 	stbio	r4,0(r2)
				addr = addr + limit_x;
  818170:	e0bff617 	ldw	r2,-40(fp)
  818174:	e0fff717 	ldw	r3,-36(fp)
  818178:	10c5883a 	add	r2,r2,r3
  81817c:	e0bff615 	stw	r2,-40(fp)
  818180:	e13fff17 	ldw	r4,-4(fp)
  818184:	21000044 	addi	r4,r4,1
  818188:	e13fff15 	stw	r4,-4(fp)
  81818c:	003ff006 	br	818150 <alt_up_pixel_buffer_draw_vline+0x244>
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  818190:	e0bff217 	ldw	r2,-56(fp)
  818194:	10800e17 	ldw	r2,56(r2)
  818198:	10800098 	cmpnei	r2,r2,2
  81819c:	10001c1e 	bne	r2,zero,818210 <alt_up_pixel_buffer_draw_vline+0x304>
			limit_x = limit_x << 1;
  8181a0:	e0bff717 	ldw	r2,-36(fp)
  8181a4:	1085883a 	add	r2,r2,r2
  8181a8:	e0bff715 	stw	r2,-36(fp)
			addr = addr + t_y * limit_x;
  8181ac:	e0fffa17 	ldw	r3,-24(fp)
  8181b0:	e13ff717 	ldw	r4,-36(fp)
  8181b4:	1905383a 	mul	r2,r3,r4
  8181b8:	e0fff617 	ldw	r3,-40(fp)
  8181bc:	1887883a 	add	r3,r3,r2
  8181c0:	e0fff615 	stw	r3,-40(fp)
			for (y = t_y; y <= b_y; y++)
  8181c4:	e13ffa17 	ldw	r4,-24(fp)
  8181c8:	e13fff15 	stw	r4,-4(fp)
  8181cc:	e0bffb17 	ldw	r2,-20(fp)
  8181d0:	e0ffff17 	ldw	r3,-4(fp)
  8181d4:	10c02a36 	bltu	r2,r3,818280 <alt_up_pixel_buffer_draw_vline+0x374>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  8181d8:	e13ff917 	ldw	r4,-28(fp)
  8181dc:	2105883a 	add	r2,r4,r4
  8181e0:	e0fff617 	ldw	r3,-40(fp)
  8181e4:	10c5883a 	add	r2,r2,r3
  8181e8:	e13ffc17 	ldw	r4,-16(fp)
  8181ec:	1100002d 	sthio	r4,0(r2)
				addr = addr + limit_x;
  8181f0:	e0bff617 	ldw	r2,-40(fp)
  8181f4:	e0fff717 	ldw	r3,-36(fp)
  8181f8:	10c5883a 	add	r2,r2,r3
  8181fc:	e0bff615 	stw	r2,-40(fp)
  818200:	e13fff17 	ldw	r4,-4(fp)
  818204:	21000044 	addi	r4,r4,1
  818208:	e13fff15 	stw	r4,-4(fp)
  81820c:	003fef06 	br	8181cc <alt_up_pixel_buffer_draw_vline+0x2c0>
			}
		}
		else
		{
			limit_x = limit_x << 2;
  818210:	e0bff717 	ldw	r2,-36(fp)
  818214:	100490ba 	slli	r2,r2,2
  818218:	e0bff715 	stw	r2,-36(fp)
			addr = addr + t_y * limit_x;
  81821c:	e0fffa17 	ldw	r3,-24(fp)
  818220:	e13ff717 	ldw	r4,-36(fp)
  818224:	1905383a 	mul	r2,r3,r4
  818228:	e0fff617 	ldw	r3,-40(fp)
  81822c:	1887883a 	add	r3,r3,r2
  818230:	e0fff615 	stw	r3,-40(fp)
			for (y = t_y; y <= b_y; y++)
  818234:	e13ffa17 	ldw	r4,-24(fp)
  818238:	e13fff15 	stw	r4,-4(fp)
  81823c:	e0bffb17 	ldw	r2,-20(fp)
  818240:	e0ffff17 	ldw	r3,-4(fp)
  818244:	10c00e36 	bltu	r2,r3,818280 <alt_up_pixel_buffer_draw_vline+0x374>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  818248:	e13ff917 	ldw	r4,-28(fp)
  81824c:	200490ba 	slli	r2,r4,2
  818250:	e0fff617 	ldw	r3,-40(fp)
  818254:	10c5883a 	add	r2,r2,r3
  818258:	e13ffc17 	ldw	r4,-16(fp)
  81825c:	11000035 	stwio	r4,0(r2)
				addr = addr + limit_x;
  818260:	e0bff617 	ldw	r2,-40(fp)
  818264:	e0fff717 	ldw	r3,-36(fp)
  818268:	10c5883a 	add	r2,r2,r3
  81826c:	e0bff615 	stw	r2,-40(fp)
  818270:	e13fff17 	ldw	r4,-4(fp)
  818274:	21000044 	addi	r4,r4,1
  818278:	e13fff15 	stw	r4,-4(fp)
  81827c:	003fef06 	br	81823c <alt_up_pixel_buffer_draw_vline+0x330>
			}
		}
	}
}
  818280:	df000e17 	ldw	fp,56(sp)
  818284:	dec00f04 	addi	sp,sp,60
  818288:	f800283a 	ret

0081828c <alt_up_pixel_buffer_draw_rectangle>:

void alt_up_pixel_buffer_draw_rectangle(alt_up_pixel_buffer_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  81828c:	defff804 	addi	sp,sp,-32
  818290:	dfc00715 	stw	ra,28(sp)
  818294:	df000615 	stw	fp,24(sp)
  818298:	df000604 	addi	fp,sp,24
  81829c:	e13ffc15 	stw	r4,-16(fp)
  8182a0:	e17ffd15 	stw	r5,-12(fp)
  8182a4:	e1bffe15 	stw	r6,-8(fp)
  8182a8:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  8182ac:	e0800317 	ldw	r2,12(fp)
  8182b0:	d8800015 	stw	r2,0(sp)
  8182b4:	e0800417 	ldw	r2,16(fp)
  8182b8:	d8800115 	stw	r2,4(sp)
  8182bc:	e13ffc17 	ldw	r4,-16(fp)
  8182c0:	e17ffd17 	ldw	r5,-12(fp)
  8182c4:	e1bfff17 	ldw	r6,-4(fp)
  8182c8:	e1fffe17 	ldw	r7,-8(fp)
  8182cc:	0817c0c0 	call	817c0c <alt_up_pixel_buffer_draw_hline>
	alt_up_pixel_buffer_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  8182d0:	e0800317 	ldw	r2,12(fp)
  8182d4:	d8800015 	stw	r2,0(sp)
  8182d8:	e0800417 	ldw	r2,16(fp)
  8182dc:	d8800115 	stw	r2,4(sp)
  8182e0:	e13ffc17 	ldw	r4,-16(fp)
  8182e4:	e17ffd17 	ldw	r5,-12(fp)
  8182e8:	e1bfff17 	ldw	r6,-4(fp)
  8182ec:	e1c00217 	ldw	r7,8(fp)
  8182f0:	0817c0c0 	call	817c0c <alt_up_pixel_buffer_draw_hline>
	alt_up_pixel_buffer_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  8182f4:	e0800317 	ldw	r2,12(fp)
  8182f8:	d8800015 	stw	r2,0(sp)
  8182fc:	e0800417 	ldw	r2,16(fp)
  818300:	d8800115 	stw	r2,4(sp)
  818304:	e13ffc17 	ldw	r4,-16(fp)
  818308:	e17ffd17 	ldw	r5,-12(fp)
  81830c:	e1bffe17 	ldw	r6,-8(fp)
  818310:	e1c00217 	ldw	r7,8(fp)
  818314:	0817f0c0 	call	817f0c <alt_up_pixel_buffer_draw_vline>
	alt_up_pixel_buffer_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  818318:	e0800317 	ldw	r2,12(fp)
  81831c:	d8800015 	stw	r2,0(sp)
  818320:	e0800417 	ldw	r2,16(fp)
  818324:	d8800115 	stw	r2,4(sp)
  818328:	e13ffc17 	ldw	r4,-16(fp)
  81832c:	e17fff17 	ldw	r5,-4(fp)
  818330:	e1bffe17 	ldw	r6,-8(fp)
  818334:	e1c00217 	ldw	r7,8(fp)
  818338:	0817f0c0 	call	817f0c <alt_up_pixel_buffer_draw_vline>
}
  81833c:	dfc00717 	ldw	ra,28(sp)
  818340:	df000617 	ldw	fp,24(sp)
  818344:	dec00804 	addi	sp,sp,32
  818348:	f800283a 	ret

0081834c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  81834c:	defffb04 	addi	sp,sp,-20
  818350:	df000415 	stw	fp,16(sp)
  818354:	df000404 	addi	fp,sp,16
  818358:	e13ffc15 	stw	r4,-16(fp)
  81835c:	e17ffd15 	stw	r5,-12(fp)
  818360:	e1bffe15 	stw	r6,-8(fp)
  818364:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  818368:	e0c00217 	ldw	r3,8(fp)
  81836c:	1804c03a 	cmpne	r2,r3,zero
  818370:	10000a1e 	bne	r2,zero,81839c <helper_plot_pixel+0x50>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  818374:	e13ffd17 	ldw	r4,-12(fp)
  818378:	e0ffff17 	ldw	r3,-4(fp)
  81837c:	20c5383a 	mul	r2,r4,r3
  818380:	e13ffe17 	ldw	r4,-8(fp)
  818384:	1105883a 	add	r2,r2,r4
  818388:	e0fffc17 	ldw	r3,-16(fp)
  81838c:	10c5883a 	add	r2,r2,r3
  818390:	e1000117 	ldw	r4,4(fp)
  818394:	11000025 	stbio	r4,0(r2)
  818398:	00001806 	br	8183fc <helper_plot_pixel+0xb0>
	else if (mode == 1)
  81839c:	e0c00217 	ldw	r3,8(fp)
  8183a0:	18800058 	cmpnei	r2,r3,1
  8183a4:	10000b1e 	bne	r2,zero,8183d4 <helper_plot_pixel+0x88>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  8183a8:	e13ffd17 	ldw	r4,-12(fp)
  8183ac:	e0ffff17 	ldw	r3,-4(fp)
  8183b0:	20c5383a 	mul	r2,r4,r3
  8183b4:	e13ffe17 	ldw	r4,-8(fp)
  8183b8:	1105883a 	add	r2,r2,r4
  8183bc:	1085883a 	add	r2,r2,r2
  8183c0:	e0fffc17 	ldw	r3,-16(fp)
  8183c4:	10c5883a 	add	r2,r2,r3
  8183c8:	e1000117 	ldw	r4,4(fp)
  8183cc:	1100002d 	sthio	r4,0(r2)
  8183d0:	00000a06 	br	8183fc <helper_plot_pixel+0xb0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  8183d4:	e0fffd17 	ldw	r3,-12(fp)
  8183d8:	e13fff17 	ldw	r4,-4(fp)
  8183dc:	1905383a 	mul	r2,r3,r4
  8183e0:	e0fffe17 	ldw	r3,-8(fp)
  8183e4:	10c5883a 	add	r2,r2,r3
  8183e8:	100490ba 	slli	r2,r2,2
  8183ec:	e13ffc17 	ldw	r4,-16(fp)
  8183f0:	1105883a 	add	r2,r2,r4
  8183f4:	e0c00117 	ldw	r3,4(fp)
  8183f8:	10c00035 	stwio	r3,0(r2)
}
  8183fc:	df000417 	ldw	fp,16(sp)
  818400:	dec00504 	addi	sp,sp,20
  818404:	f800283a 	ret

00818408 <alt_up_pixel_buffer_draw_line>:

void alt_up_pixel_buffer_draw_line(alt_up_pixel_buffer_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  818408:	deffe804 	addi	sp,sp,-96
  81840c:	dfc01715 	stw	ra,92(sp)
  818410:	df001615 	stw	fp,88(sp)
  818414:	df001604 	addi	fp,sp,88
  818418:	e13fec15 	stw	r4,-80(fp)
  81841c:	e17fed15 	stw	r5,-76(fp)
  818420:	e1bfee15 	stw	r6,-72(fp)
  818424:	e1ffef15 	stw	r7,-68(fp)
	register int x_0 = x0;
  818428:	e0bfed17 	ldw	r2,-76(fp)
  81842c:	e0bff015 	stw	r2,-64(fp)
	register int y_0 = y0;
  818430:	e0ffee17 	ldw	r3,-72(fp)
  818434:	e0fff115 	stw	r3,-60(fp)
	register int x_1 = x1;
  818438:	e13fef17 	ldw	r4,-68(fp)
  81843c:	e13ff215 	stw	r4,-56(fp)
	register int y_1 = y1;
  818440:	e0800217 	ldw	r2,8(fp)
  818444:	e0bff315 	stw	r2,-52(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  818448:	e0fff317 	ldw	r3,-52(fp)
  81844c:	e13ff117 	ldw	r4,-60(fp)
  818450:	1907c83a 	sub	r3,r3,r4
  818454:	e0fff515 	stw	r3,-44(fp)
  818458:	e0fff317 	ldw	r3,-52(fp)
  81845c:	e13ff117 	ldw	r4,-60(fp)
  818460:	1905c83a 	sub	r2,r3,r4
  818464:	1004403a 	cmpge	r2,r2,zero
  818468:	1000041e 	bne	r2,zero,81847c <alt_up_pixel_buffer_draw_line+0x74>
  81846c:	e0bff117 	ldw	r2,-60(fp)
  818470:	e0fff317 	ldw	r3,-52(fp)
  818474:	10c5c83a 	sub	r2,r2,r3
  818478:	e0bff515 	stw	r2,-44(fp)
  81847c:	e13ff217 	ldw	r4,-56(fp)
  818480:	e0fff017 	ldw	r3,-64(fp)
  818484:	20c5c83a 	sub	r2,r4,r3
  818488:	1004803a 	cmplt	r2,r2,zero
  81848c:	1000071e 	bne	r2,zero,8184ac <alt_up_pixel_buffer_draw_line+0xa4>
  818490:	e13ff217 	ldw	r4,-56(fp)
  818494:	e0fff017 	ldw	r3,-64(fp)
  818498:	20c5c83a 	sub	r2,r4,r3
  81849c:	e13ff517 	ldw	r4,-44(fp)
  8184a0:	1104803a 	cmplt	r2,r2,r4
  8184a4:	e0bff405 	stb	r2,-48(fp)
  8184a8:	00000606 	br	8184c4 <alt_up_pixel_buffer_draw_line+0xbc>
  8184ac:	e0fff017 	ldw	r3,-64(fp)
  8184b0:	e13ff217 	ldw	r4,-56(fp)
  8184b4:	1905c83a 	sub	r2,r3,r4
  8184b8:	e0fff517 	ldw	r3,-44(fp)
  8184bc:	10c4803a 	cmplt	r2,r2,r3
  8184c0:	e0bff405 	stb	r2,-48(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
  8184c4:	e0bfec17 	ldw	r2,-80(fp)
  8184c8:	10800e17 	ldw	r2,56(r2)
  8184cc:	10800060 	cmpeqi	r2,r2,1
  8184d0:	10000a1e 	bne	r2,zero,8184fc <alt_up_pixel_buffer_draw_line+0xf4>
  8184d4:	e0bfec17 	ldw	r2,-80(fp)
  8184d8:	10800e17 	ldw	r2,56(r2)
  8184dc:	10800098 	cmpnei	r2,r2,2
  8184e0:	1000031e 	bne	r2,zero,8184f0 <alt_up_pixel_buffer_draw_line+0xe8>
  8184e4:	01000044 	movi	r4,1
  8184e8:	e13ffc15 	stw	r4,-16(fp)
  8184ec:	00000406 	br	818500 <alt_up_pixel_buffer_draw_line+0xf8>
  8184f0:	00800084 	movi	r2,2
  8184f4:	e0bffc15 	stw	r2,-16(fp)
  8184f8:	00000106 	br	818500 <alt_up_pixel_buffer_draw_line+0xf8>
  8184fc:	e03ffc15 	stw	zero,-16(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
  818500:	e0c00317 	ldw	r3,12(fp)
  818504:	e0fffd15 	stw	r3,-12(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  818508:	e0bfec17 	ldw	r2,-80(fp)
  81850c:	10800d17 	ldw	r2,52(r2)
  818510:	1004c03a 	cmpne	r2,r2,zero
  818514:	1000081e 	bne	r2,zero,818538 <alt_up_pixel_buffer_draw_line+0x130>
  818518:	e0bfec17 	ldw	r2,-80(fp)
  81851c:	10801317 	ldw	r2,76(r2)
  818520:	e13ffc17 	ldw	r4,-16(fp)
  818524:	1107c83a 	sub	r3,r2,r4
  818528:	00800044 	movi	r2,1
  81852c:	10c4983a 	sll	r2,r2,r3
  818530:	e0bfff15 	stw	r2,-4(fp)
  818534:	00000306 	br	818544 <alt_up_pixel_buffer_draw_line+0x13c>
  818538:	e0bfec17 	ldw	r2,-80(fp)
  81853c:	10800f17 	ldw	r2,60(r2)
  818540:	e0bfff15 	stw	r2,-4(fp)

	if (backbuffer == 1)
  818544:	e0800417 	ldw	r2,16(fp)
  818548:	10800058 	cmpnei	r2,r2,1
  81854c:	1000041e 	bne	r2,zero,818560 <alt_up_pixel_buffer_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  818550:	e0bfec17 	ldw	r2,-80(fp)
  818554:	10800c17 	ldw	r2,48(r2)
  818558:	e0bffe15 	stw	r2,-8(fp)
  81855c:	00000306 	br	81856c <alt_up_pixel_buffer_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  818560:	e0bfec17 	ldw	r2,-80(fp)
  818564:	10800b17 	ldw	r2,44(r2)
  818568:	e0bffe15 	stw	r2,-8(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  81856c:	e0fff403 	ldbu	r3,-48(fp)
  818570:	18803fcc 	andi	r2,r3,255
  818574:	1080201c 	xori	r2,r2,128
  818578:	10bfe004 	addi	r2,r2,-128
  81857c:	10800050 	cmplti	r2,r2,1
  818580:	10000c1e 	bne	r2,zero,8185b4 <alt_up_pixel_buffer_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  818584:	e13ff017 	ldw	r4,-64(fp)
  818588:	e13ff815 	stw	r4,-32(fp)
		x_0 = y_0;
  81858c:	e0bff117 	ldw	r2,-60(fp)
  818590:	e0bff015 	stw	r2,-64(fp)
		y_0 = error;
  818594:	e0fff817 	ldw	r3,-32(fp)
  818598:	e0fff115 	stw	r3,-60(fp)
		// Swap x_1 and y_1
		error = x_1;
  81859c:	e13ff217 	ldw	r4,-56(fp)
  8185a0:	e13ff815 	stw	r4,-32(fp)
		x_1 = y_1;
  8185a4:	e0bff317 	ldw	r2,-52(fp)
  8185a8:	e0bff215 	stw	r2,-56(fp)
		y_1 = error;
  8185ac:	e0fff817 	ldw	r3,-32(fp)
  8185b0:	e0fff315 	stw	r3,-52(fp)
	}
	if (x_0 > x_1) {
  8185b4:	e13ff217 	ldw	r4,-56(fp)
  8185b8:	e0bff017 	ldw	r2,-64(fp)
  8185bc:	20800c0e 	bge	r4,r2,8185f0 <alt_up_pixel_buffer_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  8185c0:	e0fff017 	ldw	r3,-64(fp)
  8185c4:	e0fff815 	stw	r3,-32(fp)
		x_0 = x_1;
  8185c8:	e13ff217 	ldw	r4,-56(fp)
  8185cc:	e13ff015 	stw	r4,-64(fp)
		x_1 = error;
  8185d0:	e0bff817 	ldw	r2,-32(fp)
  8185d4:	e0bff215 	stw	r2,-56(fp)
		// Swap y_0 and y_1
		error = y_0;
  8185d8:	e0fff117 	ldw	r3,-60(fp)
  8185dc:	e0fff815 	stw	r3,-32(fp)
		y_0 = y_1;
  8185e0:	e13ff317 	ldw	r4,-52(fp)
  8185e4:	e13ff115 	stw	r4,-60(fp)
		y_1 = error;
  8185e8:	e0bff817 	ldw	r2,-32(fp)
  8185ec:	e0bff315 	stw	r2,-52(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  8185f0:	e0fff217 	ldw	r3,-56(fp)
  8185f4:	e13ff017 	ldw	r4,-64(fp)
  8185f8:	1907c83a 	sub	r3,r3,r4
  8185fc:	e0fff615 	stw	r3,-40(fp)
	deltay = ABS(y_1 - y_0);
  818600:	e0bff317 	ldw	r2,-52(fp)
  818604:	e0fff117 	ldw	r3,-60(fp)
  818608:	10c5c83a 	sub	r2,r2,r3
  81860c:	e0bff715 	stw	r2,-36(fp)
  818610:	e13ff317 	ldw	r4,-52(fp)
  818614:	e0fff117 	ldw	r3,-60(fp)
  818618:	20c5c83a 	sub	r2,r4,r3
  81861c:	1004403a 	cmpge	r2,r2,zero
  818620:	1000041e 	bne	r2,zero,818634 <alt_up_pixel_buffer_draw_line+0x22c>
  818624:	e13ff117 	ldw	r4,-60(fp)
  818628:	e0bff317 	ldw	r2,-52(fp)
  81862c:	2089c83a 	sub	r4,r4,r2
  818630:	e13ff715 	stw	r4,-36(fp)
	error = -(deltax / 2); 
  818634:	e0fff617 	ldw	r3,-40(fp)
  818638:	1805d7fa 	srai	r2,r3,31
  81863c:	1004d7fa 	srli	r2,r2,31
  818640:	e13ff617 	ldw	r4,-40(fp)
  818644:	2085883a 	add	r2,r4,r2
  818648:	1005d07a 	srai	r2,r2,1
  81864c:	e0bff815 	stw	r2,-32(fp)
  818650:	e0bff817 	ldw	r2,-32(fp)
  818654:	0085c83a 	sub	r2,zero,r2
  818658:	e0bff815 	stw	r2,-32(fp)
	y = y_0;
  81865c:	e0fff117 	ldw	r3,-60(fp)
  818660:	e0fffb15 	stw	r3,-20(fp)
	if (y_0 < y_1)
  818664:	e13ff117 	ldw	r4,-60(fp)
  818668:	e0bff317 	ldw	r2,-52(fp)
  81866c:	2080030e 	bge	r4,r2,81867c <alt_up_pixel_buffer_draw_line+0x274>
		ystep = 1;
  818670:	00c00044 	movi	r3,1
  818674:	e0fff915 	stw	r3,-28(fp)
  818678:	00000206 	br	818684 <alt_up_pixel_buffer_draw_line+0x27c>
	else
		ystep = -1;
  81867c:	013fffc4 	movi	r4,-1
  818680:	e13ff915 	stw	r4,-28(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  818684:	e0fff403 	ldbu	r3,-48(fp)
  818688:	18803fcc 	andi	r2,r3,255
  81868c:	1080201c 	xori	r2,r2,128
  818690:	10bfe004 	addi	r2,r2,-128
  818694:	10800058 	cmpnei	r2,r2,1
  818698:	1000211e 	bne	r2,zero,818720 <alt_up_pixel_buffer_draw_line+0x318>
	{
		for (x=x_0; x <= x_1; x++) {
  81869c:	e13ff017 	ldw	r4,-64(fp)
  8186a0:	e13ffa15 	stw	r4,-24(fp)
  8186a4:	e0bff217 	ldw	r2,-56(fp)
  8186a8:	e0fffa17 	ldw	r3,-24(fp)
  8186ac:	10c03d16 	blt	r2,r3,8187a4 <alt_up_pixel_buffer_draw_line+0x39c>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  8186b0:	e13ffd17 	ldw	r4,-12(fp)
  8186b4:	d9000015 	stw	r4,0(sp)
  8186b8:	e0bffc17 	ldw	r2,-16(fp)
  8186bc:	d8800115 	stw	r2,4(sp)
  8186c0:	e13ffe17 	ldw	r4,-8(fp)
  8186c4:	e17fff17 	ldw	r5,-4(fp)
  8186c8:	e1bffb17 	ldw	r6,-20(fp)
  8186cc:	e1fffa17 	ldw	r7,-24(fp)
  8186d0:	081834c0 	call	81834c <helper_plot_pixel>
			error = error + deltay;
  8186d4:	e0fff817 	ldw	r3,-32(fp)
  8186d8:	e13ff717 	ldw	r4,-36(fp)
  8186dc:	1907883a 	add	r3,r3,r4
  8186e0:	e0fff815 	stw	r3,-32(fp)
			if (error > 0) {
  8186e4:	e0fff817 	ldw	r3,-32(fp)
  8186e8:	18800050 	cmplti	r2,r3,1
  8186ec:	1000081e 	bne	r2,zero,818710 <alt_up_pixel_buffer_draw_line+0x308>
				y = y + ystep;
  8186f0:	e13ffb17 	ldw	r4,-20(fp)
  8186f4:	e0bff917 	ldw	r2,-28(fp)
  8186f8:	2089883a 	add	r4,r4,r2
  8186fc:	e13ffb15 	stw	r4,-20(fp)
				error = error - deltax;
  818700:	e0fff817 	ldw	r3,-32(fp)
  818704:	e13ff617 	ldw	r4,-40(fp)
  818708:	1907c83a 	sub	r3,r3,r4
  81870c:	e0fff815 	stw	r3,-32(fp)
  818710:	e0bffa17 	ldw	r2,-24(fp)
  818714:	10800044 	addi	r2,r2,1
  818718:	e0bffa15 	stw	r2,-24(fp)
  81871c:	003fe106 	br	8186a4 <alt_up_pixel_buffer_draw_line+0x29c>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  818720:	e0fff017 	ldw	r3,-64(fp)
  818724:	e0fffa15 	stw	r3,-24(fp)
  818728:	e13ff217 	ldw	r4,-56(fp)
  81872c:	e0bffa17 	ldw	r2,-24(fp)
  818730:	20801c16 	blt	r4,r2,8187a4 <alt_up_pixel_buffer_draw_line+0x39c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  818734:	e0fffd17 	ldw	r3,-12(fp)
  818738:	d8c00015 	stw	r3,0(sp)
  81873c:	e13ffc17 	ldw	r4,-16(fp)
  818740:	d9000115 	stw	r4,4(sp)
  818744:	e13ffe17 	ldw	r4,-8(fp)
  818748:	e17fff17 	ldw	r5,-4(fp)
  81874c:	e1bffa17 	ldw	r6,-24(fp)
  818750:	e1fffb17 	ldw	r7,-20(fp)
  818754:	081834c0 	call	81834c <helper_plot_pixel>
			error = error + deltay;
  818758:	e0bff817 	ldw	r2,-32(fp)
  81875c:	e0fff717 	ldw	r3,-36(fp)
  818760:	10c5883a 	add	r2,r2,r3
  818764:	e0bff815 	stw	r2,-32(fp)
			if (error > 0) {
  818768:	e13ff817 	ldw	r4,-32(fp)
  81876c:	20800050 	cmplti	r2,r4,1
  818770:	1000081e 	bne	r2,zero,818794 <alt_up_pixel_buffer_draw_line+0x38c>
				y = y + ystep;
  818774:	e0bffb17 	ldw	r2,-20(fp)
  818778:	e0fff917 	ldw	r3,-28(fp)
  81877c:	10c5883a 	add	r2,r2,r3
  818780:	e0bffb15 	stw	r2,-20(fp)
				error = error - deltax;
  818784:	e13ff817 	ldw	r4,-32(fp)
  818788:	e0bff617 	ldw	r2,-40(fp)
  81878c:	2089c83a 	sub	r4,r4,r2
  818790:	e13ff815 	stw	r4,-32(fp)
  818794:	e0fffa17 	ldw	r3,-24(fp)
  818798:	18c00044 	addi	r3,r3,1
  81879c:	e0fffa15 	stw	r3,-24(fp)
  8187a0:	003fe106 	br	818728 <alt_up_pixel_buffer_draw_line+0x320>
			}
		}
	}
}
  8187a4:	dfc01717 	ldw	ra,92(sp)
  8187a8:	df001617 	ldw	fp,88(sp)
  8187ac:	dec01804 	addi	sp,sp,96
  8187b0:	f800283a 	ret

008187b4 <alt_alarm_start>:

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8187b4:	defff504 	addi	sp,sp,-44
  8187b8:	df000a15 	stw	fp,40(sp)
  8187bc:	df000a04 	addi	fp,sp,40
  8187c0:	e13ff615 	stw	r4,-40(fp)
  8187c4:	e17ff715 	stw	r5,-36(fp)
  8187c8:	e1bff815 	stw	r6,-32(fp)
  8187cc:	e1fff915 	stw	r7,-28(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8187d0:	e03ffb15 	stw	zero,-20(fp)
  8187d4:	d0a01917 	ldw	r2,-32668(gp)
  8187d8:	e0bffc15 	stw	r2,-16(fp)
  8187dc:	e0bffc17 	ldw	r2,-16(fp)
  8187e0:	1005003a 	cmpeq	r2,r2,zero
  8187e4:	1000421e 	bne	r2,zero,8188f0 <alt_alarm_start+0x13c>
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
  8187e8:	e0bff617 	ldw	r2,-40(fp)
  8187ec:	1005003a 	cmpeq	r2,r2,zero
  8187f0:	10003c1e 	bne	r2,zero,8188e4 <alt_alarm_start+0x130>
    {
      alarm->callback = callback;
  8187f4:	e0fff617 	ldw	r3,-40(fp)
  8187f8:	e0bff817 	ldw	r2,-32(fp)
  8187fc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  818800:	e0fff617 	ldw	r3,-40(fp)
  818804:	e0bff917 	ldw	r2,-28(fp)
  818808:	18800515 	stw	r2,20(r3)
  81880c:	0005303a 	rdctl	r2,status
  818810:	e0bffe15 	stw	r2,-8(fp)
  818814:	e0fffe17 	ldw	r3,-8(fp)
  818818:	00bfff84 	movi	r2,-2
  81881c:	1884703a 	and	r2,r3,r2
  818820:	1001703a 	wrctl	status,r2
  818824:	e0bffe17 	ldw	r2,-8(fp)
  818828:	e0bffd15 	stw	r2,-12(fp)
  81882c:	e0bffd17 	ldw	r2,-12(fp)
  818830:	e0bffa15 	stw	r2,-24(fp)
  818834:	d0a01a17 	ldw	r2,-32664(gp)
  818838:	e0bffe15 	stw	r2,-8(fp)
  81883c:	e0bffe17 	ldw	r2,-8(fp)
  818840:	e0bffb15 	stw	r2,-20(fp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  818844:	e13ff617 	ldw	r4,-40(fp)
  818848:	e0fff717 	ldw	r3,-36(fp)
  81884c:	e0bffb17 	ldw	r2,-20(fp)
  818850:	1885883a 	add	r2,r3,r2
  818854:	10800044 	addi	r2,r2,1
  818858:	20800215 	stw	r2,8(r4)
      
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81885c:	e0bff617 	ldw	r2,-40(fp)
  818860:	10c00217 	ldw	r3,8(r2)
  818864:	e0bffb17 	ldw	r2,-20(fp)
  818868:	1880042e 	bgeu	r3,r2,81887c <alt_alarm_start+0xc8>
      {
        alarm->rollover = 1;
  81886c:	e0fff617 	ldw	r3,-40(fp)
  818870:	00800044 	movi	r2,1
  818874:	18800405 	stb	r2,16(r3)
  818878:	00000206 	br	818884 <alt_alarm_start+0xd0>
      }
      else
      {
        alarm->rollover = 0;
  81887c:	e0bff617 	ldw	r2,-40(fp)
  818880:	10000405 	stb	zero,16(r2)
  818884:	d0a01b04 	addi	r2,gp,-32660
  818888:	e0bffe15 	stw	r2,-8(fp)
  81888c:	e0bff617 	ldw	r2,-40(fp)
  818890:	e0bffd15 	stw	r2,-12(fp)
  818894:	e0fffd17 	ldw	r3,-12(fp)
  818898:	e0bffe17 	ldw	r2,-8(fp)
  81889c:	18800115 	stw	r2,4(r3)
  8188a0:	e0fffd17 	ldw	r3,-12(fp)
  8188a4:	e0bffe17 	ldw	r2,-8(fp)
  8188a8:	10800017 	ldw	r2,0(r2)
  8188ac:	18800015 	stw	r2,0(r3)
  8188b0:	e0bffe17 	ldw	r2,-8(fp)
  8188b4:	10c00017 	ldw	r3,0(r2)
  8188b8:	e0bffd17 	ldw	r2,-12(fp)
  8188bc:	18800115 	stw	r2,4(r3)
  8188c0:	e0fffe17 	ldw	r3,-8(fp)
  8188c4:	e0bffd17 	ldw	r2,-12(fp)
  8188c8:	18800015 	stw	r2,0(r3)
  8188cc:	e0bffa17 	ldw	r2,-24(fp)
  8188d0:	e0bffe15 	stw	r2,-8(fp)
  8188d4:	e0bffe17 	ldw	r2,-8(fp)
  8188d8:	1001703a 	wrctl	status,r2
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
  8188dc:	e03fff15 	stw	zero,-4(fp)
  8188e0:	00000506 	br	8188f8 <alt_alarm_start+0x144>
    }
    else
    {
      return -EINVAL;
  8188e4:	00bffa84 	movi	r2,-22
  8188e8:	e0bfff15 	stw	r2,-4(fp)
  8188ec:	00000206 	br	8188f8 <alt_alarm_start+0x144>
    }
  }
  else
  {
    return -ENOTSUP;
  8188f0:	00bfde84 	movi	r2,-134
  8188f4:	e0bfff15 	stw	r2,-4(fp)
  }
}
  8188f8:	e0bfff17 	ldw	r2,-4(fp)
  8188fc:	df000a17 	ldw	fp,40(sp)
  818900:	dec00b04 	addi	sp,sp,44
  818904:	f800283a 	ret

00818908 <alt_busy_sleep>:

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  818908:	defffa04 	addi	sp,sp,-24
  81890c:	dfc00515 	stw	ra,20(sp)
  818910:	df000415 	stw	fp,16(sp)
  818914:	df000404 	addi	fp,sp,16
  818918:	e13ffc15 	stw	r4,-16(fp)
/*
 * Only delay if ALT_SIM_OPTIMIZE is not defined; i.e., if software
 * is built targetting ModelSim RTL simulation, the delay will be
 * skipped to speed up simulation.
 */
#ifndef ALT_SIM_OPTIMIZE
  int i;
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81891c:	008000c4 	movi	r2,3
  818920:	e0bfff15 	stw	r2,-4(fp)
  }
  

  big_loops = us / (INT_MAX/
  818924:	e0ffff17 	ldw	r3,-4(fp)
  818928:	008003f4 	movhi	r2,15
  81892c:	10909004 	addi	r2,r2,16960
  818930:	188b383a 	mul	r5,r3,r2
  818934:	0100bef4 	movhi	r4,763
  818938:	213c2004 	addi	r4,r4,-3968
  81893c:	080be540 	call	80be54 <__udivsi3>
  818940:	100b883a 	mov	r5,r2
  818944:	01200034 	movhi	r4,32768
  818948:	213fffc4 	addi	r4,r4,-1
  81894c:	080be540 	call	80be54 <__udivsi3>
  818950:	100b883a 	mov	r5,r2
  818954:	e13ffc17 	ldw	r4,-16(fp)
  818958:	080be540 	call	80be54 <__udivsi3>
  81895c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  818960:	e0bffe17 	ldw	r2,-8(fp)
  818964:	1005003a 	cmpeq	r2,r2,zero
  818968:	1000281e 	bne	r2,zero,818a0c <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  81896c:	e03ffd15 	stw	zero,-12(fp)
  818970:	e0fffd17 	ldw	r3,-12(fp)
  818974:	e0bffe17 	ldw	r2,-8(fp)
  818978:	1880170e 	bge	r3,r2,8189d8 <alt_busy_sleep+0xd0>
    {
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81897c:	00a00034 	movhi	r2,32768
  818980:	10bfffc4 	addi	r2,r2,-1
  818984:	10bfffc4 	addi	r2,r2,-1
  818988:	103ffe1e 	bne	r2,zero,818984 <alt_busy_sleep+0x7c>
        "\n0:"
        "\n\taddi %0,%0, -1"
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81898c:	e0ffff17 	ldw	r3,-4(fp)
  818990:	008003f4 	movhi	r2,15
  818994:	10909004 	addi	r2,r2,16960
  818998:	188b383a 	mul	r5,r3,r2
  81899c:	0100bef4 	movhi	r4,763
  8189a0:	213c2004 	addi	r4,r4,-3968
  8189a4:	080be540 	call	80be54 <__udivsi3>
  8189a8:	100b883a 	mov	r5,r2
  8189ac:	01200034 	movhi	r4,32768
  8189b0:	213fffc4 	addi	r4,r4,-1
  8189b4:	080be540 	call	80be54 <__udivsi3>
  8189b8:	1007883a 	mov	r3,r2
  8189bc:	e0bffc17 	ldw	r2,-16(fp)
  8189c0:	10c5c83a 	sub	r2,r2,r3
  8189c4:	e0bffc15 	stw	r2,-16(fp)
  8189c8:	e0bffd17 	ldw	r2,-12(fp)
  8189cc:	10800044 	addi	r2,r2,1
  8189d0:	e0bffd15 	stw	r2,-12(fp)
  8189d4:	003fe606 	br	818970 <alt_busy_sleep+0x68>
      (cycles_per_loop * 1000000)));
    }

    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8189d8:	e0ffff17 	ldw	r3,-4(fp)
  8189dc:	008003f4 	movhi	r2,15
  8189e0:	10909004 	addi	r2,r2,16960
  8189e4:	188b383a 	mul	r5,r3,r2
  8189e8:	0100bef4 	movhi	r4,763
  8189ec:	213c2004 	addi	r4,r4,-3968
  8189f0:	080be540 	call	80be54 <__udivsi3>
  8189f4:	1007883a 	mov	r3,r2
  8189f8:	e0bffc17 	ldw	r2,-16(fp)
  8189fc:	1885383a 	mul	r2,r3,r2
  818a00:	10bfffc4 	addi	r2,r2,-1
  818a04:	103ffe1e 	bne	r2,zero,818a00 <alt_busy_sleep+0xf8>
  818a08:	00000c06 	br	818a3c <alt_busy_sleep+0x134>
      "\n0:"
      "\n\taddi %0,%0, -1"
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
  else
  {
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  818a0c:	e0ffff17 	ldw	r3,-4(fp)
  818a10:	008003f4 	movhi	r2,15
  818a14:	10909004 	addi	r2,r2,16960
  818a18:	188b383a 	mul	r5,r3,r2
  818a1c:	0100bef4 	movhi	r4,763
  818a20:	213c2004 	addi	r4,r4,-3968
  818a24:	080be540 	call	80be54 <__udivsi3>
  818a28:	1007883a 	mov	r3,r2
  818a2c:	e0bffc17 	ldw	r2,-16(fp)
  818a30:	1885383a 	mul	r2,r3,r2
  818a34:	10bfffc4 	addi	r2,r2,-1
  818a38:	00bffe16 	blt	zero,r2,818a34 <alt_busy_sleep+0x12c>
      "\n0:"
      "\n\taddi %0,%0, -1"
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  818a3c:	0005883a 	mov	r2,zero
}
  818a40:	dfc00517 	ldw	ra,20(sp)
  818a44:	df000417 	ldw	fp,16(sp)
  818a48:	dec00604 	addi	sp,sp,24
  818a4c:	f800283a 	ret

00818a50 <alt_dev_llist_insert>:
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  818a50:	defff904 	addi	sp,sp,-28
  818a54:	dfc00615 	stw	ra,24(sp)
  818a58:	df000515 	stw	fp,20(sp)
  818a5c:	df000504 	addi	fp,sp,20
  818a60:	e13ffb15 	stw	r4,-20(fp)
  818a64:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  818a68:	e0bffb17 	ldw	r2,-20(fp)
  818a6c:	1005003a 	cmpeq	r2,r2,zero
  818a70:	1000041e 	bne	r2,zero,818a84 <alt_dev_llist_insert+0x34>
  818a74:	e0bffb17 	ldw	r2,-20(fp)
  818a78:	10800217 	ldw	r2,8(r2)
  818a7c:	1004c03a 	cmpne	r2,r2,zero
  818a80:	1000071e 	bne	r2,zero,818aa0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  818a84:	0818b000 	call	818b00 <alt_get_errno>
  818a88:	1007883a 	mov	r3,r2
  818a8c:	00800584 	movi	r2,22
  818a90:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  818a94:	00bffa84 	movi	r2,-22
  818a98:	e0bfff15 	stw	r2,-4(fp)
  818a9c:	00001306 	br	818aec <alt_dev_llist_insert+0x9c>
  818aa0:	e0bffc17 	ldw	r2,-16(fp)
  818aa4:	e0bffd15 	stw	r2,-12(fp)
  818aa8:	e0bffb17 	ldw	r2,-20(fp)
  818aac:	e0bffe15 	stw	r2,-8(fp)
  818ab0:	e0fffe17 	ldw	r3,-8(fp)
  818ab4:	e0bffd17 	ldw	r2,-12(fp)
  818ab8:	18800115 	stw	r2,4(r3)
  818abc:	e0fffe17 	ldw	r3,-8(fp)
  818ac0:	e0bffd17 	ldw	r2,-12(fp)
  818ac4:	10800017 	ldw	r2,0(r2)
  818ac8:	18800015 	stw	r2,0(r3)
  818acc:	e0bffd17 	ldw	r2,-12(fp)
  818ad0:	10c00017 	ldw	r3,0(r2)
  818ad4:	e0bffe17 	ldw	r2,-8(fp)
  818ad8:	18800115 	stw	r2,4(r3)
  818adc:	e0fffd17 	ldw	r3,-12(fp)
  818ae0:	e0bffe17 	ldw	r2,-8(fp)
  818ae4:	18800015 	stw	r2,0(r3)
  }
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  818ae8:	e03fff15 	stw	zero,-4(fp)
}
  818aec:	e0bfff17 	ldw	r2,-4(fp)
  818af0:	dfc00617 	ldw	ra,24(sp)
  818af4:	df000517 	ldw	fp,20(sp)
  818af8:	dec00704 	addi	sp,sp,28
  818afc:	f800283a 	ret

00818b00 <alt_get_errno>:
  818b00:	defffd04 	addi	sp,sp,-12
  818b04:	dfc00215 	stw	ra,8(sp)
  818b08:	df000115 	stw	fp,4(sp)
  818b0c:	df000104 	addi	fp,sp,4
  818b10:	d0a01117 	ldw	r2,-32700(gp)
  818b14:	1005003a 	cmpeq	r2,r2,zero
  818b18:	1000041e 	bne	r2,zero,818b2c <alt_get_errno+0x2c>
  818b1c:	d0a01117 	ldw	r2,-32700(gp)
  818b20:	103ee83a 	callr	r2
  818b24:	e0bfff15 	stw	r2,-4(fp)
  818b28:	00000206 	br	818b34 <alt_get_errno+0x34>
  818b2c:	d0a02804 	addi	r2,gp,-32608
  818b30:	e0bfff15 	stw	r2,-4(fp)
  818b34:	e0bfff17 	ldw	r2,-4(fp)
  818b38:	dfc00217 	ldw	ra,8(sp)
  818b3c:	df000117 	ldw	fp,4(sp)
  818b40:	dec00304 	addi	sp,sp,12
  818b44:	f800283a 	ret

00818b48 <_do_ctors>:
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  818b48:	defffd04 	addi	sp,sp,-12
  818b4c:	dfc00215 	stw	ra,8(sp)
  818b50:	df000115 	stw	fp,4(sp)
  818b54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  818b58:	008020b4 	movhi	r2,130
  818b5c:	10a53904 	addi	r2,r2,-27420
  818b60:	e0bfff15 	stw	r2,-4(fp)
  818b64:	e0ffff17 	ldw	r3,-4(fp)
  818b68:	008020b4 	movhi	r2,130
  818b6c:	10a53a04 	addi	r2,r2,-27416
  818b70:	18800736 	bltu	r3,r2,818b90 <_do_ctors+0x48>
        (*ctor) (); 
  818b74:	e0bfff17 	ldw	r2,-4(fp)
  818b78:	10800017 	ldw	r2,0(r2)
  818b7c:	103ee83a 	callr	r2
  818b80:	e0bfff17 	ldw	r2,-4(fp)
  818b84:	10bfff04 	addi	r2,r2,-4
  818b88:	e0bfff15 	stw	r2,-4(fp)
  818b8c:	003ff506 	br	818b64 <_do_ctors+0x1c>
}
  818b90:	dfc00217 	ldw	ra,8(sp)
  818b94:	df000117 	ldw	fp,4(sp)
  818b98:	dec00304 	addi	sp,sp,12
  818b9c:	f800283a 	ret

00818ba0 <_do_dtors>:
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  818ba0:	defffd04 	addi	sp,sp,-12
  818ba4:	dfc00215 	stw	ra,8(sp)
  818ba8:	df000115 	stw	fp,4(sp)
  818bac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  818bb0:	008020b4 	movhi	r2,130
  818bb4:	10a53904 	addi	r2,r2,-27420
  818bb8:	e0bfff15 	stw	r2,-4(fp)
  818bbc:	e0ffff17 	ldw	r3,-4(fp)
  818bc0:	008020b4 	movhi	r2,130
  818bc4:	10a53a04 	addi	r2,r2,-27416
  818bc8:	18800736 	bltu	r3,r2,818be8 <_do_dtors+0x48>
        (*dtor) (); 
  818bcc:	e0bfff17 	ldw	r2,-4(fp)
  818bd0:	10800017 	ldw	r2,0(r2)
  818bd4:	103ee83a 	callr	r2
  818bd8:	e0bfff17 	ldw	r2,-4(fp)
  818bdc:	10bfff04 	addi	r2,r2,-4
  818be0:	e0bfff15 	stw	r2,-4(fp)
  818be4:	003ff506 	br	818bbc <_do_dtors+0x1c>
}
  818be8:	dfc00217 	ldw	ra,8(sp)
  818bec:	df000117 	ldw	fp,4(sp)
  818bf0:	dec00304 	addi	sp,sp,12
  818bf4:	f800283a 	ret

00818bf8 <alt_find_dev>:
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  818bf8:	defff904 	addi	sp,sp,-28
  818bfc:	dfc00615 	stw	ra,24(sp)
  818c00:	df000515 	stw	fp,20(sp)
  818c04:	df000504 	addi	fp,sp,20
  818c08:	e13ffb15 	stw	r4,-20(fp)
  818c0c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
  818c10:	e0bffc17 	ldw	r2,-16(fp)
  818c14:	10800017 	ldw	r2,0(r2)
  818c18:	e0bffd15 	stw	r2,-12(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  818c1c:	e13ffb17 	ldw	r4,-20(fp)
  818c20:	080dccc0 	call	80dccc <strlen>
  818c24:	10800044 	addi	r2,r2,1
  818c28:	e0bffe15 	stw	r2,-8(fp)

  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  818c2c:	e0fffd17 	ldw	r3,-12(fp)
  818c30:	e0bffc17 	ldw	r2,-16(fp)
  818c34:	18800e26 	beq	r3,r2,818c70 <alt_find_dev+0x78>
  {

    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  818c38:	e0bffd17 	ldw	r2,-12(fp)
  818c3c:	11000217 	ldw	r4,8(r2)
  818c40:	e17ffb17 	ldw	r5,-20(fp)
  818c44:	e1bffe17 	ldw	r6,-8(fp)
  818c48:	08192840 	call	819284 <memcmp>
  818c4c:	1004c03a 	cmpne	r2,r2,zero
  818c50:	1000031e 	bne	r2,zero,818c60 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
  818c54:	e0bffd17 	ldw	r2,-12(fp)
  818c58:	e0bfff15 	stw	r2,-4(fp)
  818c5c:	00000506 	br	818c74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  818c60:	e0bffd17 	ldw	r2,-12(fp)
  818c64:	10800017 	ldw	r2,0(r2)
  818c68:	e0bffd15 	stw	r2,-12(fp)
  818c6c:	003fef06 	br	818c2c <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
  818c70:	e03fff15 	stw	zero,-4(fp)
}
  818c74:	e0bfff17 	ldw	r2,-4(fp)
  818c78:	dfc00617 	ldw	ra,24(sp)
  818c7c:	df000517 	ldw	fp,20(sp)
  818c80:	dec00704 	addi	sp,sp,28
  818c84:	f800283a 	ret

00818c88 <alt_find_file>:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  818c88:	defffa04 	addi	sp,sp,-24
  818c8c:	dfc00515 	stw	ra,20(sp)
  818c90:	df000415 	stw	fp,16(sp)
  818c94:	df000404 	addi	fp,sp,16
  818c98:	e13ffc15 	stw	r4,-16(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  818c9c:	d0a00c17 	ldw	r2,-32720(gp)
  818ca0:	e0bffd15 	stw	r2,-12(fp)

  alt_32 len;
 
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  818ca4:	e0fffd17 	ldw	r3,-12(fp)
  818ca8:	d0a00c04 	addi	r2,gp,-32720
  818cac:	18802926 	beq	r3,r2,818d54 <alt_find_file+0xcc>
  {
    len = strlen(next->name);
  818cb0:	e0bffd17 	ldw	r2,-12(fp)
  818cb4:	11000217 	ldw	r4,8(r2)
  818cb8:	080dccc0 	call	80dccc <strlen>
  818cbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  818cc0:	e0bffd17 	ldw	r2,-12(fp)
  818cc4:	10c00217 	ldw	r3,8(r2)
  818cc8:	e0bffe17 	ldw	r2,-8(fp)
  818ccc:	1885883a 	add	r2,r3,r2
  818cd0:	10bfffc4 	addi	r2,r2,-1
  818cd4:	10800007 	ldb	r2,0(r2)
  818cd8:	10800bd8 	cmpnei	r2,r2,47
  818cdc:	1000031e 	bne	r2,zero,818cec <alt_find_file+0x64>
    {
      len -= 1;
  818ce0:	e0bffe17 	ldw	r2,-8(fp)
  818ce4:	10bfffc4 	addi	r2,r2,-1
  818ce8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  818cec:	e0fffc17 	ldw	r3,-16(fp)
  818cf0:	e0bffe17 	ldw	r2,-8(fp)
  818cf4:	1885883a 	add	r2,r3,r2
  818cf8:	10800007 	ldb	r2,0(r2)
  818cfc:	10800be0 	cmpeqi	r2,r2,47
  818d00:	1000061e 	bne	r2,zero,818d1c <alt_find_file+0x94>
  818d04:	e0fffc17 	ldw	r3,-16(fp)
  818d08:	e0bffe17 	ldw	r2,-8(fp)
  818d0c:	1885883a 	add	r2,r3,r2
  818d10:	10800007 	ldb	r2,0(r2)
  818d14:	1004c03a 	cmpne	r2,r2,zero
  818d18:	10000a1e 	bne	r2,zero,818d44 <alt_find_file+0xbc>
  818d1c:	e0bffd17 	ldw	r2,-12(fp)
  818d20:	11000217 	ldw	r4,8(r2)
  818d24:	e17ffc17 	ldw	r5,-16(fp)
  818d28:	e1bffe17 	ldw	r6,-8(fp)
  818d2c:	08192840 	call	819284 <memcmp>
  818d30:	1004c03a 	cmpne	r2,r2,zero
  818d34:	1000031e 	bne	r2,zero,818d44 <alt_find_file+0xbc>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  818d38:	e0bffd17 	ldw	r2,-12(fp)
  818d3c:	e0bfff15 	stw	r2,-4(fp)
  818d40:	00000506 	br	818d58 <alt_find_file+0xd0>
    }
    next = (alt_dev*) next->llist.next;
  818d44:	e0bffd17 	ldw	r2,-12(fp)
  818d48:	10800017 	ldw	r2,0(r2)
  818d4c:	e0bffd15 	stw	r2,-12(fp)
  818d50:	003fd406 	br	818ca4 <alt_find_file+0x1c>
  }
  
  /* No match found */
  
  return NULL;     
  818d54:	e03fff15 	stw	zero,-4(fp)
}
  818d58:	e0bfff17 	ldw	r2,-4(fp)
  818d5c:	dfc00517 	ldw	ra,20(sp)
  818d60:	df000417 	ldw	fp,16(sp)
  818d64:	dec00604 	addi	sp,sp,24
  818d68:	f800283a 	ret

00818d6c <alt_get_fd>:
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  818d6c:	defffa04 	addi	sp,sp,-24
  818d70:	df000515 	stw	fp,20(sp)
  818d74:	df000504 	addi	fp,sp,20
  818d78:	e13ffb15 	stw	r4,-20(fp)
  alt_32 i;
  int rc = -EMFILE;
  818d7c:	00bffa04 	movi	r2,-24
  818d80:	e0bffd15 	stw	r2,-12(fp)
  818d84:	e03ffe15 	stw	zero,-8(fp)
  
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  
  /* 
   * Search through the list of file descriptors, and allocate the first
   * free descriptor that's found. 
   *
   * If a free descriptor is found, then the value of "alt_max_fd" is 
   * updated accordingly. "alt_max_fd" is a 'highwater mark' which 
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  818d88:	e03ffc15 	stw	zero,-16(fp)
  818d8c:	e0bffc17 	ldw	r2,-16(fp)
  818d90:	10800808 	cmpgei	r2,r2,32
  818d94:	10001b1e 	bne	r2,zero,818e04 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  818d98:	00c020b4 	movhi	r3,130
  818d9c:	18eaa704 	addi	r3,r3,-21860
  818da0:	e0bffc17 	ldw	r2,-16(fp)
  818da4:	10800324 	muli	r2,r2,12
  818da8:	10c5883a 	add	r2,r2,r3
  818dac:	10800017 	ldw	r2,0(r2)
  818db0:	1004c03a 	cmpne	r2,r2,zero
  818db4:	10000f1e 	bne	r2,zero,818df4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  818db8:	00c020b4 	movhi	r3,130
  818dbc:	18eaa704 	addi	r3,r3,-21860
  818dc0:	e0bffc17 	ldw	r2,-16(fp)
  818dc4:	10800324 	muli	r2,r2,12
  818dc8:	10c7883a 	add	r3,r2,r3
  818dcc:	e0bffb17 	ldw	r2,-20(fp)
  818dd0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  818dd4:	e0fffc17 	ldw	r3,-16(fp)
  818dd8:	d0a01017 	ldw	r2,-32704(gp)
  818ddc:	10c0020e 	bge	r2,r3,818de8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  818de0:	e0bffc17 	ldw	r2,-16(fp)
  818de4:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
  818de8:	e0bffc17 	ldw	r2,-16(fp)
  818dec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  818df0:	00000406 	br	818e04 <alt_get_fd+0x98>
  818df4:	e0bffc17 	ldw	r2,-16(fp)
  818df8:	10800044 	addi	r2,r2,1
  818dfc:	e0bffc15 	stw	r2,-16(fp)
  818e00:	003fe206 	br	818d8c <alt_get_fd+0x20>
  818e04:	e03fff15 	stw	zero,-4(fp)
    }
  }

 alt_get_fd_exit:

  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  818e08:	e0bffd17 	ldw	r2,-12(fp)
}
  818e0c:	df000517 	ldw	fp,20(sp)
  818e10:	dec00604 	addi	sp,sp,24
  818e14:	f800283a 	ret

00818e18 <alt_open_fd>:
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  818e18:	defff904 	addi	sp,sp,-28
  818e1c:	dfc00615 	stw	ra,24(sp)
  818e20:	df000515 	stw	fp,20(sp)
  818e24:	df000504 	addi	fp,sp,20
  818e28:	e13ffb15 	stw	r4,-20(fp)
  818e2c:	e17ffc15 	stw	r5,-16(fp)
  818e30:	e1bffd15 	stw	r6,-12(fp)
  818e34:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  818e38:	e13ffc17 	ldw	r4,-16(fp)
  818e3c:	e17ffd17 	ldw	r5,-12(fp)
  818e40:	e1bffe17 	ldw	r6,-8(fp)
  818e44:	0814f4c0 	call	814f4c <open>
  818e48:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
  818e4c:	e0bfff17 	ldw	r2,-4(fp)
  818e50:	1004803a 	cmplt	r2,r2,zero
  818e54:	10001c1e 	bne	r2,zero,818ec8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  818e58:	e13ffb17 	ldw	r4,-20(fp)
  818e5c:	00c020b4 	movhi	r3,130
  818e60:	18eaa704 	addi	r3,r3,-21860
  818e64:	e0bfff17 	ldw	r2,-4(fp)
  818e68:	10800324 	muli	r2,r2,12
  818e6c:	10c5883a 	add	r2,r2,r3
  818e70:	10800017 	ldw	r2,0(r2)
  818e74:	20800015 	stw	r2,0(r4)
    fd->priv     = alt_fd_list[old].priv;
  818e78:	e13ffb17 	ldw	r4,-20(fp)
  818e7c:	00c020b4 	movhi	r3,130
  818e80:	18eaa704 	addi	r3,r3,-21860
  818e84:	e0bfff17 	ldw	r2,-4(fp)
  818e88:	10800324 	muli	r2,r2,12
  818e8c:	10c5883a 	add	r2,r2,r3
  818e90:	10800104 	addi	r2,r2,4
  818e94:	10800017 	ldw	r2,0(r2)
  818e98:	20800115 	stw	r2,4(r4)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  818e9c:	e13ffb17 	ldw	r4,-20(fp)
  818ea0:	00c020b4 	movhi	r3,130
  818ea4:	18eaa704 	addi	r3,r3,-21860
  818ea8:	e0bfff17 	ldw	r2,-4(fp)
  818eac:	10800324 	muli	r2,r2,12
  818eb0:	10c5883a 	add	r2,r2,r3
  818eb4:	10800204 	addi	r2,r2,8
  818eb8:	10800017 	ldw	r2,0(r2)
  818ebc:	20800215 	stw	r2,8(r4)

    alt_release_fd (old);
  818ec0:	e13fff17 	ldw	r4,-4(fp)
  818ec4:	08154e40 	call	8154e4 <alt_release_fd>
  }
} 
  818ec8:	dfc00617 	ldw	ra,24(sp)
  818ecc:	df000517 	ldw	fp,20(sp)
  818ed0:	dec00704 	addi	sp,sp,28
  818ed4:	f800283a 	ret

00818ed8 <alt_io_redirect>:

/*
 * alt_io_redirect() is called once the device/filesystem lists have been 
 * initialised, but before main(). Its function is to redirect standard in,
 * standard out and standard error so that they point to the devices selected by
 * the user (as defined in system.h).
 *
 * Prior to the call to this function, io is directed towards /dev/null. If
 * i/o can not be redirected to the requested device, for example if the device 
 * does not exist, then it remains directed at /dev/null. 
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  818ed8:	defffb04 	addi	sp,sp,-20
  818edc:	dfc00415 	stw	ra,16(sp)
  818ee0:	df000315 	stw	fp,12(sp)
  818ee4:	df000304 	addi	fp,sp,12
  818ee8:	e13ffd15 	stw	r4,-12(fp)
  818eec:	e17ffe15 	stw	r5,-8(fp)
  818ef0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  818ef4:	010020b4 	movhi	r4,130
  818ef8:	212aaa04 	addi	r4,r4,-21848
  818efc:	e17ffd17 	ldw	r5,-12(fp)
  818f00:	01800044 	movi	r6,1
  818f04:	01c07fc4 	movi	r7,511
  818f08:	0818e180 	call	818e18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  818f0c:	010020b4 	movhi	r4,130
  818f10:	212aa704 	addi	r4,r4,-21860
  818f14:	e17ffe17 	ldw	r5,-8(fp)
  818f18:	000d883a 	mov	r6,zero
  818f1c:	01c07fc4 	movi	r7,511
  818f20:	0818e180 	call	818e18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  818f24:	010020b4 	movhi	r4,130
  818f28:	212aad04 	addi	r4,r4,-21836
  818f2c:	e17fff17 	ldw	r5,-4(fp)
  818f30:	01800044 	movi	r6,1
  818f34:	01c07fc4 	movi	r7,511
  818f38:	0818e180 	call	818e18 <alt_open_fd>
}  
  818f3c:	dfc00417 	ldw	ra,16(sp)
  818f40:	df000317 	ldw	fp,12(sp)
  818f44:	dec00504 	addi	sp,sp,20
  818f48:	f800283a 	ret

00818f4c <alt_alarm_stop>:
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  818f4c:	defffb04 	addi	sp,sp,-20
  818f50:	df000415 	stw	fp,16(sp)
  818f54:	df000404 	addi	fp,sp,16
  818f58:	e13ffc15 	stw	r4,-16(fp)
  818f5c:	0005303a 	rdctl	r2,status
  818f60:	e0bfff15 	stw	r2,-4(fp)
  818f64:	e0ffff17 	ldw	r3,-4(fp)
  818f68:	00bfff84 	movi	r2,-2
  818f6c:	1884703a 	and	r2,r3,r2
  818f70:	1001703a 	wrctl	status,r2
  818f74:	e0bfff17 	ldw	r2,-4(fp)
  818f78:	e0bffe15 	stw	r2,-8(fp)
  818f7c:	e0bffe17 	ldw	r2,-8(fp)
  818f80:	e0bffd15 	stw	r2,-12(fp)
  818f84:	e0bffc17 	ldw	r2,-16(fp)
  818f88:	e0bfff15 	stw	r2,-4(fp)
  818f8c:	e0bfff17 	ldw	r2,-4(fp)
  818f90:	10c00017 	ldw	r3,0(r2)
  818f94:	e0bfff17 	ldw	r2,-4(fp)
  818f98:	10800117 	ldw	r2,4(r2)
  818f9c:	18800115 	stw	r2,4(r3)
  818fa0:	e0bfff17 	ldw	r2,-4(fp)
  818fa4:	10c00117 	ldw	r3,4(r2)
  818fa8:	e0bfff17 	ldw	r2,-4(fp)
  818fac:	10800017 	ldw	r2,0(r2)
  818fb0:	18800015 	stw	r2,0(r3)
  818fb4:	e0ffff17 	ldw	r3,-4(fp)
  818fb8:	e0bfff17 	ldw	r2,-4(fp)
  818fbc:	18800115 	stw	r2,4(r3)
  818fc0:	e0ffff17 	ldw	r3,-4(fp)
  818fc4:	e0bfff17 	ldw	r2,-4(fp)
  818fc8:	18800015 	stw	r2,0(r3)
  818fcc:	e0bffd17 	ldw	r2,-12(fp)
  818fd0:	e0bfff15 	stw	r2,-4(fp)
  818fd4:	e0bfff17 	ldw	r2,-4(fp)
  818fd8:	1001703a 	wrctl	status,r2
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  818fdc:	df000417 	ldw	fp,16(sp)
  818fe0:	dec00504 	addi	sp,sp,20
  818fe4:	f800283a 	ret

00818fe8 <alt_tick>:

/*
 * alt_tick() is periodically called by the system clock driver in order to
 * process the registered list of alarms. Each alarm is registed with a
 * callback interval, and a callback function, "callback". 
 *
 * The return value of the callback function indicates how many ticks are to
 * elapse until the next callback. A return value of zero indicates that the
 * alarm should be deactivated. 
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  818fe8:	defffb04 	addi	sp,sp,-20
  818fec:	dfc00415 	stw	ra,16(sp)
  818ff0:	df000315 	stw	fp,12(sp)
  818ff4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  818ff8:	d0a01b17 	ldw	r2,-32660(gp)
  818ffc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  819000:	d0a01a17 	ldw	r2,-32664(gp)
  819004:	10800044 	addi	r2,r2,1
  819008:	d0a01a15 	stw	r2,-32664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81900c:	e0fffe17 	ldw	r3,-8(fp)
  819010:	d0a01b04 	addi	r2,gp,-32660
  819014:	18803026 	beq	r3,r2,8190d8 <alt_tick+0xf0>
  {
    next = (alt_alarm*) alarm->llist.next;
  819018:	e0bffe17 	ldw	r2,-8(fp)
  81901c:	10800017 	ldw	r2,0(r2)
  819020:	e0bffd15 	stw	r2,-12(fp)

    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  819024:	e0bffe17 	ldw	r2,-8(fp)
  819028:	10800403 	ldbu	r2,16(r2)
  81902c:	1005003a 	cmpeq	r2,r2,zero
  819030:	1000051e 	bne	r2,zero,819048 <alt_tick+0x60>
  819034:	d0a01a17 	ldw	r2,-32664(gp)
  819038:	1004c03a 	cmpne	r2,r2,zero
  81903c:	1000021e 	bne	r2,zero,819048 <alt_tick+0x60>
    {
      alarm->rollover = 0;
  819040:	e0bffe17 	ldw	r2,-8(fp)
  819044:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  819048:	e0bffe17 	ldw	r2,-8(fp)
  81904c:	10c00217 	ldw	r3,8(r2)
  819050:	d0a01a17 	ldw	r2,-32664(gp)
  819054:	10c01d36 	bltu	r2,r3,8190cc <alt_tick+0xe4>
  819058:	e0bffe17 	ldw	r2,-8(fp)
  81905c:	10800403 	ldbu	r2,16(r2)
  819060:	1004c03a 	cmpne	r2,r2,zero
  819064:	1000191e 	bne	r2,zero,8190cc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  819068:	e0bffe17 	ldw	r2,-8(fp)
  81906c:	e0fffe17 	ldw	r3,-8(fp)
  819070:	10800317 	ldw	r2,12(r2)
  819074:	19000517 	ldw	r4,20(r3)
  819078:	103ee83a 	callr	r2
  81907c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  819080:	e0bfff17 	ldw	r2,-4(fp)
  819084:	1004c03a 	cmpne	r2,r2,zero
  819088:	1000031e 	bne	r2,zero,819098 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81908c:	e13ffe17 	ldw	r4,-8(fp)
  819090:	0818f4c0 	call	818f4c <alt_alarm_stop>
  819094:	00000d06 	br	8190cc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  819098:	e13ffe17 	ldw	r4,-8(fp)
  81909c:	e0bffe17 	ldw	r2,-8(fp)
  8190a0:	10c00217 	ldw	r3,8(r2)
  8190a4:	e0bfff17 	ldw	r2,-4(fp)
  8190a8:	1885883a 	add	r2,r3,r2
  8190ac:	20800215 	stw	r2,8(r4)
        
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8190b0:	e0bffe17 	ldw	r2,-8(fp)
  8190b4:	10c00217 	ldw	r3,8(r2)
  8190b8:	d0a01a17 	ldw	r2,-32664(gp)
  8190bc:	1880032e 	bgeu	r3,r2,8190cc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8190c0:	e0fffe17 	ldw	r3,-8(fp)
  8190c4:	00800044 	movi	r2,1
  8190c8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8190cc:	e0bffd17 	ldw	r2,-12(fp)
  8190d0:	e0bffe15 	stw	r2,-8(fp)
  8190d4:	003fcd06 	br	81900c <alt_tick+0x24>
  }

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8190d8:	dfc00417 	ldw	ra,16(sp)
  8190dc:	df000317 	ldw	fp,12(sp)
  8190e0:	dec00504 	addi	sp,sp,20
  8190e4:	f800283a 	ret

008190e8 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  8190e8:	deffff04 	addi	sp,sp,-4
  8190ec:	df000015 	stw	fp,0(sp)
  8190f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8190f4:	000170fa 	wrctl	ienable,zero
}
  8190f8:	df000017 	ldw	fp,0(sp)
  8190fc:	dec00104 	addi	sp,sp,4
  819100:	f800283a 	ret

00819104 <atexit>:
  819104:	d0a00117 	ldw	r2,-32764(gp)
  819108:	defffe04 	addi	sp,sp,-8
  81910c:	dc000015 	stw	r16,0(sp)
  819110:	dfc00115 	stw	ra,4(sp)
  819114:	11405217 	ldw	r5,328(r2)
  819118:	2021883a 	mov	r16,r4
  81911c:	01004304 	movi	r4,268
  819120:	28001b26 	beq	r5,zero,819190 <atexit+0x8c>
  819124:	28c00117 	ldw	r3,4(r5)
  819128:	008007c4 	movi	r2,31
  81912c:	10c00d16 	blt	r2,r3,819164 <atexit+0x60>
  819130:	28800104 	addi	r2,r5,4
  819134:	10c00017 	ldw	r3,0(r2)
  819138:	000d883a 	mov	r6,zero
  81913c:	180890ba 	slli	r4,r3,2
  819140:	18c00044 	addi	r3,r3,1
  819144:	10c00015 	stw	r3,0(r2)
  819148:	2149883a 	add	r4,r4,r5
  81914c:	24000215 	stw	r16,8(r4)
  819150:	3005883a 	mov	r2,r6
  819154:	dfc00117 	ldw	ra,4(sp)
  819158:	dc000017 	ldw	r16,0(sp)
  81915c:	dec00204 	addi	sp,sp,8
  819160:	f800283a 	ret
  819164:	080cf7c0 	call	80cf7c <malloc>
  819168:	100b883a 	mov	r5,r2
  81916c:	01bfffc4 	movi	r6,-1
  819170:	103ff726 	beq	r2,zero,819150 <atexit+0x4c>
  819174:	d0e00117 	ldw	r3,-32764(gp)
  819178:	10004215 	stw	zero,264(r2)
  81917c:	10000115 	stw	zero,4(r2)
  819180:	18805217 	ldw	r2,328(r3)
  819184:	28800015 	stw	r2,0(r5)
  819188:	19405215 	stw	r5,328(r3)
  81918c:	003fe806 	br	819130 <atexit+0x2c>
  819190:	014020b4 	movhi	r5,130
  819194:	29715004 	addi	r5,r5,-15040
  819198:	11405215 	stw	r5,328(r2)
  81919c:	003fe106 	br	819124 <atexit+0x20>

008191a0 <exit>:
  8191a0:	d0a00117 	ldw	r2,-32764(gp)
  8191a4:	defff804 	addi	sp,sp,-32
  8191a8:	dd800015 	stw	r22,0(sp)
  8191ac:	dfc00715 	stw	ra,28(sp)
  8191b0:	dc000615 	stw	r16,24(sp)
  8191b4:	dc400515 	stw	r17,20(sp)
  8191b8:	dc800415 	stw	r18,16(sp)
  8191bc:	dcc00315 	stw	r19,12(sp)
  8191c0:	dd000215 	stw	r20,8(sp)
  8191c4:	dd400115 	stw	r21,4(sp)
  8191c8:	15005217 	ldw	r20,328(r2)
  8191cc:	202d883a 	mov	r22,r4
  8191d0:	a0002526 	beq	r20,zero,819268 <exit+0xc8>
  8191d4:	a0800117 	ldw	r2,4(r20)
  8191d8:	a5402204 	addi	r21,r20,136
  8191dc:	0027883a 	mov	r19,zero
  8191e0:	143fffc4 	addi	r16,r2,-1
  8191e4:	8006803a 	cmplt	r3,r16,zero
  8191e8:	1800021e 	bne	r3,zero,8191f4 <exit+0x54>
  8191ec:	00800044 	movi	r2,1
  8191f0:	1426983a 	sll	r19,r2,r16
  8191f4:	1800191e 	bne	r3,zero,81925c <exit+0xbc>
  8191f8:	800490ba 	slli	r2,r16,2
  8191fc:	1025883a 	mov	r18,r2
  819200:	1505883a 	add	r2,r2,r20
  819204:	14400204 	addi	r17,r2,8
  819208:	00000806 	br	81922c <exit+0x8c>
  81920c:	88800017 	ldw	r2,0(r17)
  819210:	29400017 	ldw	r5,0(r5)
  819214:	843fffc4 	addi	r16,r16,-1
  819218:	94bfff04 	addi	r18,r18,-4
  81921c:	103ee83a 	callr	r2
  819220:	8c7fff04 	addi	r17,r17,-4
  819224:	9827d07a 	srai	r19,r19,1
  819228:	80000c16 	blt	r16,zero,81925c <exit+0xbc>
  81922c:	a8802017 	ldw	r2,128(r21)
  819230:	954b883a 	add	r5,r18,r21
  819234:	b009883a 	mov	r4,r22
  819238:	14c4703a 	and	r2,r2,r19
  81923c:	103ff31e 	bne	r2,zero,81920c <exit+0x6c>
  819240:	88800017 	ldw	r2,0(r17)
  819244:	843fffc4 	addi	r16,r16,-1
  819248:	94bfff04 	addi	r18,r18,-4
  81924c:	103ee83a 	callr	r2
  819250:	8c7fff04 	addi	r17,r17,-4
  819254:	9827d07a 	srai	r19,r19,1
  819258:	803ff40e 	bge	r16,zero,81922c <exit+0x8c>
  81925c:	a5000017 	ldw	r20,0(r20)
  819260:	a03fdc1e 	bne	r20,zero,8191d4 <exit+0x34>
  819264:	d0a00117 	ldw	r2,-32764(gp)
  819268:	10c00f17 	ldw	r3,60(r2)
  81926c:	1800021e 	bne	r3,zero,819278 <exit+0xd8>
  819270:	b009883a 	mov	r4,r22
  819274:	08194c80 	call	8194c8 <_exit>
  819278:	1009883a 	mov	r4,r2
  81927c:	183ee83a 	callr	r3
  819280:	003ffb06 	br	819270 <exit+0xd0>

00819284 <memcmp>:
  819284:	01c000c4 	movi	r7,3
  819288:	3980032e 	bgeu	r7,r6,819298 <memcmp+0x14>
  81928c:	2144b03a 	or	r2,r4,r5
  819290:	11c4703a 	and	r2,r2,r7
  819294:	10000d26 	beq	r2,zero,8192cc <memcmp+0x48>
  819298:	31bfffc4 	addi	r6,r6,-1
  81929c:	00bfffc4 	movi	r2,-1
  8192a0:	30800826 	beq	r6,r2,8192c4 <memcmp+0x40>
  8192a4:	100f883a 	mov	r7,r2
  8192a8:	20c00003 	ldbu	r3,0(r4)
  8192ac:	28800003 	ldbu	r2,0(r5)
  8192b0:	31bfffc4 	addi	r6,r6,-1
  8192b4:	21000044 	addi	r4,r4,1
  8192b8:	29400044 	addi	r5,r5,1
  8192bc:	18800b1e 	bne	r3,r2,8192ec <memcmp+0x68>
  8192c0:	31fff91e 	bne	r6,r7,8192a8 <memcmp+0x24>
  8192c4:	0005883a 	mov	r2,zero
  8192c8:	f800283a 	ret
  8192cc:	20c00017 	ldw	r3,0(r4)
  8192d0:	28800017 	ldw	r2,0(r5)
  8192d4:	18bff01e 	bne	r3,r2,819298 <memcmp+0x14>
  8192d8:	31bfff04 	addi	r6,r6,-4
  8192dc:	21000104 	addi	r4,r4,4
  8192e0:	29400104 	addi	r5,r5,4
  8192e4:	39bff936 	bltu	r7,r6,8192cc <memcmp+0x48>
  8192e8:	003feb06 	br	819298 <memcmp+0x14>
  8192ec:	1885c83a 	sub	r2,r3,r2
  8192f0:	f800283a 	ret

008192f4 <putc>:
  8192f4:	deffff04 	addi	sp,sp,-4
  8192f8:	dfc00015 	stw	ra,0(sp)
  8192fc:	28800217 	ldw	r2,8(r5)
  819300:	10ffffc4 	addi	r3,r2,-1
  819304:	28c00215 	stw	r3,8(r5)
  819308:	18000a16 	blt	r3,zero,819334 <putc+0x40>
  81930c:	28c00017 	ldw	r3,0(r5)
  819310:	19000005 	stb	r4,0(r3)
  819314:	28800017 	ldw	r2,0(r5)
  819318:	11c00003 	ldbu	r7,0(r2)
  81931c:	10800044 	addi	r2,r2,1
  819320:	28800015 	stw	r2,0(r5)
  819324:	3805883a 	mov	r2,r7
  819328:	dfc00017 	ldw	ra,0(sp)
  81932c:	dec00104 	addi	sp,sp,4
  819330:	f800283a 	ret
  819334:	28800617 	ldw	r2,24(r5)
  819338:	18800e16 	blt	r3,r2,819374 <putc+0x80>
  81933c:	28800017 	ldw	r2,0(r5)
  819340:	11000005 	stb	r4,0(r2)
  819344:	29000017 	ldw	r4,0(r5)
  819348:	00800284 	movi	r2,10
  81934c:	20c00003 	ldbu	r3,0(r4)
  819350:	22000044 	addi	r8,r4,1
  819354:	180f883a 	mov	r7,r3
  819358:	1809883a 	mov	r4,r3
  81935c:	18800526 	beq	r3,r2,819374 <putc+0x80>
  819360:	3805883a 	mov	r2,r7
  819364:	2a000015 	stw	r8,0(r5)
  819368:	dfc00017 	ldw	ra,0(sp)
  81936c:	dec00104 	addi	sp,sp,4
  819370:	f800283a 	ret
  819374:	08193800 	call	819380 <__swbuf>
  819378:	100f883a 	mov	r7,r2
  81937c:	003fe906 	br	819324 <putc+0x30>

00819380 <__swbuf>:
  819380:	d0e00117 	ldw	r3,-32764(gp)
  819384:	defffd04 	addi	sp,sp,-12
  819388:	dc000115 	stw	r16,4(sp)
  81938c:	dfc00215 	stw	ra,8(sp)
  819390:	18800e17 	ldw	r2,56(r3)
  819394:	2021883a 	mov	r16,r4
  819398:	10003526 	beq	r2,zero,819470 <__swbuf+0xf0>
  81939c:	2880030b 	ldhu	r2,12(r5)
  8193a0:	28c00617 	ldw	r3,24(r5)
  8193a4:	1080020c 	andi	r2,r2,8
  8193a8:	28c00215 	stw	r3,8(r5)
  8193ac:	10001b26 	beq	r2,zero,81941c <__swbuf+0x9c>
  8193b0:	28c00417 	ldw	r3,16(r5)
  8193b4:	18001926 	beq	r3,zero,81941c <__swbuf+0x9c>
  8193b8:	29800017 	ldw	r6,0(r5)
  8193bc:	28800517 	ldw	r2,20(r5)
  8193c0:	84003fcc 	andi	r16,r16,255
  8193c4:	30c9c83a 	sub	r4,r6,r3
  8193c8:	2080200e 	bge	r4,r2,81944c <__swbuf+0xcc>
  8193cc:	28800217 	ldw	r2,8(r5)
  8193d0:	30c00044 	addi	r3,r6,1
  8193d4:	21000044 	addi	r4,r4,1
  8193d8:	10bfffc4 	addi	r2,r2,-1
  8193dc:	28800215 	stw	r2,8(r5)
  8193e0:	34000005 	stb	r16,0(r6)
  8193e4:	28800517 	ldw	r2,20(r5)
  8193e8:	28c00015 	stw	r3,0(r5)
  8193ec:	20802526 	beq	r4,r2,819484 <__swbuf+0x104>
  8193f0:	2880030b 	ldhu	r2,12(r5)
  8193f4:	1080004c 	andi	r2,r2,1
  8193f8:	10000226 	beq	r2,zero,819404 <__swbuf+0x84>
  8193fc:	00800284 	movi	r2,10
  819400:	80802026 	beq	r16,r2,819484 <__swbuf+0x104>
  819404:	8007883a 	mov	r3,r16
  819408:	1805883a 	mov	r2,r3
  81940c:	dfc00217 	ldw	ra,8(sp)
  819410:	dc000117 	ldw	r16,4(sp)
  819414:	dec00304 	addi	sp,sp,12
  819418:	f800283a 	ret
  81941c:	2809883a 	mov	r4,r5
  819420:	d9400015 	stw	r5,0(sp)
  819424:	081010c0 	call	81010c <__swsetup>
  819428:	00ffffc4 	movi	r3,-1
  81942c:	d9400017 	ldw	r5,0(sp)
  819430:	103ff51e 	bne	r2,zero,819408 <__swbuf+0x88>
  819434:	28c00417 	ldw	r3,16(r5)
  819438:	29800017 	ldw	r6,0(r5)
  81943c:	28800517 	ldw	r2,20(r5)
  819440:	84003fcc 	andi	r16,r16,255
  819444:	30c9c83a 	sub	r4,r6,r3
  819448:	20bfe016 	blt	r4,r2,8193cc <__swbuf+0x4c>
  81944c:	2809883a 	mov	r4,r5
  819450:	d9400015 	stw	r5,0(sp)
  819454:	081185c0 	call	81185c <fflush>
  819458:	00ffffc4 	movi	r3,-1
  81945c:	d9400017 	ldw	r5,0(sp)
  819460:	103fe91e 	bne	r2,zero,819408 <__swbuf+0x88>
  819464:	29800017 	ldw	r6,0(r5)
  819468:	0009883a 	mov	r4,zero
  81946c:	003fd706 	br	8193cc <__swbuf+0x4c>
  819470:	1809883a 	mov	r4,r3
  819474:	d9400015 	stw	r5,0(sp)
  819478:	08119c00 	call	8119c0 <__sinit>
  81947c:	d9400017 	ldw	r5,0(sp)
  819480:	003fc606 	br	81939c <__swbuf+0x1c>
  819484:	2809883a 	mov	r4,r5
  819488:	081185c0 	call	81185c <fflush>
  81948c:	00ffffc4 	movi	r3,-1
  819490:	103fdc26 	beq	r2,zero,819404 <__swbuf+0x84>
  819494:	003fdc06 	br	819408 <__swbuf+0x88>

00819498 <alt_sim_halt>:
  819498:	defffd04 	addi	sp,sp,-12
  81949c:	df000215 	stw	fp,8(sp)
  8194a0:	df000204 	addi	fp,sp,8
  8194a4:	e13ffe15 	stw	r4,-8(fp)
  8194a8:	e0bffe17 	ldw	r2,-8(fp)
  8194ac:	e0bfff15 	stw	r2,-4(fp)
  8194b0:	00c00044 	movi	r3,1
  8194b4:	e0bfff17 	ldw	r2,-4(fp)
  8194b8:	180171ba 	wrctl	ctl6,r3
  8194bc:	df000217 	ldw	fp,8(sp)
  8194c0:	dec00304 	addi	sp,sp,12
  8194c4:	f800283a 	ret

008194c8 <_exit>:
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8194c8:	defffd04 	addi	sp,sp,-12
  8194cc:	dfc00215 	stw	ra,8(sp)
  8194d0:	df000115 	stw	fp,4(sp)
  8194d4:	df000104 	addi	fp,sp,4
  8194d8:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8194dc:	e13fff17 	ldw	r4,-4(fp)
  8194e0:	08194980 	call	819498 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8194e4:	003fff06 	br	8194e4 <_exit+0x1c>
